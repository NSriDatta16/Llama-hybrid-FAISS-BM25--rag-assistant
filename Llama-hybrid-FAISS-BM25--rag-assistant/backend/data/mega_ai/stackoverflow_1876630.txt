[site]: stackoverflow
[post_id]: 1876630
[parent_id]: 1872156
[tags]: 
repe.S : .globl repe_scasb repe_scasb: #if defined(__i386__) push %edi mov $0x0,%al mov 0xc(%esp),%ecx mov 0x8(%esp),%edi sub %edi,%ecx repe scasb pop %edi sete %al ret #elif defined(__amd64__) mov $0x0,%al mov %rsi,%rcx sub %rdi,%rcx repe scasb sete %al ret #else # error "repe_scasb not defined for current architecture" #endif .globl repe_scas repe_scas: #if defined(__i386__) push %edi mov $0x0,%eax mov 0xc(%esp),%edx mov 0x8(%esp),%edi sub %edi,%edx repe_scas4: test $0x3,%di jnz repe_scas2 cmp $0x4,%edx jl repe_scas2 mov %edx,%ecx shr $0x2,%ecx repe scasl jne repe_scas0 and $0x3,%edx repe_scas2: test $0x1,%di jnz repe_scas1 cmp $0x2,%edx jl repe_scas1 scasw jnz repe_scas0 sub $0x2,%edx jmp repe_scas4 repe_scas1: test %edx,%edx jz repe_scas0 scasb jnz repe_scas0 sub $0x1,%edx jmp repe_scas4 repe_scas0: pop %edi sete %al ret #elif defined(__amd64__) mov $0x0,%eax sub %rdi,%rsi repe_scas8: test $0x7,%di jnz repe_scas4 cmp $0x8,%rsi jl repe_scas4 mov %rsi,%rcx shr $0x3,%rcx repe scasq jne repe_scas0 and $0x7,%rsi repe_scas4: test $0x3,%di jnz repe_scas2 cmp $0x4,%rsi jl repe_scas2 scasl jnz repe_scas0 sub $0x4,%rsi jmp repe_scas8 repe_scas2: test $0x1,%di jnz repe_scas1 cmp $0x2,%rsi jl repe_scas1 scasw jnz repe_scas0 sub $0x2,%rsi jmp repe_scas8 repe_scas1: test %rsi,%rsi jz repe_scas0 scasb jnz repe_scas0 sub $0x1,%rsi jmp repe_scas8 repe_scas0: sete %al ret #else # error "repe_scas not defined for current architecture" #endif test.c : #include #include #include #include #include #include static int compar_double(const void *a, const void *b) { double diff = *(const double *)a - *(const double *)b; if (diff 0) return 1; return 0; } static bool bit_or(const void *first, const void *last) { uint8_t a; for (a = 0; first = last || !(((uint8_t *)first)[0] || memcmp(first, (const uint8_t *)first + 1, (const uint8_t *)last - (const uint8_t *)first - 1)); } static bool check_bytes(const void *first, const void *last) { while (first = 8) { if (*(const uint64_t *)first) return false; first = (const uint64_t *)first + 1; continue; } case 4: if (last - first >= 4) { if (*(const uint32_t *)first) return false; first = (const uint32_t *)first + 1; continue; } case 2: case 6: if (last - first >= 2) { if (*(const uint16_t *)first) return false; first = (const uint16_t *)first + 1; continue; } case 1: case 3: case 5: case 7: if (*(const uint8_t *)first) return false; first = (const uint8_t *)first + 1; } return true; } bool repe_scasb(const void *, const void *); bool repe_scas(const void *, const void *); static const struct { const char name[16]; bool (*fn)(const void *, const void *); } functions[] = { { "bit_or", bit_or }, { "use_memcmp", use_memcmp }, { "check_bytes", check_bytes }, { "check_aligned", check_aligned }, { "repe_scasb", repe_scasb }, { "repe_scas", repe_scas }, }; #define REPS 999 #define BYTECYCLES 0xFFFF void time_functions(const char *s, const void *first, const void *last, bool expect) { unsigned i, cycles = BYTECYCLES / (last - first) + 1; char seps[sizeof(functions) / sizeof(*functions)]; double times[sizeof(functions) / sizeof(*functions)][REPS]; for (i = 0; i Makefile : CFLAGS ?= -g -O3 -W -Wall -Wextra LIBS = -lrt SRC := test.c repe.S all: test32 test64 test32: $(SRC) $(CC) -m32 $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) test64: $(SRC) $(CC) -m64 $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS) time: time32 time64 time32: test32 ./test32 time64: test64 ./test64 .PHONY: all time time32 time64 Instead of just the average, this test shows the 1st quartile and 3rd quartile of time taken, but it seems the system was fairly consistent (runs varying within Â±2%). $ make time cc -m32 -g -O3 -W -Wall -Wextra -o test32 test.c repe.S -lrt ./test32 | bit_or | use_memcmp | check_bytes | check_aligned | repe_scasb | repe_scas -------+-----------------+-----------------+-----------------+-----------------+-----------------+----------------- 0x7+4 | zero |1.09e-07/1.09e-07|2.09e-07/2.11e-07|1.66e-07/1.68e-07|1.35e-07/1.74e-07|1.83e-07/1.86e-07|2.00e-07/2.06e-07 last |1.09e-07/1.09e-07|2.09e-07/2.12e-07|1.00e-07/1.00e-07|1.18e-07/1.18e-07|1.83e-07/1.85e-07|1.83e-07/1.85e-07 half |1.09e-07/1.09e-07|1.79e-07/1.84e-07|7.42e-08/7.42e-08|6.98e-08/6.98e-08|1.57e-07/1.59e-07|1.39e-07/1.40e-07 first|1.09e-07/1.09e-07|6.11e-08/6.11e-08|4.81e-08/4.81e-08|6.98e-08/6.99e-08|1.22e-07/1.27e-07|1.39e-07/1.42e-07 0x7+2 | zero |1.09e-07/1.09e-07|2.09e-07/2.11e-07|1.66e-07/1.71e-07|1.31e-07/1.57e-07|1.83e-07/1.85e-07|2.00e-07/2.06e-07 last |1.09e-07/1.09e-07|2.09e-07/2.14e-07|1.00e-07/1.00e-07|1.22e-07/1.24e-07|1.83e-07/1.88e-07|1.83e-07/1.83e-07 half |1.09e-07/1.09e-07|1.79e-07/1.80e-07|7.42e-08/7.42e-08|8.72e-08/8.72e-08|1.57e-07/1.59e-07|1.61e-07/1.66e-07 first|1.09e-07/1.09e-07|6.11e-08/6.11e-08|4.81e-08/4.81e-08|6.55e-08/6.55e-08|1.22e-07/1.22e-07|5.82e-08/5.82e-08 0x7+1 | zero |1.09e-07/1.09e-07|2.09e-07/2.14e-07|1.66e-07/1.66e-07|1.09e-07/1.42e-07|1.83e-07/1.88e-07|2.05e-07/2.07e-07 last |1.09e-07/1.09e-07|2.09e-07/2.14e-07|1.00e-07/1.00e-07|1.00e-07/1.00e-07|1.83e-07/1.87e-07|1.92e-07/1.97e-07 half |1.09e-07/1.09e-07|1.79e-07/1.81e-07|7.42e-08/7.42e-08|7.85e-08/7.86e-08|1.57e-07/1.61e-07|1.92e-07/1.97e-07 first|1.09e-07/1.09e-07|6.11e-08/6.11e-08|4.81e-08/4.81e-08|5.24e-08/5.24e-08|1.22e-07/1.22e-07|6.55e-08/6.55e-08 0x7 | zero |1.09e-07/1.09e-07|2.09e-07/2.14e-07|1.66e-07/1.71e-07|1.52e-07/1.79e-07|1.83e-07/1.88e-07|2.00e-07/2.06e-07 last |1.09e-07/1.09e-07|2.09e-07/2.14e-07|1.00e-07/1.00e-07|1.44e-07/1.70e-07|1.83e-07/1.88e-07|1.83e-07/1.85e-07 half |1.09e-07/1.09e-07|1.79e-07/1.79e-07|7.42e-08/7.42e-08|7.85e-08/7.85e-08|1.57e-07/1.57e-07|1.39e-07/1.39e-07 first|1.09e-07/1.09e-07|6.11e-08/6.11e-08|4.81e-08/4.81e-08|7.85e-08/7.85e-08|1.22e-07/1.22e-07|1.39e-07/1.39e-07 0x400 | zero |9.06e-06/9.06e-06|9.97e-06/9.97e-06|1.79e-05/1.81e-05|2.93e-06/2.93e-06|9.06e-06/9.07e-06|2.41e-06/2.41e-06 last |9.06e-06/9.06e-06|9.97e-06/9.97e-06|1.80e-05/1.80e-05|2.39e-06/2.39e-06|9.06e-06/9.07e-06|2.40e-06/2.40e-06 half |9.06e-06/9.06e-06|5.08e-06/5.08e-06|9.06e-06/9.06e-06|1.29e-06/1.29e-06|4.62e-06/4.62e-06|1.30e-06/1.30e-06 first|9.06e-06/9.06e-06|9.25e-08/9.67e-08|8.34e-08/9.67e-08|1.05e-07/1.06e-07|1.58e-07/1.58e-07|1.75e-07/1.75e-07 0x1000 | zero |3.59e-05/3.59e-05|3.95e-05/3.95e-05|7.15e-05/7.15e-05|1.14e-05/1.14e-05|3.59e-05/3.59e-05|9.20e-06/9.20e-06 last |3.59e-05/3.59e-05|3.95e-05/3.95e-05|3.59e-05/3.59e-05|9.18e-06/9.18e-06|3.59e-05/3.59e-05|9.19e-06/9.19e-06 half |3.59e-05/3.59e-05|1.99e-05/1.99e-05|1.81e-05/1.81e-05|4.74e-06/4.74e-06|1.81e-05/1.81e-05|4.74e-06/4.75e-06 first|3.59e-05/3.59e-05|2.04e-07/2.04e-07|2.04e-07/2.04e-07|2.13e-07/2.13e-07|2.65e-07/2.66e-07|2.82e-07/2.82e-07 0x10000| zero |9.52e-03/1.07e-02|1.14e-02/1.17e-02|1.94e-02/2.04e-02|3.43e-03/3.52e-03|9.59e-03/1.07e-02|3.10e-03/3.17e-03 last |9.57e-03/1.07e-02|1.14e-02/1.17e-02|9.73e-03/1.08e-02|3.04e-03/3.13e-03|9.57e-03/1.05e-02|3.11e-03/3.22e-03 half |9.54e-03/1.06e-02|5.06e-03/5.13e-03|4.69e-03/4.76e-03|1.17e-03/1.17e-03|4.60e-03/4.65e-03|1.18e-03/1.18e-03 first|9.55e-03/1.07e-02|2.28e-06/2.29e-06|2.26e-06/2.27e-06|2.28e-06/2.29e-06|2.34e-06/2.35e-06|2.36e-06/2.36e-06 cc -m64 -g -O3 -W -Wall -Wextra -o test64 test.c repe.S -lrt ./test64 | bit_or | use_memcmp | check_bytes | check_aligned | repe_scasb | repe_scas -------+-----------------+-----------------+-----------------+-----------------+-----------------+----------------- 0x7+4 | zero |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.17e-07/1.17e-07|1.26e-07/1.26e-07|1.52e-07/1.52e-07|2.57e-07/2.67e-07 last |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.04e-07/1.17e-07|1.09e-07/1.09e-07|1.52e-07/1.52e-07|1.70e-07/1.70e-07 half |9.14e-08/9.14e-08|1.35e-07/1.35e-07|7.83e-08/7.83e-08|5.66e-08/5.66e-08|1.26e-07/1.26e-07|7.83e-08/7.83e-08 first|9.14e-08/9.14e-08|4.79e-08/4.79e-08|5.23e-08/5.23e-08|5.66e-08/5.66e-08|1.00e-07/1.00e-07|7.83e-08/7.83e-08 0x7+2 | zero |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.17e-07/1.17e-07|1.26e-07/1.26e-07|1.52e-07/1.52e-07|2.30e-07/2.57e-07 last |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.04e-07/1.04e-07|1.09e-07/1.09e-07|1.52e-07/1.52e-07|2.22e-07/2.22e-07 half |9.14e-08/9.14e-08|1.35e-07/1.35e-07|7.83e-08/7.83e-08|7.83e-08/7.83e-08|1.26e-07/1.26e-07|1.09e-07/1.09e-07 first|9.14e-08/9.14e-08|4.79e-08/4.79e-08|5.23e-08/5.23e-08|5.66e-08/5.66e-08|1.00e-07/1.00e-07|7.40e-08/7.40e-08 0x7+1 | zero |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.17e-07/1.17e-07|1.17e-07/1.17e-07|1.52e-07/1.52e-07|2.30e-07/2.32e-07 last |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.04e-07/1.04e-07|1.04e-07/1.13e-07|1.52e-07/1.52e-07|1.52e-07/1.52e-07 half |9.14e-08/9.14e-08|1.35e-07/1.35e-07|7.83e-08/7.83e-08|7.40e-08/7.40e-08|1.26e-07/1.26e-07|1.52e-07/1.52e-07 first|9.14e-08/9.14e-08|3.92e-08/3.92e-08|4.36e-08/4.36e-08|4.79e-08/4.79e-08|1.00e-07/1.00e-07|7.83e-08/7.83e-08 0x7 | zero |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.17e-07/1.17e-07|1.52e-07/1.52e-07|1.52e-07/1.52e-07|2.39e-07/2.65e-07 last |9.14e-08/9.14e-08|1.65e-07/1.65e-07|1.04e-07/1.04e-07|1.26e-07/1.26e-07|1.52e-07/1.52e-07|1.70e-07/1.70e-07 half |9.14e-08/9.14e-08|1.35e-07/1.35e-07|7.83e-08/7.83e-08|6.53e-08/6.53e-08|1.26e-07/1.26e-07|8.70e-08/8.70e-08 first|9.14e-08/9.14e-08|4.79e-08/4.79e-08|5.23e-08/5.23e-08|6.53e-08/6.53e-08|1.00e-07/1.00e-07|8.70e-08/8.70e-08 0x400 | zero |9.04e-06/9.04e-06|9.90e-06/9.90e-06|9.03e-06/9.05e-06|2.36e-06/2.36e-06|9.01e-06/9.01e-06|1.25e-06/1.25e-06 last |9.04e-06/9.04e-06|9.90e-06/9.90e-06|9.03e-06/9.03e-06|2.35e-06/2.35e-06|9.01e-06/9.01e-06|1.23e-06/1.23e-06 half |9.04e-06/9.04e-06|5.02e-06/5.02e-06|4.59e-06/4.59e-06|1.25e-06/1.25e-06|4.57e-06/4.57e-06|6.84e-07/6.84e-07 first|9.04e-06/9.04e-06|6.19e-08/7.47e-08|7.91e-08/7.92e-08|7.03e-08/7.05e-08|1.14e-07/1.15e-07|1.27e-07/1.28e-07 0x1000 | zero |3.61e-05/3.61e-05|3.93e-05/3.93e-05|3.58e-05/3.58e-05|9.08e-06/9.08e-06|3.58e-05/3.58e-05|4.64e-06/4.64e-06 last |3.61e-05/3.61e-05|3.93e-05/3.93e-05|3.58e-05/3.58e-05|9.07e-06/9.07e-06|3.58e-05/3.58e-05|4.61e-06/4.61e-06 half |3.61e-05/3.61e-05|1.97e-05/1.97e-05|1.80e-05/1.80e-05|4.63e-06/4.63e-06|1.80e-05/1.80e-05|2.40e-06/2.40e-06 first|3.61e-05/3.61e-05|1.04e-07/1.17e-07|1.21e-07/1.21e-07|1.26e-07/1.26e-07|1.58e-07/1.58e-07|1.71e-07/1.71e-07 0x10000| zero |1.08e-02/1.09e-02|1.03e-02/1.04e-02|9.38e-03/9.50e-03|2.41e-03/2.49e-03|9.33e-03/9.50e-03|1.67e-03/1.73e-03 last |1.08e-02/1.09e-02|1.03e-02/1.04e-02|9.38e-03/9.49e-03|2.44e-03/2.55e-03|9.33e-03/9.47e-03|1.62e-03/1.67e-03 half |1.08e-02/1.10e-02|5.05e-03/5.12e-03|4.61e-03/4.69e-03|1.16e-03/1.16e-03|4.59e-03/4.66e-03|6.63e-04/6.65e-04 first|1.08e-02/1.09e-02|8.70e-07/8.80e-07|8.70e-07/8.80e-07|8.90e-07/9.00e-07|9.60e-07/9.60e-07|9.70e-07/9.80e-07 $ uname -srvmp Linux 2.6.32-gentoo #1 SMP Sun Dec 6 16:24:50 EST 2009 x86_64 AMD Phenom(tm) 9600 Quad-Core Processor As you can see, for short data, simple is better memcmp is actually pretty good at crawling through memory (at least with whatever optimizations GCC 4.4.2 applies) x86's string intrinsics help a little the biggest gain on long data comes from taking larger strides â avoid byte-by-byte access if at all possible.
