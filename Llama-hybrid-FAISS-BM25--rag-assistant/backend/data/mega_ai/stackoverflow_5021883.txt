[site]: stackoverflow
[post_id]: 5021883
[parent_id]: 1063181
[tags]: 
I recently ran into this problem myself while trying to read images from a web camera. What I ended up doing was creating a method that spawned a new STA thread, on which the single-thread method was run. The problem private void TimerTick(object sender, EventArgs e) { // pause timer this.timer.Stop(); try { // get next frame UnsafeNativeMethods.SendMessage(this.captureHandle, WindowsMessageCameraGetFrame, 0, 0); // copy frame to clipboard UnsafeNativeMethods.SendMessage(this.captureHandle, WindowsMessageCameraCopy, 0, 0); // notify event subscribers if (this.ImageChanged != null) { IDataObject imageData = Clipboard.GetDataObject(); Image image = (Bitmap)imageData.GetData(System.Windows.Forms.DataFormats.Bitmap); this.ImageChanged(this, new WebCamEventArgs(image.GetThumbnailImage(this.width, this.height, null, System.IntPtr.Zero))); } } catch (Exception ex) { MessageBox.Show("Error capturing the video\r\n\n" + ex.Message); this.Stop(); } } // restart timer Application.DoEvents(); if (!this.isStopped) { this.timer.Start(); } } The solution: Move the single-thread logic to its own method, and call this method from a new STA thread. private void TimerTick(object sender, EventArgs e) { // pause timer this.timer.Stop(); // start a new thread because GetVideoCapture needs to be run in single thread mode Thread newThread = new Thread(new ThreadStart(this.GetVideoCapture)); newThread.SetApartmentState(ApartmentState.STA); newThread.Start(); // restart timer Application.DoEvents(); if (!this.isStopped) { this.timer.Start(); } } /// /// Captures the next frame from the video feed. /// This method needs to be run in single thread mode, because the use of the Clipboard (OLE) requires the STAThread attribute. /// private void GetVideoCapture() { try { // get next frame UnsafeNativeMethods.SendMessage(this.captureHandle, WindowsMessageCameraGetFrame, 0, 0); // copy frame to clipboard UnsafeNativeMethods.SendMessage(this.captureHandle, WindowsMessageCameraCopy, 0, 0); // notify subscribers if (this.ImageChanged!= null) { IDataObject imageData = Clipboard.GetDataObject(); Image image = (Bitmap)imageData.GetData(System.Windows.Forms.DataFormats.Bitmap); // raise the event this.ImageChanged(this, new WebCamEventArgs(image.GetThumbnailImage(this.width, this.height, null, System.IntPtr.Zero))); } } catch (Exception ex) { MessageBox.Show("Error capturing video.\r\n\n" + ex.Message); this.Stop(); } }
