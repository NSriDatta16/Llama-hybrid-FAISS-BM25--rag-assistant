[site]: stackoverflow
[post_id]: 3858283
[parent_id]: 3855257
[tags]: 
Inner classes are useful to keep the code that is tightly coupled together. Static inner classes have less overhead, since they dont retain the implicit "this" reference of the enclosing class (allowing any enclosing instance to be garbage collected independently). Also, with static inner classes you can achieve complete encapsulation, even against classes in the same package. You can not make a normal class private , but you can have private inner classes. Try this convoluted example: public class MyClass { private static class MyInner { private void myMethod() { new Thread(new Runnable() { public void run() { while (true) { System.gc(); try { Thread.sleep(1000); } catch (InterruptedException e) { } System.out.println("Inner class still alive! "+this); } } }).start(); } } public MyClass() { new MyInner().myMethod(); } protected void finalize() throws Throwable { System.out.println("MyClass has just been finalized"); super.finalize(); } public static void main(String[] args) { new MyClass(); } } It demonstrates two things: The static inner class instance lives independently of the enclosing instance, and its completely encapsulated against outside access, even a class inheriting from MyClass can not access MyInner! Note: The use of finalize() is discouraged, its only used here to demonstrate that the enclosing instance is really garbage collected.
