[site]: stackoverflow
[post_id]: 245663
[parent_id]: 243200
[tags]: 
Ultimately, you'll get the most out of PHP first by learning generally good programming practices, before focusing on anything PHP-specific. Having said that... Apply liberally for fun and profit: Iterators in foreach loops. There's almost never a wrong time. Design around class autoloading. Use spl_autoload_register() , not __autoload() . For bonus points, have it scan a directory tree recursively, then feel free to reorganize your classes into a more logical directory structure. Typehint everywhere. Use assertions for scalars. function f(SomeClass $x, array $y, $z) { assert(is_bool($z)) } Output something other than HTML. header('Content-type: text/xml'); // or text/css, application/pdf, or... Learn to use exceptions. Write an error handler that converts errors into exceptions. Replace your define() global constants with class constants. Replace your Unix timestamps with a proper Date class. In long functions, unset() variables when you're done with them. Use with guilty pleasure: Loop over an object's data members like an array. Feel guilty that they aren't declared private. This isn't some heathen language like Python or Lisp. Use output buffers for assembling long strings. ob_start(); echo "whatever\n"; debug_print_backtrace(); $s = ob_get_clean(); Avoid unless absolutely necessary, and probably not even then, unless you really hate maintenance programmers, and yourself: Magic methods ( __get , __set , __call ) extract() Structured arrays -- use an object
