[site]: stackoverflow
[post_id]: 709686
[parent_id]: 692509
[tags]: 
Despite the fact that you stated that there are no 1-many relationships, there are :) I would recommend creating two tables for packet storage. One to store "header" or "scalar" information, which is common to the packet and--while it may define WHAT data is present--isn't the actual data stored in the packet. Your second table would store the data for each packet, with each field-value combination representing a row in this table. For example, the following two tables: create table packet ( packet_id int identity(1, 1) primary key, destination varchar(50), sender varchar(50), packet_type_id int not null ) create table packet_field ( packet_field_id int identity(1, 1) primary key, packet_id int not null references packet (packet_id), field_id int not null, data varbinary(500) ) Obviously these two tables are making assumptions about the type and size of data being stored and aren't exhaustive in what they'll need to store. However, this fundamental structure will allow for dynamically-defined packet formats and is a schema that's easily indexed (for instance, adding an index on packet_id+field_id in packet_field would be a no-brainer). All your application is then responsible for is unpacking the packet and storing it in your DB in this schema, then repacking (if necessary). Of course, from this point you'll need tables that store the actual format of the packet. Something like... create table packet_type ( packet_type_id int identity(1, 1) primary key, name varchar(200) not null ) create table packet_type_field ( field_id int identity(1, 1) primary key, packet_type_id int not null references packet_type (packet_type_id) field_offset int not null, name varchar(200) not null ) Again, obviously simplified but it shows the basic idea. You would have a single record in your packet_type table for each packet format, and one row in the packet_type_field for each field in a given packet. This should give you most of the information you would need to be able to process an arbitrary chunk of binary data into the aforementioned packet storage schema.
