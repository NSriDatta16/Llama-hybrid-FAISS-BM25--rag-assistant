[site]: stackoverflow
[post_id]: 3564579
[parent_id]: 
[tags]: 
Yii framework "meta db model" creation + postgres inheritance

I have few DB tables, witch are build using inheritance from one table witch is an sort of "template" for creation of new tables, and now i have set of businesses logic methods witch work on columns inherit from template, additional columns are used only as params for presentation of models, they're have no meaning for logic. The goal is to share businesses logic methods along all of that tables, i know, now it can be done by adding another class witch extends CActiveRecord, and extend from it every model, or pack logic as a behavior and append it to models. But this will require to write at least "dump" class file for every table/model, but those tables "live" in system, and will be deleted/created with system life cycle. Is there a way to write some sort of "meta-model" witch will take as a param, table name, or maybe some way to create models for tables "on-the-fly" and append to it businesses logic? I've asked this question on Yii users board, but did not find any response :/ I'm considering this as some sort of code challenge, so any help / clues are welcome :) [EDIT] Some samples: tables for different client devices hfc.cable_modem lan.switch_port lan.voip_gateway (in near future, there will be more "technologies" added to system, so new tables for client devices, and there is a possibility to drop support for some of them) every table inherits from template table client_device witch has that fields: client_id service_id core_device_id (plus some meta columns for timestampable behavior like created, updated, updater etc.) like You see business logic operates only on ID's, and its identical for every table, rest of columns are used as device params storage/presentation information. My goal is to have "meta-model" client device, witch will apply business logic to all this tables, and still provide for every of them, access to specific fields, without having to write model class, for every table (witch i'll have to do, every single time, when new technology will be added, or support for given technology will be dropped in a future)
