[site]: stackoverflow
[post_id]: 3421161
[parent_id]: 3419889
[tags]: 
First of all, I would use SQL Server 2005 XQuery over OPENXML - seems easier and cleaner to me. Second of all - not entirely clear which elements or attributes you want to extract.... Third: you're ignoring the XML namespaces, that's why nothing is working.... they're there for a reason, and you need to pay attention to them! So I tried something like this here: DECLARE @input XML = '.....' ;WITH XMLNAMESPACES('urn:schemas-microsoft-com:rowset' AS rs, '#RowsetSchema' AS z) SELECT Nodes.Attr.value('(@c0)[1]', 'INT') AS 'HomeroomTeacher', Nodes.Attr.value('(@c1)[1]', 'INT') AS 'HomeroomNumber', Nodes.Attr.value('(@c2)[1]', 'INT') AS 'EntityID' FROM @input.nodes('/xml/rs:data/z:row') AS NOdes(Attr) and I'm getting an output of: HomeroomTeacher HomeroomNumber EntityID 22943 101 55 22929 102 55 22854 103 55 22908 104 55 22881 105 55 This might not yet be exactly what you're looking for, but it might be a starting point! I did: define the relevant XML namespaces rs: and z: using thte WITH XMLNAMESPACES construct created a "pseudo-table" Nodes with a pseudo-column Attr which basically has one row of XML for each elements that matches that XPath expression I then reach into those rows in the pseudo table and I'm able to pull out the relevant bits of information I need
