[site]: stackoverflow
[post_id]: 3551716
[parent_id]: 3550925
[tags]: 
On a 32-bit machine, a million integers can fit in an array of 4 million bytes. 4MB isn't all that much; it'll fit in this system's memory 500 times over (and it's not that beefy by modern standards). A million strings will be the same size, except for the storage space for those strings; for short strings it's still no problem, so slurp it all in. You can even have an array of pointers to structures holding an integer and a reference to a string; it will all fit just fine. It's only when you're dealing with much more data than that (e.g., a billion items) that you need to take special measures, data-structure-wise. For sorting that many things, choose an algorithm that is O( n log n ) instead of one that is O( n 2 ). The O( n ) algorithms are only useful when you've got particularly compact key spaces, which is pretty rare in practice. Choosing which algorithm from the set that are in O( n log n ) is a matter of balancing speed and other good properties such as stability. If you're doing this for real, use a database with appropriate indices instead of futzing around with doing this all by hand.
