[site]: stackoverflow
[post_id]: 3896563
[parent_id]: 3896036
[tags]: 
You shouldn't call SetConfigurationSettingPublisher from a static constructor. It is not guaranteed to run at all, and if it runs, there is no guarantee neither about when it will run. If fact, there are guarantees that it will be executed on Type initialization. It's right before the first time that your class ExpenseDataSource is used. If you don't use it in your application, the static constructor won't be executed either. As SetConfigurationSettingPublisher must be called before the first request (if I remember well), you will understand that the static constructor isn't really the way to go. You should create a class deriving from RoleEntryPoint, whose OnStart override will always be called by the Azure platform when it starts: public class WebRole: RoleEntryPoint { public override bool OnStart() { #region Setup CloudStorageAccount Configuration Setting Publisher // This code sets up a handler to update CloudStorageAccount instances when their corresponding // configuration settings change in the service configuration file. CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) => { // Provide the configSetter with the initial value configSetter(RoleEnvironment.GetConfigurationSettingValue(configName)); RoleEnvironment.Changed += (sender, arg) => { if (arg.Changes.OfType () .Any((change) => (change.ConfigurationSettingName == configName))) { // The corresponding configuration setting has changed, propagate the value if (!configSetter(RoleEnvironment.GetConfigurationSettingValue(configName))) { // In this case, the change to the storage account credentials in the // service configuration is significant enough that the role needs to be // recycled in order to use the latest settings. (for example, the // endpoint has changed) RoleEnvironment.RequestRecycle(); } } }; }); #endregion return base.OnStart(); } } It's an example, you can put here whatever initialization code is required by your application.
