[site]: stackoverflow
[post_id]: 5600853
[parent_id]: 5599585
[tags]: 
Is your socket TCP or UDP? recv is a lower-level routine than <> / readline . It maps more or less directly to the recv(2) system call. If the socket data is arriving as 4 4-byte packets, recv will return immediately once it sees the first packet even if it has been supplied a larger buffer. If all 4 packets arrive before the first call to recv() , then whether you get all the data or just one piece likely depends on whether it is TCP or UDP. If you are using TCP, there's a possibility that packets will be fragmented in flight. It's unlikely to happen with 16 byte payloads, but best practice would be not to assume that 16 bytes of data will show up all at once even if you know the server sent it all at once. Network applications are generally expected to buffer the incoming data, or, you can have perl do it for you by specifying 16-byte records with $/ = \16 . Another possibility, which I find more natural than <> for this kind of I/O usage, is to use the read or sysread functions (or the OO equivalents, which are defined in the IO::Socket superclass IO::Handle ). Those take a length argument, but as before, you should not assume that the entire buffer will be filled at once.
