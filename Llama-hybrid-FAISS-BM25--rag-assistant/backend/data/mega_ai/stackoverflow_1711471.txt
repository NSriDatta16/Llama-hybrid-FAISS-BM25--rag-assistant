[site]: stackoverflow
[post_id]: 1711471
[parent_id]: 941470
[tags]: 
My resolution to this is a little bit hacked, and admittedly not the most elegant solution that I've ever come up with - but it works rather effectively... Basically my steps are to start a thread that polls to see whether the window handle is existent or not. While it's still existent, do nothing. If it no longer exists, kill the python application, allowing the handle (and main application) to be released. class CheckingThread(threading.Thread): ''' This class runs a check on Parent Window to see if it still is running If Parent Window closes, this class kills the Python Window application in memory ''' def run(self): ''' Checks Parent Window in 5 seconds intervals to make sure it is still alive. If not alive, exit application ''' self.needKill = False while not self.needKill: if self.handle is not None: if not win32gui.IsWindow(self.handle): os._exit(0) break time.sleep(5) def Kill(self): ''' Call from Python Window main application that causes application to exit ''' self.needKill = True def SetHandle(self, handle): ''' Sets Handle so thread can check if handle exists. This must be called before thread is started. ''' self.handle = handle Again, it feels a little hackish, but I don't really see another way around it. If anybody else has better resolutions, please post.
