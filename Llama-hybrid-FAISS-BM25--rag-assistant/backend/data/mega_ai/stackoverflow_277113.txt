[site]: stackoverflow
[post_id]: 277113
[parent_id]: 251885
[tags]: 
The matter is easy. If the class does have invariants to guarantee, you should never make the members constraining the invariant public. If your struct is merely an aggregate of different objects , and doesn't have an invariant to hold, you are indeed free and encouraged to put its members public . That's the way std::pair in C++ does it. What's that invariant stuff? Simple example: Consider you have a Point class whose x and y members must always be >= 0 . You can make an invariant stating /* x >= 0 && y >= 0 for this classes' objects. */ If you now make those members public, clients could simply change x and y, and your invariant could break easily. If the members, however, are allowed to contain all possible values fitting their own invariants respectively, you could of course just make those members public: You wouldn't add any protection to them anyway.
