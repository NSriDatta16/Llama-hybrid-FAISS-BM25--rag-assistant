[site]: stackoverflow
[post_id]: 1950590
[parent_id]: 1950559
[tags]: 
UPDATED : Now that you've posted your entire code. The answer is that you shouldn't store the elements in the temporary array at all, but create the draggable for each element as the AJAX call returns. The problem is that while the array is accessible inside the AJAX callback the code at the end of the function (outside the each) executes before the AJAX calls have completed and so the array is empty. If you create each draggable as the call returns, you don't need the intermediate storage variable and the draggable is created as it is inserted into the DOM. The other alternative, would be to make your AJAX calls synchronous {aSync: false} , but this would also potentially tie up the browser until all of the elements have returned. Better, IMO, to live with the asynchronous nature of the AJAX call and handle each element as it is created. function addArtists(artist, request, origElm, xml){ //create ordered list //set new s class var olClass = "artists"; //holds the class of new //create id for new var olId = "artists"; //holds the id of new //create actual element var ol = $(' ').attr('id',olId) .addClass(olClass) .appendTo(origElm); //create the elements from the returned xml //create class for new s, (just the request minus the 's') var liClass = request.substring(0, request.length-1); //traverse xml $('element', xml).each(function(){ //create id for new based on artist abbreviation var artist = $(this).text(); $.ajax({ url: "php/artistToAbb.php", data: {artist: artist}, dataType: "html", async: true, success: function(html) { var artistAbb = html; //create li var li = $(' ').attr('id', artistAbb) .addClass(liClass) .appendTo(ol); //create arrow icon/button for li var img = $(' ').attr('id', artistAbb + 'ArrowImg') .attr("src","images/16-arrow-right.png") .attr('onclick', "expand(this, '" + artistAbb + "', 'years', 'danwoods')") .addClass("expImg") .appendTo(li); var artistTxt = $(' ' + artist + ' ') .addClass("artist_txt") .attr('onMouseOver', 'catMouseOver(this)') .attr('onMouseOut', 'catMouseOut(this)') .appendTo(li); //tag the ol element's class $($(origElm)[0]).addClass('expanded'); new Draggable(artistAbb, {superghosting: true, detached: true, onEnd: catClearHighlight}); }//end on success });//end ajax call });//end each(function() }
