[site]: stackoverflow
[post_id]: 734419
[parent_id]: 732607
[tags]: 
Lua Documentation: http://www.lua.org/pil/16.html This use of a self parameter is a central point in any object-oriented language. Most OO languages have this mechanism partially hidden from the programmer, so that she does not have to declare this parameter (although she still can use the word self or this inside a method). Lua can also hide this parameter, using the colon operator. We can rewrite the previous method definition as function Account:withdraw (v) self.balance = self.balance - v end and the method call as a:withdraw(100.00) The effect of the colon is to add an extra hidden parameter in a method definition and to add an extra argument in a method call. The colon is only a syntactic facility, although a convenient one; there is nothing really new here. We can define a function with the dot syntax and call it with the colon syntax, or vice-versa, as long as we handle the extra parameter correctly: Account = { balance=0, withdraw = function (self, v) self.balance = self.balance - v end } function Account:deposit (v) self.balance = self.balance + v end Account.deposit(Account, 200.00) Account:withdraw(100.00) Possible Conclusion: With this in mind I assume that when calling a ":" function using "pcall" you must supply the "self" argument.
