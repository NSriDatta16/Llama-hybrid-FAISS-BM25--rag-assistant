[site]: crossvalidated
[post_id]: 632200
[parent_id]: 
[tags]: 
Weighted independent t-test

Do you think the following approach is valid in terms of computing independent t-tests that account for statistical weights? Essentially, we want to compare whether a random sample of people from 31 European countries in 2005 (group1) are statistically different from another random sample of people from the same 31 European countries in 2015 (group2). The thing we're measuring is responses to a question (going from 1 to 7) and that we need to weight for representativeness. By representativeness we want to make sure that the means compared in the t-tests are weighted by weights provided in the survey. def weighted_ttest(group1, group2, weight1, weight2): mean1 = np.average(group1, weights=weight1) mean2 = np.average(group2, weights=weight2) std1 = np.sqrt(np.average((group1 - mean1)**2, weights=weight1)) std2 = np.sqrt(np.average((group2 - mean2)**2, weights=weight2)) n1 = len(group1) n2 = len(group2) pooled_std = np.sqrt(((n1 - 1) * std1**2 + (n2 - 1) * std2**2) / (n1 + n2 - 2)) t_stat = (mean1 - mean2) / (pooled_std * np.sqrt(1/n1 + 1/n2)) df = n1 + n2 - 2 return t_stat, df t_test_results = {} for country in countries_with_both_years: data_2005 = filtered_data[(filtered_data['country'] == country) & (filtered_data['year'] == 2005)] data_2015 = filtered_data[(filtered_data['country'] == country) & (filtered_data['year'] == 2015)] t_stat, df = weighted_ttest(data_2005['Q 49a - Does your job involve working at very high speed?'], data_2015['Q 49a - Does your job involve working at very high speed?'], data_2005['w4'], data_2015['w4']) p_value = ttest_ind(data_2005['Q 49a - Does your job involve working at very high speed?'], data_2015['Q 49a - Does your job involve working at very high speed?'], equal_var=False).pvalue # p-value calculated using independent t-test t_test_results[country] = (t_stat, df, p_value) for country, (t_stat, df, p_value) in t_test_results.items(): print(f"{country}: t-statistic = {t_stat}, degrees of freedom = {df}, p-value = {p_value}")
