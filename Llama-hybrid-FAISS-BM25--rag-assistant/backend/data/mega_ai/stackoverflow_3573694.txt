[site]: stackoverflow
[post_id]: 3573694
[parent_id]: 
[tags]: 
Mapping module imports in Python for easy refactoring

I have a bunch of Python modules I want to clean up, reorganize and refactor (there's some duplicate code, some unused code ...), and I'm wondering if there's a tool to make a map of which module uses which other module. Ideally, I'd like a map like this: main.py -> task_runner.py -> task_utils.py -> deserialization.py -> file_utils.py -> server.py -> (deserialization.py) -> db_access.py checkup_script.py re_test.py main_bkp0.py unit_tests.py ... so that I could tell which files I can start moving around first (file_utils.py, db_access.py), which files are not used by my main.py and so could be deleted, etc. (I'm actually working with around 60 modules) Writing a script that does this probably wouldn't be very complicated (though there are different syntaxes for import to handle), but I'd also expect that I'm not the first one to want to do this (and if someone made a tool for this, it might include other neat features such as telling me which classes and functions are probably not used). Do you know of any tools (even simple scripts) that assist code reorganization? Do you know of a more exact term for what I'm trying to do? Code reorganization?
