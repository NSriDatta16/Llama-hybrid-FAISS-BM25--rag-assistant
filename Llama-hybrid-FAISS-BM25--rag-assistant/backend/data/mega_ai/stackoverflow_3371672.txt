[site]: stackoverflow
[post_id]: 3371672
[parent_id]: 
[tags]: 
Public static methods - a bad sign?

I've just read this article here: http://hamletdarcy.blogspot.com/2008/04/10-best-idea-inspections-youre-not.html , and the last bit in particular got me thinking about my code, specifically the advice: What in the world is a public method doing on your object that has no dependency on any fields within the object? This is certainly a code smell. The problem is that the "auto-fix" for the inspection is to apply the static keyword. Nooooo. That's not what you want to do. A public method without any dependency on object state can't possibly be part of an object that has one clearly stated charter. It's just not cohesive and should be placed somewhere else. So: if the method is private, accept the auto-fix, but if the method is public then don't. The code in question is essentially an object transformer. It takes an object of type A and converts it to a different type. My hierarchy is like this: Interface ObjectTransformer -> GenericObjectTransformer and then below this, GenericObjectTransformer is extended by ObjectTransformerA and ObjectTransformerB Now, some functionality is required by both ObjectTransformerA and ObjectTransformerB, but doesnt actually depend on any instance variables of GenericObjectTransformer, so its a protected static method in GenericObjectTransformer. Is this a violation of the rule above? Obviously this is protected rather than public, but its still a method accessible from outside of the class that has nothing to do with the class itself? Any thoughts?
