[site]: stackoverflow
[post_id]: 4933353
[parent_id]: 4933055
[tags]: 
Short answer You can't (at least if you want to be taken seriously as an Erlang programmer whilst having Erlang code that works properly). Long answer Erlang is a functional programming language, not an object-oriented programming language. The whole basic concept of an "object" (a collection of state with attached functions) is anathema to the functional approach (which eschews mutable state as much as possible). You could kludge together an object-like setup in a functional language -- especially an impure one like Erlang -- but the resulting code would be hard to read, hard to maintain, fragile and ugly. (Harder to read and maintain, more fragile and uglier than even OOP code written in an OOP language, hard as that may seem to be to believe.) You'd serve your needs far better by either: learning the natural idioms and means of expressing ideas native to Erlang ( LYSE is a good starting point for this preferred solution); or using an object-oriented programming language for object-oriented programming. Doing half-assed OOP in a non-OOP language is generally fruitless and painful.
