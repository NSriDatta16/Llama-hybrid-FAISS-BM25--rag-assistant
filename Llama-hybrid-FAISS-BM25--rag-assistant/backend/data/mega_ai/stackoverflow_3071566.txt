[site]: stackoverflow
[post_id]: 3071566
[parent_id]: 3071497
[tags]: 
O(1) might be too much to ask for. Is O(logn) insert/delete/access time ok? Then you can have a balanced red-black tree with order statistics: http://www.catonmat.net/blog/mit-introduction-to-algorithms-part-seven/ It allows you to insert/delete/access elements by position. As Micheal was kind enough to point out, Java Treemap supports it: http://java.sun.com/j2se/1.5.0/docs/api/java/util/TreeMap.html Also, not sure why you think O(logN) will be as bad as iterating the list! From my comments to you on some other answer: For 1 million items, using balanced red-black trees, the worst case is 2log(n+1) i.e ~40. You need to do no more than 40 compares to find your element and that is the absolute worst case. Red-black trees also cater to the hole/gap disappearing. This is miles ahead of iterating the list (~ 1/2 million on average!). With AVL trees instead of red-black trees, the worst case guarantee is even better: 1.44 log(n+1), which is ~29 for a million items.
