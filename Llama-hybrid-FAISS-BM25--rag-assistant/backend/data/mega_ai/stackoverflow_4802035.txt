[site]: stackoverflow
[post_id]: 4802035
[parent_id]: 4801918
[tags]: 
Ultimately, what you want to do is incompatible with the way that Python is structured. You have the most elegant way to do it already in the case that your variables are lists but this is not possible with numbers. This is because variables do not exist in Python. References do. So i.x is not a list, it is a reference to a list . Likewise, if it references a number. So if i.x references y , then i.x = z doesn't actually change the value y , it changes the location in memory that i.x points to. Most of the time, variables are viewed as boxes that hold a value. The name is on the box. In python, values are fundamental and "variables" are just tags that get hung on a particular value. It's very nice once you get used to it. In the case of a list, you can use use slice assignment, as you are already doing. This will allow all references to the list to see the changes because you are changing the list object itself. In the case of a number, there is no way to do that because numbers are immutable objects in Python. This makes sense. Five is five and there's not much that you can do to change it. If you know or can determine the name of the attribute, then you can use setattr to modify it but this will not change other references that might already exist. As Rafe Kettler says, if you can be more specific about what you actually want to do, then we can come up with a simple elegant way to do it.
