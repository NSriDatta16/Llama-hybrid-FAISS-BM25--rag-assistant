[site]: stackoverflow
[post_id]: 1377017
[parent_id]: 1376766
[tags]: 
Here's a reasonably good regex for matching the first twenty visible words: '~^(?:\s*+(?:(?:[^<>\s]++| ]*+>)++)){1,20}~' This matches one to twenty whitespace-separated tokens, where a token is defined as one or more words or tags not separated by whitespace (where a "word" is defined as one or more characters other than whitespace or angle brackets). For example, this would be one token: Amazing ...but this is two tokens: Super Duper This will treat a standalone tag (like the tag in your example, or any tag that's surrounded by whitespace) as a separate token, which throws off the count--it only matches up to the word "of" in your example. It also won't correctly handle tags, or block-level tags like and , if they don't have any whitespace around them. Only you can know how much of a problem that will be. EDIT: If that isolated tag is something you see a lot, you could preprocess the text to remove the whitespace following it. That would effectively merge it with the first subsequent "real" token, resulting in a more accurate character count. I know it only changes the count by one or two characters in this case, but if the twentieth word happened to "supercalifragilisticexpialidocious" you'd probably notice the difference. :)
