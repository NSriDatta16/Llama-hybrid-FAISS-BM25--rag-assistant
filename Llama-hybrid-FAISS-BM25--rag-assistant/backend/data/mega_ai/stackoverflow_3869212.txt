[site]: stackoverflow
[post_id]: 3869212
[parent_id]: 3832420
[tags]: 
Let us go through some of the downcasting example in MFC: CButton* from CWnd* CWnd* wnd = GetDlgItem(IDC_BUTTON_ID); CButton* btn = dynamic_cast (wnd); CChildWnd* from CFrameWnd* CChildWnd * pChild = ((CSplitFrame*)(AfxGetApp()->m_pMainWnd))->GetActive(); There are indeed some of the limitation of MFC design. Due to CWnd provides the base functionality of all window classes in MFC, it does even serve as a base class of View, Dialog, Button etc. If we want to avoid downcasting, probably we need MFC hacker to split CWnd into fewer pieces? Now, comes to the another question, how to solve the violation, my humble opinion is try to avoid unsafe downcasting, by using safe downcasting: Parent *pParent = new Parent; Parent *pChild = new Child; Child *p1 = static_cast (pParent); // Unsafe downcasting:it assigns the address of a base-class object (Parent) to a derived class (Child) pointer Parent *p2 = static_cast (pChild); // Safe downcasting:it assigns the address of a derived-class object to a base-class pointer It serve as good practise for using safe downcasting, even though the violation is still exists, we will just suppress the violation with given explanation. Few of the useful reference: http://support.microsoft.com/kb/108587 http://blog.csdn.net/ecai/archive/2004/06/26/27458.aspx http://www.codeproject.com/KB/mcpp/castingbasics.aspx http://www.bogotobogo.com/cplusplus/upcasting_downcasting.html Lastly, thanks for various useful response from all of you. They are indeed very helpful.
