[site]: crossvalidated
[post_id]: 196873
[parent_id]: 191582
[tags]: 
It seems as if this is a Bug/numerical instability in the scikit package (or we/you are using it wrongly although I can't see an obvious mistake...): As far as I have understood from the documentation, scikit uses libsvm to do the actual optimization magic. Using R and its binding to libSVM (i.e. both approaches should compute exactly the same thing) I get senseful results: R code: install.packages("e1071") library("e1071") x = 1:100 y = 5*x + 10 + 100*runif(n = length(x), min = 0, max = 1) binomial = sample.int(2, size=100, replace=T)-1 training_x = x[binomial==1] training_y = y[binomial==1] test_x = x[binomial==0] test_y = y[binomial==0] model = svm(training_x,training_y,kernel="radial",type = "eps-regression") new = predict(model, test_x) plot(x, y) points(test_x, new, col = "red") result: (red points are the ones predicted by SVM): I would recommend to write this question to the owners of scikit-learn (including the R code in order to be able to compare). Regards, FW
