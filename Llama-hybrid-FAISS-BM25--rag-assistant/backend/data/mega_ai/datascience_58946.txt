[site]: datascience
[post_id]: 58946
[parent_id]: 
[tags]: 
How to obtain the predictions of SVM model on single input?

So, I am trying to build a Spam detection model. It is trained on a dataset consisting of about 3500 messages. I used SVM to build a model. But, if I now wish to find out whether a message is spam or not for a single line of input message, how would I do it? I tried testmessage = ['Discount ! Free ! guarantee'] x = vectorizer.transform(testmessage) y = svm.predict(x) But I am getting some error like : ValueError: X.shape[1] = 6 should be equal to 8272, the number of features at training time import pandas as pd import numpy as np import nltk data = pd.read_csv("/media/piyush/Disk/Code practice/SPAM_Detction/spam.csv",encoding ='latin-1') data = data.drop(["Unnamed: 2","Unnamed: 3","Unnamed: 4"], axis = 1) # data.loc[data.v1 == "spam", "v1"] = int(1) # data.loc[data.v1 == "ham", "v1"] = int(0) data = data.rename(columns = {'v1': 'label', 'v2': 'text'}) def message_lower(msg): msg = msg.lower() return msg from nltk import stem from nltk.corpus import stopwords stemmer = stem.SnowballStemmer('english') stopwords = set(stopwords.words('english')) def alternative_review_messages(msg): # converting messages to lowercase msg = msg.lower() # removing stopwords msg = [word for word in msg.split() if word not in stopwords] # using a stemmer msg = " ".join([stemmer.stem(word) for word in msg]) return msg data['text'] = data['text'].apply(message_lower) from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(data['text'],data['label'], test_size=0.1, random_state= 1) from sklearn.feature_extraction.text import TfidfVectorizer vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(X_train) from sklearn.svm import SVC svm = SVC(C = 3000) svm.fit(X_train,y_train) X_test = vectorizer.transform((X_test)) y_pred = svm.predict(X_test) from sklearn.metrics import confusion_matrix print(confusion_matrix(y_test,y_pred))
