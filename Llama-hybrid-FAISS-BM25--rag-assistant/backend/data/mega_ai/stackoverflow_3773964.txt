[site]: stackoverflow
[post_id]: 3773964
[parent_id]: 3773869
[tags]: 
This very much depends on the type of work you're doing inside the loop and on how accurate you want this mechanism to work. ATM I can come up with 2 possible schemes: If one iteration takes about constant time than you could calculate an average from the first few iterations and "sleep" for 1 - iterationTime afterwards. Otherwise, you can poll the time and recalculate the average every step (or a few steps). Depending on the standard deviation of your single loop execution times both scheme can work quite well, but if the execution times are very varying, neither of them will. Also, if you want evenly distributed loop cycles and not only keep the average/min you have to distribute the sleep-s and do one after each iteration. I am not familiar enough with Python to know how expensive is to query the time and what other Python-specific issues might pop up with sleep-ing, though.
