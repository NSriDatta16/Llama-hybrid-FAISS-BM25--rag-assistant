[site]: stackoverflow
[post_id]: 4777070
[parent_id]: 
[tags]: 
Hamming distance on binary strings in SQL

I have a table in my DB where I store SHA256 hashes in a BINARY(32) column. I'm looking for a way to compute the Hamming distance of the entries in the column to a supplied value, i.e. something like: SELECT * FROM table ORDER BY HAMMINGDISTANCE(hash, UNHEX( )) ASC LIMIT 10 (in case you're wondering, the Hamming distance of strings A and B is defined as BIT_COUNT(A^B) , where ^ is the bitwise XOR operator and BIT_COUNT returns the number of 1s in the binary string). Now, I know that both the ^ operator and BIT_COUNT function only work on INTEGERs and so I'd say that probably the only way to do it would be to break up the binary strings in substrings, cast each binary substring to integer, compute the Hamming distance substring-wise and then add them. The problem with this is that it sounds terribly complicated, not efficient and definitely not elegant. My question therefore is: could you suggest any better way? (please note that I'm on shared hosting and therefore I can't modify the DB server or load libraries) edit(1): Obviously loading the whole table in PHP and doing the computations there would be possible but I'd rather avoid it because this table will probably grow quite large. edit(2): The DB server is MySQL 5.1 edit(3): My answer below contains the code that I just described above. edit(4): I just found out that using 4 BIGINTs to store the hash instead of a BINARY(32) yields massive speed improvements (more than 100 times faster). See the comments to my answer below.
