[site]: stackoverflow
[post_id]: 867240
[parent_id]: 867224
[tags]: 
I don't think you're likely to get a better answer than the Wikipedia page on sorting . Summary: For arbitrary comparisons (where you can't use something like radix sorting) the best you can achieve is O(n log n) Various algorithms achieve this - see the "comparison of algorithms" section. The commonly used QuickSort is O(n log n) in a typical case, but O(n^2) in the worst case; there are often ways to avoid this, but if you're really worried about the cost of comparisons, I'd go with something like MergeSort or a HeapSort. It partly depends on your existing data structures. If humans are doing the comparisons, are they also doing the sorting? Do you have a fixed data structure you need to use, or could you effectively create a copy using a balanced binary tree insertion sort? What are the storage requirements?
