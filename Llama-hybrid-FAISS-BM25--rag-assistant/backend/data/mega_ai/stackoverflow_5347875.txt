[site]: stackoverflow
[post_id]: 5347875
[parent_id]: 
[tags]: 
WPF, WinForms, ActiveX controls, and my vanishing sanity (calling DragMove() in response to a WinForms Control MouseDown event)

As you may have gathered from the title of this post, I am about to crack. Ok, so here it is: I have a WPF window which is hosting a WinForms Form which is in turn hosting an ActiveX control. This is all due to legacy components and wanting to animate the opacity of a transparent WPF window. Can't you just feel the fun already?! ...So, I would like to be able to drag my transparent WPF window by calling DragMove in mouse down for various areas of the window. This works fine, and I can live with the current behavior, but it would be nice if I could also drag the window via a MouseDown event generated by my WinForms component. So, I took the obvious approach: void Init() { MyWinForm form = new MyWinForm(); form.SomeControl.MouseDown = form_MouseDown; } void form_MouseDown( object sender, MouseEventArgs e ) { if( e.Button == MouseButtons.Left ) { DragMove(); } } However, my application crashes with the following message: Can only call DragMove when primary mouse button is down. Yeah, right, except the left (primary) button is the button being pressed (I realize this could be problematic for left handed mouses, but let's avoid that for now). So, once again, simple code that works for a Mouse event generated by a WPF control fails for a System.Windows.Forms.Control . Anyone have any experience with this? Thanks in advance for any advice you can offer. TLDR; Calling DragMove() from inside a System.Windows.Controls.MouseDown event crashes the app. I'm open to any workaround at this point.
