[site]: stackoverflow
[post_id]: 2129833
[parent_id]: 2129794
[tags]: 
For fine-grained timing on OS X, you should use mach_absolute_time( ) declared in : #include #include // Do some stuff to setup for timing const uint64_t startTime = mach_absolute_time(); // Do some stuff that you want to time const uint64_t endTime = mach_absolute_time(); // Time elapsed in Mach time units. const uint64_t elapsedMTU = endTime - startTime; // Get information for converting from MTU to nanoseconds mach_timebase_info_data_t info; if (mach_timebase_info(&info)) handleErrorConditionIfYoureBeingCareful(); // Get elapsed time in nanoseconds: const double elapsedNS = (double)elapsedMTU * (double)info.numer / (double)info.denom; Of course the usual caveats about fine-grained measurements apply; you're probably best off invoking the routine under test many times, and averaging/taking a minimum/some other form of processing. Additionally, please note that you may find it more useful to profile your application running using a tool like Shark. This won't give you exact timing information, but it will tell you what percentage of the application's time is being spent where, which is often more useful (but not always).
