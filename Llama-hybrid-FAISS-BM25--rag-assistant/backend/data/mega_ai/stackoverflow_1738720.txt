[site]: stackoverflow
[post_id]: 1738720
[parent_id]: 1738707
[tags]: 
Nope. You'll have to store the fact you've completed somewhere available to your ASP.NET pages and the method doing your work, like the HttpCache. If this is all happening within a single request, skip the thread pool and check out asynchronous pages. First, if the file is created per user, then the result of the long running action should be stored in the Session, not the cache. The cache is shared between users, and the session is per-user. The long running task can create the file, then store the file path in the session for that user. Whenever the user sends another request for the file, the session is checked for this file. There are a few options for the UI during this. One is by postbacks to the server, the other is ajax calls. Ajax may not be the easiest, even though there are plenty of frameworks (like jQuery) and lots of information on the net about how to make an asynchronous postback. If the process is very long, users might browse away, etc, making your task harder to implement. Another option is to make your request for the file, then redirect to a holding page. This holding page has a script that automatically refreshes every X seconds. It displays to the user a notification such as "Please wait, creating your file." Every time this page posts back to the server the existence of the file is checked. If its not ready yet, then you return to the holding page. Eventually, the file becomes ready and you can redirect the user to another page where the file is downloaded/displayed/whatever. The second option is probably easier and more straightforward for you to implement. Here's the pseudocode: User clicks a link to get the file On postback, server redirects to the holding page User's browser is redirected to the holding page Request is handled by the holding page. The Session is checked for the file. If the session reports the file has not been, and is not being created, the file creation process is started. The holding page is returned to the user. If the session reports the file is being created, the holding page is returned to the user. If the session reports the file is made, the user is redirected to the download page The holding page has a javascript method that runs on load that reloads the page every X seconds.
