[site]: stackoverflow
[post_id]: 5149579
[parent_id]: 5149430
[tags]: 
Let's say you have a class that implements your ADT using a hard-coded typedef T : class ADT { public: typedef int T; ADT(); T& operator[](size_t index); const T& operator[](size_t index) const; size_t size() const; ... private: T* p_; size_t size_; }; (You have to work out the internal storage and member functions that are appropriate for your actual ADT). To change this so that you can specify T as done for std::vector etc.: template Usage is then: ADT an_adt_int; ADT an_adt_double;
