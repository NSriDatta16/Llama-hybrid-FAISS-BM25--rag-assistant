[site]: stackoverflow
[post_id]: 2304003
[parent_id]: 2300535
[tags]: 
Do any functional languages have features to encourage divide-and-conquer programming? Yes: the ability to create new higher-order functions in libraries. One of the most important such functions, on lists anyway, is foldr , which can be parallelized in principle when applied to an associative operator, although this is rarely done in practice. Why? Because foldr is designed around sequential data flow. The beauty of functional languages is that once this problem is recognized, we can address the problem not by introducing new language features, but by making more intelligent use of the features we already have. To see how, look at Guy Steele's talk from August 2009 , where he explains why foldr is not the right library function for parallel functional programming, and he proposes A new programming style A new representation of lists New higher-order functions for libraries that are all designed to support divide-and-conquer programming. What I found so exciting about this talk is that it is not necessary to introduce new language features to support divide-and-conquer programming "natively". It is enough to take the primitives we already have and to use them to design better libraries. If you have access to the ACM Digital library you can see video of Guy's talk Organizing Functional Code For Parallel Execution , or as Ben Karel points out, you can see video taken by Malcom Wallace on Vimeo.
