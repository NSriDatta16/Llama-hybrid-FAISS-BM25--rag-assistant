[site]: stackoverflow
[post_id]: 1220794
[parent_id]: 
[tags]: 
App Engine: 13 StringPropertys vs. 1 StringListProperty (w.r.t. indexing/storage and query performance)

A bit of background first: GeoModel is a library I wrote that adds very basic geospatial indexing and querying functionality to App Engine apps. It is similar in approach to geohashing. The equivalent location hash in GeoModel is called a 'geocell.' Currently, the GeoModel library adds 13 properties (location_geocell__n_, n =1..13) to each location-aware entity. For example, an entity can have property values such as: location_geocell_1 = 'a' location_geocell_2 = 'a3' location_geocell_3 = 'a3f' ... This is required in order to not use up an inequality filter during spatial queries. The problem with the 13-properties approach is that, for any geo query an app would like to run, 13 new indexes must be defined and built. This is definitely a maintenance hassle, as I've just painfully realized while rewriting the demo app for the project. This leads to my first question: QUESTION 1: Is there any significant storage overhead per index? i.e. if I have 13 indexes with n entities in each, versus 1 index with 13n entities in it, is the former much worse than the latter in terms of storage? It seems like the answer to (1) is no, per this article , but I'd just like to see if anyone has had a different experience. Now, I'm considering adjusting the GeoModel library so that instead of 13 string properties, there'd only be one StringListProperty called location_geocells, i.e.: location_geocells = ['a', 'a3', 'a3f'] This results in a much cleaner index.yaml . But, I do question the performance implications: QUESTION 2: If I switch from 13 string properties to 1 StringListProperty, will query performance be adversely affected; my current filter looks like: query.filter('location_geocell_%d =' % len(search_cell), search_cell) and the new filter would look like: query.filter('location_geocells =', search_cell) Note that the first query has a search space of _n_ entities, whereas the second query has a search space of _13n_ entities. It seems like the answer to (2) is that both result in equal query performance, per tip #6 in this blog post , but again, I'd like to see if anyone has any differing real-world experiences with this. Lastly, if anyone has any other suggestions or tips that can help improve storage utilization, query performance and/or ease of use (specifically w.r.t. index.yaml), please do let me know! The source can be found here geomodel & geomodel.py
