[site]: stackoverflow
[post_id]: 2466591
[parent_id]: 2466443
[tags]: 
The varchar representation in your Ruby app appears to be 'hex as string', something like this: 01AB02EF...23EF . that is, each byte is represented as a pair of characters that are the hex value of the byte, from 00 to FF. Therefore the SHA hash (20 bytes) is represented as 40 characters. IF the hash is the values (0, 1, 2, ...) the string will be 000102. The ASP base64 is the base64 encoding of the actual bytes. So all you need to do is take the MySQL characters and obtain the corresponding bytes, then encode them as base64. You can actually do the transformation in SQL itself: declare @x varchar(40); set @x = '000102030405060708090A0B0C0D0E0F10111213'; declare @sql nvarchar(max); set @sql = N'set @out=0x' + @x; declare @out varbinary(20); exec sp_executesql @sql, N'@out varbinary(20) output', @out output; select @out for xml path(''); But to coerce your ASP.Net membership provider to use the salted hash your Ruby code created, irrelevant of the encoding used to store the hash digest, that's a whole different topic. You'll likely have to rewrite your own membership provider, at which point the storage encoding becomes irrelevant, since you can store them as you wish.
