[site]: stackoverflow
[post_id]: 1233114
[parent_id]: 1233042
[tags]: 
A typical separation into files in C++ would be as follows: // myapp.cpp // --------- #include "player.h" #include using std::system; int main() { player sachin; sachin.getdata(); sachin.display(); system("pause"); return(0); } // player.h // -------- // or #pragma once, since you're on MS. #ifndef player_h #define player_h #include class player { public: std::string name; std::string type; void getdata(); void display(); }; #endif // player.cpp // ---------- #include "player.h" #include #include using namespace std; void player::display() { cout >name; cout >type; } There are a few other things that could be tidied up: you might want to put stdafx.h back in, and the strings in player don't need to be public. Note also that I've not put "using namespace std" in the header file. Many people prefer not to do that, at least not at global scope, but if your header does it then that's forced on them if they use your class. It doesn't much matter either way when the files are just for you, but it matters quite a lot in a large project if headers are unexpectedly "using" things. It could cause someone problems where they don't realise that all the functions in std are visible, and call one by accident trying to call something else. I've deliberately used all three options in the three files: using namespace std; , using std::system; , or specifying the namespace every time.
