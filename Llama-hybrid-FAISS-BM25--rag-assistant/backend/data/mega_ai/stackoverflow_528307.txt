[site]: stackoverflow
[post_id]: 528307
[parent_id]: 528123
[tags]: 
Firstly, as other users have stated, if you are designing this system and password storage method then this method is almost worthless and there are many more secure methods that should be used instead. However, the fact that you're asking for this to do comparison makes me think you do not have control over what is already in the database and therefore are working with something legacy. The function below will take your users password as a string and return the database password as a string. One thing to note, the two strings you provided are not of equal length and therefore would crash for characters 9 and 0. I have added to additional letters B and C to the dbChars string. Also, I have "assumed" that any characters entered that cannot be found in the mapping characters are just appended as entered. You may require that these characters are ignored. private string DatabasePassword(string userPassword) { //Constants showing mapping between user password and database password const string userChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"; const string dbChars = "9setybcpqwiuvxr108daj5'-`~!@#$%^&()+|}][{:.?/<>,;ZWQ2@#34KDABC"; //Stringbuilder used to build the database password for output System.Text.StringBuilder databasePassword = new System.Text.StringBuilder(); //Run through every character in the user password foreach (Char userChar in userPassword) { //Find the index of the user character in the userChars string. int userCharIndex = userChars.IndexOf(userChar); //if the userChar exists in the userChars string then map the character to the //equivalent database pasword character else just use the entered char char mappedChar = userCharIndex >= 0 ? dbChars[userChars.IndexOf(userChar)] : userChar; //Append mapped password to the output database password databasePassword.Append(mappedChar); } return databasePassword.ToString(); }
