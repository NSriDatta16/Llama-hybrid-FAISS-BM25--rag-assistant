[site]: stackoverflow
[post_id]: 4942072
[parent_id]: 4937682
[tags]: 
I think you have a number of issues here, mostly in your code that handles reading the values returned by the query. I have taken the liberty of changing a few things and rewriting this to use prepare statements, which is a function that PDO provides that you should take advantage of. On prepare statements: Why use them: http://dev.mysql.com/tech-resources/articles/4.1/prepared-statements.html PHP PDO doc: http://php.net/manual/en/pdo.prepare.php Here is the core code: try { //open database $dbh = new PDO("mysql:host=$hostname;dbname=$dbname", $username, $password); $dbh->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION ); //define sql query $sql = "SELECT LastName FROM staff"; //prepare the query for execution $qresult = $dbh->prepare($sql); //insert code below to handle parameters to the sql query here //execute the query $qresult->execute(); //fetch the results foreach ($qresult->fetch(PDO::FETCH_ASSOC) as $row) { echo $row['LastName'] . ' '; } } catch (PDOException $e) { print "Error!: " . $e->getMessage() . " "; die(); } $qresult = null; //close the result set $dbh = null; //close the database Note, that I have replaced the call to query() with a couple of lines that call prepare() then execute(). You can then easily insert the following lines in between the prepare() and execute() calls to handle passing parameterized queries. This will help reduce chances of sql injection. I have also changed the way you are accessing the retirned valued by specifying that I want them returned as and associative array, PDO::FETCH_ASSOC. This will get you a result set that you can iterate through like you would have using the old mysql interfaces. If your query was a parameterized query like: $sql="SELECT LastName FROM staff WHERE LastName=':lastname'"; where :lastname is the parameter. Here is the code you would insert at the comment to handle this, (this code will handle multiple parameters. Simply add additional elements to the $param array): //bind parameters to the prepared statement $param = array(':lastname'=>'Jones'); foreach ($param as $key => $value) { $qresult->bindValue($key,$value); }
