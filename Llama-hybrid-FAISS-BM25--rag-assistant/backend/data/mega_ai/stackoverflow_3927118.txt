[site]: stackoverflow
[post_id]: 3927118
[parent_id]: 3927001
[tags]: 
Without looking too closely at the API, I'm going to say that while it might be possible to do this in some very basic cases, you don't want to. This is why: In Javascript, as in most languages, variables point to values. Variables are not the values themselves. The object is not in any way inherently related to the name foo. For instance, you can do var foo = {prop: 'bar'}; var fooo = foo; var foooo = foo; var quux = {q: foo, r: foo, s: [foo]}; All of those foo s are now the exact same foo; which one do you want back? There's no API call for that because it's too ambiguous and not terribly useful. However, if you really want to find one of the global variables holding a value, you can try iterating over the keys on the global object and testing them for the value. for(var key in this){ if(this[key] == myval){ var myname = key; } } You'd have to translate this into your API calls or else put it in a function and call that through the API. The more simple and straightforward solution would be to figure out what you want to do with foo later on, and pass in a callback function that will do that, e.g. with JS_CallFunction . tl;dr: Previous paragraph.
