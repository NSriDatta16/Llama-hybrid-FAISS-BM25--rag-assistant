[site]: stackoverflow
[post_id]: 4911825
[parent_id]: 4911790
[tags]: 
I think the problem here is that having operator== in your Interface, just doesn't make any sense at all. If you want to provide comparison for your implementation, that's another matter, like: bool operator==(const Impl & other) const { // ... } Even for that case, though, I would generally discourage creating operator overloads; instead, provide accessors to get the relevant attributes that someone might want to compare, and leave it up to whoever is using your code to create the comparisons that they want to make. Do you have a specific use case for these arbitrary comparisons?
