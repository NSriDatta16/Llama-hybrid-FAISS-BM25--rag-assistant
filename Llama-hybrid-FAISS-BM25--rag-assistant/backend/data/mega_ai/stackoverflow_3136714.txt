[site]: stackoverflow
[post_id]: 3136714
[parent_id]: 3136594
[tags]: 
Actually the _var convention comes from VB not C# or C++ (m_,... is another thing). This came to overcome the case insensitivity of VB when declaring Properties. For example, such code isn't possible in VB because it considers user and User as the same identifier Private user As String Public Property User As String Get Return user End Get Set(ByVal Value As String) user = value End Set End Property So to overcome this, some used a convention to add '_' to the private field to come like this Private _user As String Public Property User As String Get Return _user End Get Set(ByVal Value As String) _user = value End Set End Property Since many conventions are for .Net and to keep some uniformity between C# et VB.NET convention, they are using the same one. I found the reference for what I was saying : http://10rem.net/articles/net-naming-conventions-and-programming-standards---best-practices Camel Case with Leading Underscore. In VB.NET, always indicate "Protected" or "Private", do not use "Dim". Use of "m_" is discouraged, as is use of a variable name that differs from the property by only case, especially with protected variables as that violates compliance, and will make your life a pain if you program in VB.NET, as you would have to name your members something different from the accessor/mutator properties. Of all the items here, the leading underscore is really the only controversial one. I personally prefer it over straight underscore-less camel case for my private variables so that I don't have to qualify variable names with "this." to distinguish from parameters in constructors or elsewhere where I likely will have a naming collision. With VB.NET's case insensitivity, this is even more important as your accessor properties will usually have the same name as your private member variables except for the underscore. As far as m_ goes, it is really just about aesthetics. I (and many others) find m_ ugly, as it looks like there is a hole in the variable name. It's almost offensive. I used to use it in VB6 all the time, but that was only because variables could not have a leading underscore. I couldn't be happier to see it go away. Microsoft recommends against the m_ (and the straight _) even though they did both in their code. Also, prefixing with a straight "m" is right out. Of course, since they code mainly in C#, they can have private members that differ only in case from the properties. VB folks have to do something else. Rather than try and come up with language-by-language special cases, I recommend the leading underscore for all languages that will support it. If I want my class to be fully CLS-compliant, I could leave off the prefix on any C# protected member variables. In practice, however, I never worry about this as I keep all potentially protected member variables private, and supply protected accessors and mutators instead. Why: In a nutshell, this convention is simple (one character), easy to read (your eye is not distracted by other leading characters), and successfully avoids naming collisions with procedure-level variables and class-level properties.class-level properties.
