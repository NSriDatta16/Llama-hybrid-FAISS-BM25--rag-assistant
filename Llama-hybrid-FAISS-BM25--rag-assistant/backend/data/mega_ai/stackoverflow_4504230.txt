[site]: stackoverflow
[post_id]: 4504230
[parent_id]: 4503757
[tags]: 
Well, first off Thread.Abort is not nearly as bad as it used it to be. There were several improvements made to the CLR in 2.0 that fixed several of the major issues with aborting threads. It is still bad, mind you, so avoiding it is the best course of action. If you must resort to aborting threads then at the very least you should consider tearing down the application domain from where the abort originated. That is going to be incredibly invasive in most scenarios and would not resolve the possible corruption of unmanaged resources. Aside from that, aborting in this case is going to have other implications. The most important being that you are attempting to abort a ThreadPool thread. I am really not sure what the end result of that would be and it could be different depending on which version of the framework is in play. The best course of action is to have your Func delegate poll a variable at safe points to see if it should terminate execution on its own. public MetadataRetrievalNode[] Browse(string nodeId, int childStartIndex, int maxChildNodes, TimeSpan timeout) { bool terminate = false; Func work = () => { // Do some work. Thread.MemoryBarrier(); // Ensure a fresh read of the terminate variable. if (terminate) throw new InvalidOperationException(); // Do some work. Thread.MemoryBarrier(); // Ensure a fresh read of the terminate variable. if (terminate) throw new InvalidOperationException(); // Return computed metadata... }; IAsyncResult result = work.BeginInvoke(null, null); terminate = !result.AsyncWaitHandle.WaitOne(timeout); return work.EndInvoke(result); // This blocks until the delegate completes. } The tricky part is how to deal with blocking calls inside your delegate. Obviously, you cannot check the terminate flag if the delegate is in the middle of a blocking call. But, assuming the blocking call is initiated from one of the canned BCL waiting mechansisms ( WaitHandle.WaitOne , Monitor.Wait , etc.) then you could use Thread.Interrupt to "poke" it and that should immediately unblock it.
