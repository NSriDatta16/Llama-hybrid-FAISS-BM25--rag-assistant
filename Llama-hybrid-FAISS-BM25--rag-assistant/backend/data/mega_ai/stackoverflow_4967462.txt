[site]: stackoverflow
[post_id]: 4967462
[parent_id]: 4967250
[tags]: 
An excerpt from my abandoned homepage... Without repeating in the detail all problems inherent to exception handling(1) I want to remark only the main idea: the complex part isn't where the exception is generated (throw) or where the exception is handled (catch) but in the methods of all classes the exception passes through almost asynchronously during the stack unwinding process. Paying some attention on how methods are written is relatively easy avoid losing resources in case of exceptions (use of auto_ptr and similar classes) but things are much more complex when one takes in account the logical state of the object or other objects manipulated before the throw. In the most strict meaning of exception-safe a method should either succeed or being a no-op: in other words the logical state of the object called (and other involved objects) should be the same if an exception is thrown: no difference should be visible through the public interface of all involved classes. ... (1) For an extensive description read the article "Exception Handling: A False Sense of Security" by Tom Cargill available online or the interesting collection of problems/solutions that that article generated on USENET available on the book "Exceptional C++" by Herb Sutter ISBN=0-201-61562-2.
