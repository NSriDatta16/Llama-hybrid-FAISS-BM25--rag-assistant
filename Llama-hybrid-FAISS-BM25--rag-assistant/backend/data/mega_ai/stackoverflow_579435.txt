[site]: stackoverflow
[post_id]: 579435
[parent_id]: 579421
[tags]: 
From this article . Since the OP was a bit lazy in asking his question (although some people disagree, see comments), I'll be lazy as well and simply paste the entire relevant part here, probably breaking some copyright laws. An object is a region of storage that can be examined and stored into. An lvalue is an expression that refers to such an object. An lvalue does not necessarily permit modification of the object it designates. For example, a const object is an lvalue that cannot be modified. The term modifiable lvalue is used to emphasize that the lvalue allows the designated object to be changed as well as examined. The following object types are lvalues, but not modifiable lvalues: An array type An incomplete type A const-qualified type An object is a structure or union type and one of its members has a const-qualified type Because these lvalues are not modifiable, they cannot appear on the left side of an assignment statement. In C++, a function call that returns a reference is an lvalue. Otherwise, a function call is an rvalue expression. In C++, every expression produces an lvalue, an rvalue, or no value. Certain operators require lvalues for some of their operands. The table below lists these operators and additional constraints on their usage. Operator Requirement & (unary) Operand must be an lvalue. ++ -- Operand must be an lvalue. This applies to both prefix and postfix forms. = += -= *= %= >= &= ^= |= Left operand must be an lvalue. For example, all assignment operators evaluate their right operand and assign that value to their left operand. The left operand must be a modifiable lvalue or a reference to a modifiable object. The address operator (&) requires an lvalue as an operand while the increment (++) and the decrement (--) operators require a modifiable lvalue as an operand.
