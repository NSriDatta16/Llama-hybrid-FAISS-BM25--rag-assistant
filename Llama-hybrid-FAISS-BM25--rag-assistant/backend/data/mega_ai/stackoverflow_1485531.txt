[site]: stackoverflow
[post_id]: 1485531
[parent_id]: 1485215
[tags]: 
If you truly want to "grep" the formatted output (display strings) then go with Mike's approach. There are definitely times where this comes in handy. However if you want to try embracing PowerShell's object pipeline nature, then try this. First, check out the properties on the objects flowing down the pipeline: PS> alias | Get-Member TypeName: System.Management.Automation.AliasInfo Name MemberType Definition ---- ---------- ---------- Equals Method bool Equals(System.Object obj) GetHashCode Method int GetHashCode() GetType Method type GetType() ToString Method string ToString() *Definition* Property System.String Definition {get;} Note the Definition property which is a header you see when you display the output of Get-Alias (alias) e.g.: PS> alias CommandType Name *Definition* ----------- ---- ---------- Alias % ForEach-Object Usually the header title matches the property name but not always. That is where using Get-Member comes in handy. It shows you what you need to "script" against. Now if what you want to "grep" is the Definition property contents then consider this. Rather than just grepping that one property's value, you can instead filter each AliasInfo object in the pipepline by the contents of this property and you can use a regex to do it e.g.: PS> alias | Where-Object {$_.Definition -match 'alias'} CommandType Name Definition ----------- ---- ---------- Alias epal Export-Alias Alias gal Get-Alias Alias ipal Import-Alias Alias nal New-Alias Alias sal Set-Alias In this example I use the Where-Object cmdlet to filter objects based on some arbitrary script. In this case, I filter by the Defintion property matched against the regex 'alias'. Only those objects that return true for that filter are allowed to propagate down the pipeline and get formatted for display on the host. BTW if you're typing this, then you can use one of two aliases for Where-Object - 'Where' or '?'. For example: PS> gal | ?{$_.Definition -match '-Item*'}
