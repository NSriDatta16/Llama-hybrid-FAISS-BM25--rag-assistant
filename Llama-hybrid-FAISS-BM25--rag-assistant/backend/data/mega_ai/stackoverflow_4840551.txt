[site]: stackoverflow
[post_id]: 4840551
[parent_id]: 1113611
[tags]: 
Ruby gets inheritance right with Single Inheritance Did I mention Ruby has an EPIC community of developers. Ninja theme inspired by Object Oriented Ruby: Classes, Mixins and Jedi . Ruby gets inheritance right with Single Inheritance! Needing to use multiple inheritance to express domain relationships is a symptom of an improperly designed system. The confusion multiple inheritance creates isn't worth the added functionality. Say you have a method called kick: def kick puts "kick executed." end What if kick is defined in both class Ninjutsu and class Shaolin ? Multiple Inheritance fails here and that's why Python fails: class Mortal In Ruby if you need a Ninja, you create an instance of the Ninja class. If you need a Shaolin master, you create an instance of the Shaolin class. ninja = Ninjutsu.new ninja.kick or master = Shaolin.new master.kick Ruby gets inheritance right with Mixins There might be the off chance that both a Ninja and a Shaolin master share the same kick technique. Read that again - both share the same behavior - nothing else! Python would encourage you to roll a whole new class. Not with Ruby! In Ruby you simply use a Mixin: module Katas def kick puts "Temporal Whip Kick." end end and simply Mixin the Katas module into your Ruby Class: require 'Katas' class Moral Then the behavior gets shared - which is what you were really going for. Not an entire class. That's the biggest difference between Ruby and Python - Ruby gets inheritance right!
