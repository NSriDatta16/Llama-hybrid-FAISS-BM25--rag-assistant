[site]: stackoverflow
[post_id]: 5017605
[parent_id]: 4356968
[tags]: 
The hierarchy at the top of your question shows navigation controllers, but then you described dragging navigation bars to your views in interface builder. I think you're confusing those two things. You're adding a navigation bar to your existing view, but the navigation bar is just a UIView subclass. Adding it to your view doesn't create a navigation controller (a UIViewController subclass) as well, so this is why you're getting nil for your self.navigationController property and why nothing happens when you send the push message to that property. First, you should read up on the MVC (model, view, controller) design pattern if you haven't already, because the distinction between a view and a controller is what you need to understand here. UINavigationControllers don't directly display much content. All they do is manage a stack of other UIViewControllers. The UINavigationBar is the only view that a UIViewController displays directly. When you tell the navigation controller to push a view controller onto the stack, the navigation controller changes the navigation bar appropriately and animates the new view controller's view onscreen. The UINavigationBar is just a dumb UIView that gets managed by the navigation controller. It doesn't itself contain any of the functionality for managing the view controller stack (which should be an obvious assumption for the MVC approach, hence my suggestion above). Somewhere, either in interface builder or your code (I prefer the latter), you need to create a UINavigationController. Actually, you need to create one for each of the tabs in your tab bar. Set your UITabBarController's viewControllers property to an array of these navigationcontrollers. Then, each of those navigation controllers needs to be given a view controller to display as their first item. You do this by setting the rootViewController property of the navigation controller to the view controller that you want to display at the top of the navigation controller's stack. Do you follow this? I don't feel like I'm doing a very good job explaining it. I hope this helps. If not, say so and I'll try to do better. edit Just FYI, there are times when you might want to use a UINavigationBar without the navigation controller. That would be if you're implementing your own system for keeping track of the view controllers and animating them on and off screen. Same goes for UITabBar, another view that shouldn't be confused with the view controller with a similar name.
