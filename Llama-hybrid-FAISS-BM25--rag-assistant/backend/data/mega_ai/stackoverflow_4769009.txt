[site]: stackoverflow
[post_id]: 4769009
[parent_id]: 4768956
[tags]: 
There's not much to understand about it. operator std::map () overrides the class' conversion operator (which takes no parameters) to provide an object instance of type std::map . std::map is a STL standard class for associative key->value storage. In your case it maps from keys of type T to values of type U . T and U have been undefined so far (you wrote template class , but where are the template parameters?) The conversion operator allows to use the class instance in place of the type the operator provides conversion for, like this. class foo { operator char const *() { return "foo instance as char const *"; } }; // ... void bar(foo &f) { // here the class instance is used as if it were a char const * cout
