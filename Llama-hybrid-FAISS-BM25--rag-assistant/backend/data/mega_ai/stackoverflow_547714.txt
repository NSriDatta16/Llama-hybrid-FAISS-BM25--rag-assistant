[site]: stackoverflow
[post_id]: 547714
[parent_id]: 533631
[tags]: 
A mixin is a special kind of multiple inheritance. There are two main situations where mixins are used: You want to provide a lot of optional features for a class. You want to use one particular feature in a lot of different classes. For an example of number one, consider werkzeug's request and response system . I can make a plain old request object by saying: from werkzeug import BaseRequest class Request(BaseRequest): pass If I want to add accept header support, I would make that from werkzeug import BaseRequest, AcceptMixin class Request(AcceptMixin, BaseRequest): pass If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this: from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin class Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest): pass The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own. In more traditional multiple inheritance, the AuthenticationMixin (for example) would probably be something more like Authenticator . That is, the class would probably be designed to stand on its own.
