[site]: stackoverflow
[post_id]: 1857667
[parent_id]: 1857484
[tags]: 
It's just syntax sugar. The compiler will expand the given syntactic constructs into equivalent C++ expressions that reference the standard types / symbol names directly. This isn't the only strong coupling that modern C++ compilers have between their language and the "outside world". For example, extern "C" is a bit of a language hack to accommodate C's linking model. Language-oriented ways of declaring thread-local storage implicitly depend on lots of RTL hackery to work. Or look at C. How do you access arguments passed via ... ? You need to rely on the standard library; but that uses magic that has a very hard dependency on how exactly the C compiler lays out stack frames. UPDATE: If anything, the approach C++ has taken here is more in the spirit of C++ than the alternative - which would be to add an intrinsic collection or range type, baked in to the language. Instead, it's being done via a vendor-defined range type. I really don't see it as much different to variadic arguments, which are similarly useless without the vendor-defined accessor macros.
