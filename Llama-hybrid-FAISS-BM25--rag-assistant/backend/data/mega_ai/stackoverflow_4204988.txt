[site]: stackoverflow
[post_id]: 4204988
[parent_id]: 4203142
[tags]: 
As part of a discussion a while ago on gene matching, I wrote this pyparsing example , implementing a pyparsing class CloseMatch . Normally pyparsing expressions return a structure containing matched strings and any named results, but CloseMatch returns a 2-tuple containing the matching string and a list of mismatch locations within the matched string. Here is how CloseMatch would be used: searchseq = CloseMatch("TTAAATCTAGAAGAT", 3) for g in genedata: print "%s (%d)" % (g.id, g.genelen) print "-"*24 for t,startLoc,endLoc in searchseq.scanString(g.gene): matched, mismatches = t[0] print "MATCH:", searchseq.sequence print "FOUND:", matched if mismatches: print " ", ''.join(' ' if i not in mismatches else '*' for i,c in enumerate(searchseq.sequence)) else: print " " print "at location", startLoc Here is a sample output of a partial match: organism=Toxoplasma_gondii_RH (258) ------------------------ MATCH: TTAAATCTAGAAGAT FOUND: TTAAATTTAGGAGCT * * * at location 195 Note that this class does not find overlapping matches. That can still be accomplished, but with a slightly different approach with scanString (which I will include in the next pyparsing release).
