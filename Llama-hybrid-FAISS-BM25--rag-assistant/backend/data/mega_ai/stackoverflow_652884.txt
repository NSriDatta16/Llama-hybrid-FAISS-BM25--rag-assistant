[site]: stackoverflow
[post_id]: 652884
[parent_id]: 652819
[tags]: 
What you are describing (named anonymous types) are basically "tuple types". I think they would be a nice addition to C#. If I were designing such a feature for C#, I would expose it using syntax like this: tuple so that you could do: public tuple GetStuff() { } I would then change the definition of anonymous types, so that: new { x = 2, y = 2} had tuple as it's type, rather than an anonymous type. Getting this to work with the current CLR is a little tricky, because once you can name an anonymous type in public signatures you need to be able to unify them across separately compiled assemblies. It can be accomplished by embedding a "module constructor" inside any assembly that uses a tuple type. See this post for an example. The only downside to that approach is that it doesn't respect the CLR's "lazy" model for type generation. That means that assemblies that use many distinct tuple types might experience slightly slower load types. A better approach would be to add support for tuple types directly to the CLR. But, apart from changing the CLR, I think the module constructor approach is the best way of doing something like this.
