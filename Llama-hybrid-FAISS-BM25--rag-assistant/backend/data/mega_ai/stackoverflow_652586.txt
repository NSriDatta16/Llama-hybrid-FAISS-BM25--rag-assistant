[site]: stackoverflow
[post_id]: 652586
[parent_id]: 652530
[tags]: 
When dealing with multi-dimensional data, I believe a two layer neural network is said to give better result. In your case: R[0..1] => (N1)----\ \ G[0..1] => (N2)-----(N4) => Result[0..1] / B[0..1] => (N3)----/ As you can see, the N4 neurone can handle 3 entries. The [0..1] interval is a convention but a good one imo. That way, you can easily code a set of generic neuron classes that can take an arbitrary number of entries (I had template C++ classes with the number of entries as template parameter personally). So you code the logic of your neurons once, then you toy with the structure of the network and/or combinations of functions within your neurons.
