[site]: stackoverflow
[post_id]: 1817118
[parent_id]: 1816993
[tags]: 
My avg function signature should have nothing to do with the division operator's quirks Why is that? If you want to compute the average of a bunch of Integers, you'll have to divide at some point, so you'll have to convert them from Integers to the division-supporting type of your choice. A close look at the Num class ( :i Num in ghci) reveals one problem with the type of avg : Num doesn't have enough methods â€” basically enough to add, multiply, and subtract. There's no guarantee that the number I give to avg can be converted to a Double at all. If you enter an untyped function to compute an average, Haskell responds with the most generic type possible: Prelude List> :type \x -> sum x / genericLength x \x -> sum x / genericLength x :: (Fractional a) => [a] -> a So that's the correct type of avg . You might notice that avg [1,2,3 :: Integer] gives a type error. You can get around that by passing the argument to toRational or fromIntegral first, which use the Real and Integral instances for Integer , respectively. Regarding the expression sum [1,2,3] / len [1,2,3] : It's true that a literal number like 1 has the type of Num a => a , which calls fromInteger on whatever type it turns out to be, but an expression like 1/2 has a more specific type of Fractional a => a , which you can see if you ask for the type of that expression instead of printing it out. Something that might be helpful is :set -Wall in ghci, which turns on lots of warnings whenever a default type is chosen for you, giving a clue that the most generic type might no longer be correct.
