[site]: stackoverflow
[post_id]: 3361740
[parent_id]: 3355408
[tags]: 
I was typing this as a comment to Harima555s answer, but it expanded. I wondered if it makes more sense to start at the other end - give them a feel for how interfaces are useful, before going into how you write one. Presuming they have a good grasp of inheritance, polymorphism and abstract classes. I would probably start with a recap on abstract classes, by asking one of the students to explain them. Next, introduce an example of classes with interfaces to get over the concept of roles / contracts. To simplify things, start with a single superclass. public class Rick extends Person implements SoftwareDeveloper, Plumber public class Zoe extends Person implements SoftwareDeveloper, Chef public class Paul extends Person implements Plumber, Chef public class Lisa extends Person implements Plumber Don't explain it too much, but try and get the student to work through what the syntax might mean - perhaps showing some code that references a Plumber or SoftwareDeveloper. Ask them how they would achieve the same thing using inheritance from Person. They should get stuck quite quickly, or come up with multiple inheritance. To avoid discussing the diamond problem until later, say there are no overlapping methods in the roles. Next I'd try to get over the idea that the same interface can be used on different types of Class. public class Plane extends Vehicle implements Fly, PassengerTransport, Serviceable public class Train extends Vehicle implements PassengerTransport, Serviceable public class Bird extends Animal implements Fly Again, try to get them to consider how they could implement the same thing using a common superclass and overrides. Then illustrate how you would write polymorphic code using the interface rather than class - say a TravelAgent who sells tickets for a PassengerTransport. Dwell on the strength of this - that you can write polymorphic code that works on Classes from different hierarchies. At this point, they should probably be under the illusion that an interface is a pretty much like being able to add another superclass to a class, and will have grasped the advantages of multiple inheritance. So now we have to explain why that complicates things, and interfaces have no default implementation, via understanding the diamond problem. Go back to the first example, get them to work through what happens if SoftwareDeveloper and Plumber both have a 'MakeDrink' method (one makes Cola, the other makes Coffee) and we execute MakeDrink on Rick. Try and nudge someone towards considering the idea that if MakeDrink is kept abstract in both 'superclasses' the problem goes away. At this point, having got the conceptual side, we should be ready to cover the syntax for defining an interface. (I did consider introducing the second reason - the difficulty of writing generic code that could be applied to different class hierarchies, but found that you end up with 'well why can't you inherit an altitude attribute from the interface' or discussing generic programming too early). I think by now we should have covered the concepts via the mickey mouse examples - and you could then go back through explaining the correct technical terminology, and use real-world examples from the Java API. I wouldn't want to confuse people while they are trying to learn Java/Interfaces, but once they've got it, it may be worth pointing out that other OO languages take different approaches to the same problem, from multiple inheritance to duck-typing - and if they are interested they should research them.
