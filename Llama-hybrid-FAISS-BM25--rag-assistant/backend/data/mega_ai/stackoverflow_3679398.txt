[site]: stackoverflow
[post_id]: 3679398
[parent_id]: 3679239
[tags]: 
You should not (I'd almost say you can't) subclass UIButton , as it turns out to be a class cluster, and it would be impractical (read: impossible) to derive from that. So your two options are: 1) Use standard UIButton of custom type, add the elements you want to show (i.e. UILabel ) and hook up actions for touch down and touch up and react accordingly (change the views, trigger actions etc.) 2) Use a custom UIView , implement drawRect: to draw how you like it or use custom views as subviews as in 1). Then use the touchesBegan: , touchesEnded: etc. messages to react accordingly (or UIGestureRecognizer if you can live with 3.2+ compatibility). You might build a factory to build those buttons if they all are very similar, so that your code becomes clean and non-repetive. Edit as per iOS 6: Apple now mentions subclassing in the UIButton docs, so while still not very well defined, it seems quite safe now to do so.
