[site]: stackoverflow
[post_id]: 995193
[parent_id]: 995183
[tags]: 
Note: This is an updated answer. Comments below refer to an old version which messed around with keycodes. jQuery Try it yourself on JSFiddle . There is no native jQuery implementation for this, but you can filter the input values of a text with the following inputFilter plugin (supports Copy+Paste, Drag+Drop, keyboard shortcuts, context menu operations, non-typeable keys, the caret position, different keyboard layouts, validity error message, and all browsers since IE 9 ): // Restricts input for the set of matched elements to the given inputFilter function. (function($) { $.fn.inputFilter = function(callback, errMsg) { return this.on("input keydown keyup mousedown mouseup select contextmenu drop focusout", function(e) { if (callback(this.value)) { // Accepted value if (["keydown","mousedown","focusout"].indexOf(e.type) >= 0){ $(this).removeClass("input-error"); this.setCustomValidity(""); } this.oldValue = this.value; this.oldSelectionStart = this.selectionStart; this.oldSelectionEnd = this.selectionEnd; } else if (this.hasOwnProperty("oldValue")) { // Rejected value - restore the previous one $(this).addClass("input-error"); this.setCustomValidity(errMsg); this.reportValidity(); this.value = this.oldValue; this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd); } else { // Rejected value - nothing to restore this.value = ""; } }); }; }(jQuery)); You can now use the inputFilter plugin to install an input filter: $(document).ready(function() { $("#myTextBox").inputFilter(function(value) { return /^\d*$/.test(value); // Allow digits only, using a RegExp },"Only digits allowed"); }); Apply your preferred style to input-error class. Here's a suggestion: .input-error{ outline: 1px solid red; } See the JSFiddle demo for more input filter examples. Also note that you still must do server side validation! Pure JavaScript (without jQuery) jQuery isn't actually needed for this, you can do the same thing with pure JavaScript as well. See this answer . HTML 5 HTML 5 has a native solution with (see the specification ), but note that browser support varies: Most browsers will only validate the input when submitting the form, and not when typing. Most mobile browsers don't support the step , min and max attributes. Chrome (version 71.0.3578.98) still allows the user to enter the characters e and E into the field. Also see this question . Firefox (version 64.0) and Edge (EdgeHTML version 17.17134) still allow the user to enter any text into the field. Try it yourself on w3schools.com .
