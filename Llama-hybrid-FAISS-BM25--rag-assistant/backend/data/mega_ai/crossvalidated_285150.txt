[site]: crossvalidated
[post_id]: 285150
[parent_id]: 283878
[tags]: 
There are some issues. regarding your question A) It might be that one test performs better on average, but is less consistent either varying a lot for different databases, or varying a low for different runs (the latter problem, if it is important, might be solved by using an average of multiple runs). You would have to define the acceptable boundaries or a way to rank the algorithms using these multiple aspects improvements of your current experimental method B) You might be able to generate fake databases, or if not desired possibly take the existing databases and see how performance varies as a function of database size, unbalance, amount of noise, different training sets etcetera. C) You might take a more analytical approach and calculate directly the expected distribution of performance for your stochastic algoritm, or at least make educated guesses. Statistical tests From a hypothesis testing point of view H(A = B) it doesn't make sense, to me , to do calculations. It is already clear (see Image 1) that method A performs uniformly better on databases 1,3,4, and 5 and B is better on database 2 which seems to be the toughest database (so you could say that B does better on the though problems and A better on the simple problems). So there is no database the best in everything, at least based on what you can guess from 5 databases, and it depends on what you want. Possible Bayesian approach There are various schemes to still do 'some' calculation. There might be a lot of literature about that. Something basic that I just created by hand (I am not a professional in this but it may work for you) is a scheme in which you... 1) assume a beta distribution for the chance that you will get a certain performance on the average of ten results. 2) Then calculate the likelihood for the various distributions. (see Images 2 and 3) 3) Then based on that likelihood distribution calculate the expected chance for a certain performance outcome. (using an a-priori expectation for the space of parameters of the beta distribution that is uniform (see Image 4) Since this output in figure 4 looks again much like a beta-distribution, I can imagine that some mathematician might come up with a more direct calculation using some properties of beta-distributions and how they mix or convolve. Images Figure 1) Graphical view of the performance as a function of the rank of the run Figure 2) log-likelihood for beta distribution parameters of performance of model A Figure 3) log-likelihood for beta distribution parameters of performance of model B Figure 4) estimates of distribution of performance notice the tail at the low end for the model A, which relates to the lower performance of model A on the 2nd database Code below is some sloppy r-code to generate the images (note: I did not check the libraries that you need to load) > ########## data method_a = matrix(c(88.92, 44.60, 69.49, 73.37, 85.63, 89.00, 42.72, 64.10, 71.94, 85.92, 88.35, 45.07, 65.13, 72.14, 85.78, 88.92, 43.66, 67.95, 72.76, 85.28, 87.94, 50.23, 67.18, 71.94, 85.92, 87.78, 43.19, 68.72, 73.47, 86.27, 89.08, 45.54, 66.41, 71.33, 85.56, 88.83, 42.72, 66.15, 72.45, 86.77, 88.43, 45.07, 68.97, 72.45, 86.49, 88.59, 40.38, 66.15, 73.67, 86.13),10,byrow=1) method_b = matrix(c(22.73, 53.99, 59.74, 65.20, 79.59, 75.97, 46.95, 58.46, 71.63, 84.42, 76.94, 53.05, 58.97, 68.37, 85.06, 76.54, 42.25, 46.67, 68.67, 85.92, 46.60, 52.11, 52.82, 68.98, 85.14, 76.78, 48.83, 55.90, 68.27, 78.38, 79.37, 47.89, 58.72, 71.12, 85.06, 77.83, 54.93, 50.77, 72.14, 87.06, 83.01, 46.95, 56.15, 67.96, 84.92, 78.24, 49.30, 58.21, 67.96, 81.29),10,byrow=1) ########## plot ordered graphs layout(matrix(1:5,1)) for (i in 1:5) { plot(1:10,method_a[order(method_a[,i]),i],pch=21,col=3,bg=3,ylim=c(0,100),xlab=c("","","test ranking","","")[i],ylab=c("performance","","","","")[i]) points(1:10,method_b[order(method_b[,i]),i],pch=21,col=2,bg=2) lines(1:10,method_b[order(method_b[,i]),i],col=2) lines(1:10,method_a[order(method_a[,i]),i],col=1) title(paste0("database ",i)) } legend(5,24, c("model A", "model B"), col = c(3, 2), pt.bg=c(3,2), lty = c(1, 1), pch = c(21,21)) ########## calculate log likelihood for betadistribution parameters layout(matrix(c(1:2),2)) # initial parameters f_a
