[site]: stackoverflow
[post_id]: 4975923
[parent_id]: 4975881
[tags]: 
Not really, but you can do something like { MyClass m = reallyLongExpressionReturningAnObject(); m.myMethod1(); m.myMethod2(); m.myMethod3(); } I don't know Visual Basic, but a feature in some languages with a similar syntax has one additional advantage apart from saving to type the expression more times: It would automatically close the object at the end of the block, even when some exception occurred in the block. There was some discussion about adding this to Java, and it looks like it is accepted to be in JDK 7. The syntax would be a bit different, though, as an extension of the try statement. You can then write try (BufferedReader in = new BufferedReader(new FileReader(...))) { String line; while((line = in.readLine()) != null) { list.add(line); } } ... and the Reader (and all the streams wrapped by it) would be closed automatically after reading (or on an exception). This would work for all objects implementing the (new) java.lang.AutoClosable interface. If an exception is thrown in the block itself, and during cleanup another exception occurs, this other exception is suppressed and appended to the original exception with addSuppressed(...) . You would still have to call the object by (variable) name inside the block, though.
