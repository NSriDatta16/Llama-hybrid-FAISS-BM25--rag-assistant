[site]: stackoverflow
[post_id]: 4705584
[parent_id]: 4705550
[tags]: 
Most modern, desktop-oriented operating systems (including Linux) use virtual memory to prevent a misbehaving program from disrupting other programs. Each process gets its own address space, and if you overflow a buffer or similarly misuse pointers, about the worst that can happen is you crash your process. You shouldn't affect other processes in the system unless you're writing a device driver or running as root (and if you're running as root, you'd have to do something bad to a file another process is reading, etc... you still wouldn't have direct access to another process's memory). In terms of catching errors before you make them, here are some rules to follow that can help you: Always check any newly-received pointers (such as return values of malloc , function arguments, etc.) for null before using them. Turn your compiler's warnings all the way up and pay attention to them. After free ing dynamically allocated memory, set the pointer to null. This should help you catch some dangling pointer or double-free errors. (Of course, if you've copied that pointer and stored it in other places in your code, you could still have these problems unless you're careful.)
