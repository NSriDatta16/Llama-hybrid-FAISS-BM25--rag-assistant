[site]: stackoverflow
[post_id]: 4405502
[parent_id]: 
[tags]: 
Good architecture for drawing shapes

For my software engineering object-oriented design class, we are tasked with implementing a simple "Paint" application that can draw simple things like Ellipses, Rectangles, Lines, Free-form curves, and Text. I am really trying to go for the gold here, and come up with a really clean and elegant architecture, because we need to support things like printing, saving, and exporting to an image, and I want to be able to do so with minimal effort. So far, I have three "tiers" of classes: Shape classes: Ellipse , Rectangle , Line , Textbox and Freeform , all inheriting from my custom Shape class Style classes, each of which implements GraphicsModifier , which allows the class to change the Graphics2D object StrokeStyle describes how the shape's stroke should be drawn, with Stroke and Paint objects FillStyle describes the fill , with a Paint object TextStyle is basically a wrapper for AWT's font classes, allowing easy modification of font sizes, styles, and faces. Drawing classes Right now, I am stuck on how my drawing classes should be implemented. My initial thoughts were to have something like class DrawingObject { StrokeStyle stroke; FillStyle fill; TextStyle text; Shape shape; void draw(Graphics2D g) { //???? } } The issue is that, if shape is a Freeform , I need to apply only stroke and loop through each point in the curve and draw it separately. If shape is a Rectangle , Line , or Ellipse , I need to apply only stroke and fill , and use g.draw(Shape) . If shape is a Textbox , I need to apply all three stroke , fill , and text , and use g.drawString() . It occurred to me that this might be a good place to apply a Strategy pattern, switched on the subclass of shape : if (shape instanceof Freeform) { strategy = new FreeformDrawer(shape); } else if (shape instanceof Rectangle || ... ) { strategy = new NormalDrawer(shape); } else if (shape instanceof Textbox) { strategy = new TextboxDrawer(shape); } strategy.draw(g); (I guess I could use a little reflection magic to switch on the class name too, but that's beside the point) But somehow this feels a little dirty. How would you tackle this problem? Am I going about this wrong? Is Strategy a good idea here? If it matters, I'm using Java and Swing to implement this, but in theory it should be applicable to any OO language/framework. tl;dr: Given a bunch of objects to be drawn in different ways, and styles that get applied to them in differing capacities, how would you draw them, using good object-oriented design?
