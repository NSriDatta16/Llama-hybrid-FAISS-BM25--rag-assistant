[site]: stackoverflow
[post_id]: 1360421
[parent_id]: 1360357
[tags]: 
Do you also believe that TDD actually helps to GTD? My biggest concern was simply not being able to test code. It was too complex. Our core libraries weren't built around an easily testable interface. So we wrote tests for whatever we could. In the end we ended up refactoring our core libraries to make life easier. Besides that, it's a change of a mindset, and i would definitely consider allocating more time on your first TDD project just to kind of flush out some of the problems you may have along the way. What do I need to know about TDD? TDD is not a substitute for a methodology. It is a beneficial addition or at least it's supposed to be. If done right, TDD greatly improves software design. It also acts as your internal documentation. If you want somebody to look at your API and understand how it works they can simply look at your well named an formed tests. What about alternatives to TDD? Like i said, i wouldn't consider this a substitute for a methodology. There is an alternative and that is not to use it :) What would be the best methodology to organize / develop a TDD web app? We have been fairly successful with scrum/agile, if that's what you're asking. What libraries should I use (if any) to make my life easier? My PHP knowledge has expired 5 years ago, and i'll let somebody else answer this. Either way, just my 2 cents. If you feel like reading here is a good overview: http://www.agiledata.org/essays/tdd.html
