[site]: stackoverflow
[post_id]: 1145002
[parent_id]: 1144897
[tags]: 
D on't cast the VARBINARY(MAX) message_body to XML in the RECEIVE statement itself . Its a bad practice because it can trick Service Broker into believing the RECEIVE never occurred if an XML validation exception occurs during the CAST. See the link for details. I recommend you leave the column as VARBINARY(MAX) (ie. RECEIVE ..., message_body FROM ...) in the projection list and in your C# client consume the column as a SqlBytes, not as a byte[]. You can then leverage the SqlBytes.Stream to construct an XmlReader on top of this stream. Or you can read directly into an XmlDocument. Don't use strongly typed DataTables with RECEIVE, it does not match the table semantics expected by the Visual Studio builders and you'll cause yourself needless pain. Use a SqlDataReader. Update Don't build the sent XML manually from string patches. Use the SQL Server itself to build the XML, via the FOR XML clause (usually using PATH), and assign the result to an XML variable which you SEND: declare @machine_name sysname , @collection_name sysname , @action sysname; select @machine_name = 'Ice Cream' , @collection_name = 'Baseball Cards' , @action = 'open'; declare @x xml; select @x = ( select @machine_name as MachineName , @collection_name as CollectionName , @action as Action , getdate() as EntryDateTime for xml path('SccmAction'), type); send on conversation @h message type [MyMessageType] (@x); You don't have to worry about XML date formats, UTF encoding or any of that stuff.
