[site]: stackoverflow
[post_id]: 1783456
[parent_id]: 1783317
[tags]: 
I'll post a fragment of a large project of mine in the hope that it will be useful to you. I am not a professional so you may find things that are silly or badly done. The framework I'm using is Prototype. Lots of code is missing, I hope you can understand the structure though. CORE.ELEMENT.BaseInterface is a mixin. Let me know if you have questions. function getRandomNumber() { return 4; // Chosen by fair dice roll. Guaranteed to be random. Thanks to xkcd.com for this function. } /* ------------------------------- Core ------------------------------- */ var CORE = function () { var mix = function () { /* Merge the properties of all the objects given as arguments into the first object, making sure only the first object is modified. Of all the properties with the same name belonging to different objects, the one belonging to the rightmost object wins; that is, precedence goes right to left. */ var args = $A(arguments); if (!args[0]) { args[0] = {}; // probably got an empty prototype or something. } for (var l = args.length, i = 1; i = this.max) { notes.last().remove(); } this.elm.insert({top: ' ' + msg + ' '}); if (!this.elm.visible()) { this.elm.setStyle('opacity: 0; display: block;'); this.elm.morph('opacity: 1;', { duration: 1 }); } var newNote = this.elm.down('div'); newNote.setStyle('opacity: 0; display: block;'); newNote.morph('opacity: 1;', {duration: 1}); this.removeNotification.bind(this).delay(this.timeout, newNote); } }, removeNotification: function (note) { note.remove(); var notes = this.elm.getElementsBySelector('.notification'); if (notes.length === 0) { this.elm.hide(); } } }); return { Notifier: new Notifier() //singleton }; })(); /*global Ajax, INTERFACE, CONFIG, CORE, Template $ */ var CONTENT = function () { var wallpapers = []; wallpapers.toJSON = function () { // needed if I want to send a list of wallpapers back to the server var tmp = []; this.each(function (wp) { if (wp.elm.visible()) { tmp.push(wp.toJSON()); } }); return '[' + tmp.join(', ') + ']'; }; var newWallpapers = []; // just a buffer Wallpaper = function () { CORE.mix(this, { thumbUrl: '', view: '', width: 0, height: 0, source: '' }, arguments[0] || {}); this.aspect = this.width / this.height; switch (this.aspect) { case 1.6: this.aspect = 2; break; case 16 / 9: this.aspect = 2; break; case 5 / 4: this.aspect = 1; break; case 4 / 3: this.aspect = 1; break; default: if (this.width > 2500) { this.aspect = 3; } else { this.aspect = 0; } } this.dimension = this.width ' + this.hr_source + ' ' + this.width + 'x' + this.height + ' ' + this.hr_aspect + ' '; }; CORE.mix(Wallpaper.prototype, CORE.ELEMENT.BaseInterface, { fxParms: null, getElement: function () { this.elm = document.createElement('div'); this.elm.className="wallpaper"; this.elm.innerHTML = this.html; return this.elm; }, postInsert: function () { if (this.thumbHeight) { var x = this.thumbHeight * 200 / this.thumbWidth; this.elm.down('img.thumb').setStyle('margin: ' + ((200 - x) / 2) + 'px 0 0;'); } delete this.html; }, toJSON: function () { return Object.toJSON({ thumbUrl: this.thumbUrl, view: this.view, width: this.width, height: this.height, source: this.hr_source, aspect: this.hr_aspect }); } }); return { wallpapers: wallpapers, // wallpapers being shown newWallpapers: newWallpapers, // incoming wallpapers Wallpaper: Wallpaper // constructor }; }(); That's how I make namespaces at the moment. If I don't return something int he last "return" statement, it either survives thanks to a closure or it gets eaten by the garbage collector. Looks like a mess if you're not used to it, I guess. Well, let me know if you find anything in there that is worth asking about. Just in case it's not evident (it probably isn't); in the return statement at the bottom of a namespace it works like this: If it is capitalized (e.g. Wallpapers: Wallpapers) it's always a constructor If it's a "new ..." statement, it's always a singleton If it's not capitalized (e.g. newWallpapers: newWallpapers) it's either a simple function meant to be called without "new" or a simple object
