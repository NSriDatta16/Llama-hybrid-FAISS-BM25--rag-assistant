[site]: datascience
[post_id]: 18319
[parent_id]: 18262
[tags]: 
OK, let us say you have 24 data points per day, in a year you would have 8700~ data points. As an initial analysis you would likek to classify the data points in 2 classes, 'summer energy', 'winter energy'. Notice I am refering to data points and not time series. For this analysis, on way is not to take a time series view but a collection of datapoints view. Once you do that, it becomes a unsupervised classification problem. You could use K-Mean, where the value of K is 2. You could also use neural network based models like Adaptive Resonance Theory networks. As for feature selection, take all the features that you receive from the sensor. It could additionally help to center and scale the data. In my opinion, if you want to classify the data into 2 classes, timeseries analysis is not immediately required, you could employ the method mentioned above and see how the results are. EDIT 1: As I undestand (and assume), you have 4 sensors placed at 4 points of a single entity, e.g. an office. Each sensor output per hour is one of your dimensions. Hour of the day is also your data dimension. As an example, if you have 4 sensors, let us call them A,B,C,D, then your data point will look like: Datapoint 1:: Vector position 0: value of A sensor, 1.0 Vector position 1: value of B sensor, 1.5 Vector position 2: value of C sensor, 0.5 Vector position 3: value of D sensor, 3.5 Vector position 4: hour of day (24), 14 You will have 720 such data points for one month. You should apply any clustering algorithm on the data points. Few suggested clustering algorithms (there are many more): 1) K-Mean with K value as 2 2) ANN based approach EDIT 2: You could explore the ANN approach, you could make a 3 layer feed-forward network with 4 inputs and 2 outputs. The inputs would be the data point I mantioned above, however, it would be best to normalize the values ( here are some techniques ) between 0 and 1. The output in your case will be 2 neurons, one representing summer and another winter, the input vector would be the datapoint vector and the output a vector of length 2, eg [0,1] for winter ideal valu & [1,0] for summer ideal value. In another approach you could use K- Nearest Neighbour , in this case data normalization may not be strictly (technicaly) required. For ANN library, you could use R/Python/Java, reference to one Java library is here . For KNN, there are many library options, one reference is here
