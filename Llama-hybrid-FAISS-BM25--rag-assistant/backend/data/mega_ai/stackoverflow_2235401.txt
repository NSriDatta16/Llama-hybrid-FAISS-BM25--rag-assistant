[site]: stackoverflow
[post_id]: 2235401
[parent_id]: 2234860
[tags]: 
I was looking for the very same last night and came across the Elisp Cookbook on EmacsWiki . The section on Lists/Sequences contains filtering teqniques and show how this can be done with mapcar and delq . I had to mod the code to use it for my own purposes but here is the original: ;; Emacs Lisp doesn’t come with a ‘filter’ function to keep elements that satisfy ;; a conditional and excise the elements that do not satisfy it. One can use ‘mapcar’ ;; to iterate over a list with a conditional, and then use ‘delq’ to remove the ‘nil’ ;; values. (defun my-filter (condp lst) (delq nil (mapcar (lambda (x) (and (funcall condp x) x)) lst))) ;; Therefore (my-filter 'identity my-list) ;; is equivalent to (delq nil my-list) ;; For example: (let ((num-list '(1 'a 2 "nil" 3 nil 4))) (my-filter 'numberp num-list)) ==> (1 2 3 4) ;; Actually the package cl-seq contains the functions remove-if and remove-if-not. ;; The latter can be used instead of my-filter.
