[site]: stackoverflow
[post_id]: 3910646
[parent_id]: 
[tags]: 
Sorrow, Rage and Despair setting up Azure storage

I'm trying to use Azure storage locally. I have a data source class called ExpenseDataSource: public class ExpenseDataSource { private static CloudStorageAccount storageAccount; private ExpenseTableContext context; static ExpenseDataSource() { //CloudStorageAccount.SetConfigurationSettingPublisher( // (configName, configSettingPublisher) => // { // string connectionString = RoleEnvironment.GetConfigurationSettingValue(configName); // configSettingPublisher(connectionString); // } //); storageAccount = CloudStorageAccount.FromConfigurationSetting("DataConnectionString"); CloudTableClient.CreateTablesFromModel(typeof(ExpenseTableContext), storageAccount.TableEndpoint.AbsoluteUri, storageAccount.Credentials); } public ExpenseDataSource() { context = new ExpenseTableContext(storageAccount.TableEndpoint.AbsoluteUri, storageAccount.Credentials); context.RetryPolicy = RetryPolicies.Retry(3, TimeSpan.FromSeconds(1)); } public IEnumerable Select() { var results = from g in context.Expenses where g.PartitionKey == "Expense" select g; return results; } // ... } (I'm new to Azure, so this class could be sub-optimal in many ways.) When I try to create an object of type ExpenseDataSource , the following exception occurs: System.TypeInitializationException: The type initializer for 'WebRole1.ExpenseDataSource' threw an exception. ---> System.InvalidOperationException: SetConfigurationSettingPublisher needs to be called before FromConfigurationSetting can be used at Microsoft.WindowsAzure.CloudStorageAccount.FromConfigurationSetting(String settingName) at WebRole1.ExpenseDataSource..cctor() in [ ... ] --- End of inner exception stack trace --- at WebRole1.ExpenseDataSource..ctor() at WebRole1.ExpenseService.WebRole1.IExpenseService.GetExpenses() in [ ... ] However, this is odd, because SetConfiguationSettingPublisher has already been called: public class WebRole : RoleEntryPoint { public override bool OnStart() { DiagnosticMonitor.Start("DiagnosticsConnectionString"); // For information on handling configuration changes // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357. RoleEnvironment.Changing += RoleEnvironmentChanging; CloudStorageAccount.SetConfigurationSettingPublisher( (configName, configSettingPublisher) => { string connectionString = RoleEnvironment.GetConfigurationSettingValue(configName); configSettingPublisher(connectionString); } ); return base.OnStart(); } // ... } I am able to hit breakpoints here when I start debugging. What am I doing wrong here? Update : I thought that maybe I'd started the dev fabric and ASP.NET localhost out of order, so I killed them both, launched the dev fabic, then launched the ASP project. Still no luck - the same error occurs. Update 2 : I changed my OnStart() to this, but it still doesn't work: public override bool OnStart() { DiagnosticMonitor.Start("DiagnosticsConnectionString"); // For information on handling configuration changes // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357. RoleEnvironment.Changing += RoleEnvironmentChanging; #region Setup CloudStorageAccount Configuration Setting Publisher // This code sets up a handler to update CloudStorageAccount instances when their corresponding // configuration settings change in the service configuration file. CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) => { // Provide the configSetter with the initial value configSetter(RoleEnvironment.GetConfigurationSettingValue(configName)); RoleEnvironment.Changed += (sender, arg) => { if (arg.Changes.OfType () .Any((change) => (change.ConfigurationSettingName == configName))) { // The corresponding configuration setting has changed, propagate the value if (!configSetter(RoleEnvironment.GetConfigurationSettingValue(configName))) { // In this case, the change to the storage account credentials in the // service configuration is significant enough that the role needs to be // recycled in order to use the latest settings. (for example, the // endpoint has changed) RoleEnvironment.RequestRecycle(); } } }; }); #endregion return base.OnStart(); } Update 3 : I tried putting the "Setup CloudStorageAccount Configuration Setting Publisher" region in the ExpenseDataSource static initializer, and got the following error: System.TypeInitializationException: The type initializer for 'WebRole1.ExpenseDataSource' threw an exception. ---> System.Runtime.InteropServices.SEHException: External component has thrown an exception. at RoleEnvironmentGetConfigurationSettingValueW(UInt16* , UInt16* , UInt32 , UInt32* ) at Microsoft.WindowsAzure.ServiceRuntime.Internal.InteropRoleManager.GetConfigurationSetting(String name, String& ret) at Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment.GetConfigurationSettingValue(String configurationSettingName) at WebRole1.ExpenseDataSource. b__0(String configName, Func`2 configSetter) in C:\Users\ODP\Documents\Visual Studio 2010\Projects\ExpenseCalc\WebRole1\ExpenseDataSource.cs:line 26 at Microsoft.WindowsAzure.CloudStorageAccount.StorageAccountConfigurationSetting..ctor(String configurationSettingName) at Microsoft.WindowsAzure.CloudStorageAccount.FromConfigurationSetting(String settingName) at WebRole1.ExpenseDataSource..cctor() in C:\Users\ODP\Documents\Visual Studio 2010\Projects\ExpenseCalc\WebRole1\ExpenseDataSource.cs:line 47 --- End of inner exception stack trace --- at WebRole1.ExpenseDataSource..ctor() at WebRole1.ExpenseService.WebRole1.IExpenseService.GetExpenses() in C:\Users\ODP\Documents\Visual Studio 2010\Projects\ExpenseCalc\WebRole1\ExpenseService.svc.cs:line 18 Update 3 : Following smarx 's suggestion, I changed the static initializer: static ExpenseDataSource() { //storageAccount = CloudStorageAccount.FromConfigurationSetting("DataConnectionString"); storageAccount = CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue("DataConnectionString")); CloudTableClient.CreateTablesFromModel(typeof(ExpenseTableContext), storageAccount.TableEndpoint.AbsoluteUri, storageAccount.Credentials); } This leads to the following error: System.TypeInitializationException: The type initializer for 'WebRole1.ExpenseDataSource' threw an exception. ---> System.Runtime.InteropServices.SEHException: External component has thrown an exception. at RoleEnvironmentGetConfigurationSettingValueW(UInt16* , UInt16* , UInt32 , UInt32* ) at Microsoft.WindowsAzure.ServiceRuntime.Internal.InteropRoleManager.GetConfigurationSetting(String name, String& ret) at Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment.GetConfigurationSettingValue(String configurationSettingName) at WebRole1.ExpenseDataSource..cctor() in C:\Users\ODP\Documents\Visual Studio 2010\Projects\ExpenseCalc\WebRole1\ExpenseDataSource.cs:line 20 --- End of inner exception stack trace --- at WebRole1.ExpenseDataSource..ctor() at WebRole1.ExpenseService.WebRole1.IExpenseService.GetExpenses() in C:\Users\ODP\Documents\Visual Studio 2010\Projects\ExpenseCalc\WebRole1\ExpenseService.svc.cs:line 18 The error is slightly different from above. Could this be related to the idea that I'm somehow not actually running ASP.NET within the dev fabric? Ugh. I'm starting to miss Google App Engine storage's simple get() and put() interface.
