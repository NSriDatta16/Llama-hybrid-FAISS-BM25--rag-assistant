[site]: crossvalidated
[post_id]: 449556
[parent_id]: 
[tags]: 
Generating Graphs using a Neural Network

I currently have constructed a Graph Neural Network in PyTorch with graph conv layers I have made. With this, I am able to feed in adjacency and feature matrices and successfully perform node classification. Furthermore, I am able to predict (with a slight change to my network) certain features of my nodes. My graphs are currently small, but I believe a well-trained network can learn their structure. My goal is to be able to generate new graphs. I am hoping that this can be an "extension" to my current model - by this I mean the inputs would still be adjacency and feature matrices. I have been looking at "Learning Deep Generative Models of Graphs" by Yujia Li, et al. I am hoping to perform something like this, but probably a much-simplified version. Conceptually, however, I am having trouble making the leap from Graph Network that can classify to a Graph Network that can generate. Can someone please help explain how I can practically implement this, or point me in the direction of some resources that will be able to help me complete my goal? [EDIT] Specifically, after reading Deep GMGs, I am left wondering: Section 4 introduces $h_v$ and $h_G$ - representations of the graph. Is this something that is equivalent to the output of my Graph Conv Layer? Both seem to be a representation of a Graph. Section 4.1 introduces $f$ - modules that will help us generate the graphs. These are all fed with some representation of the graphs. I am unsure how, practically, these will work though. For example, $f_{addnode}$ decided if we should add another node. When making this though, if the input is our graphs, what is the networks targets? There is $f_{init}$ , which initialises the node state. Here, I presume, is where the node label and other features will be decided. Two questions - can we mix continuous and categorical features here? Then, what is the overlap between this and $f_{addnode}$ - both seem to have the ability to predict node type This may be the one I am having the hardest time conceptualising: how does the training procedure work? I am trying to train these $f$ so I can use them to generate the graphs. What is the "targets" of these parts of the network? How does $p(G, \pi)$ contribute? I have a framework that takes my graph and creates a representation of it by passing them through my Graph Conv Layers (before classifying the nodes), so I hope to reuse parts of that to create $h$ . Before setting out the create the $f$ modules I am hoping to get a slightly better understanding of them.
