[site]: stackoverflow
[post_id]: 5638667
[parent_id]: 5634960
[tags]: 
This is one of those places where you need to look at how Magento itself is doing something similar to what you want to do. If you look at the Mage_Adminhtml_Block_System_Config_Form_Field class's _getElementHtml protected function _getElementHtml(Varien_Data_Form_Element_Abstract $element) { return $element->getElementHtml(); } you can see that this method accepts a form element that's already been instantiated (based on what's in system.xml), and then this element renders itself with getElementHtml . That means when Magento needs to render (and, in turn, get the value) it does so in from the element object. Some crude debugging will let us know where getElementHtml can be located protected function _getElementHtml(Varien_Data_Form_Element_Abstract $element) { var_dump(get_class($element)); return $element->getElementHtml(); } Something like Varien_Data_Form_Element_Text will be dumped to the screen. In turn, this class inherits form Varien_Data_Form_Element_Abstract , which contains the following definition public function getElementHtml() { $html = ' getHtmlId().'" name="'.$this->getName() .'" value="'.$this->getEscapedValue().'" '.$this->serialize($this->getHtmlAttributes()).'/>'."\n"; $html.= $this->getAfterElementHtml(); return $html; } So, when Magento wants to get the value for a system config field, it uses the above PHP code to render the input. So, if you want to do the same in your template, I'd try something like this Up in the class, assign a block property with the entire element. This is actually more efficient that plucking values out of the elements, since all PHP needs to store is an object reference. protected function _getElementHtml(Varien_Data_Form_Element_Abstract $element) { $this->setMyElement($element); return $this->_toHtml(); } Then, in the template, copy the code from magento's rendering, replacing the "$this" keyword with your saved element getMyElement(); ?> getHtmlId();?>" name=" getName();?>" value=" getEscapedValue();?>" serialize($_element->getHtmlAttributes());?> /> getAfterElementHtml(); ?> When you're working with Magento, try to think like a Magento developer. Instead of "I need to figure out how to make it do X", think "I need to add this feature to the store in the same way the rest of my teammates have". Then look how the core team did it, and copy their implementation, changing as little as you need to. It does get easier the more you work with the system!
