[site]: stackoverflow
[post_id]: 4290694
[parent_id]: 4290650
[tags]: 
The way memory management works in Objective-C is you gain ownership on an object by alloc/initing, -retaining or -copying it, and you dismiss it when you no longer need it via -release or -autorelease. What you want to do is: 1) Create the data object NSData *imgData = [[NSData alloc] initWithContentsOfURL:[NSURL URLWithString:imageurl]]; You now own the object imgData points to. 2) Add that object to your child dictionary [childDictionary setObject:imgData forKey:@"imgData"]; 3) Dismiss the data object. You don't need it anymore. childDictionary needs it, but that is not your problem. childDictionary, like every other object, is responsible for managing its own memory and ownerships. [imgData release]; Another way you could do that is create an autoreleased version of the data object, and add that to the dictioary. Next you need to insure you're managing childDictionary 's memory, as well as cache 's memory properly. For instance: 1) Create an autoreleased childDictionary NSMutableDictionary *childDictionary = [NSMutableDictionary dictionary]; 2) Add stuff to childDictionary (like we did before) 3) Add childDictionary to the cache [cache setObject:childDictionary forKey:yourKey]; 4) Since childDictionary was created autoreleased, you don't need (and shouldn't) release it now that you don't need it. It will be automatically released by the main autorelease pool at a later time. If you had created your childDictionary using: NSMutableDictionary *childDictionary = [[NSMutableDictionary alloc] init]; which returns an object with a retainCount of 1, then you would have needed to dismiss ownership now: [childDictionary release]; As far as cache goes, you probably want to keep that around for a long time: it is most likely an instance variable of whatever object manages the cache, and it's reset with [cache removeAllObjects] when you hit the memory warning. If you develop on the Mac using garbage collection, all of this is useless. But since you're on the phone, you need to know these simple rules about memory management. My explanation really overlooks a lot of the concepts you should be familiar with, so I strongly encourage you to read the Apple documentation about this .
