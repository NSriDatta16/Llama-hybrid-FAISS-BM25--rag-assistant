[site]: stackoverflow
[post_id]: 3371455
[parent_id]: 3370358
[tags]: 
I think everyone that have answered you is right. But I would like to be clear, there are methodologies that you can use in order to improve your development, because believe it, you can loose MANY time just trying and trying to make some order without success (...experience...). Between software-design methodologies, I'll recommend you: Slow but secure: (specialy if you're new to this) RUP - Rational Unified Process. It's not really for web developing, but using it's principles will make you understand very well the project (every detail) before start programming. http://en.wikipedia.org/wiki/IBM_Rational_Unified_Process http://www-01.ibm.com/software/awdtools/rup/ Faster: (maybe too fast if you're new to this, or not Â¿?) FDD - Feature Driven Development. This is an agile method, usually used for web development, it has a very well structured cycle, you'll have to trust more in your logic in order to build the features right for the first time (but is easy once you've started. You can get some help building the features reading about how RUP do the things), and you'll have to trust in your programming skills a lot more than in RUP. http://www.featuredrivendevelopment.com/ http://en.wikipedia.org/wiki/Feature_Driven_Development Fastest: (only for masters and people near to the TAO ) XP - Extreme Programming. This is a hardcore way to work, it have some control, but it's really recommended for people with experience. Read about it :] you might learn some other important ways to do the things . It would help you to find the right path. http://www.extremeprogramming.org/ http://en.wikipedia.org/wiki/Extreme_programming TAO: http://www.canonical.org/~kragen/tao-of-programming.html There are also frameworks for managing agile development, one is SCRUM, and I love it. http://en.wikipedia.org/wiki/Scrum_(development) We use at work some of the RUP tools (just the basic ones, to make some order), plus a personalised FDD+XP+SCRUM method. Also please start with a good programming-language framework, like CakePHP, DJango, Ruby On Rails, JQuery etc (There are A-LOT), most of the frameworks are based on MVC (Model-Viewer-Controler) which is a very productive architecture that will help you to work with modules and easy expand the size of the project.
