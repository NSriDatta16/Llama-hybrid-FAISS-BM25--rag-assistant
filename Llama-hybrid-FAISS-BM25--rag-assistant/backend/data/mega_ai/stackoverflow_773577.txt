[site]: stackoverflow
[post_id]: 773577
[parent_id]: 771008
[tags]: 
First, I completely agree with the answer that "it doesn't matter". Pick the cleanest solution, and optimize if it becomes a problem. But another way to look at it is that often, the fastest solution is the one that describes your intent most accurately. In this case, QT's foreach says that you'd like to apply some action for each element in the container. A plain for loop say that you'd like a counter i . You want to repeatedly add one to this value i, and as long as it is less than the number of elements in the container, you would like to perform some action. In other words, the plain for loop overspecifies the problem. It adds a lot of requirements that aren't actually part of what you're trying to do. You don't care about the loop counter. But as soon as you write a for loop, it has to be there. On the other hand, the QT people have made no additional promises that may affect performance. They simply guarantee to iterate through the container and apply an action to each. In other words, often the cleanest and most elegant solution is also the fastest.
