[site]: stackoverflow
[post_id]: 3712135
[parent_id]: 3707646
[tags]: 
Ok, first thing, get and read Learning Perl . It is, hands down, the best book to learn Perl with. Next, take a look at Ovid's CGI Course . Third, your code has some major problems, and you'll need to walk before you run. I've tidied and commented the heck out of your code. #!C:\perl\bin\perl.exe # Windows perl ignores the shebang, except to check for flags and # arguments to start the Perl interpreter with. # Your webserver might use it though # You forgot to enable strict. You enabled warnings further down in # your code. These two pragmas will help you write bug free code by # catching many errors. # # Keep your module and pragma usage at the top of your # scripts. It aids readability. use strict; use warnings; # Using CGI is a good idea, but you only need to use CGI one time. use CGI qw/:all/; # These are good while learning and debugging. # Do not use them in production code. use CGI::Carp qw(warningsToBrowser fatalsToBrowser); use DBI; my $dbh = DBI->connect( "dbi:SQLite:DEVICE.db", "", "", { RaiseError => 1, AutoCommit => 1 } ); # Don't use indirect object notation. It can lead to subtle bugs. # Use the arrow notation for method invocation instead. my $q = CGI->new(); print $q->header ( ); # The @rows array was doing nothing. # No need to commit when autocommit is on. $dbh->commit(); $dbh->disconnect; # Here we get the html table in a string. my $table = generate_data_table( $dbi ); # And here we print your whole HTML block with the table interpolated # into the the main text. As it was, the HTML page was printing AFTER # the table you generated. # # I put a crappy improper stylesheet in the header of your html page. # Unless you are only doing the most rudimentary HTML work, learn to # use CSS properly. Your time will be repayed hundreds of times over. # For only rudimentary work, there's still a good chance you'll break # even on any time you invest in learning CSS. print Add Users .adduser { background-color:#CDC9C9; } $table END_HTML # Use subroutines to group related actions. sub generate_data_table { my $dbi = shift; my $sql = "SELECT UserId,UserName,CardNo,GroupId,Role,VerifyType FROM UsersList"; my $sth = $dbh->prepare($sql) or die("\n\nPREPARE ERROR:\n\n$DBI::errstr"); $sth->execute or die("\n\nQUERY ERROR:\n\n$DBI::errstr"); # Actually generate the table HTML my $table = ' '; # Header $table .= join '', map " $sth->{NAME}[$_] \n", 0..5; $table .= " \n"; # Normal Rows while (my @row = $sth->fetchrow_array) { $table .= ' ', $table .= join '', map " $row[$_] \n", 0..5; $table .= join "\n", ' EDIT ' ' DELETE ' " \n"; } # Special Row # # Don't use inline CSS, use classes and either group all your css at # the top of your html code, or better yet, load an external stylesheet. # There is no reason to have to escape quotes when working with Perl CGI. # First, in html ' and " are interchangeable, so you can pick a quote # that doesn't need esacaping. # # Finally, if you MUST use both ' and " in a single string, you can use # Perl's quoting operators (q and qq) to select a safe delimiter that will allow you # to avoid escaping. $table .= " " . ' ADD ' . ' ' . " "; $sth->finish(); return $table; } Finally, to handle sorting and paging, you can use a library as others have suggested, or you can modify your SQL query . The keywords you want for grabbing only a range of results are LIMIT and OFFSET , use an ORDER BY clause to sort your result set. Add some parameters to your forms to indicate what sorting methods or range you want.
