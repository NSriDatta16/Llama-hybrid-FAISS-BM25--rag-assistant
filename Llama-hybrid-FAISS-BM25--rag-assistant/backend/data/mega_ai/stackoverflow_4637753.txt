[site]: stackoverflow
[post_id]: 4637753
[parent_id]: 4336228
[tags]: 
The biggest benefit of IronPython is that it brings the worlds of Python and .NET very close together. If you have libraries (assemblies) written in C# you can import those directly into IronPython and use them, like this: import clr clr.AddReferenceToFileAndPath('MyAssembly.dll') import MyNamespace c = MyNamespace.MyClass() c.MyFunction() This is very nice for reusing exisiting .NET code when scripting or even interactive use with the IronPython interpreter. Ordinary CPython requires Python .NET to do the same or similar things. In my experience, Python .NET works most of the time, but not always and IronPython provides a much more polished experience in accessing .NET from Python. IronPython will probably always lag the reference implementation of CPython in terms of standard library support etc., but in general the development is not that far behind, that it would hard to work with coming from a CPython background. Lastly, there are a few substantial differences between CPython and IronPython, to which, one should pay attention. Example - garbage collection (bit me the other day...).
