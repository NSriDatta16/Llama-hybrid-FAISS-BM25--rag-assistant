[site]: stackoverflow
[post_id]: 2291916
[parent_id]: 
[tags]: 
Enough to call Children.Clear on a WPF canvas to get rid of old controls before adding new ones?

I am experimenting with WPF and re-implementing my old maze screensaver. My code basically adds a bunch of images to the canvas, building up a grid, 64x64 pixel images side by side, to cover the entire canvas. Then I "animate" movement in the maze, which is supposed to scroll the maze around, by adjusting a translate transformation, and swapping out the images. However, it seems I have a leak of some sort. Whenever I resize the window, I want to re-build the image components in order to cover the form again, either with more or fewer images. If I drag the lower left corner of the form around in tight circles the rebuild part gets slower and slower. To remove the old controls I simply did this: _Canvas.Children.Clear(); is this enough? Due to the slowdown I assume it isn't. However, since the maze is currently not "discovered" by the "avatar", the maze images are drawn with 25% opacity, and I would assume that if I failed to remove them, I would get many images on top of each other, but it doesn't appear to be that either. I am caching the image sources, the image components are created like this: _Images = new Image[(int)width, (int)height]; for (int x = -1; x Afterwards they're assigned images to show like this: Maze.Square sq = _Maze[_TopLeftMazeX + x, _TopLeftMazeY + y]; Image img = _Images[x + 1, y + 1]; if (sq.Seen) img.Opacity = 1.0; else img.Opacity = 0.25; switch (sq.Type) { case Maze.SquareType.Hallway: img.Source = _Hallway; break; case Maze.SquareType.Wall: img.Source = _Wall; break; case Maze.SquareType.Outside: img.Source = _Outside; break; } What else should I look for? Is there a need to dispose of the image components in any way?
