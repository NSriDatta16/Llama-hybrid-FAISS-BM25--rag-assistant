[site]: stackoverflow
[post_id]: 1419386
[parent_id]: 135262
[tags]: 
I think you may be imagining a problem which doesnt exist here. Most compilers don't actually do anything when they "allocate" automaticic variables on the stack. The stack is allocated before "main()" is executed. When you call function b() from function a() the address of the storage area immediately after the last variable used by a is passed to b(). This becomes the start of b()'s stack if b() then calls function c() then c's stack starts after the last automatic variable defined by b(). Note that the stack memory is already there and allocated, that no initialisation takes place and the only processing involved is passing a stack pointer. The only time this becomes a problem would be where all three functions use large amounts of storage the stack then has to accomadate the memory of all three functions. Try to keep functions which allocate large amounts of storage at the bottom of the call stack i.e. dont call another function from them. Another trick for memory constained systems is to split of the memory hogging parts of a function into separate self contained functions.
