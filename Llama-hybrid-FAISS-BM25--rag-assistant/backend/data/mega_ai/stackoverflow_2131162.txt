[site]: stackoverflow
[post_id]: 2131162
[parent_id]: 2129891
[tags]: 
The duck-typing-based approach is fine. If you want to be able to check if a given class is supposed to run in your framework, you can use Abstract Base Classes (needs Python 2.6). PEP 3119 states: [...] there are many different ways to test whether an object conforms to a particular protocol or not. For example, if asking 'is this object a mutable sequence container?', one can look for a base class of 'list', or one can look for a method named ' getitem '. But note that although these tests may seem obvious, neither of them are correct, as one generates false negatives, and the other false positives.[...] This PEP proposes a particular strategy for organizing these tests known as Abstract Base Classes, or ABC. ABCs are simply Python classes that are added into an object's inheritance tree to signal certain features of that object to an external inspector. Tests are done using isinstance(), and the presence of a particular ABC means that the test has passed. You can implement an ABC and use isinstance or issubclass to test whether classes or instances are written for your framework: from abc import ABCMeta, abstractmethod class Runnable(object): __metaclass__ = ABCMeta @abstractmethod def run(self): raise NotImplementedError class Schedule(Runnable): ... The important point is that it is also possible to register other classes (on which you might have no control, because you did not write them) as runnables, and the isinstance and issubclass methods will reflect that: >>> issubclass(SomeOtherClass, Runnable) False >>> Runnable.register(SomeOtherClass) >>> issubclass(SomeOtherClass, Runnable) True
