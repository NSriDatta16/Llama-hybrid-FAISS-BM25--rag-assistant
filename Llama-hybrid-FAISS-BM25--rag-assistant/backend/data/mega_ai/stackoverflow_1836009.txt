[site]: stackoverflow
[post_id]: 1836009
[parent_id]: 1835903
[tags]: 
First, you need some way of accessing the paragraph. You might want to give it an id attribute, such as "foo": Lorem Ipsum Link Then, you can use document.getElementById to access that element and replace its children as required: var p = document.getElementById('foo'), firstTextNode = p.firstChild, newSpan = document.createElement('span'); // Append "Lorem Ipsum" text to new span: newSpan.appendChild( document.createTextNode(firstTextNode.nodeValue) ); // Replace old text node with new span: p.replaceChild( newSpan, firstTextNode ); To make it more reliable, you might want to call p.normalize() before accessing the first child, to ensure that all text nodes before the anchor are merged as one. Oook, So you want to replace a part of a text node with an element. Here's how I'd do it: function giveMeDOM(html) { var div = document.createElement('div'), frag = document.createDocumentFragment(); div.innerHTML = html; while (div.firstChild) { frag.appendChild( div.firstChild ); } return frag; } var p = document.getElementById('foo'), firstChild = p.firstChild; // Merge adjacent text nodes: p.normalize(); // Get new DOM structure: var newStructure = giveMeDOM( firstChild.nodeValue.replace(/Lorem Ipsum/i, ' $& ') ); // Replace first child with new DOM structure: p.replaceChild( newStructure, firstChild ); Working with nodes at the low level is a bit of a nasty situation to be in; especially without any abstraction to help you out. I've tried to retain a sense of normality by creating a DOM node out of an HTML string produced from the replaced "Lorem Ipsum" phrase. Purists probably don't like this solution, but I find it perfectly suitable. EDIT : Now using a document fragment! Thanks Crescent Fresh !
