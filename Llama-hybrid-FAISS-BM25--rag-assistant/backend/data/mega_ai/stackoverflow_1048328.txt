[site]: stackoverflow
[post_id]: 1048328
[parent_id]: 1048302
[tags]: 
One option I would use is to have a sequence of JLabels. Ones with icon and ones with text only. The other option would be to leverage the mini HTML support of the JLabel: Have The text as the text of the JLabel. This approach works for text formatting but I'm not sure if the image tags work there too. Or you did override the JLabel.paint() to do custom rendering btw? Then I would use the following approach: List textAndImage = new ArrayList () {{ add("This "); add(new ImageIcon("image1.png")); add(" is "); add(new ImageIcon("image2.png")); add(" an "); add(" imaged text sample "); }}; FontMetrics fm = g.getFontMetrics(); int x = 0; for (Object o : textAndImage) { if (o instanceof String) { g.drawString((String)o, x, fm.getHeight()); x += fm.stringWidth((String)o); } else if (o instanceof ImageIcon) { ((ImageIcon)o).paintIcon(null, g, x, 0); x += ((ImageIcon)o).getIconWidth(); } } Of course this is not a fully fledged solution but might give you some hints how to proceed.
