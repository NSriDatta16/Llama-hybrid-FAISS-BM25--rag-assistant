[site]: stackoverflow
[post_id]: 2017534
[parent_id]: 2017489
[tags]: 
I often "drop back" to using printf() , but more often snprintf() for easier formatted output. When programming in C++ I use this wrapper I wrote a while back, called like this (to use your example as above): cout Here's the header ( stdiomm.h ): #pragma once #include #include template std::basic_string format(T const *format, ...); template std::basic_string vformat(T const *format, va_list args); And the source ( stdiomm.cpp ): #include "stdiomm.h" #include #include template <> std::wstring vformat(wchar_t const *format, va_list arguments) { #if defined(_WIN32) int required(_vscwprintf(format, arguments)); assert(required >= 0); boost::scoped_array buffer(new wchar_t[required + 1]); int written(vswprintf(buffer.get(), required + 1, format, arguments)); assert(written == required); return std::wstring(buffer.get(), written); #else # error "No implementation yet" #endif } template <> std::string vformat(char const *format, va_list arguments) { #if defined(_WIN32) int required(_vscprintf(format, arguments)); assert(required >= 0); boost::scoped_array buffer(new char[required + 1]); int written(vsnprintf(buffer.get(), required + 1, format, arguments)); assert(written == required); return std::string(buffer.get(), written); #else char *buffer; int printed = vasprintf(&buffer, format, arguments); assert(printed != -1); std::string retval(buffer, printed); free(buffer); return retval; #endif } template std::basic_string format(T const *format, ...) { va_list ap; va_start(ap, format); std::basic_string retval(vformat(format, ap)); va_end(ap); return retval; } template std::wstring format(wchar_t const *format, ...); template std::string format(char const *format, ...); Update After reading some of the other answers, I might have to make a switch to boost::format() myself!
