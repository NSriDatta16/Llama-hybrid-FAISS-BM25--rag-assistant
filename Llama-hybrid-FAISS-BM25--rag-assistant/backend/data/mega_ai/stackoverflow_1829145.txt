[site]: stackoverflow
[post_id]: 1829145
[parent_id]: 1829119
[tags]: 
D3DXVECTOR3 line; // Line is a D3DXVECTOR3 D3DXVECTOR3 * line; // Line is EITHER a pointer to D3DXVECTOR3 OR an // array of D3DXVECTOR3 D3DXVECTOR3 ** line; // Line is an array of pointers to D3DXVECTOR3 OR // an array of array of D3DXVECTOR3 This is because an array is no specific structure in memory. It is just a bunch of D3DXVECTOR3 in a row. So pointing to the first element, and you get access to all of the others. So, having D3DXVECTOR3** lineCollection; // An array of pointers OR an array of array! new D3DXVECTOR[numPoints]; // A pointer to an array of D3DXVECTOR lineCollection[i] // A pointer to an array You initialize it by: lineCollection[i] = new D3DXVECTOR[numPoints]; // No extra * Yet: try to use the STL (like std::vector) instead of ugly C/Java style arrays. If you can, avoid declaring on the heap (using 'new'), but rather declaring on the stack: D3DXVECTOR a, b, c; // a, b, and c ARE D3DXVECTOR, not pointers std::vector lines; lines.push_back(a); lines.push_back(b); lines.push_back(c); // equivalently: (you can push_back without temporaries) std::vector lines; lines.push_back(D3DXVECTOR()); lines.push_back(D3DXVECTOR()); lines.push_back(D3DXVECTOR()); This will avoid manual memory management; it's more readable. You might not be able to always use that comfort (the way your code is organized). And if someone says something about performances, for now, don't worry. First get something working without segfaults nor memory leaks.
