[site]: stackoverflow
[post_id]: 3468292
[parent_id]: 3467716
[tags]: 
We use C++ in mission-critical real-time applications, although I suppose we have it easy (in theory) because we have to only provide real-time guarantees as good as the hardware our clients use. Thus, sufficient profiling lets us get by without mlockall() or stack pre-loading or any other RT traditions. As for the language itself, I think everyday modern C++ coding practices (ones that discourage C concepts) are entirely sufficient to write robust applications that can be used in RT contexts, given 21st century hardware. Unit tests and QA should be the main focus of effort, instead of in-house libraries that duplicate existing language features.
