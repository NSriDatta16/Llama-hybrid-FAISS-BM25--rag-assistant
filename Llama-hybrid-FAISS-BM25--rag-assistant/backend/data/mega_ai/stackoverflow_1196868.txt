[site]: stackoverflow
[post_id]: 1196868
[parent_id]: 1196731
[tags]: 
As the author of CHDataStructures.framework, hopefully I can add a little insight. :-) My rule of thumb is to use objects unless there is a demonstrable reason to use structs. Since I'm implementing low-level data structures, I opted to use a struct instead of an object, primarily for performance reasons. Not only do objects require a little more memory per instance, but there is also some overhead for calling methods. This is mitigated if the object only has instance variables declared as @public, but you still have to alloc/init, and Objective-C object variables are zero-filled, whereas structs are not unless you use calloc() . One advantage that Objective-C objects have over structs is automatic integration with garbage collection (10.5+), whereas raw C memory has to jump through a few hoops to get the same benefit. I agree with you that memory management with objects is more familiar (and obvious) to Cocoa developers. That's why I use classes as the interface, and structs for the storage. Note: The anonymous union and struct in your second code example are extraneous for this particular situation. I use them only to make it possible to write more streamlined yet readable binary search tree algorithms. (Details at http://dysart.cs.byu.edu/CHDataStructures/struct_c_h_binary_tree_node.html ) I commented them out to hopefully avoid confusing casual readers, but they remain for future reference.
