[site]: stackoverflow
[post_id]: 4839917
[parent_id]: 
[tags]: 
Default comments and meta-information in Java classes/interfaces

In some codebases I saw comments that can be described as default comments . These comments you normally will find in every file of the project and, I believe, in most cases they are automatically generated with the help of IDE. Meta-information is a little bit different. It's actually part of the code. I think I'd better show this on example. This is our test subject (taken from real life and simplified): public class UserServiceImpl implements IUserService { //////////////////////////////////////////////////////////////////////// // Constants //////////////////////////////////////////////////////////////////////// /** Logger for this class */ @SuppressWarnings("unused") private static final Log LOG = LogFactory.getLog(UserServiceImpl.class); //////////////////////////////////////////////////////////////////////// // Attributes //////////////////////////////////////////////////////////////////////// /** User DAO */ private IUserDao userDao; //////////////////////////////////////////////////////////////////////// // Constructors //////////////////////////////////////////////////////////////////////// /** * Default constructor */ public UserServiceImpl() { } public UserServiceImpl(final IUserDao userDao) { this.userDao = userDao; } //////////////////////////////////////////////////////////////////////// // Getter and Setter methods //////////////////////////////////////////////////////////////////////// /** * @return value of {@link #userDao} field * */ public IUserDao getUserDao() { return userDao; } /** * Sets {@link #userDao} field * * @param userDao User DAO */ public void setUserDao(final IUserDao userDao) { this.userDao = userDao; } //////////////////////////////////////////////////////////////////////// // Implemented/Overridden methods //////////////////////////////////////////////////////////////////////// /** * * @see IUserService#saveUser(User) */ @Override public void saveUser(final User user) { fillMissingFields(user); userDao.saveUser(user); } /** * * @see IUserService#getUserById(Integer) */ @Override public List getUserById(final Integer id) { return userDao.getUserById(id); } /** * * @see IUserService#getUserList(IEnvironmentContext) */ @Override public List getUserList(final @SuppressWarnings("unused") IEnvironmentContext context) { return userDao.getUserList(); } //////////////////////////////////////////////////////////////////////// // Helper methods //////////////////////////////////////////////////////////////////////// private void fillMissingFields(final User user) { user.setLastUpdated(new Date()); } //////////////////////////////////////////////////////////////////////// // toString() method //////////////////////////////////////////////////////////////////////// /** * * @see Object#toString() */ @Override public String toString() { return "UserServiceImpl {...}"; } } This class contains a lot of concepts I want to discuss, so I split them in these types: 1) Section default comments - for each section of the class there is one 3-line comment (like constants, constructors, ...). Please note, that I'm not talking about logical sections of class (like // user managenet or // Account Balance calculation ). 2) Getter and Setter default comments - comments for set/get methods that just tell that correspondent method sets of returns field value. 3) Meta comments - comments that describe meaning of some java language constructs. Examples from above: @see IUserService#saveUser(User) - tells that method is overridden/implemented and location of parent method, Default constructor - tells that it's default constructor of Java class, Logger for this class . 4) @SuppressWarnings("unused") - in my concrete example it used to say, that LOG is not used in the class ( LOG is really never used in the class, but IDE will not show warning) and context argument is not used, but it's OK (assuming that context is some general information and it's generally completely normal if implementations do not use it). 5) I prefix for interfaces - prefix tells, that this is interface. 6) final for method arguments - prevents code in method body to change it's value I would like to know your opinion about default comments and meta-information in classes. In order to make it more straightforward I propose you to vote for each type with grades from +5 down to -5: +5 - I think it's must and it's should be done by every Java developer and should even be enforced with tools (like checkstyle) ... 0 - I don't care. If somebody will tell me to do it, I will - these comments will not bring any positive or negative value. ... -5 - I strongly discourage everybody to make this. Such default comments/meta-information should be deleted from class as soon as you see it. I also strongly believe, that it's very important always to explain you option and answer question: why do you think so? (I personally try always to follow this rule). So I also encourage you to explain points you have given for particular type. I will accept answer with most SO up-votes in about one week. PS.: Some of you may think that answer is self-evident, but believe me, each of us is very different and something that is self-evident for you can be surprise for me and vice versa. So I encourage you to participate this discussion anyway. (I will appreciate this)
