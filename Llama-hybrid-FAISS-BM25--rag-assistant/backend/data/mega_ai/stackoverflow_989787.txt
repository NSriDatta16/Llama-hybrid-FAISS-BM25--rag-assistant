[site]: stackoverflow
[post_id]: 989787
[parent_id]: 989383
[tags]: 
If you don't need the pointer values for some other reason beside keeping track of allocated memory, why not get rid of the hash table altogether and just store a magic number along with the memory allocated as in the example below. The magic number being present alongside the memory allocated indicates that it is still "alive". When freeing the memory you clear the stored magic number before freeing the memory. #pragma pack(1) struct sMemHdl { int magic; byte firstByte; }; #pragma pack() #define MAGIC 0xDEADDEAD #define MAGIC_SIZE sizeof(((struct sMemHdl *)0)->magic) void *get_memory( size_t request ) { struct sMemHdl *pMemHdl = (struct sMemHdl *)malloc(MAGIC_SIZE + request); pMemHdl->magic = MAGIC; return (void *)&pMemHdl->firstByte; } void free_memory ( void *mem ) { if ( isgood_memory(mem) != 0 ) { struct sMemHdl *pMemHdl = (struct sMemHdl *)((byte *)mem - MAGIC_SIZE); pMemHdl->magic = 0; free(pMemHdl); } } int isgood_memory ( void *Mem ) { struct sMemHdl *pMemHdl = (struct sMemHdl *)((byte *)Mem - MAGIC_SIZE); if ( pMemHdl->magic == MAGIC ) { return 1; /* mem is good */ } else { return 0; /* mem already freed */ } } This may be a bit hackish, but I guess I'm in a hackish mood...
