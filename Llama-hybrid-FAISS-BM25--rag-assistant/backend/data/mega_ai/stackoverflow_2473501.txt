[site]: stackoverflow
[post_id]: 2473501
[parent_id]: 2473087
[tags]: 
It sounds like you have one method which accepts a restricted string. Is a new class really necessary? void needs_restricted_string( std::string const &str ) { if ( ! is_restricted_string( str ) ) throw std::runtime_error( "bad str" ); â€¦ } Otherwise, the only thing you want to capture is whether a string satisfies the restrictions. The only difference I see between is_restricted_string() and a compile-time class is performance, in the case you have a storage structure dedicated to checked strings. Don't prematurely optimize. That said, it would also be an error to put too much functionality into your new class or to use it like a string. class restricted_string { std::string storage; public: // constructor may implement move or swap() semantics for performance // it throws if string is no good // not explicit, may be called for implicit conversion restricted_string( std::string const & ) throw runtime_error; // getter should perhaps be private with needs_restricted as friend std::string const &str() const { return storage; } }; // and no more functionality than that! void needs_restricted_string( restricted_string const &str ) { std::string const &known_restricted = str.str(); } std::string mystr( "hello" ); needs_restricted_string( mystr );
