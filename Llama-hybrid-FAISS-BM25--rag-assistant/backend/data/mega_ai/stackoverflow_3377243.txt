[site]: stackoverflow
[post_id]: 3377243
[parent_id]: 3377137
[tags]: 
Edit: Casting is the only approach if you want to shut up the compiler per instance in a portable way. It is fine as long as you know what you're doing, e.g. that you can ensure the result of atoi will never be negative. In GCC, you can turn off all sign conversion warnings with the -Wno-sign-conversion flag. There is also -Wno-sign-compare (for stuff like 2u > 1 ) but it won't be relevant unless you use -Wextra . You could also use the diagnostic pragmas like #pragma GCC diagnostic ignored "-Wsign-conversion" In MSVC, there are several warnings relevant to signed/unsigned mismatch, e.g.: Level 4: C4389 , C4245 , C4365 Level 3: C4018 ( 2u > 1 ) Level 2: C4267 ( size_t â†’ int ) To disable a warning in MSVC, you could add a #pragma warning e.g. #pragma warning (disable : 4267) or add a /wd4267 flag in the compiler options. Perhaps you should use strtoul instead of atoi . size_t a = strtoul(val, NULL, 0); (There is no warning only if size_t is as large as unsigned long . On most platforms, this is true, but it is not guaranteed.) The advantage is you could perform error checking with this function, e.g. #include #include int main () { char val[256]; fgets(val, 256, stdin); char* endptr; size_t a = strtoul(val, &endptr, 0); if (val == endptr) { printf("Not a number\n"); } else { printf("The value is %zu\n", a); } return 0; }
