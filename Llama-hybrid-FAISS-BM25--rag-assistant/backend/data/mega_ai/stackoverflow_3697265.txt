[site]: stackoverflow
[post_id]: 3697265
[parent_id]: 3696881
[tags]: 
Retrieve Only The Columns You Need The first problem with the query is that SELECT * is returning all columns from all tables joined in the query. That means the values in the JOIN criteria, on both sides of the evaluation, are being returned. It's better to write out the actual columns you need, because all three you listed have an id column--which complicates correct value retrieval unless using ordinal position (not a good practice--change position, data retrieval isn't what it should be). Using table aliases minimizes what you need to use to reference a specific table: SELECT a.article FROM ARTICLES a JOIN RESULTS r ON r.article_id = a.id JOIN ITEMS i ON i.id = r.item_id Indexing Indexing the foreign keys--what you are using to for JOIN criteria, should be the second thing on the list after the primary key for the table. Then you have to periodically run the ANALYZE command because the statistics are... ...not automatically updated as the content of the database changes. If the content of the database changes significantly, or if the database schema changes, then one should consider rerunning the ANALYZE command in order to update the statistics. These statistics are what the optimizer uses for it's query decision, along with the presence of indexes. ORs Are Notoriously Bad for Performance You might try re-writing the query so it doesn't use ORs with a UNION: SELECT a.article FROM ARTICLES a JOIN RESULTS r ON r.article_id = a.id JOIN ITEMS i ON i.id = r.item_id WHERE i.foodtype = 'vegetable' UNION SELECT a.article FROM ARTICLES a JOIN RESULTS r ON r.article_id = a.id JOIN ITEMS i ON i.id = r.item_id WHERE i.food IN ('orange', 'grape') Be aware that UNION is slower than UNION ALL , because UNION removes duplicates. UNION ALL is faster because it doesn't remove duplicates.
