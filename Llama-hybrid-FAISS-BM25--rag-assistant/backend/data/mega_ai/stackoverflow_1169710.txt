[site]: stackoverflow
[post_id]: 1169710
[parent_id]: 
[tags]: 
UUIDs and byte-swapping over network

Is there are a standard accepted way to byte-swap UUIDs for transmission over a network (or file storage)? (I want to send/store the 16 raw bytes rather than convert the UUID to a string representation.) I thought at first I should partition the UUID into 4 32-bit integers and call htonl on each of them, but that didn't smell right. A UUID has internal structure (from RFC 4122): typedef struct { unsigned32 time_low; unsigned16 time_mid; unsigned16 time_hi_and_version; unsigned8 clock_seq_hi_and_reserved; unsigned8 clock_seq_low; byte node[6]; } uuid_t; Would it be correct to do: ... uuid.time_low = htonl( uuid.time_low ); uuid.time_mid = htons( uuid.time_mid ); uuid.time_hi_and_version = htons( uuid.time_high_and_version ); /* other fields are represented as bytes and shouldn't be swapped */ .... before writing, and then the correpsonding ntoh...calls after reading at the other end? Thanks.
