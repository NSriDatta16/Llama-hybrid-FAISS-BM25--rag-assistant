[site]: stackoverflow
[post_id]: 5224786
[parent_id]: 630095
[tags]: 
Mylyn could be a good choice for you. If you need simpler setup or better control of how things happen, you can write your own XML-RPC calls to Bugzilla web-service interface. I have summarized the process on my blog: Chat to Bugzilla from Java using Apache XML-RPC . To sum it up: get the Apache XML-RPC libs get the Apache HTTP Client from commons (older version) Then use following class as a base class (it handles cookies etc.) and override it: /** * @author joshis_tweets */ public class BugzillaAbstractRPCCall { private static XmlRpcClient client = null; // Very simple cookie storage private final static LinkedHashMap cookies = new LinkedHashMap (); private HashMap parameters = new HashMap (); private String command; // path to Bugzilla XML-RPC interface private static final String BZ_PATH = "https://localhost/bugzilla/xmlrpc.cgi"; /** * Creates a new instance of the Bugzilla XML-RPC command executor for a specific command * @param command A remote method associated with this instance of RPC call executor */ public BugzillaAbstractRPCCall(String command) { synchronized (this) { this.command = command; if (client == null) { // assure the initialization is done only once client = new XmlRpcClient(); XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl(); try { config.setServerURL(new URL(BZ_PATH)); } catch (MalformedURLException ex) { Logger.getLogger(BugzillaAbstractRPCCall.class.getName()).log(Level.SEVERE, null, ex); } XmlRpcTransportFactory factory = new XmlRpcTransportFactory() { public XmlRpcTransport getTransport() { return new XmlRpcSunHttpTransport(client) { private URLConnection conn; @Override protected URLConnection newURLConnection(URL pURL) throws IOException { conn = super.newURLConnection(pURL); return conn; } @Override protected void initHttpHeaders(XmlRpcRequest pRequest) throws XmlRpcClientException { super.initHttpHeaders(pRequest); setCookies(conn); } @Override protected void close() throws XmlRpcClientException { getCookies(conn); } private void setCookies(URLConnection pConn) { String cookieString = ""; for (String cookieName : cookies.keySet()) { cookieString += "; " + cookieName + "=" + cookies.get(cookieName); } if (cookieString.length() > 2) { setRequestHeader("Cookie", cookieString.substring(2)); } } private void getCookies(URLConnection pConn) { String headerName = null; for (int i = 1; (headerName = pConn.getHeaderFieldKey(i)) != null; i++) { if (headerName.equals("Set-Cookie")) { String cookie = pConn.getHeaderField(i); cookie = cookie.substring(0, cookie.indexOf(";")); String cookieName = cookie.substring(0, cookie.indexOf("=")); String cookieValue = cookie.substring(cookie.indexOf("=") + 1, cookie.length()); cookies.put(cookieName, cookieValue); } } } }; } }; client.setTransportFactory(factory); client.setConfig(config); } } } /** * Get the parameters of this call, that were set using setParameter method * @return Array with a parameter hashmap */ protected Object[] getParameters() { return new Object[] {parameters}; } /** * Set parameter to a given value * @param name Name of the parameter to be set * @param value A value of the parameter to be set * @return Previous value of the parameter, if it was set already. */ public Object setParameter(String name, Object value) { return this.parameters.put(name, value); } /** * Executes the XML-RPC call to Bugzilla instance and returns a map with result * @return A map with response * @throws XmlRpcException */ public Map execute() throws XmlRpcException { return (Map) client.execute(command, this.getParameters()); } } Override the class by providing custom constructor and by adding methods: public class BugzillaLoginCall extends BugzillaAbstractRPCCall { /** * Create a Bugzilla login call instance and set parameters */ public BugzillaLoginCall(String username, String password) { super("User.login"); setParameter("login", username); setParameter("password", password); } /** * Perform the login action and set the login cookies * @returns True if login is successful, false otherwise. The method sets Bugzilla login cookies. */ public static boolean login(String username, String password) { Map result = null; try { // the result should contain one item with ID of logged in user result = new BugzillaLoginCall(username, password).execute(); } catch (XmlRpcException ex) { Logger.getLogger(BugzillaLoginCall.class.getName()).log(Level.SEVERE, null, ex); } // generally, this is the place to initialize model class from the result map return !(result == null || result.isEmpty()); } }
