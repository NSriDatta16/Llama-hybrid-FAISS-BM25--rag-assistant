[site]: stackoverflow
[post_id]: 5372261
[parent_id]: 5372168
[tags]: 
In principle you can't easily create arrays of a generic type (or type variable). If you have a class object, you can use reflection, or if you have an example array, the methods in the java.util.Arrays class to create a (longer/shorter) copy. But it is not elegant either way. The ArrayList class internally simply uses an Object[] to store its elements, and converts only on get/set/add/toArray. What would your class do better than ArrayList? Edit: I would recommend either simply delegate to an ArraysList, or do the implementation like ArrayList does, using an Object[] internally, and converting on output where necessary. If you really want to have an array of the right type internally, it is possible - but it gets ugly, as I said. The add method is still the easiest case: /** * Appends a value to the end of the array * @param val the value to be appended * @return the resulting array. */ public ArrayPP add(T val) { T[] temp = Arrays.copyOf(t, t.length+1); temp[t.length] = val; t = temp; return this; } When you want to add in the middle or remove, you'll have to combine this with your arraycopy.
