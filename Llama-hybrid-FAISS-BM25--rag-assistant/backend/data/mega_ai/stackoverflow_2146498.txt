[site]: stackoverflow
[post_id]: 2146498
[parent_id]: 2146040
[tags]: 
IMHO, you should be doing functional test coverage that will cover all uses of the module, and then test it in isolation in a unit test: setup do @object = Object.new @object.extend(Greeter) end should "greet person" do @object.stubs(:format).returns("Hello {{NAME}}") assert_equal "Hello World", @object.greet("World") end should "greet person in pirate" do @object.stubs(:format).returns("Avast {{NAME}} lad!") assert_equal "Avast Jim lad!", @object.greet("Jim") end If your unit tests are good, you should be able to just smoke test the functionality in the modules it is mixed into. Orâ€¦ Write a test helper, that asserts the correct behaviour, then use that against each class it's mixed in. Usage would be as follows: setup do @object = FooClass.new end should_act_as_greeter If your unit tests are good, this can be a simple smoke test of the expected behavior, checking the right delegates are called etc.
