[site]: stackoverflow
[post_id]: 580266
[parent_id]: 579981
[tags]: 
You can start by storing something like hash trees . It is only needed to store one such set of hashes for every ROM, and the required storage space is only proportional to (but much lower than) the size of the ROM, assuming constant block size. The chosen block size must give sufficient granularity to ensure accuracy, e.g.: for a minimum size of 128MiB, accuracy constraint of 1% and Tiger-128 hash (similar to what they use to check files transferred via DirectConnect), a block size of 1MiB does fine and you can store all the hashes in 128 * 128 / 8 = 2048 bytes! So doing it for 10,000 ROMs would only require about 20MiB of space. Further, you can choose a less secure, but faster and/or smaller hash. Adding/checking for similarity a new ROM would entail something like: Split the new ROM in blocks and hash each of them. For every ROM already in the database, compare (see below) its hashes with the new ROM's hashes. The comparison function should check for similarity. But it should treat each hash as an indivisible value, i.e. don't bother trying to find a logically significant difference function between two hashes. As long as the block size is low enough and hash collisions are rare enough, accuracy is guaranteed by a simple is-equal comparison. As you see, the problem is reduced to a simpler one performance-wise: checking much smaller data sets for similarity.
