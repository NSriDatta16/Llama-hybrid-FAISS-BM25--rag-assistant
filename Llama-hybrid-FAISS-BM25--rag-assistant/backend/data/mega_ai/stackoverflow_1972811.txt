[site]: stackoverflow
[post_id]: 1972811
[parent_id]: 1972722
[tags]: 
Lua is a major win for storing data. Convenient, fast, and easily convertible to other formats at need. (Convertibility assumes that your data is representable in other formats, which if it is representable in XML, it will be.) What are the drawbacks of using Lua as a data storage language? I'm aware of two drawbacks , the significance of which depends on your application: If you have Lua tables that contain circular references, e.g., t1.next == t2 and t2.prev = t1 , then the process of writing your Lua structures to disk becomes tedious, and the resulting Lua is harder to read than a simple return . (This has never happened to me, and if your data is representable in XML, it will not happen to you.) If you have a lot of data—for example if you are writing an inverted index of the entire Inform 7 manual—then you can run afoul of Lua's limits on the number of distinct constants that can appear in a block. You then have to split things up into multiple blocks or functions, or resort to other solutions. This problem has bitten me, and it's a huge pain in the ass. I would like to write a general solution, but I'm not 100% solid I understand the constraints, and I haven't tackled it yet. If your data has fewer than 100,000 numeric and string literals, you don't have to worry about this problem.
