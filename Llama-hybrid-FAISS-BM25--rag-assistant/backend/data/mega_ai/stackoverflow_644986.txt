[site]: stackoverflow
[post_id]: 644986
[parent_id]: 644941
[tags]: 
I've implemented a DAL layer by basically doing what NHibernate does but manually. What NHibernate does is create a Proxy class that inherits from your Domain object (which should have all its fields marked as virtual). All data access code goes into property overrides, its pretty elegant actually. I simplified this somewhat by having my Repositories fill out the simple properties themselves and only using a proxy for Lazy loading. What I ended up is a set of classes like this: public class Product { public int Id {get; set;} public int CustomerId { get; set;} public virtual Customer Customer { get; set;} } public class ProductLazyLoadProxy { ICustomerRepository _customerRepository; public ProductLazyLoadProxy(ICustomerRepository customerRepository) { _customerRepository = customerRepository; } public override Customer { get { if(base.Customer == null) Customer = _customerRepository.Get(CustomerId); return base.Customer } set { base.Customer = value; } } } public class ProductRepository : IProductRepository { public Product Get(int id) { var dr = GetDataReaderForId(id); return new ProductLazyLoadProxy() { Id = Convert.ToInt(dr["id"]), CustomerId = Convert.ToInt(dr["customer_id"]), } } } But after writing about 20 of these I just gave up and learned NHibernate, with Linq2NHibernate for querying and FluentNHibernate for configuration nowadays the roadblocks are lower than ever.
