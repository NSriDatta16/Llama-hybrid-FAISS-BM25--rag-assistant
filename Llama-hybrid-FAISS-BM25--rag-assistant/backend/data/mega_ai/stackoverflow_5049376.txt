[site]: stackoverflow
[post_id]: 5049376
[parent_id]: 5016276
[tags]: 
Relational Mysql/Postgresql + Partitions should be able to solve the use cases. MongoDb could have been the ideal solution except for 2 reasons. Needs sufficient RAM to ensure that a decent portion of database is in memory. Support for complex queries. As JOINS are not supported, need to duplicate data in multiple places OR JOINS would have to be performed in application code. Performace of complex analytic queries. Data aggregation mongodb vs mysql Had a similar situation and evaluated postgresql vs mongodb. Selected postgresql + partitions(partitioning was done on timestamp) because of the above reasons. If data set is time ordered or if partitioning is possible in some way updates and queries will be fast. For mysql if MYISAM(non-transactional) storage engine is used performance will improve further at the cost of durability. For RDBMS which does not allow turning off transactions, performance can still be improved by adjusting checkpoint interval and few other parameters which ensures are transactions are commited in a relaxed manner. But if the schema can change frequently then RDBMS solutions can be complex.
