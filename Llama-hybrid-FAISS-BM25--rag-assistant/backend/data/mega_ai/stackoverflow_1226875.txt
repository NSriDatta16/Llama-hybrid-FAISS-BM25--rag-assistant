[site]: stackoverflow
[post_id]: 1226875
[parent_id]: 1226438
[tags]: 
You might want to encapsulate your css within a more formal CSS framework. You can create your own custom framework but there are some useful open source css frameworks such as yahoo's YUI and Blue Print CSS http://www.blueprintcss.org/ The nice thing about this approach is that it leverages a lot of effort to fix the cross browser issues around fonts and layout. Depending how far you go you may have to extensively touch the existing markup. Depending on how large your site is I would try to incrementally adjust styles and migrate them over to the formal CSS framework. Long term this will make the CSS more manageable and easily understood by other developers familiar with the concept of the framework. Progressively try to eliminate redundant and unaccounted for styles. I would also create a debug.css file. Take all the old style names and add an identifying style to them. For example: .myoldstyle {border: solid 1px red}; Then you can detect where the old style is being used throughout the site. Each style should be accounted for and ported over to the new system. When a particular style in the old system has been correctly migrated to the new system you can remove (or better comment out) the identifying style from the debug.css file. You can be confident that you have migrated all the styles when the debug.css shows no side affects in the display output. It can be a time consuming process but approaching it systematically can be helpful. Also, you may want to start looking at your site with no css at all. Just get a sense of the logical and semantic markup of code. Having a clean HTML code base helps when debugging style quirks. As for organization of CSS, I like to separate into basic categories: layout, typography, lookandfeel, navigation Keep all color related information in the lookandfeel style sheet. This is where you will spend the most time trying to meet the client's visual tastes and desires. It is handy to keep that is a separate logical style sheet. The other stuff is more functional and standardized. Having this abstraction makes it much easier to isolate the visual effects of styles. And one last tip, check out Firefox firebug plugin or Safari's debbugger. These can show you computed styles (the way styles and elements are ultimately derived as the various styles are applied) and you can tweak specific styles in real time on the fly it you want to explore the effects of a specific style change in a complex CSS system. And most importantly, keep a separate ie.css file around. This should be the last style sheet referenced in your headers. If you need to do any workarounds for IE put them here. And only expose this style sheet to IE through conditional comments. http://www.quirksmode.org/css/condcom.html That is the fastest way to resolve IE 6 problems.
