[site]: stackoverflow
[post_id]: 1528609
[parent_id]: 
[tags]: 
Garbage values from third class object C++

Here is a snippet of the implementation file for the stock source: stock::stock(char const * const symbol, char const * const name, int sharePrice, date priceDate ) : m_sharePrice( sharePrice ) { if ( symbol ) { size_t length = strlen( symbol ) +1; m_symbol = new char[length]; strcpy_s( m_symbol, length, symbol ); } else m_symbol = NULL; if ( name ) { size_t length = strlen( name ) +1; m_name = new char[length]; strcpy_s( m_name, length, name ); } else m_name = NULL; dateObj = &priceDate; } This is just what I do to allocate memory with cstrings. In main the paramaters are passed in like, "symbol, "name", 10, date::JANUARY, 17, 1967. The date is an object where its months are enumaterted. It is this last paramater "date" type is what iim having trouble with. Im having trouble keeping the attributes when moving from one source file to the next. I see that in the function above, "dateObj" has the attributes that I need. But when I go to transfer it in another source file the values are gone... pragma once #include using namespace std; class date { public: typedef enum {INVALID, JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER,DECEMBER} Month; date(Month month, int day, int year); date(const date& date); // copy constructor date(void); // default constructor ~date(void); friend ostream& operator So when I need to add to the hashTable, or visa versa, I end up with garable values. bool hashmap::get(char const * const symbol, stock& s) const { int index = 0; // search for the stock associated with the symbol. while ( index Maybe if i could add something to one of the header files to make this easier. #include "date.h" using namespace std; class stock { public: stock(char const * const symbol, char const * const name, int sharePrice, date priceDate); stock(const stock& s); // copy constructor stock(void); // default constructor char const * const getSymbol(void) const; stock& operator=(const stock& s); stock& operator=(stock const * const s); ~stock(void); // display column headers static void displayHeaders(ostream& out); friend ostream& operator This might be where I can solve the problem of the date attributes not keeping their values. IM just not sure where to do what. #include "date.h" date::date(Month month, int day, int year) { this->month = month; this->day = day; this->year = year; } date::date(const date& date) { } date::date() { day = this->day; year = this->year; month = this->month; } date::~date(void) { } ostream& operator
