[site]: stackoverflow
[post_id]: 2393653
[parent_id]: 2393553
[tags]: 
Based on your tracking/polling function, which pushes float pairs on a stack. This must be done on a regular timing interval. Do a threshold-based search for two equal entries in the list. Now you have two indexes in your stack; the first and the second equal entries. Consider this as a line. Get the absolute difference in indices. Then divide by two and get the coordinates of this point. (Center of the line.) You've got two points: thus you can get the radius of the circle, by getting the distance between the two points divided by two. Divide the number of step 2 by 2, now you've got the quarters. If the line at step 1 is vertical and the first point of the line is at the top: If the first quarter is left of the center-point, the circle was drawn counter-clockwise. If the first quarter is right of the center-point, the circle was drawn clockwise. If the first point of the line is at the bottom, reverse (i.e. ccw => cw and cw => ccw) If the line at step 1 is horizontal and the first point of the list is at the left: If the first quarter is above the center-point, the circle was drawn counter-clockwise. If the first quarter is below of the center-point, the circle was drawn clockwise. If the first point of the line is at the right, reverse. Check if it was a circle: iterate over all pairs of coordinates and calculate the distance to the center-point. Tweak the threshold of allowed distances from the calculated distance and the actual distance to the center-point. In step 2 and 4 you can tweak this algorithm further by taking the average of several indices if the timing interval is very low (fast polling). For instance: there are 30 pairs in the array, then you average pairs at 0, 1 and 28, 29 to get the upper point. Do the same for all other points. I hope this is easy enough.
