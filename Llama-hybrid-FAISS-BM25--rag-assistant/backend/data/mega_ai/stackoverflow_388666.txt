[site]: stackoverflow
[post_id]: 388666
[parent_id]: 247209
[tags]: 
In my last project -Viajeros.com- I've used a combination of several techniques. I wouldn't know how to organize a web app -- Viajeros is a social networking site for travellers with well-defined sections, so it's kind of easy to separate the code for each area. I use namespace simulation and lazy loading of modules according to the site section. On each page load I declare a "vjr" object, and always load a set of common functions to it (vjr.base.js). Then each HTML page decides which modules need with a simple: vjr.Required = ["vjr.gallery", "vjr.comments", "vjr.favorites"]; Vjr.base.js gets each one gzipped from the server and executes them. vjr.include(vjr.Required); vjr.include = function(moduleList) { if (!moduleList) return false; for (var i = 0; i Every "module" has this structure: vjr.comments = {} vjr.comments.submitComment = function() { // do stuff } vjr.comments.validateComment = function() { // do stuff } // Handlers vjr.comments.setUpUI = function() { // Assign handlers to screen elements } vjr.comments.init = function () { // initialize stuff vjr.comments.setUpUI(); } $(document).ready(vjr.comments.init); Given my limited Javascript knowledge, I know there must be better ways to manage this, but until now it's working great for us.
