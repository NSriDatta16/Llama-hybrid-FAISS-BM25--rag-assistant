[site]: stackoverflow
[post_id]: 214900
[parent_id]: 213761
[tags]: 
Here is a simple example taken from 'Modern C++ Design - Generic Programming and Design Patterns Applied' by Andrei Alexandrescu: He uses a classes with template template parameters in order to implement the policy pattern: // Library code template class CreationPolicy> class WidgetManager : public CreationPolicy { ... }; He explains: Typically, the host class already knows, or can easily deduce, the template argument of the policy class. In the example above, WidgetManager always manages objects of type Widget, so requiring the user to specify Widget again in the instantiation of CreationPolicy is redundant and potentially dangerous.In this case, library code can use template template parameters for specifying policies. The effect is that the client code can use 'WidgetManager' in a more elegant way: typedef WidgetManager MyWidgetMgr; Instead of the more cumbersome, and error prone way that a definition lacking template template arguments would have required: typedef WidgetManager > MyWidgetMgr;
