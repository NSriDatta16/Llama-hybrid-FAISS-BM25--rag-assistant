[site]: stackoverflow
[post_id]: 902745
[parent_id]: 900919
[tags]: 
Larger code sample posted at Robert Harvey's request: DataContext.cs file: namespace MyProject.Library.Model { using Tome.Library.Parsing; using System.Text; partial class Page { //Part of Robert Harvey's proposed solution. MyDataContext mDataContext = new TomeDataContext(); public string TagString { get { StringBuilder output = new StringBuilder(); foreach (PageTag tag in PageTags) { output.Append(tag.Tag + " "); } if (output.Length > 0) { output.Remove(output.Length - 1, 1); } return output.ToString(); } set { string[] tags = value.Split(' '); //Original code, fails to mark for deletion. //PageTags.Clear(); //Robert Harvey's suggestion, thorws exception "Cannot remove an entity that has not been attached." foreach (PageTag tag in PageTags) { mDataContext.PageTags.DeleteOnSubmit(tag); } foreach (string tag in tags) { PageTag PageTag = new PageTag(); PageTag.Tag = tag; PageTags.Add(PageTag); } } } private bool mIsNew; public bool IsNew { get { return mIsNew; } } partial void OnCreated() { mIsNew = true; } partial void OnLoaded() { mIsNew = false; } } } Repository Methods: public void Save() { mDataContext.SubmitChanges(); } public Page GetPage(string pageName) { Page page = (from p in mDataContext.Pages where p.FileName == pageName select p).SingleOrDefault(); return page; } Usage: [AcceptVerbs(HttpVerbs.Post)] public ActionResult Edit(string pageName, FormCollection formValues) { Page updatedPage = mRepository.GetPage(pageName); //TagString is a Form value, and is set via UpdateModel. UpdateModel(updatedPage, formValues.ToValueProvider()); updatedPage.FileName = pageName; //At this point NO changes should have been written to the database. mRepository.Save(); //All changes should NOW be saved to the database. return RedirectToAction("Index", "Pages", new { PageName = pageName }); }
