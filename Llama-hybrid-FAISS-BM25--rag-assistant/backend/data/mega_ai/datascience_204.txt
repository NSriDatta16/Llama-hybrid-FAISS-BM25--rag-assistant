[site]: datascience
[post_id]: 204
[parent_id]: 116
[tags]: 
I recently did a similar project in Python (predicting opinions using FB like data), and had good results with the following basic process: Read in the training set (n = N) by iterating over comma-delimited like records line-by-line and use a counter to identify the most popular pages For each of the K most popular pages (I used about 5000, but you can play around with different values), use pandas.DataFrame.isin to test whether each individual in the training set likes each page, then make a N x K dataframe of the results (I'll call it xdata_train) Create a series (I'll call it ydata_train) containing all of the outcome variables (in my case opinions, in yours age) with the same index as xdata_train Set up a random forest classifier through scikit-learn to predict ydata_train based on xdata_train Use scikit-learn's cross-validation testing to tweak parameters and refine accuracy (tweaking number of popular pages, number of trees, min leaf size, etc.) Output random forest classifier and list of most popular pages with pickle (or keep in memory if you are doing everything at once) Load in the rest of your data, load the list of popular pages (if necessary), and repeat step 2 to produce xdata_new Load the random forest classifier (if necessary) and use it to predict values for the xdata_new data Output the predicted scores to a new CSV or other output format of your choosing In your case, you'd need to swap out the classifier for a regressor (so see sklearn.ensemble.RandomForestRegressor ) but otherwise the same process should work without much trouble. Also, you should be aware of the most amazing feature of random forests in Python: instant parallelization! Those of us who started out doing this in R and then moved over are always amazed, especially when you get to work on a machine with a few dozen cores. Finally, note that this would be a perfect application for network analysis if you have the data on friends as well as the individuals themselves. If you can analyze the ages of a user's friends, the age of the user will almost certainly be within a year or two of the median among his or her friends, particularly if the users are young enough to have built their friend networks while still in school (since most will be classmates). That prediction would likely trump any you would get from modeling---this is a textbook example of a problem where the right data > the right model every time. Good luck!
