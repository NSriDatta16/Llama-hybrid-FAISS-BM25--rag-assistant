[site]: datascience
[post_id]: 27718
[parent_id]: 27598
[tags]: 
Here are a few ways you might use neural networks to solve this problem: With a plain Feedforward Neural Network: Scale your data to fit in the square around the origin from (-1,-1) to (1,1) Represent each point with two inputs corresponding to its x and y coordinates, or 0,0 if the $k$th point is not present Add a third indicator input for each point, indicating whether that point is present Choose the number and size of hidden layers Use a softmax layer of size 10 at the output So every input example will be a vector of length 30, where the last 3*(10-$k$) values are zero when there are $k$ points present in the set, and the output is a vector of length 10 summing to 1, whether the largest value corresponds to the predicted point (whose position is corresponds to that position in the input). With a Convolutional Neural Network: Divide your plane into grid of $n$ x $n$ squares, and represent your input as an $n$ x $n$ matrix that is $k$ if there are $k$ points in the square ($i,j$) and $0$ otherwise. Hopefully points won't overlap, so you have a matrix of $1$s and $0$s. Train a CNN on your input matrices. Your output shape should be a softmax of size $n*n$, which corresponds to the input shape flattened. Choose the point with the highest value at the corresponding output coordinates. The CNN might perform better since your data is inherently spatial. However you have to decide what to do if two or more points overlap. The simplest solution is to pick one randomly, which might be OK depending on your specific task. With a Recurrent Neural Network: Feed in variable length sequences of scaled (x,y) points and output a size 10 softmax estimation Yes, it's as easy as that with RNNs! They handle variable length inputs well, but they still lack the advantages of CNNs for handling spatial data. Caveats: If using a FNN or an RNN, there is also the matter of how you order your input data. If there is no inherent order in your real data, then we don't want our network making different predictions for the same data encoded in different orders. One way to handle this is with data augmentation : duplicate each training example a few times with different input orderings, so hopefully your network can learn the appropriate symmetries. If you only have time to try one approach, I would choose the CNN. CNNs are designed to do well with spatial data, and there is no problem with input orderings.
