[site]: stackoverflow
[post_id]: 1085701
[parent_id]: 1085633
[tags]: 
At $work we do 4. It works fine, and the argument against not all email logic living in the same place seems a bit too strict. You would just have two velocity files next to each other. And even with just one template file, you still have logic to populate the data, determine the recipients, attach the attachments, and so on, which also does not live in the Velocity file. I would prefer 2 over 3, just because I do not like Velocity macros. Using Java objects seems more flexible. $mailContext.setSubjectLine($subject) With either 2 or 3, you can get closer to your goal of having everything in one place: You could get Velocity to set the recipient list, too, for example. This, one the other hand, seems to conflict with the idea of Velocity being a pure templating technology. A thing to consider here is who is writing the Velocity templates. The closer it gets to "end-users", the less you want to trouble them with (and keep them from messing with) anything that is not directly related to creating the email content. Not sure if that is feasible, makes sense or is even possible with the Java Mail API, but just for completeness: 6. Have velocity create the whole email message including headers, not just content and subject. There difference to 1 is that you do not need to post-process this output, it can go straight to the mail transport agent. Probably does not work with attachments. To: $to CC: $cc Subject: $subject Here comes the content.
