[site]: stackoverflow
[post_id]: 1782594
[parent_id]: 1761957
[tags]: 
Finally got Drag and Drop working. There were three things that needed doing, for whatever reason WorkflowView has: 1.) I had to use System.Windows.Forms.DataObject instead of System.Windows.DataObject when serializing the ToolboxItem when doing DragDrop. private void ListBox_MouseDownHandler(object sender, MouseButtonEventArgs e) { ListBox parent = (ListBox)sender; //get the object source for the selected item object data = GetObjectDataFromPoint(parent, e.GetPosition(parent)); //if the data is not null then start the drag drop operation if (data != null) { System.Windows.Forms.DataObject dataObject = new System.Windows.Forms.DataObject(); dataObject.SetData(typeof(ToolboxItem), data as ToolboxItem); DragDrop.DoDragDrop(this, dataObject, DragDropEffects.Move | DragDropEffects.Copy); } } 2.) DragDrop.DoDragDrop source must be set to the IToolboxService set in the IDesignerHost. The control holding the ListBox implements IToolboxService. // "this" points to ListBox's parent which implements IToolboxService. DragDrop.DoDragDrop(this, dataObject, DragDropEffects.Move | DragDropEffects.Copy); 3.) The ListBox should be bound to a list of ToolboxItems returned by the following helper method, passing it the Type of the activities to show in the tool box: ... this.ToolboxItems = new ToolboxItem[] { GetToolboxItem(typeof(IfElseActivity)) }; ... internal static ToolboxItem GetToolboxItem(Type toolType) { if (toolType == null) throw new ArgumentNullException("toolType"); ToolboxItem item = null; if ((toolType.IsPublic || toolType.IsNestedPublic) && typeof(IComponent).IsAssignableFrom(toolType) && !toolType.IsAbstract) { ToolboxItemAttribute toolboxItemAttribute = (ToolboxItemAttribute)TypeDescriptor.GetAttributes(toolType)[typeof(ToolboxItemAttribute)]; if (toolboxItemAttribute != null && !toolboxItemAttribute.IsDefaultAttribute()) { Type itemType = toolboxItemAttribute.ToolboxItemType; if (itemType != null) { // First, try to find a constructor with Type as a parameter. If that // fails, try the default constructor. ConstructorInfo ctor = itemType.GetConstructor(new Type[] { typeof(Type) }); if (ctor != null) { item = (ToolboxItem)ctor.Invoke(new object[] { toolType }); } else { ctor = itemType.GetConstructor(new Type[0]); if (ctor != null) { item = (ToolboxItem)ctor.Invoke(new object[0]); item.Initialize(toolType); } } } } else if (!toolboxItemAttribute.Equals(ToolboxItemAttribute.None)) { item = new ToolboxItem(toolType); } } else if (typeof(ToolboxItem).IsAssignableFrom(toolType)) { // if the type *is* a toolboxitem, just create it.. // try { item = (ToolboxItem)Activator.CreateInstance(toolType, true); } catch { } } return item; } GetToolboxItem method is from http://msdn.microsoft.com/en-us/library/aa480213.aspx source, in the ToolboxService class. Cheers, Carlos
