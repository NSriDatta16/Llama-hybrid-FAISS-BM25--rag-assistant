[site]: stackoverflow
[post_id]: 5030375
[parent_id]: 
[tags]: 
Succinct way of reading data from file into an immutable 2 dimensional array in Scala

What I am looking for is a succinct way of ending up with an immutable two dimensional array X and one dimensional array Y without first scanning the file to find out the dimensions of the data. The data, which consists of a header line followed by columnar double values, is in the following format X0, X1, X2, ...., Y 0.1, 1.2, -0.2, ..., 1.1 0.2, 0.5, 0.4, ..., -0.3 -0.5, 0.3, 0.3, ..., 0.1 I have the following code (so far) for getting lines from a file and tokenizing each comma delimited line in order to get the samples. It currently doesn't fill in the X and Y arrays nor assign num and dimx val X = new Array[Array[Double]](num,dimx) val Y = new Array[Double](num) def readDataFromFile(filename: String) { var firstTime = true val lines = fromFile(filename).getLines lines.foreach(line => { val tokens = line split(",") if(firstTime) { tokens.foreach(token => // get header titles and set dimx) firstTime = false } else { println("data") tokens.foreach(token => //blah, blah, blah...) } }) } Obviously this is an issue because, while I can detect and use dimx on-the-fly, I don't know num a priori . Also, the repeated tokens.foreach is not very elegant. I could first scan the file and determine the dimensions, but this seems like a nasty way to go. Is there a better way? Thanks in advance
