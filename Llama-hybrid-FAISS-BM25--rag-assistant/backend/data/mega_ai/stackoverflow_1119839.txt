[site]: stackoverflow
[post_id]: 1119839
[parent_id]: 1119640
[tags]: 
I don't know Java super well, but you can do most of that - just have to do it differently, unless I misunderstand your question. Data members on PHP classes can't have runtime-calculated values, such as new object instances. So, this would not work class ReportField { public static $foo = new ReportField() } Note: final properties are not allowed except on methods It's actually really curious to me that you're making one class responsible for two things - an object blueprint AND static storage for instances of itself as well. Anyway, here's what I think your code would look like in PHP key = $key; $this->label = $label; $this->accessLevel = $accessLevel; $this->sql = $sql; } public static function initializeStore() { if ( empty( self::$store ) ) { self::$store['foo'] = new self( 'foo', 'Foo', 1, 'foo as my_foo' ); // repeat } } public static function getByKey( $key ) { if ( empty( self::$store ) ) { self::initializeStore(); } if ( isset( self::$store[$key] ) ) { return self::$store[$key]; } throw new Exception( __CLASS__ . " instance identified by key $key not found" ); } public function getFieldSql() { return $this->sql; } } // Usage $selectFields = array(); foreach ( $reportPrefs as $pref ) { $selectFields[] = ReportField::getByKey( $pref->getField() )->getFieldSql(); }
