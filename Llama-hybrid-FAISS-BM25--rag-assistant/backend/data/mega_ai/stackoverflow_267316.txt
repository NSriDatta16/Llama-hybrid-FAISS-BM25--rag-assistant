[site]: stackoverflow
[post_id]: 267316
[parent_id]: 266486
[tags]: 
It is an interesting question... It is late, I will experiment tomorrow. I will first try and use a BufferedImage.TYPE_BYTE_INDEXED (perhaps after drawing) to see if Java is smart enough to generate an 8bit PNG. Or perhaps some image library can allow that. [EDIT] Some years later... Actually, I made the code at the time, but forgot to update this thread... I used the code pointed at by Kat , with a little refinement on the handling of transparency, and saving in PNG format instead of Gif format. It works in making a 8-bit PNG file with all-or-nothing transparency. You can find a working test file at http://bazaar.launchpad.net/~philho/+junk/Java/view/head:/Tests/src/org/philhosoft/tests/image/AddTransparency.java using my ImageUtil class. Since the code isn't that big, for posterity sake, I post it here, without the JavaDoc to save some lines. public class ImageUtil { public static int ALPHA_BIT_MASK = 0xFF000000; public static BufferedImage imageToBufferedImage(Image image, int width, int height) { return imageToBufferedImage(image, width, height, BufferedImage.TYPE_INT_ARGB); } public static BufferedImage imageToBufferedImage(Image image, int width, int height, int type) { BufferedImage dest = new BufferedImage(width, height, type); Graphics2D g2 = dest.createGraphics(); g2.drawImage(image, 0, 0, null); g2.dispose(); return dest; } public static BufferedImage convertRGBAToIndexed(BufferedImage srcImage) { // Create a non-transparent palletized image Image flattenedImage = transformTransparencyToMagenta(srcImage); BufferedImage flatImage = imageToBufferedImage(flattenedImage, srcImage.getWidth(), srcImage.getHeight(), BufferedImage.TYPE_BYTE_INDEXED); BufferedImage destImage = makeColorTransparent(flatImage, 0, 0); return destImage; } private static Image transformTransparencyToMagenta(BufferedImage image) { ImageFilter filter = new RGBImageFilter() { @Override public final int filterRGB(int x, int y, int rgb) { int pixelValue = 0; int opacity = (rgb & ALPHA_BIT_MASK) >>> 24; if (opacity
