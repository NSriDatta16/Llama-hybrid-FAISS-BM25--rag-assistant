[site]: stackoverflow
[post_id]: 402951
[parent_id]: 402763
[tags]: 
If you're using Perl 5.10, you can do something very similar to what you have now but with a much nicer layout by using the given/when structure: use 5.010; while ( ) { chomp; given ($_) { when ( m{^ : (.*)}x ) { push @parameter, $1 } when ( m{^ : (.*)}x ) { push @result, $1 } when ( m{^ : (.*)}x ) { push @stderr, $1 } default { $stderr[-1] .= "\n$_" } } } It's worth noting that for the default case here, rather than keeping a separate $err_msg variable, I'm simply pushing onto @stderr when I see a stderr tag, and appending to the last item of the @stderr array if I see a continuation line. I'm adding a newline when I see continuation lines, since I assume you want them preserved. Despite the above code looking quite elegant, I'm not really all that fond of keeping three separate arrays, since it will presumably cause you headaches if things get out of sync, and because if you want to add more fields in the future you'll end up with lots and lots of variables floating around that you'll need to keep track of. I'd suggest storing each record inside a hash, and then keeping an array of records: use 5.010; my @records; my $prev_key; while ( ) { chomp; given ($_) { when ( m{^ }x ) { push(@records, {}); continue; } when ( m{^ : (.*)}x ) { $records[-1]{$1} = $2; $prev_key = $1; } default { $records[-1]{$prev_key} .= "\n$_"; } } } Here we're pushing a new record onto the array when we see a field, adding an entry to our hash whenever we see a key/value pair, and appending to the last field we added to if we see a continuation line. The end result of @records looks like this: ( { parameter => 'test_one_count', result => 0, stderr => qq{Expected "test_one_count=2" and the actual value is 0\ntest_one_count=0}, }, { parameter => 'test_two_count', result => 4, stderr => qq{Expected "test_two_count=2" and the actual value is 4\ntest_two_count=4}, } ) Now you can pass just a single data structure around which contains all of your records, and you can add more fields in the future (even multi-line ones) and they'll be correctly handled. If you're not using Perl 5.10, then this may be a good excuse to upgrade. If not, you can translate the given/when structures into more traditional if/elsif/else structures, but they lose much of their beauty in the conversion. Paul
