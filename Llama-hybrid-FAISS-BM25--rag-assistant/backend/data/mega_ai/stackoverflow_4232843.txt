[site]: stackoverflow
[post_id]: 4232843
[parent_id]: 
[tags]: 
Class design question - how to provide read only access to class member container

In my day-to-day work, I often find myself writing classes like in this simplified example: class CGarage { public: CGarage(); ~CGarage(); typedef std::vector CarCollection; private: CarCollection m_Cars; }; I want the users of CGarage to have read only access to the CarCollection. In order to achieve that goal, those are some common solutions which are all not very satisfying: Solution 1 class CGarage { Car GetCar(CarCollection::size_type index) const; CarCollection::size_type CarCount() const; }; Main disadvantage: Lacking iterators, I can't use STL algorithms on Cars (e.g. for_each(...)) Solution 2 class CGarage { CarCollection::const_iterator CarBegin() const; CarCollection::const_iterator CarEnd() const; CarCollection::size_type CarCount() const; }; Main disadvantage: A lot of boilerplate code if you need support for other iterator types (it, reverse_it). Solution 3 class CGarage { const CarCollection GetCars() const; }; Main disadvantage: cost of copying CarCollection when returning by value implementation details known to users of class (e.g. can't change to std::list without change of breaking user code) Solution 4 class CGarage { const CarCollection& GetCars() const; }; Main disadvantage: lifetime of CarCollection reference bound to lifetime of CGarage implementation details known to users of class Questions How would you provide read-only access to the CarCollection? Does your solution change, if CarCollection is a vector with pointers to Car? If you allow read and write access to the collection, is it acceptable to make the collection public? Thanks for any advice
