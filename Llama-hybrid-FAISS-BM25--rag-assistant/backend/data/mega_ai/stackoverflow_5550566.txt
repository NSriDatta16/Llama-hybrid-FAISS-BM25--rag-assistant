[site]: stackoverflow
[post_id]: 5550566
[parent_id]: 5549503
[tags]: 
As I mentioned in " What are the basic ClearCase concepts every developer should know? ", ClearCase might have some "decentralized" features with its multi-site repos, but it still a CVCS at its core: it has a strong link with system user-id (which isn't relevant in a DVCS, where there is no unique user referential). it has a unique repo for managing label and branch names (admin vob), while you can define a 'test' branch in 15 different Git repos without problem (except you need to know what repo1/test stands for, relative to repos2/test ). it also centralize a merge workflow definition through the (UCM) Stream hierarchy (you can visualize where you are supposed to merge a work from one Stream to another). it proposes through UCM a definition of subset of codes (component), with dependency management. Git only has submodules, without override/overridden detection mechanism. it manages any kind of files, even large binaries, while a DVCS (any kind of DVCS) is better off managing only source code. The bottom-line (in our migration from ClearCase to Git) is that it involves quite a few refactoring/reorganization of the source code in order to have manageable Git repositories.
