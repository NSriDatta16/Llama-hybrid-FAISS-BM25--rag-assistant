[site]: crossvalidated
[post_id]: 265074
[parent_id]: 
[tags]: 
How to inprove SVHN result with Keras?

I'm using keras to build to CNN to train the famous SVHN (street view house number) data set(fist version, without cropping). I train the pictures as they all have five digit spot, for pictures have less numbers, I treat the empty spot as another category. So, I have 11 categories for each digit spot. I didn't use bbox yet. I can just get only 30% accuracy best for first two accuracy. I try different dropout rate, or adding one more convolution layer. But accuracy still very low. How can I tune my model to get a better accuracy? I don't to use the bbox at this stage. Is that possible to get a decent perform model? from keras.models import Sequential from keras.models import Model from keras.layers import Convolution2D from keras.layers import MaxPooling2D from keras.layers import Flatten from keras.layers import Dense from keras.layers import Input from keras.layers.core import Dropout identifier = Sequential() x = Input((30,70,1)) y = (Convolution2D(64,3,3,activation = "relu",border_mode = "valid"))(x) y = (MaxPooling2D(pool_size = (2,2)))(y) y = (Convolution2D(64,3,3,activation = "relu",border_mode = "valid"))(x) y = (MaxPooling2D(pool_size = (2,2)))(y) #y = (Dropout(0.5))(y) y= (Convolution2D(32,3,3,activation = "relu"))(y) y = (MaxPooling2D(pool_size = (2,2)))(y) #y = (Dropout(0.5))(y) y= (Convolution2D(32,3,3,activation = "relu"))(y) y = (MaxPooling2D(pool_size = (2,2)))(y) y = (Dropout(0.5))(y) y = (Flatten())(y) y =(Dense(output_dim = 512,activation = "relu"))(y) y = (Dense(output_dim=256,activation = "relu"))(y) y = (Dense(output_dim=256,activation = "relu"))(y) y = (Dense(output_dim=128,activation = "relu"))(y) digit1 = (Dense(output_dim =11,activation = "softmax"))(y) digit2 = (Dense(output_dim =11,activation = "softmax"))(y) digit3 = (Dense(output_dim =11,activation = "softmax"))(y) digit4 = (Dense(output_dim =11,activation = "softmax"))(y) digit5 = (Dense(output_dim =11,activation = "softmax"))(y) identifier = Model(input =x, output = [digit1,digit2,digit3,digit4,digit5]) identifier.compile(optimizer = "adam", loss = "categorical_crossentropy",metrics = ["accuracy"]) nb_epoch =3 identifier.fit(training_data.reshape(29329,30,70,1),train_labels,batch_size= 64,nb_epoch= nb_epoch, verbose= 1,validation_data=(test_data.reshape(600,30,70,1),test_labels))
