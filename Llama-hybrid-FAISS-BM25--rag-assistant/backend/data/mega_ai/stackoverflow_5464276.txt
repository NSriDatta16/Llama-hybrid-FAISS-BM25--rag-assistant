[site]: stackoverflow
[post_id]: 5464276
[parent_id]: 5464102
[tags]: 
How does the performance differ between these methods? This will vary greatly based on what type of application is using the database. The first method could be considered a de-normalized approach, but this could be a good idea if the data is used for an OLAP application. For example, if you frequently need to gather massive sets of data for a specific day of the month, then this de-normalization could be justified... otherwise, it would just be a waste of storage and needlessly complex. The same with the third option... it's just a de-normalized representation of the date; it could be justified in very limited uses, but usually it would be a bad idea. --EDIT-- By De-normalized, I mean the following... Let's say you have a record with the following fields... Date Day Month Year 3/28/2011 28 3 2011 And lets say you need to change the day from the 28th to the 29th. In this case, you need to update two fields, both the Date and the Day field... instead of just one. If you always remember to update both, then it isn't a huge problem. But if you don't, over time you end up with something like the following. Date Day Month Year 3/28/2011 29 2 2009 So what's the actual date? By storing the information in a single place, you eliminate the possibility of inconsistencies in the data. -- END EDIT-- Which one is best in your opinion and why? Unless your database is used for OLAP... I would consider the second option to be the best. How would the queries for selects, inserts and updates be constructed for these different proposed solutions? For the preferred, second option, this is trivial. -- SECOND EDIT -- You can pass in the date as a string, and MySQL will parse it according. The date format is "YYYY-MM-DD HH:mm:SS", but you don't have to specify the time if you don't care to store it. INSERT INTO tablename (date) VALUES ('2011-3-28') Or, if you just want to add the current date... INSERT INTO tablename (date) VALUES (CURDATE() ) -- END EDIT --
