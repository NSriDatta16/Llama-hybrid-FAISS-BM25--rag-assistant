[site]: crossvalidated
[post_id]: 242490
[parent_id]: 
[tags]: 
What method should I use for comparing the similarity between variables

Background I'm investigating the performance of air quality monitoring sites. In one city, several sites will compose a whole network for detecting the temporal variation of air pollutants. I want to compare the similarity from the information captured by each site. Case Suppose there are 7 sites located in the study area of interest. Each site has a time-series data for certain species. I have already created a panda.Dataframe and use pearson coefficient to compare their similarity. If the r value are high for certain data-paris, it indicated that the information they captured are redundant. Then, I want to use cluster analysis and divide the sites into several clusters. Then I can compare the similar-site-paris individually by some other indexes and the one with weak performance will be eliminated. The datafile I uploade here , anyone interested can download it. Problem With different linkage method, the cluster results seems to be different. They are less useful considering of my initial idea. My code The code I wrote here can illustrate my results. #### The plotting code are copied from ##http://stackoverflow.com/questions/2982929/plotting-results-of-hierarchical-clustering-ontop-of-a-matrix-of-data-in-python import scipy.cluster.hierarchy as sch import pandas as pd import scipy import pylab df = pd.read_csv("corr-no2.txt") D = scipy.zeros([7,7]) for i in range(7): for j in range(7): D[i,j] = df.iloc[:,i].corr(df.iloc[:,j]) print D[2,2] # Compute and plot first dendrogram. fig = pylab.figure(figsize=(8,8)) ax1 = fig.add_axes([0.09,0.1,0.2,0.6]) Y = sch.linkage(D, method='average') Z1 = sch.dendrogram(Y, orientation='right')#,above_threshold_color='b') ax1.set_xticks([]) ax1.set_yticks([]) # Compute and plot second dendrogram. ax2 = fig.add_axes([0.3,0.71,0.6,0.2]) Y = sch.linkage(D, method='centroid') Z2 = sch.dendrogram(Y) ax2.set_xticks([]) ax2.set_yticks([]) # Plot distance matrix. axmatrix = fig.add_axes([0.3,0.1,0.6,0.6]) idx1 = Z1['leaves'] idx2 = Z2['leaves'] D = D[idx1,:] D = D[:,idx2] im = axmatrix.matshow(D, aspect='auto', origin='lower', cmap=pylab.cm.YlGnBu) site_name = list(df.columns) axmatrix.set_xticks(range(7)) site_X = [ site_name[i] for i in idx1] axmatrix.set_xticklabels(site_X, minor=False) axmatrix.xaxis.set_label_position('bottom') axmatrix.xaxis.tick_bottom() pylab.xticks( fontsize=12) axmatrix.set_yticks(range(7)) site_Y = [ site_name[i] for i in idx2] axmatrix.set_yticklabels(site_Y, minor=False) axmatrix.yaxis.set_label_position('right') axmatrix.yaxis.tick_right() pylab.yticks(fontsize=12) pylab.show() I use average and centroid method. And I found out some site-pair with strong correlation relation are not merged together as a cluster. For example: df.iloc[:,6].corr(df.iloc[:,5]) == 0.83, But their corresponding sites are not in the same cluster. If anyone are familiar with the similarity analysis, I would appreciate that you offer some advices! PS If I want to add another indexes here (e.g, the mean value for each sites), how to add this feature into similarity analysis alongside $r$?
