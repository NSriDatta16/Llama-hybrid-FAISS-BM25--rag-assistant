[site]: stackoverflow
[post_id]: 652218
[parent_id]: 652149
[tags]: 
You've touched on a couple of practices I would argue that you avoid. I wrote more about this in Database Development Mistakes Made by AppDevelopers (eg exclusive arcs). As to your problem, I would actually choose none of those options. What you're stumbling towards is a generic Party model . Basically you have a Party entity with subtypes such as Person and Organisation. Contacts has a Party ID as a foreign key. The use of a common superclass/superentity is much more profound than that however as you will find that you use this for many other things as well (eg the whole role concept). A lot of these database design modelling problems have mature solutions to them but it doesn't tend to be the sort of thing programmers are ever taught. I highly recommend getting the book The Data Model Resource Book, Vol. 1: A Library of Universal Data Models for All Enterprises , which goes into much more detail about how to model people and organisations as well as many other typical problems. The key point to remember here is that what you're doing has been done before.
