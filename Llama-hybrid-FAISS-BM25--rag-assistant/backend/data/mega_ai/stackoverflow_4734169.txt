[site]: stackoverflow
[post_id]: 4734169
[parent_id]: 
[tags]: 
Refactoring a XML_Unserializer reliant class to use DOMDocument

I have a class that takes this xml file: en-es web page ]]> test And uses XML_Unserializer to mutate this into an array. It becomes: Array ( [language] => en-US [meta] => [pagecontent] => Array ( [class] => test ) I then have methods that return values of keys in the array. So for instance if I wanted the language I'd use $class->getData('language') or $class->getData('pagecontent:class') . We no longer support PHP4 so I can now rely on native XML implementations. I have worked both with SimpleXML and the standard php DOM library. I prefer the latter since it's more powerful and flexible and simpleXML comes with certain caveats. Since I have used the unserializer class, nearly all my methods interact with function methods such as foreach . I'm wondering if it's worth it to keep it an array, which would save me from refactoring all my methods? In addition, I know that it's sometimes a pain to grab the entire nodeValue of an element, because then you have to implement methods such as: function innerHTML($node){ $doc = new DOMDocument(); foreach ($node->childNodes as $child) $doc->appendChild($doc->importNode($child, true)); return $doc->saveHTML(); } And it seems inefficient using that method many times over since it always creates a DOMDocument. I could probably refactor the method so it uses the same DOMDocument over and over and appends fragments but it seems overkill. I would appreciate any input on this manner, in terms of whether I should even use the standard DOM lib and if so, should I refactor all my methods to use DOM functions or create an array and keep my methods as they are, in order to lower the chance of introducing new bugs? Thanks.
