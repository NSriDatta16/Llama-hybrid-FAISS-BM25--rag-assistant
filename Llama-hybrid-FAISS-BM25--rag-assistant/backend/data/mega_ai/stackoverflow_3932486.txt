[site]: stackoverflow
[post_id]: 3932486
[parent_id]: 
[tags]: 
Duplicate ImageView in ListView while using Lazy Loading

I'm using lazy-loading for images in a listview. The weird thing is, the first row and the last row visible on the screen seem to have the same image(of the last row on the screen). I'm using following class for image loading: public class ImageLoader { //the simplest in-memory cache implementation. This should be replaced with something like SoftReference or BitmapOptions.inPurgeable(since 1.6) private HashMap cache=new HashMap (); private File cacheDir; public ImageLoader(Context context){ //Make the background thead low priority. This way it will not affect the UI performance photoLoaderThread.setPriority(Thread.NORM_PRIORITY-1); //Find the dir to save cached images if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) cacheDir=new File(android.os.Environment.getExternalStorageDirectory(),"LazyList"); else cacheDir=context.getCacheDir(); if(!cacheDir.exists()) cacheDir.mkdirs(); } final int stub_id=R.drawable.default_user_pic; public void DisplayImage(String url, Activity activity, ImageView imageView) { if(cache.containsKey(url)) imageView.setImageBitmap(cache.get(url)); else { queuePhoto(url, activity, imageView); imageView.setImageResource(stub_id); } } private void queuePhoto(String url, Activity activity, ImageView imageView) { //This ImageView may be used for other images before. So there may be some old tasks in the queue. We need to discard them. photosQueue.Clean(imageView); PhotoToLoad p=new PhotoToLoad(url, imageView); synchronized(photosQueue.photosToLoad){ photosQueue.photosToLoad.push(p); photosQueue.photosToLoad.notifyAll(); } //start thread if it's not started yet if(photoLoaderThread.getState()==Thread.State.NEW) photoLoaderThread.start(); } private Bitmap getBitmap(String url) { //I identify images by hashcode. Not a perfect solution, good for the demo. String filename=String.valueOf(url.hashCode()); File f=new File(cacheDir, filename); //from SD cache Bitmap b = decodeFile(f); if(b!=null) return b; //from web try { Bitmap bitmap=null; InputStream is=new URL(url).openStream(); OutputStream os = new FileOutputStream(f); HeaderController.CopyStream(is, os); os.close(); bitmap = decodeFile(f); return bitmap; } catch (Exception ex){ ex.printStackTrace(); return null; } } //decodes image and scales it to reduce memory consumption private Bitmap decodeFile(File f){ try { //decode image size BitmapFactory.Options o = new BitmapFactory.Options(); o.inJustDecodeBounds = true; BitmapFactory.decodeStream(new FileInputStream(f),null,o); //Find the correct scale value. It should be the power of 2. final int REQUIRED_SIZE=70; int width_tmp=o.outWidth, height_tmp=o.outHeight; int scale=1; while(true){ if(width_tmp/2 photosToLoad=new Stack (); //removes all instances of this ImageView public void Clean(ImageView image) { for(int j=0 ;j Here is the my Expandable listview adapter code: import java.util.List; import java.util.Map; import android.app.Activity; import android.content.Context; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.SimpleExpandableListAdapter; import android.widget.TextView; public class NearbyAdapter extends SimpleExpandableListAdapter { private List >> mChildData; private String[] mChildFrom; private int[] mChildTo; NearbyActivity currentActivity; public ImageLoader imageLoader; public NearbyAdapter(Activity activity,Context context, List > groupData, int groupLayout, String[] groupFrom, int[] groupTo, List >> childData, int childLayout, String[] childFrom, int[] childTo) { super(context, groupData, groupLayout, groupFrom, groupTo, childData, childLayout, childFrom, childTo); mChildData = childData; mChildFrom = childFrom; mChildTo = childTo; currentActivity = (NearbyActivity)activity; imageLoader=new ImageLoader(activity.getApplicationContext()); } public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) { View v; if (convertView == null) { v = newChildView(isLastChild, parent); } else { v = convertView; } bindView(v, mChildData.get(groupPosition).get(childPosition),mChildFrom, mChildTo, groupPosition, childPosition); return v; } private void bindView(View view, Map data, String[] from, int[] to, int groupPosition, int childPosition) { if(from[3] != null) view.setTag(data.get(from[4])); ImageView imageView = (ImageView) view.findViewById(to[3]); if (imageView != null) { imageView.setTag((String) data.get(from[3])); imageLoader.DisplayImage((String) data.get(from[3]), currentActivity, imageView); } } public boolean isChildSelectable(int groupPosition, int childPosition) { return true; } public boolean isGroupSelectable(int groupPosition) { return true; } public boolean hasStableIds() { return true; } }
