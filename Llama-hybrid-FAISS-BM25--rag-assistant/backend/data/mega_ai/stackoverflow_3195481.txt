[site]: stackoverflow
[post_id]: 3195481
[parent_id]: 3194395
[tags]: 
A class using raw memory to avoid premature construction: template class aligned_storage { public: private: T* mHead; unsigned char mData[N*sizeof(T) + std::tr1::alignment_of ::value - 1]; }; Here the issue is two fold: mHead points into the object itself, so it should be changed, of course even if we instead used some kind of byte count for the offset, this offset would have to be changed after the move. And of course, any class using some subscription mechanism (observer pattern), because you would need to unsubscribe from the copied object and subscribe from the new object. There is not much difference between using bitwise copy in a Move Constructor than for a Copy Constructor... and it's a bad idea as soon as you're dealing with non-PODs.
