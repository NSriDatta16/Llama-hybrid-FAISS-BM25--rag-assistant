[site]: crossvalidated
[post_id]: 502708
[parent_id]: 
[tags]: 
How to determine time series similarity by magnitude and pattern?

Context I know that Dynamic Time Warping (DTW) can be used to assign a dissimilarity score between two time series. Based on the distance matrix of DTW scores, I can cluster data with say, Hierarchical Clustering (HC). But in my observation, the similarly clustered series are similar in pattern, not necessarily in magnitude. So, my question is: how can I determine time series similarity by both magnitude and pattern. Example I used the gaminder data in R to determine similarities between countries in terms of 3 variables: life expectancy, GDP, and population using DTW. Then I clustered them using HC. Following shows the resulting dendrogram (I cut the tree in 8 clusters): As an example, note here: Yemen and Oman are most similar in a cluster, followed by Syria, Jordan and Westbank & Gaza Bahrain and Mongolia are most similar in another cluster, followed by Phillipines The following shows a scatter plot with year on x-axis and lifeExp ectancy on y-axis. The number on each facet represents a cluster. Notice that in cluster 7 Yemen and Oman are similar by pattern, BUT other countries in the cluster seem to be similar to Oman in terms of life expectancy (i.e. magnitude). The same is seen in cluster 2 and 4. Others have less number of members. How can I find similarity by magnitude and pattern? R Code to reproduce plot suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(dtwclust)) suppressPackageStartupMessages(library(factoextra)) suppressPackageStartupMessages(library(gapminder)) suppressPackageStartupMessages(library(ggrepel)) scale_this % filter(continent == "Asia") %>% # countries in Asia only group_by(country) %>% # scaling the vars for each country mutate(lifeExp = scale_this(lifeExp), pop = scale_this(pop), gdpPercap = scale_this(gdpPercap) ) %>% ungroup() df_matrix % split(.$country, drop = T) %>% purrr::map(~ .x[, c("lifeExp", # names of all vars "pop", "gdpPercap" )]) %>% purrr::map(as.matrix) clusters_gp % tsclust(., k = 8L, # assuming clusters distance = "dtw_basic", # this is dtw score seed = 390, # to reproduce results type="hierarchical", # type of clustering control = hierarchical_control(method = "ward.D")) Gps % filter(continent == "Asia") %>% left_join(x=., y=Gps, by = "country") ### Select 15 countries at random to label on plot set.seed(123) selected_countries % group_by(Gp) %>% select(country) %>% unique() %>% sample_n(size = 4, replace = TRUE) %>% ungroup() %>% pull(country) %>% unique() sc_data % filter(year == 1982, country %in% selected_countries) ### lifeExp ggplot(data = gapminder_Asia, aes(x = year, y = lifeExp)) + geom_line(aes(group=country), color = "grey") + facet_wrap(~ Gp) + geom_line(data = gapminder_Asia %>% filter(country %in% selected_countries), aes(group=country)) + geom_text_repel(data = sc_data, aes(label = country), box.padding = 1, nudge_x = .15, nudge_y = .5, arrow = arrow(length = unit(0.015, "npc")), hjust = 0 ) + theme_bw()
