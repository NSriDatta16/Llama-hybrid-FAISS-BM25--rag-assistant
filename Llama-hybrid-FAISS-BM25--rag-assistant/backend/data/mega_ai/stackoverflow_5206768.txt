[site]: stackoverflow
[post_id]: 5206768
[parent_id]: 5204010
[tags]: 
ComboBox is a little tricky, because the way this widget works, the node with the id comboId will end up being the inner input node inside the widget, not the widget's top-level domNode (which receives the id widget_comboId instead). This is probably why that's having no effect for you. Note that not nearly all widgets do funny things like this, but namely widgets like dijit.form.TextBox and dijit.form.ComboBox (and widgets that extend them) do. Perhaps the simplest way around this would be to also add a class to your widget and style based on that instead (which is generally encouraged as it is more reusable than coupling specific IDs into your css anyway). Assuming you're instantiating declaratively: ... Then in your css: .comboClass { width: 50px; } Other solutions If you're instantiating this widget declaratively, you can apply the style inline and it will become properly mapped to the widget's domNode automatically: ... Alternatively, you can set the style attribute of the widget after it is instantiated: dijit.byId('comboId').set('style', {width: '50px'}); This is programmatically the equivalent to setting the width style inline on the DOM node declaratively.
