[site]: stackoverflow
[post_id]: 3050263
[parent_id]: 3045843
[tags]: 
You will need to do three things: When constructing your BitmapImage use StreamSource to supply the data. Do not use UriSource or pass a Uri into the constructor, which would cause the image to be added to the image cache. In your domain object's RealImage implementation, store a WeakReference to your BitmapImage not the BitmapImage itself. When RealImage is fetched, if either WeakReference or WeakReference.Target is null, create a new BitmapImage and a new WeakReference to it. Use a DataTrigger with template switching to only include your Image control in the visual tree when it is visible Here are the templates needed for step 3, including the one with the DataTrigger: Now you can define your ToolTip like this: How it works: There are two ContentPresenters inside one another: When the outer ContentPresenter is invisible, the inner ContentPresenter will have EmptyTemplate so no image will be loaded. When the outer ContentPresenter is visible, the inner ContentPresenter will have RealImageTemplate so the image will be loaded and displayed. The reason you need to do this is that a ToolTip may attempt to optimize performance by not disposing of the Popup once it has been shown. Update The code you posted for RealImage ought to work, and is almost exactly what I was thinking of. I realized this morning there is really no need to set BitmapCacheOption or BitmapCreateOption as long as no SourceUri is specified. I've updated my answer to reflect this and also to clarify the WeakReference thing. I also corrected a bug in the template: I was binding to "RealImage" when I should have been binding to "RealImage.Target".
