[site]: stackoverflow
[post_id]: 5370727
[parent_id]: 5340940
[tags]: 
If you change your marker in DistanceWidget to be a instance variable instead, and create a setPosition() method operating on that marker I think you should be able to do what you want; function DistanceWidget(map) { this.set('map', map); this.set('position', map.getCenter()); this.marker = new google.maps.Marker({ draggable: true, title: 'Drag to set centre', icon: 'images/mapicon3.png' }); this.marker.bindTo('map', this); this.marker.bindTo('position', this); var radiusWidget = new RadiusWidget(); radiusWidget.bindTo('map', this); radiusWidget.bindTo('center', this, 'position'); this.bindTo('distance', radiusWidget); this.bindTo('bounds', radiusWidget); } DistanceWidget.prototype = new google.maps.MVCObject(); /* Add the `setMarkerPosition` method to this class */ DistanceWidget.prototype.setMarkerPosition = function(position) { this.marker.setPosition(position); } And your init()-function becomes; function init() { var mapDiv = document.getElementById('map-canvas'); var map = new google.maps.Map(mapDiv, { center: new google.maps.LatLng(geoip_latitude(), geoip_longitude()), zoom: 11, mapTypeId: google.maps.MapTypeId.ROADMAP }); var distanceWidget = new DistanceWidget(map); /* Set up geo-functionality */ var geo = new google.maps.Geocoder(); geo.geocode({address: 'Piccadilly Circus, London'}, function(results, status) { if (status === google.maps.GeocoderStatus.OK) { distanceWidget.setMarkerPosition(results[0].geometry.location); map.setCenter(results[0].geometry.location); } }); ... DISCLAIMER: This is just from the top of my head, not tested plus I've never worked with these classes.
