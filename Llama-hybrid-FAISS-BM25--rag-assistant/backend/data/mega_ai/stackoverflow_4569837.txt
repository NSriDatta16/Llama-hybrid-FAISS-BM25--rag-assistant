[site]: stackoverflow
[post_id]: 4569837
[parent_id]: 
[tags]: 
Average calculation through time scale (SQL Server) - preparation for charting

I have the following table in SQL Server Express edition: Time Device Value 0:00 1 2 0:01 2 3 0:03 3 5 0:03 1 3 0:13 2 5 0:22 1 7 0:34 3 5 0:35 2 6 0:37 1 5 The table is used to log the events of different devices which are reporting their latest values. What I'd like to do is to prepare the data in a way that I'd present the average data through time scale and eventually create a chart using this data. I've manipulated this example data in Excel in the following way: Time Average value 0:03 3,666666667 0:13 4,333333333 0:22 5,666666667 0:34 5,666666667 0:35 6 0:37 5,333333333 So, at time 0:03 I need to take latest data I have in the table and calculate the average. In this case it's (3+3+5)/3=3,67. At time 0:13 the steps would be repeated, and again at 0:22,... As I'd like to leave the everything within the SQL table (I wouldn't like to create any service with C# or similar which would grab the data and store it into some other table) I'd like to know the following: is this the right approach or should I use some other concept of calculating the average for charting data preparation? if yes, what's the best approach to implement it? Table view, function within the database, stored procedure (which would be called from the charting API)? any suggestions on how to implement this? Thank you in advance. Mark Update 1 In the mean time I got one idea how to approach to this problem. I'd kindly ask you for your comments on it and I'd still need some help in getting the problem resolved. So, the idea is to crosstab the table like this: Time Device1Value Device2Value Device3Value 0:00 2 NULL NULL 0:01 NULL 3 NULL 0:03 3 NULL 5 0:13 NULL 5 NULL 0:22 7 NULL NULL 0:34 NULL NULL 5 0:35 NULL 6 NULL 0:37 5 NULL NULL The query for this to happen would be: SELECT Time, (SELECT Stock FROM dbo.Event WHERE Time = S.Time AND Device = 1) AS Device1Value, (SELECT Stock FROM dbo.Event WHERE Time = S.Time AND Device = 2) AS Device2Value, (SELECT Stock FROM dbo.Event WHERE Time = S.Time AND Device = 3) AS Device3Value FROM dbo.Event S GROUP BY Time What I'd still need to do is to write a user defined function and call it within this query which would write last available value in case of NULL and if the last available value doesn't exist it would leave NULL value. With this function I'd get the following results: Time Device1Value Device2Value Device3Value 0:00 2 NULL NULL 0:01 2 3 NULL 0:03 3 3 5 0:13 3 5 5 0:22 7 5 5 0:34 7 5 5 0:35 7 6 5 0:37 5 6 5 And by having this results I'd be able to calculate the average for each time by only SUMing up the 3 relevant columns and dividing it by count (in this case 3). For NULL I'd use 0 value. Can anybody suggest how to create a user defined function for replacing NULL values with latest value? Update 2 Thanks Martin. This query worked but it took almost 21 minutes to go through the 13.576 lines which is far too much. The final query I used was: SELECT Time, (SELECT TOP 1 Stock FROM dbo.Event e WHERE e.Time but I've extended it to 10 devices. I agree that this is not the best way to do it. Is there any other way to prepare the data for the average calculation because this takes just too much of the processing.
