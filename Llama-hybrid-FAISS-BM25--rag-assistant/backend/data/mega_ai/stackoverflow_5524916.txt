[site]: stackoverflow
[post_id]: 5524916
[parent_id]: 5524730
[tags]: 
I think it should go like this: $dom = new DOMDocument; $dom->loadHTML($html); $xpath = new DOMXPath($dom); $elements = $xpath->query('//pre | //code'); In some cases (e.g.: if you use getElementsByTagName instead of XPath), you will need to operate on an array to get the proper behaviour (see this question ), so you need to copy the nodes to an array. I'll do it for this example: $array = array(); foreach ($elements as $element) { $array[] = $element; } foreach ($array as $element) { $tag = $element->tagName; $content = $element->textContent; $lang = $element->getAttribute('lang'); $new_content = my_function($tag, $content, $lang); $new_element = $dom->createElement('div'); $new_element->setAttribute('class', "$tag $lang"); $new_element->nodeValue = $new_content; $element->parentNode->replaceChild($new_element, $element); } Of course, in the example above, the my_function is undefined. But it should give you a good idea on the howto. Note that this won't work on nested elements, like these: some nested element &lt;p&gt; a paragraph &lt;/p&gt; If you want to work on nested elements, use a function to get the innerHTML instead of using $element->textContent .
