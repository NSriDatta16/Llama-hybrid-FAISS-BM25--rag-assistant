[site]: stackoverflow
[post_id]: 739638
[parent_id]: 739391
[tags]: 
For a rather extreme approach check out Vesta . From Allan Heydon, Roy Levin, Timothy Mann, Yuan Yu. The Vesta Approach to Software Configuration Management : The Vesta approach is based on the following foundations: Immutable, immortal, versioned storage of all sources and tools. Unlike ClearCASE, Vesta uses explicit version numbers rather than views. Complete, source-based configuration descriptions. By complete, we mean that the descriptions name all elements contributing to a build. Every aspect of the computing environment, including tools, libraries, header files, and environment variables, is fully described and controlled by Vesta. By source-based, we mean that configuration descriptions specify how to build a system from scratch using only immutable sources (i.e., non-derived files). The descriptions themselves are versioned and immutable sources, and their meaning is constant; a particular top-level description always describes precisely the same build using the same sources, even after new versions of sources and descriptions have been created. Automatic derived file management. The storage and naming of derived files is managed automatically by the Vesta storage repository, thereby easing the burden of building multiple releases or building for multiple target platforms. Site-wide caching of all build work. Vesta features a shared site-wide cache of build results so developers can benefit from each others’ builds. Automatic dependency detection. The Vesta builder dynamically detects and records all dependencies, so none can be omitted by human error. By dynamically, we mean that the builder detects which sources are actually used in the process of constructing a build result and records dependencies only on them. Vesta’s dependency analysis does not make use of any knowledge of how the build tools work; it is thus semantics-independent in the terminology of Gunter [7]. For example, if a compiler reads file foo.h in the process of compiling file foo.c, Vesta will assume that the compiler’s output depends on all of foo.h, even though a tool with knowledge of C might be able to find individual items in foo.h that could be changed without changing the result of the compilation.
