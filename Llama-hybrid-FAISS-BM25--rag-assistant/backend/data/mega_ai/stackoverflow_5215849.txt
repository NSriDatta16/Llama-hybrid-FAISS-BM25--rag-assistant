[site]: stackoverflow
[post_id]: 5215849
[parent_id]: 
[tags]: 
Continuation passing style - function composition

I'm learning about CPS with Racket, and I've managed to write up these functions: ;lift a regular single-arg function into CPS (define (lift/k f) (lambda (x k) (k (f x)))) ;compose two CPS functions (define (compose/k f g) (lambda (x k) (g x (lambda (y) (f y k))))) They seem to work correctly (define (is-two/k x k) (k (= x 2))) (define is-not-two/k (compose/k (lift/k not) is-two/k)) (is-not-two/k 3 display) (is-not-two/k 2 display) #t#f I'm wondering if these functions are still "true CPS". Have I messed up "true" continuation-passing with these functions? Is it kosher to use function composition techniques in CPS? Is it encouraged? Or would it be considered a "compromise" to do this? Is there a more CPS-y way to do it? Yes I know I just asked 5 questions, but the basic idea behind them all (which I'm not sure I understand correctly) is the same. Explanations in other Lisps, Haskell, Erlang, or other functional languages are fine.
