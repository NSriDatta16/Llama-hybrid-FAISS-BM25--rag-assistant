[site]: stackoverflow
[post_id]: 5677733
[parent_id]: 1887388
[tags]: 
I am assuming that you are wanting to add items to a ComboBox on an Windows form. Although Klaus is on the right track I believe that the ListItem class is a member of the System.Web.UI.WebControls namespace. So you shouldn't be using it in a Windows forms solution. You can, however, create your own class that you can use in its place. Create a simple class called MyListItem (or whatever name you choose) like this: Public Class MyListItem Private mText As String Private mValue As String Public Sub New(ByVal pText As String, ByVal pValue As String) mText = pText mValue = pValue End Sub Public ReadOnly Property Text() As String Get Return mText End Get End Property Public ReadOnly Property Value() As String Get Return mValue End Get End Property Public Overrides Function ToString() As String Return mText End Function End Class Now when you want to add the items to your ComboBox you can do it like this: myComboBox.Items.Add(New MyListItem("Text to be displayed", "value of the item")) Now when you want to retrieve the value of the selected item from your ComboBox you can do it like this: Dim oItem As MyListItem = CType(myComboBox.SelectedItem, MyListItem) MessageBox.Show("The Value of the Item selected is: " & oItem.Value) One of the keys here is overriding the ToString method in the class. This is where the ComboBox gets the text that is displayed. Matt made an excellent point, in his comment below, about using Generics to make this even more flexible. So I wondered what that would look like. Here's the new and improved GenericListItem class: Public Class GenericListItem(Of T) Private mText As String Private mValue As T Public Sub New(ByVal pText As String, ByVal pValue As T) mText = pText mValue = pValue End Sub Public ReadOnly Property Text() As String Get Return mText End Get End Property Public ReadOnly Property Value() As T Get Return mValue End Get End Property Public Overrides Function ToString() As String Return mText End Function End Class And here is how you would now add Generic items to your ComboBox. In this case an Integer: Me.myComboBox.Items.Add(New GenericListItem(Of Integer)("Text to be displayed", 1)) And now the retrieval of the item: Dim oItem As GenericListItem(Of Integer) = CType(Me.myComboBox.SelectedItem, GenericListItem(Of Integer)) MessageBox.Show("The value of the Item selected is: " & oItem.Value.ToString()) Keep in mind that the type Integer can be any type of object or value type. If you want it to be an object from one of your own custom classes that's fine. Basically anything goes with this approach.
