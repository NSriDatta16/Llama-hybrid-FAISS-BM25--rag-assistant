[site]: crossvalidated
[post_id]: 152107
[parent_id]: 
[tags]: 
How to make sure that a machine learning algorithm's implementation is correct?

Say there is a machine learning algorithm (e.g. classification) that is well known and implemented by the original creators of the algorithm. Yet all you have is the ability to use the algorithm but not see the source code. Now you want to implement this algorithm and then check if your implementation is correct or not. Since you can't use the same initialization values to the parameters (because you don't have access to the source code of the original implementation) then you can't expect to get exactly the same results. Say that the algorithm gives as outputs probabilities, then your method could give a slightly different result from the original method. It's true that your implementation could give the correct classification results as with the original implementation but the probabilities could be different. Given such a scenario, how would you judge that your implementation is correct? This exact situation happened with a friend whose implementation gave the correct classification results but after all he found a serious bug in his code! So is there a way to test and validate the implementation of a machine learning algorithm in general? Regardless of type of the algorithm (classification, regression ... etc). The only problem I can see is not being able to use the same initial values for the parameters. Then maybe there is some kind of a statistical test that can test the results with respect to the initial values of the parameters somehow.
