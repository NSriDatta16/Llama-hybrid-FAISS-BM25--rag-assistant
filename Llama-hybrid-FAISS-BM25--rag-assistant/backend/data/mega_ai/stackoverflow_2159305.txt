[site]: stackoverflow
[post_id]: 2159305
[parent_id]: 2158458
[tags]: 
If this is a project that is intended to lead to production-quality code, I strongly advise you not implement your own framework. Firstly, it is apparent that you don't really know enough about what your application requires of a framework, or the various technologies that you can use to implement such a framework. Do not underestimate your lack of knowledge, and the risks of undertaking a project where you don't know what you are doing when you start out. Second, your motivation for implementing your own framework is wrong. If you find an existing framework too big and complicated for your needs, either choose a simpler framework or just learn the subset that you need to do your job ... and ignore the rest. Third, it is a lot of work designing and building even a half-decent framework. That is probably time you should be spending building your actual application. Sure it is fun, but your boss is probably more interested in results. Fourth, don't underestimate the intrinsic advantages of using a framework that lots of other people use; e.g. a community to ask questions of (like on SO), a community to improve the framework, employable people with the framework on their CVs. Finally, by implementing your own framework you are most likely creating a lot of extra future maintenance work for team / company. You get it wrong and your colleagues will be cursing you up and down the corridors for the next 10 years. Even if you get the framework 100% right, someone in your organisation still has to maintain it for the lifetime of the applications that depend on it.
