[site]: stackoverflow
[post_id]: 1836463
[parent_id]: 1835903
[tags]: 
UPDATE: The method below will search through the subtree headed by container and wrap all instances of text in a span element. The words can occur anywhere within a text node, and the text node can occur at any position in the subtree. (OK, so it took more than a few minor tweaks. :P) function wrapText(container, text) { // Construct a regular expression that matches text at the start or end of a string or surrounded by non-word characters. // Escape any special regex characters in text. var textRE = new RegExp('(^|\\W)' + text.replace(/[\\^$*+.?[\]{}()|]/, '\\$&') + '($|\\W)', 'm'); var nodeText; var nodeStack = []; // Remove empty text nodes and combine adjacent text nodes. container.normalize(); // Iterate through the container's child elements, looking for text nodes. var curNode = container.firstChild; while (curNode != null) { if (curNode.nodeType == Node.TEXT_NODE) { // Get node text in a cross-browser compatible fashion. if (typeof curNode.textContent == 'string') nodeText = curNode.textContent; else nodeText = curNode.innerText; // Use a regular expression to check if this text node contains the target text. var match = textRE.exec(nodeText); if (match != null) { // Create a document fragment to hold the new nodes. var fragment = document.createDocumentFragment(); // Create a new text node for any preceding text. if (match.index > 0) fragment.appendChild(document.createTextNode(match.input.substr(0, match.index))); // Create the wrapper span and add the matched text to it. var spanNode = document.createElement('span'); spanNode.appendChild(document.createTextNode(match[0])); fragment.appendChild(spanNode); // Create a new text node for any following text. if (match.index + match[0].length
