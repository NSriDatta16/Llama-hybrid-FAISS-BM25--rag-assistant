[site]: stackoverflow
[post_id]: 5334027
[parent_id]: 
[tags]: 
How to find the address & length of a C++ function at runtime (MinGW)

As this is my first post to stackoverflow I want to thank you all for your valuable posts that helped me a lot in the past. I use MinGW (gcc 4.4.0) on Windows-7(64) - more specifically I use Nokia Qt + MinGW but Qt is not involved in my Question. I need to find the address and -more important- the length of specific functions of my application at runtime, in order to encode/decode these functions and implement a software protection system. I already found a solution on how to compute the length of a function, by assuming that static functions placed one after each other in a source-file, it is logical to be also sequentially placed in the compiled object file and subsequently in memory. Unfortunately this is true only if the whole CPP file is compiled with option: "g++ -O0" (optimization level = 0). If I compile it with "g++ -O2" (which is the default for my project) the compiler seems to relocate some of the functions and as a result the computed function length seems to be both incorrect and negative(!). This is happening even if I put a "#pragma GCC optimize 0" line in the source file, which is supposed to be the equivalent of a "g++ -O0" command line option. I suppose that "g++ -O2" instructs the compiler to perform some global file-level optimization (some function relocation?) which is not avoided by using the #pragma directive. Do you have any idea how to prevent this, without having to compile the whole file with -O0 option? OR: Do you know of any other method to find the length of a function at runtime? I prepare a small example for you, and the results with different compilation options, to highlight the case. The Source: // =================================================================== // test.cpp // // Intention: To find the addr and length of a function at runtime // Problem: The application output is correct when compiled with: "g++ -O0" // but it's erroneous when compiled with "g++ -O2" // (although a directive "#pragma GCC optimize 0" is present) // =================================================================== #include #include #pragma GCC optimize 0 static int test_01(int p1) { putchar('a'); putchar('\n'); return 1; } static int test_02(int p1) { putchar('b'); putchar('b'); putchar('\n'); return 2; } static int test_03(int p1) { putchar('c'); putchar('\n'); return 3; } static int test_04(int p1) { putchar('d'); putchar('\n'); return 4; } // Print a HexDump of a specific address and length void HexDump(void *startAddr, long len) { unsigned char *buf = (unsigned char *)startAddr; printf("addr:%ld, len:%ld\n", (long )startAddr, len); len = (long )fabs(len); while (len) { printf("%02x.", *buf); buf++; len--; } printf("\n"); } int main(int argc, char *argv[]) { printf("======================\n"); long fun_len = (long )test_02 - (long )test_01; HexDump((void *)test_01, fun_len); printf("======================\n"); fun_len = (long )test_03 - (long )test_02; HexDump((void *)test_02, fun_len); printf("======================\n"); fun_len = (long )test_04 - (long )test_03; HexDump((void *)test_03, fun_len); printf("Test End\n"); getchar(); // Just a trick to block optimizer from eliminating test_xx() functions as unused if (argc > 1) { test_01(1); test_02(2); test_03(3); test_04(4); } } The (correct) Output when compiled with "g++ -O0": [note the 'c3' byte (= assembly 'ret') at the end of all functions] ====================== addr:4199344, len:37 55.89.e5.83.ec.18.c7.04.24.61.00.00.00.e8.4e.62.00.00.c7.04.24.0a.00.00.00.e8.42 .62.00.00.b8.01.00.00.00.c9.c3. ====================== addr:4199381, len:49 55.89.e5.83.ec.18.c7.04.24.62.00.00.00.e8.29.62.00.00.c7.04.24.62.00.00.00.e8.1d .62.00.00.c7.04.24.0a.00.00.00.e8.11.62.00.00.b8.02.00.00.00.c9.c3. ====================== addr:4199430, len:37 55.89.e5.83.ec.18.c7.04.24.63.00.00.00.e8.f8.61.00.00.c7.04.24.0a.00.00.00.e8.ec .61.00.00.b8.03.00.00.00.c9.c3. Test End The erroneous Output when compiled with "g++ -O2": (a) function test_01 addr & len seem correct (b) functions test_02, test_03 have negative lengths, and fun. test_02 length is also incorrect. ====================== addr:4199416, len:36 83.ec.1c.c7.04.24.61.00.00.00.e8.c5.61.00.00.c7.04.24.0a.00.00.00.e8.b9.61.00.00 .b8.01.00.00.00.83.c4.1c.c3. ====================== addr:4199452, len:-72 83.ec.1c.c7.04.24.62.00.00.00.e8.a1.61.00.00.c7.04.24.62.00.00.00.e8.95.61.00.00 .c7.04.24.0a.00.00.00.e8.89.61.00.00.b8.02.00.00.00.83.c4.1c.c3.57.56.53.83.ec.2 0.8b.5c.24.34.8b.7c.24.30.89.5c.24.08.89.7c.24.04.c7.04. ====================== addr:4199380, len:-36 83.ec.1c.c7.04.24.63.00.00.00.e8.e9.61.00.00.c7.04.24.0a.00.00.00.e8.dd.61.00.00 .b8.03.00.00.00.83.c4.1c.c3. Test End
