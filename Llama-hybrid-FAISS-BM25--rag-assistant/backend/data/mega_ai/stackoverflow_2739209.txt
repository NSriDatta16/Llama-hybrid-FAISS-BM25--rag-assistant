[site]: stackoverflow
[post_id]: 2739209
[parent_id]: 2731470
[tags]: 
Instead of using a regular expression, use an HTML tree walker to find the second paragraph and add whatever you like. I talked about this sort of thing in my Process HTML with a Perl module article for InformIT. The advantage of something like HTML::TreeBuilder is that you deal with the logical structure of the HTML rather than contending with the position and order of random characters in a regular expression. If the structure stays the same, a tree walker should keep working. If you change almost anything, the regex is probably going to break. An HTML::TreeBuilder example looks something like this: #!perl use strict; use warnings; use HTML::TreeBuilder; use HTML::Element; my $html = HTML::TreeBuilder->new; my $root = $html->parse_file( *DATA ); my $second = ( $root->find_by_tag_name('p') )[1]; my $new_para = HTML::Element->new( 'p' ); $new_para->push_content( 'Add this line' ); $second->postinsert( $new_para ); print $root->as_HTML( undef, "\t", {} ); __END__ This is the first paragraph This is the second paragraph This is the last paragraph If you need to clean up your data first, you can throw in some steps to use HTML::Tidy with the enclose_text option.
