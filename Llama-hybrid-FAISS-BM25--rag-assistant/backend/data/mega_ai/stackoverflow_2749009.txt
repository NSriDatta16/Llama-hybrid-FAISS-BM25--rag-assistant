[site]: stackoverflow
[post_id]: 2749009
[parent_id]: 2748995
[tags]: 
In C, the compiler is allowed to dictate some alignment for every primitive type. Typically the alignment is the size of the type. But it's entirely implementation-specific. Padding bytes are introduced so every object is properly aligned. Reordering is not allowed. Possibly every remotely modern compiler implements #pragma pack which allows control over padding and leaves it to the programmer to comply with the ABI. (It is strictly nonstandard, though.) From C99 ยง6.7.2.1: 12 Each non-bit-field member of a structure or union object is aligned in an implementation- defined manner appropriate to its type. 13 Within a structure object, the non-bit-field members and the units in which bit-fields reside have addresses that increase in the order in which they are declared. A pointer to a structure object, suitably converted, points to its initial member (or if that member is a bit-field, then to the unit in which it resides), and vice versa. There may be unnamed padding within a structure object, but not at its beginning.
