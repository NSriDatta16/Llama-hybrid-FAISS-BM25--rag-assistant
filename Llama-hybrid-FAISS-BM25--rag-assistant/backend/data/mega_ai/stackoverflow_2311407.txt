[site]: stackoverflow
[post_id]: 2311407
[parent_id]: 2311196
[tags]: 
To reduce code duplication and the errors resulting from it, all validation code should be in a single layer - preferably the business layer, as it is in the best position to evaluate the object and determine if it is valid or not. However, while that is a theoretical ideal, it is often not pragmatic in real world situations. In a client-server environment, like ASP.NET, you want to duplicate as much of the validation as possible on the client side, in order to reduce round trips to the server. Also, if you have other business procedures (such as batch uploads) that touch your table without going through your business object, you will need to implement the validation in the database as well, to prevent garbage data from being created. For validation like in your example, I would create three validation methods on my business object and three CustomValidators - each validator would call the corresponding method on the business object on the server side. I would also code up some JavaScript to run on the client side, so the server side code would just exist to catch non-JavaScript enabled browsers, or maliciously crafted HTTP requests. For validation that is difficult to do in JavaScript (i.e. requires the business object), I will not bother with a CustomValidator. Instead, those validations wait until the user presses the submit button, at which point I can use the business object to validate itself and return any errors.
