[site]: stackoverflow
[post_id]: 1122698
[parent_id]: 1122675
[tags]: 
Using a second table for options is a good idea. Some forum frameworks use this method. Each of your users are given a UserGroupId which is usually an Int since they are easiest to work with. UserGroupId of 1 for instance, could be an admin, 2 could be a teacher (depends on your organization). Then you have a table called Permissions, on this table you include all options as Columns, something like this. UserGroupID --|-- SearchEnabled --|-- CanOrder 1 0 1 2 1 1 Using a simple binary system, 1 enabled, 0 disabled, you can control options for each user group. This allows you to get all permissions with a single query, while still offering a very large area for customization. You don't have to use binary numbers though. For instance you could use values 1,2,3 where 1 is full permission, 2 is partial, and 3 is zero. It depends on how specific your regulations need to be. Now before you allow a user to perform an option you do a simple check on the users permissions (which you should store in an array or a class for quick access). For a function that enables search you would use a condition such as If ($user['SearchEnabled') { $generate->SearchOptions(); } else { $generate->Error('NoSearchPermissions'); } Using binary numbers has the obvious benefit of simply check if TRUE or FALSE. If you use a different numbering system it would require a bit more work, checking the specific value If ($user['SearchEnabled'] == 2 || $user['SearchEnabled'] == 1)
