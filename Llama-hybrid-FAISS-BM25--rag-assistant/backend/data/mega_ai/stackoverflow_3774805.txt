[site]: stackoverflow
[post_id]: 3774805
[parent_id]: 3156705
[tags]: 
This is wrong on so many levels. This is a massive abuse of serialization. Serialization is mostly intended for temporarily storing an object. For example, session objects between tomcat server restarts. transferring objects between jvms ( load balancing at website ) Java's serialization makes no effort to handle long-term storage of objects (No versioning support) and may not handle large objects well. For something so big, I would suggest some investigation first: Ensure that you are not trying to persist the entire JVM Heap. Look for member variables that can be labeled as 'transient' to avoid including them it the serialization ( perhaps you have references to service objects ) Consider possibility that there is a memory leak and the object is excessively large. If everything is indeed correct, you will have to research alternatives to java.io.Serialization. Taking more control via java.io.Externalization might work. But I would suggest something like a json or xml representation. Update: Investigate : google's protocol buffer facebook's Thrift Avro Cisco's Etch Take a look at this benchmarkings as well.
