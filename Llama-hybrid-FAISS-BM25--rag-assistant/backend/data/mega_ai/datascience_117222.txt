[site]: datascience
[post_id]: 117222
[parent_id]: 
[tags]: 
why CNN model can't learn well the peak from data

here I have two different datasets. dataset1 is force plate data and dataset2 is plantar pressure data. dataset1 has shape (2050,2) and dataset2 has shape (2050,89). before doing the training I have normalized the data using minmaxscaler() with a scale of 0-1. after normalizing the data then I did data preprocessing for dataset2 using PCA. here I will reduce the data dimension of the plantar pressure to 12, so the current plantar pressure datashape is (2050.12). here is my CNN model: import math import numpy as np import pandas as pd import tensorflow as tf import seaborn as sns import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler,StandardScaler, RobustScaler from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error, r2_score from tensorflow.keras.models import Sequential from tensorflow.keras.layers import LSTM,Activation,Dense,BatchNormalization, LeakyReLU, Conv2D, MaxPooling1D, Conv1D, MaxPooling1D, Flatten, Dropout from tensorflow.keras.losses import sparse_categorical_crossentropy from tensorflow.keras.optimizers import Adam, RMSprop, SGD, Adadelta, Adagrad from sklearn.decomposition import PCA from sklearn.model_selection import KFold from numpy import zeros, newaxis from sklearn.feature_selection import mutual_info_regression from sklearn.feature_selection import mutual_info_regression,SelectKBest np.set_printoptions(suppress=True) %matplotlib inline Insole = pd.read_csv('1119_Rwalk40s2_list.txt', header=None, low_memory=False) SIData = np.asarray(Insole) df = pd.read_csv('1119_Rwalk40s2.csv', low_memory=False) columns = ['Fx','Fz'] selected_df = df[columns] FCDatas = selected_df[:2050] SmartInsole = np.array(SIData[:2050]) FCData = np.array(FCDatas) scaler_x = MinMaxScaler(feature_range=(0, 1)) scaler_x.fit(SmartInsole) xscale = scaler_x.transform(SmartInsole) scaler_y = MinMaxScaler(feature_range=(0, 1)) scaler_y.fit(FCData) yscale = scaler_y.transform(FCData) SIDataPCA = xscale pca = PCA(n_components=0.99) pca.fit(SIDataPCA) SIdata_pca = pca.transform(SIDataPCA) X_train, X_test, y_train, y_test = train_test_split(SIdata_pca, yscale, test_size=0.10, random_state=2) model = Sequential() model.add(Conv1D(64,kernel_size=2,strides=1,padding='same',data_format='channels_last',input_shape=(X_train.shape[1],1))) model.add(Activation('relu')) model.add(MaxPooling1D(pool_size = 2, strides = 2)) model.add(Conv1D(32,kernel_size=2,strides=1,padding='same')) model.add(Activation('relu')) model.add(MaxPooling1D(pool_size = 2, strides = 2)) model.add(Conv1D(16,kernel_size=2,strides=1,padding='same')) model.add(Activation('relu')) model.add(MaxPooling1D(pool_size = 2, strides = 2)) model.add(LSTM(units=16)) model.add(Dense(16,activation='relu')) model.add(Dense(2, activation='sigmoid')) model.summary() model.compile(loss='mse', optimizer=Adam(), metrics=['mse']) history = model.fit(X_train, y_train, batch_size=64, epochs=50, validation_data=(X_test, y_test), verbose=2) model.evaluate(SIdata_pca, yscale) ypred = model.predict(SIdata_pca) plt.figure() plt.plot(history.history['loss']) plt.plot(history.history['val_loss']) plt.title('Model Loss') plt.ylabel('Loss') plt.xlabel('epoch') plt.legend(['train', 'validation'], loc='upper right') # plt.show() plt.savefig('Loss Result.png') x=[] colors=['red','green','brown','teal','gray','black','maroon','orange','purple'] colors2=['green','red','orange','black','maroon','teal','blue','gray','brown'] for i in range(0,2050): x.append(i) for i in range(0,2): plt.figure(figsize=(15,6)) # plt.figure() plt.plot(x,yscale[0:2050,i], color=colors[i]) plt.plot(x,ypred[0:2050,i], markerfacecolor='none',color=colors2[i]) plt.title('Result for ResNet Regression') plt.ylabel('Y value') plt.xlabel('Instance') plt.legend(['Real value', 'Predicted Value'], loc='upper right') plt.savefig('Regression Result.png'[i]) plt.show() below is the model loss plot looking at the training loss model, I don't think there is any indication of overvitting in training, but why can't my model predict high peaks from train data? prediction results:
