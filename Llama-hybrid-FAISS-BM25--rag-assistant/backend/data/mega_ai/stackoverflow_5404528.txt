[site]: stackoverflow
[post_id]: 5404528
[parent_id]: 5400894
[tags]: 
If you wanted to recover the Type.Prop.[args] notation, then you can define a simple object to represent an indexable property with the Item property: type IndexedProperty (getter, setter) = member x.Item with get (a:'I) : 'T = getter a and set (a:'I) (v:'T) : unit = setter a v type ObjWithStaticProperty = static member StaticPropertyIndexed1 = IndexedProperty((fun x -> 3), (fun x v -> ())) ObjWithStaticProperty.StaticPropertyIndexed1.[0] This returns a new instance of IndexedProperty every time, so it may be better to cache it. Anyway, I think this is quite nice trick and you can encapsulate some additional behavior into the property type. A digression: I think that an elegant extension to F# would be to have first-class properties just like it has first-class events . (You could for example create properties that automatically support INotifyPropertyChange with just one line of code)
