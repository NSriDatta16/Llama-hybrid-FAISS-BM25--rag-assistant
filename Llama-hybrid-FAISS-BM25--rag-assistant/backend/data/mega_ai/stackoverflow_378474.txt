[site]: stackoverflow
[post_id]: 378474
[parent_id]: 143232
[tags]: 
An alternative to FxCop would be to use the tool NDepend that lets write Code Rules over C# LINQ Queries (namely CQLinq) . Disclaimer: I am one of the developers of the tool More than 200 code rules are proposed by default. Customizing existing rules or creating your own rules is straightforward thanks to the well-known C# LINQ syntax. NDepend overlaps with FxCop on some code rules, but proposes plenty of unique code rules. Here are a few rules that I would classify as must-follow : Avoid decreasing code coverage by tests of types Avoid making complex methods even more complex (Source CC) Avoid transforming an immutable type into a mutable one Overrides of Method() should call base.Method() Avoid the Singleton pattern Types with disposable instance fields must be disposable Disposable types with unmanaged resources should declare finalizer Avoid namespaces mutually dependent Avoid namespaces dependency cycles UI layer shouldn't use directly DB types API Breaking Changes: Methods Complex methods partially covered by tests should be 100% covered Potentially dead Types Structures should be immutable Avoid naming types and namespaces with the same identifier Notice that Rules can be verified live in Visual Studio and at Build Process time, in a generated HTML+javascript report .
