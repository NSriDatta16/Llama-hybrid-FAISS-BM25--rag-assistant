[site]: stackoverflow
[post_id]: 5084692
[parent_id]: 5083619
[tags]: 
You'll be out of luck there I'm afraid. As Pa≈≠lo Ebermann says, package.access can block out package hierarchies. You can be more precise about this with a custom SecurityManager , which is usually a damn good indication you are doing something really dodgy. In general you can make a ClassLoader that doesn't always delegate to its parent. Technically against the current Java SE spec, although the Java EE spec encourages it. You could block out java.util.Date . It's still accessible through reflection if any other class references it, or you can get an instance of it. You could block out the transitive closure of uses of Date , including those that in some way return a Date . However, to complete the scheme with your minimal date you'd have to load a java.util.Date in your class loader, which you can't along with all other java.* classes. So, err, replace the java.util.Date class in rt.jar (possibly using a Java Agent), and substitute in any class you don't want to restrict new Date() with new Date(System.currentTimeMillis()) . (Btw, +1 to anything that reduces the dependency on System.currentTimeMillis() and other magic methods.)
