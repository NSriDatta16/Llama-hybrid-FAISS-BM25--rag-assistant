[site]: stackoverflow
[post_id]: 3689215
[parent_id]: 3689207
[tags]: 
Forcing the garbage collector to run is almost always a bad idea. (In some instances, forcing it to run early could actually promote the lifetimes of objects) Download a tool like Memprofiler , Ants or dotTrace (they all have trial versions), to identify whether you are leaking memory. Are you allocating objects larger than 85Kb? Also, what version of the OS and .NET Framework are you using? (there were differences in how the server and PC versions of the GC worked) Also, be aware that insertion into a SortedList is O(N) (whereas a SortedDictionary insertion is O(logN): The SortedList generic class is a binary search tree with O(log n) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the SortedDictionary generic class. The two classes have similar object models, and both have O(log n) retrieval. Where the two classes differ is in memory use and speed of insertion and removal: SortedList uses less memory than SortedDictionary. SortedDictionary has faster insertion and removal operations for unsorted data, O(log n) as opposed to O(n) for SortedList. If the list is populated all at once from sorted data, SortedList is faster than SortedDictionary. Ref . How are you managing multithreaded access to these lists? Can you post some cut-down code?
