[site]: stackoverflow
[post_id]: 3156113
[parent_id]: 3155469
[tags]: 
The instance you're trying to write, let's call it fmap2 for now, has the following type: fmap2 :: (a -> b) -> Either a c -> Either b c If you set the LANGUAGE pragma TypeOperators , GHC also accepts the type fmap2 :: (a -> b) -> (a `Either` c) -> (b `Either` c) In an ideal world this also would work: fmap2 :: (a -> b) -> (`Either` c) a -> (`Either` c) b which would give a Functor instance for (`Either` c) but the similarity between normal operators (and their sections) and type operators breaks down at this point (unless there's a GHC option I'm missing!) In short: your understanding of functors is okay, but you're bitten by the lack of type-level lambdas.
