[site]: stackoverflow
[post_id]: 109426
[parent_id]: 104618
[tags]: 
Many great answers to this questions, thanks people. I'd like to put here an editable answer that brings things together. For those familiar with C# understanding -> being the same as => lamba expression is a good first step. This usage is :- fun x y -> x + y + 1 Can be understood as the equivalent to:- (x, y) => x + y + 1; However its clear that -> has a more fundemental meaning which stems from concept that a function that takes two parameters such as the above can be reduced (is that the correct term?) to a series of functions only taking one parameter. Hence when the above is described in like this:- Int -> Int -> Int It really helped to know that -> is right associative hence the above can be considered:- Int -> (Int -> Int) Aha! We have a function that takes Int and returns (Int -> Int) (a curried function?). The explaination that -> can also appear as part of type definiton also helped. (Int -> Int) is the type of any of function which takes an Int and returns an Int. Also helpful is the -> appears in other syntax such as matching but there it doesn't have the same meaning? Is that correct? I'm not sure it is. I suspect it has the same meaning but I don't have the vocabulary to express that yet. Note the purpose of this answer is not to spawn further answers but to be collaboratively edited by you people to create a more definitive answer. Utlimately it would be good that all the uncertainies and fluf (such as this paragraph) be removed and better examples added. Lets try keep this answer as accessible to the uninitiated as possible.
