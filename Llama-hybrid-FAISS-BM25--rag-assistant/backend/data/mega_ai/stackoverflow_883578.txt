[site]: stackoverflow
[post_id]: 883578
[parent_id]: 
[tags]: 
Deciding on a database structure for pricing wizard

Option A We are working on a small project that requires a pricing wizard for custom tables. (yes, actual custom tables- the kind you eat at. From here out I'll call them kitchen tables so we don't get confused) I came up with a model where each kitchen table part was a database table. So the database looked like this: TableLineItem ------------- ID TableSizeID TableEdgeWoodID TableBaseID Quantity TableEdgeWoodID --------------- ID Name MaterialUnitCost LaborSetupHours LaborWorkHours Each part has to be able to calculate its price. Most of the calculations are very similar. I liked this structure because I can drag it right into the linq-to-sql designer, and have all of my classes generated. (Less code writing means less to maintain...) I then implement a calculate cost interface which just takes in the size of the table. I have written some tests and this functions pretty well. I added also added a table to filter parts in the UI based on previous selections. (You can't have a particular wood with a particular finish.) There some other one off exceptions in the model, and I have them hard coded. This model is very rigid, and changing requirements would change the datamodel. (For example, if all the tables suddenly need umbrellas.) Option B: After various meetings with my colleagues (which probably took more time than it should considering the size of this project), my colleagues decided they would prefer a more generic approach. Something like this: Spec ---- SpecID SpecTypeID TableType_LookupID Name MaterialUnitCost LaborSetupHours LaborWorkHours SpecType -------- SpecTypeID ParentSpecType_SpecTypeID IsCustomerOption IsRequiredCustomerOption etc... This is a much more generic approach that could be used to construct any product. (like, if they started selling chairs...) I think this would take longer time to implement, but would be more flexible in the future. (although I doubt we will revisit this.) Also you lose some referential integrity- you would need triggers to enforce that a table base cannot be set for a table wood. Questions: Which database structure do you prefer? Feel free to suggest your own. What would be considered a best practice? If you have several similar database tables, do you create 1 database table with a type column, or several distinct tables? I suspect the answer begins with "It depends..." What would an estimated time difference be in the two approaches (1 week, 1 day, 150% longer, etc) Thanks in advance. Let me know if you have any questions so I can update this.
