[site]: stackoverflow
[post_id]: 5165686
[parent_id]: 5161958
[tags]: 
What do you mean by most efficient? I will assume that by efficient you mean performant, and not elegant, DRY, maintainable code, etc. From a DB viewpoint, if you want to insert 100 records into the DB, this will translate to 100 "INSERT INTO events_models VALUES (x, x)" sql queries (and maybe 100 "SELECT COUNT(*) .." queries if you also have a uniqueness validation). So, even if the method you want would be implemented in AR, it would still have a loop on the attribute arrays with a save on each event_id, user_id pair). From Ruby/Rails point of view, if you want to have validations/callbacks/etc on your model, then you must create an ActiveRecord instance one by one in a loop. Now, if you want to super optimize your method (to drop the instantiation of an ActiveRecord class), you can manually write the sql queries (therefore saving some time and memory). The gains are however minimal in comparison with the risks. Btw, e.save! is not necessary as: The same dynamic finder style can be used to create the object if it doesnâ€™t already exist. This dynamic finder is called with find_or_create_by_ and will return the object if it already exists and otherwise creates it, then returns it.
