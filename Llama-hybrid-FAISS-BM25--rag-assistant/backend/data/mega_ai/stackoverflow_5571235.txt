[site]: stackoverflow
[post_id]: 5571235
[parent_id]: 
[tags]: 
Computing multiple results from one array iteration

I want to compute multiple functions in one iteration of an array or list, but might want to grow the list of functions dynamically. For example, I might want to compute min and max, and then, also want the average function (or any other linear complexity function) sometime later. So, I might want to have a high-level specification (using some functions called addFunc and applyAllFuncs such as funcs = emptyFunctionList; # no functions in funcs "list" yet funcs = addFunc (min, funcs); # add minimum function funcs1 = addFunc (max, funcs); # add maximum function answers1 = applyAllFuncs (funcs1, myArray); funcs2 = addFunc (avg, funcs); # add average function answers2 = applyAllFuncs (funcs2, myArray); I can do this quite easily in a functional language by creating a "superfunction" from these functions that gets passed to a foldl , and metaprogramming might be a mechanism to also do this much more efficiently in Haskell/C++, but wanted to know if there's an efficient and not-very-complex way that this is normally done (or can be done) in standard Java (without having to do a lot to simulate/implement higher-level functions).
