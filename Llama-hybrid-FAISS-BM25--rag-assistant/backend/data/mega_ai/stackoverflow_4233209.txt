[site]: stackoverflow
[post_id]: 4233209
[parent_id]: 26663
[tags]: 
I have never done profiling before. Yesterday I programmed a ProfilingTimer class with a static timetable (a map ) for time storage. The constructor stores the starting tick, and the destructor calculates the elapsed time and adds it to the map: ProfilingTimer::ProfilingTimer(std::string name) : mLocalName(name) { sNestedName += mLocalName; sNestedName += " > "; if(sTimetable.find(sNestedName) == sTimetable.end()) sTimetable[sNestedName] = 0; mStartTick = Platform::GetTimerTicks(); } ProfilingTimer::~ProfilingTimer() { long long totalTicks = Platform::GetTimerTicks() - mStartTick; sTimetable[sNestedName] += totalTicks; sNestedName.erase(sNestedName.length() - mLocalName.length() - 3); } In every function (or {block}) that I want to profile i need to add: ProfilingTimer _ProfilingTimer("identifier"); This line is a bit cumbersome to add in all functions I want to profile since I have to guess which functions take a lot of time. But it works well and the print function shows time consumed in %. (Is anyone else working with any similar "home-made profiling"? Or is it just stupid? But it's fun! Does anyone have improvement suggestions? Is there some sort of auto-adding a line to all functions?)
