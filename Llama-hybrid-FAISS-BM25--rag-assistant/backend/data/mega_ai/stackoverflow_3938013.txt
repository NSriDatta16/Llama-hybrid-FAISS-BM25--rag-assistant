[site]: stackoverflow
[post_id]: 3938013
[parent_id]: 3937000
[tags]: 
Update 2016: Google Chrome released the storage API: https://developer.chrome.com/docs/extensions/reference/storage/ It is pretty easy to use like the other Chrome APIs and you can use it from any page context within Chrome. // Save it using the Chrome extension storage API. chrome.storage.sync.set({'foo': 'hello', 'bar': 'hi'}, function() { console.log('Settings saved'); }); // Read it using the storage API chrome.storage.sync.get(['foo', 'bar'], function(items) { message('Settings retrieved', items); }); To use it, make sure you define it in the manifest: "permissions": [ "storage" ], There are methods to "remove", "clear", "getBytesInUse", and an event listener to listen for changed storage "onChanged" Using native localStorage ( old reply from 2011 ) Content scripts run in the context of webpages, not extension pages. Therefore, if you're accessing localStorage from your contentscript, it will be the storage from that webpage, not the extension page storage. Now, to let your content script to read your extension storage (where you set them from your options page), you need to use extension message passing . The first thing you do is tell your content script to send a request to your extension to fetch some data, and that data can be your extension localStorage: contentscript.js chrome.runtime.sendMessage({method: "getStatus"}, function(response) { console.log(response.status); }); background.js chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) { if (request.method == "getStatus") sendResponse({status: localStorage['status']}); else sendResponse({}); // snub them. }); You can do an API around that to get generic localStorage data to your content script, or perhaps, get the whole localStorage array. I hope that helped solve your problem. To be fancy and generic ... contentscript.js chrome.runtime.sendMessage({method: "getLocalStorage", key: "status"}, function(response) { console.log(response.data); }); background.js chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) { if (request.method == "getLocalStorage") sendResponse({data: localStorage[request.key]}); else sendResponse({}); // snub them. });
