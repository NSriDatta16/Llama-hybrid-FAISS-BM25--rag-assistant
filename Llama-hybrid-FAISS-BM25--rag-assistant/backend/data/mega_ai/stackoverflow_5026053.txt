[site]: stackoverflow
[post_id]: 5026053
[parent_id]: 4272943
[tags]: 
Definition: distance from a point to a line segment = distance from the original point to the closest point still on the segment. Assumption: an algo to compute the distance from a point to a segment is known (e.g. compute the intercept with the segment of the normal to the segment passing through the original point. If the intersection is outside the segment, pick the closest end-point of the segment) use the deCasteljau algo and subdivide your cubics until getting to a good enough daisy-chain of linear segments. Supplementary info the "Bezier curve flattening" section consider the minimum of the distances between your point and the resulted segments as the distance from your point to the curve. Repeat for all the curves in your set. Refinement at point 2: don't compute the actual distance, but the square of it, getting the minimum square distance is good enough - saves a sqrt call/segment. Computation effort: empirically a cubic curve with a maximum extent (i.e. bounding box) of 200-300 results in about 64 line segments when flattened to a maximum tolerance of 0.5 (approx good enough for the naked eye). Each deCasteljau step requires 12 division-by-2 and 12 additions. Flatness evaluation - 8 multiplications + 4 additions (if using the TaxiCab distance to evaluate a distance) the evaluation of point-to-segment distance requires at max 12 multiplications and 11 additions - but this will be a rare case in the context of Bezier flattening, I'd expect an average of 6 multiplications and 9 additions. So, assuming a very bad case (100 straight segments/cubic), you finish in finding your distance with a cost of approx 2600 multiplications + 2500 additions per considered cubic. Disclaimers: don't ask me for a demonstration on the numbers in the computational effort evaluation above, I'll answer with "Use the source-code" (note: Java implementation). other approaches may be possible and maybe less costly. Regards, Adrian Colomitchi
