[site]: crossvalidated
[post_id]: 146846
[parent_id]: 
[tags]: 
Predict time series data from another

Here is my problem: I have two times series which are highly correlated. One of my time series have one more data point. I would like to predict the other time series missing data. For example ( in R ): a = c(126,140,178,223,208,266) b = c(155,154,220,277,256,334,330) length(a) 1. My very basic solution is just copy the change of b when I predict a, like this: ch = (b[7] / b[6]) - 1 a[7] = a[6] + (a[6]*ch) 2. A little bit more complicated version but still basic is this (to predict a from b): a = c(126,140,178,223,208,266) b = c(155,154,220,277,256,334,330) 2.1. Give a same "scale" of it (same as plotting a and b to a 1 graph at the same time): pred = c(NA) for (i in 1:length(b)) { pred[i] = ( b[i] / max(b) ) * max(a) } 2.2 make a custom CI: mistake = c(NA) for (i in 1:(length(pred)-1)) { mistake[i] = (pred[i] / a[i]) -1 } sd_mis = sd(mistake) CI_l = c(NA) CI_U = c(NA) for (i in 1:length(pred)) { CI_l[i] = pred[i] - (pred[i] * sd_mis) CI_U[i] = pred[i] + (pred[i] * sd_mis) } pred = round(pred,0) CI_l = round(CI_l,0) CI_U = round(CI_U,0) 2.2 plotting: plot(pred, type='o', col = "green", xaxt='n', ylim = c(0,max(c(a,pred,CI_l,CI_U)))) lines(a, type='o', col = "black") lines(CI_l, type='o', col = "red") lines(CI_U, type='o', col = "red") axis(side=1, at=seq(1,length(pred),1), labels = seq(2000,2006,1)) 3. linear regression Linear regression would be a decent solution, but I afraid to use because of a small n. fm 4. Vector autoregression I've also tried vector autoregression, but this process needs a same variable length, and also gives me a meaningless result (also because of a small n, I guess) m = matrix(NA,length(a),2) m[,1] = a m[,2] = b[-7] library(vars) summary(VAR(m)) My questions are: Is there a more sophisticated way to get the forecasts?* Is my second model mathematically correct?*
