[site]: stackoverflow
[post_id]: 3514035
[parent_id]: 
[tags]: 
c++ std::copy with type cast to derived class possible?

I am pretty sure that there is no way around doing this explicitly but I would like to ask nontheless in case there is a better way. I have a base class A and a derived class B, now I have a std::list of A* which point to B*'s and I want to copy this list of A*'s to a std::vector of B*'s so basically I want to do this: std::list aList = someObject.getAs(); std::vector bVec = std::vector (aList.begin(), aList.end()); I am pretty sure this should compile when the list and the vector would be the same type (eg both were A*'s), but since in this case A* is the base class of B* I can't do it this way, because I would have to explicitly typecast for instance like this: std::list aList = someObject.getAs(); std::vector bVec; bVec.reserve(aList.size()); std::list ::iterator it = aList.begin(); for(it; it!=aList.end(); ++it) { B* b = static_cast (*it); bVec.push_back(b); } Is there any more elegant way than my second approach or will I have to do it like that?
