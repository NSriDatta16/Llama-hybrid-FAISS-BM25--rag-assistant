[site]: stackoverflow
[post_id]: 4013121
[parent_id]: 4012943
[tags]: 
While you deal with pointer p (of type CBase*) the pointed object will be treated as a CBase, but all virtual functions will do the right thing. Pointer pd treats the same object as a CDerived. Upcasting in this way is dangerous since, if the object is not derived from the upcasted type, any extra member data for the upcasted object will be missing (meaning you'll be poking around in some other data), and virtual function lookup will be all messed up. This is the opposite to downcasting (as you've tagged this question) where you might get slicing . To avoid this you need to change your programming style. Treating the same object as two different types is a dubious practice. C++ can be very good at enforcing type safety, but it will let you get away with nasty things if you really want to, or just don't know better. If you are wanting to do different things depending upon an object type, and can't do it through virtual functions (such as through double dispatch ), you should look more thoroughly into RTTI ( look here , or see some good examples here ).
