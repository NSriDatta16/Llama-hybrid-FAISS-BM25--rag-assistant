[site]: stackoverflow
[post_id]: 4454370
[parent_id]: 4453746
[tags]: 
I would start off with the following. Define the Database and Mapping functionality in separate interfaces and inject them into the repository, this way the repository will be easier to test. Using this method you should be able to extend the repository to include other CRUD operations. One problem with this approach is the separation between the mapper and the creation of the SqlCommand, it may not be very obvious which columns are returned via the select statement. // The concrete implementation of this interface will handle connections to the // database public interface IDatabase { SqlDataReader ExecuteQuery(SqlCommand command); } public interface IEntityMapper { T MapAll(SqlDataReader reader); } public abstract class EntityRepository { private readonly IDatabase _database; private readonly IEntityMapper _mapper; protected EntityRepository(IEntityMapper mapper, IDatabase database) { _mapper = mapper; _database = database; } public T Get(int id) { return this.Get(_mapper, _database, id); } protected virtual T Get(IEntityMapper mapper, IDatabase database, int id) { // Create a command can be used to fetch the entity, remember to dispose when complete using (var cmd = this.CreateGetCommand(id)) { using (var reader = database.ExecuteQuery(cmd)) { // No need to read all the rows, just the first... return reader.Read() ? mapper.MapAll(reader) : default(T); } } } protected abstract SqlCommand CreateGetCommand(int id); } And implement the following public class OrganisationEntityRepository : EntityRepository { public OrganisationEntityRepository(IEntityMapper mapper, IDatabase database) : base(mapper, database) { } protected override SqlCommand CreateGetCommand(int id) { var command = new SqlCommand(@"SELECT t.Id, t.Description FROM Organisation t Where t.Id = @Id"); command.Parameters.Add("@id", SqlDbType.Int).Value = id; return command; } } public class OrganisationEntityMapper : IEntityMapper { public OrganisationEntity MapAll(SqlDataReader reader) { return new OrganisationEntity(); // Populate using the reader... } }
