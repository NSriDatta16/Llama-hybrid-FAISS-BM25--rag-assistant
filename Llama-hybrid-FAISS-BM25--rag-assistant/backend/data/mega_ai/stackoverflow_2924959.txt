[site]: stackoverflow
[post_id]: 2924959
[parent_id]: 2924507
[tags]: 
Maybe this would clean it up. Better to expand the class to encapsulate the entire table, and use overloading so you don't even have to keep track of anything. All you really need to be concerned about is HTML validation, using valid HTML table attributes. Really, as said earlier, objects just make it easier to conceptualize what you want to do and how you want to organize your ideas. With the following solution, you don't need to be concerned with the object construction and default values so much as with just html validation. After constructing it with an array of html table element parameters (if you even want to), you can just overload the object with parameters after that too. You can also easily add rows. Completely untested though and overly simplified... Class My_table { private $table_def = array(); public $rows = array(); function __construct($attributes_array) { if (is_array($attributes_array)) { foreach ($attributes_array as $key => $val) { $this->__set($key, $val); } } } function __set($attribute, $value) { $this->table_def[$attribute] = $value; } function draw() { // write table opening tag echo " $val) { echo " $key='$val'"; } echo ">"; // write all rows out foreach($rows as $current_row) { echo " "; foreach($current_row as $field_name => $field) { echo " $field "; } echo " "; ) // finish table echo " "; } } $table = new My_table(array( "style" => "boarder: solid thin gray;", "width" => "100px" )); $table->height = "200px"; $table->rows[] = array("name" => "someone", "email" => "a@a.com") $table->draw();
