[site]: stackoverflow
[post_id]: 5540624
[parent_id]: 5536278
[tags]: 
Let's try to put a few ideas together. The general situation is too broad, and these will be just guidelines/tips/whatever. Usually what you'll want is not a true/false match relationship, but a scoring for each candidate match. That is because you never can't be completely sure if candidate is really a match. The score is a relation one to many. You should be prepared to rank each record of your small DB against several records of the master DB. Each kind of match should have assigned a weight and a score, to be added up for the general score of that pair. You should try to compare fragments as small as possible in order to detect partial matches. Instead of comparing [address], try to compare [city] [state] [street] [number] [apt]. Some fields require special treatment, but this issue is too broad for this answer. Just a few tips. Middle initial in names and prefixes could add some score, but should be kept at a minimum (as they are many times skipped). Phone numbers may have variable prefixes and suffixes, so sometimes a substring matching is needed. Depending on the data quality, names and surnames must be converted to soundex or similar. Streets names are usually normalized, but they may lack prefixes or suffixes. Be prepared for long runtimes if you need a high quality output. A porcentual threshold is usually set, so that if after processing a partially a pair, and obtaining a score of less than x out of a max of y, the pair is discarded. If you KNOW that some field MUST match in order to consider a pair as a candidate, that usually speeds the whole thing a lot. The data structures for comparing are critical, but I don't feel my particular experience will serve well you, as I always did this kind of thing in a mainframe: very high speed disks, a lot of memory, and massive parallelisms. I could think what is relevant for the general situation, if you feel some help about it may be useful. HTH! PS: Almost a joke: In a big project I managed quite a few years ago we had the mother maiden surname in both databases, and we assigned a heavy score to the fact that = both surnames matched (the individual's and his mother's). Morale: All Smith->Smith are the same person :)
