[site]: stackoverflow
[post_id]: 4038122
[parent_id]: 4037552
[tags]: 
Are you sure you got the idea right? Another great way to see what is getting cached visually is to use the EnableCacheVisualization flag mentioned earlier. Again, this is not available in the Public Preview release, but will be available in a future version. Turning this on will add a blue tint and some transparency on every texture we hand off to the GPU . The result of this visualization is a heat map where the darkest shades of blue correspond to multiple textures being overlaid on top of each other. This allows you to see some hidden objects that might not be an obvious contributor to fill rate on first inspection. The larger the area covered by adding up each rectangle here, the more pixels being handed off to the GPU. Note that turning on the EnableCacheVisualization flag causes the GPU to do extra work and therefore can degrade the frame rate, depending on the current fill rate and how many textures are being shaded. The frame rate counters will not indicate the true frame rate of the application when this flag is used. Also, as mentioned previously, the behavior of the EnableCacheVisualization flag is different on Silverlight for Windows Phone and Silverlight for other platforms. On Windows Phone, textures that are accelerated by the GPU are tinted. On other platforms, the tinted regions show textures that are not accelerated by the GPU. Why did you add CacheMode="BitmapCache" to these objects? I would add this only to the object that uses animation based on callbacks updates. Other animations (storyboards animations) uses caching by default as well as ScrollViewer, Listbox etc.
