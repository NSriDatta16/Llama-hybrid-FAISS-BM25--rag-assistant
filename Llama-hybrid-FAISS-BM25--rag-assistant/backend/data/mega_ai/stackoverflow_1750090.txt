[site]: stackoverflow
[post_id]: 1750090
[parent_id]: 1749931
[tags]: 
I plan to use Alternative PHP Cache, but I still don't really understand how that cache is invalidated. I have a singe index.php that handles all requests. Will the cache store the result for each individual request? Will it clear the cache automatically if one of my includes (or query result from cache) change? APC doesn't cache output. It caches your compiled bytecode. Essentially, a normal PHP request looks like this: PHP files are parsed and compiled to bytecode The PHP interpreter executes the bytecode APC caches the result of the first step, so you aren't reparsing/recompiling the same code over and over again. By default, it still stat() s your PHP files on every request, to see if the file has been modified since its cached copy was compiled -- so any changes to your code will automatically invalidate the cached copy. You can also use APC much like you'd use memcached, for storing arbitrary user data. Keep in mind, however: A memcached server can serve data to multiple servers; data cached in APC can only really be used locally. Better to serve a gig of data from one memcached box to four servers, than to have 4 copies of that gig of data in APC on each individual server. Memcached, in my experience, is better at handling large numbers of concurrent writes to a single cache key. APC doesn't seem to cope very well with its cache filling up. Fragmentation increases, and performance drops. Also, beware: unless you've set up some sort of locking mechanism, your file-based cache is likely to become corrupt due to simultaneous writes. If you have implemented locking, that may become a bottleneck of its own. IMO, concurrency is tricky -- let memcached/APC/the database deal with it.
