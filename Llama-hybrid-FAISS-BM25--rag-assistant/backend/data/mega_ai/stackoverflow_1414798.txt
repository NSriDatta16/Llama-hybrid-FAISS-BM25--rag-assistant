[site]: stackoverflow
[post_id]: 1414798
[parent_id]: 1414706
[tags]: 
For myself I'm trying to understand the balance between seeking high levels of code coverage in testing and the long term cost of maintaing a set of tests that may be quite brittle. Suppose we have a Controller that goes try { result = mode.doSomething(); if (result.count == 0 ) message = "none found" redisplay criterion page else if (result.count == 1 ) display detail page else display list page } catch exception { message = "bad things happened, please try again" redisplay criterion page } A tentative thought is is that tests of the three count cases (0, 1, many) may be less valuable, and more prone to change than the test of the exeption case. Less valuable because a). other testing will catch problems in page display b). the test gets very close to simply reproducing the code. code: go to page X test: did you go to page X? If the developer makes the wrong choice of X he gets the test wrong too! If usability testing of the UI reveals that Y is better page to display then we update the code and the test in tandem. Did the test really achieve anything? Whereas the exception case may be very hard to exercise in normal UI testing, and really easy to test with mocks. And, behaviour following exceptions is something that we really do need to get right.
