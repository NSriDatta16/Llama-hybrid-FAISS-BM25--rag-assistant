[site]: stackoverflow
[post_id]: 1606604
[parent_id]: 1606411
[tags]: 
What you are suggesting is valid. Aside from you code coverage issue, I would argue it is better than using the ExpectedException attribute as it explicitly shows which line of the test is expected to throw the exception. Using ExpectedException means that any line of code in the test can throw the expected exception type and the test will still pass. If the error originates from another call that was not expected to throw, it can disguise the fact that the test should be failing because the line that should be throwing isn't. What would be a useful modification to what you have proposed would be to return the caught exception: public static _T ExpectException (Action action) where _T: Exception { try { action(); } catch (_T ex) { return ex; } Assert.Fail ("Expected " + typeof(_T)); return null; } This would enable the test code to further assert the exception if it desired (ie. to check a particular message was used). NUnit (though it doesn't look like you are using it as you have a TestMethod attribute) has a built-in construct similar to what you have proposed: Assert.Throws (() => Foo.DoStuff(null))
