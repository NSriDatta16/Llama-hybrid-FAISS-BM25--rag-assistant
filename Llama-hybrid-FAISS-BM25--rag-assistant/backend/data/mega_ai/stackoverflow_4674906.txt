[site]: stackoverflow
[post_id]: 4674906
[parent_id]: 
[tags]: 
Overload new operator to store objects in mmap'd file

I have a Linux C++ program with fairly large memory requirements. Most of the memory is consumed by just a few classes, and is accessed reasonably infrequent. I want to move these classes from main memory to disk-based storage, while changing as little existing code as possible. The idea was to override the new operator for these objects and have them allocated into an mmap() 'd memory region. This way my code modifications stay very limited, the rest of the program can happily access these objects without knowing that anything changed, and the kernel will make sure the objects I need are in memory while the others are on disk. I know this is very similar as to how the swap works, but the swap partition is usually too small for what my program needs. Some questions I have: Is this a very bad idea? Do you know something better to achieve the same? Would I need to allocate the maximum file size beforehand, and will I require all of this space to be allocated on disk? If so, would mapping to a sparse file help? I don't want to write my own heap allocator. Can I use an existing one? When my program finishes, the mmap'd file will be deleted. This means I don't want any pages to be written to disk unless the kernel will actually remove them from memory. Is there something like a lazy flag to mmap to achieve this, or is this automatic?
