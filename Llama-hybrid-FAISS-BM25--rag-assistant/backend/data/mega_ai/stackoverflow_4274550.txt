[site]: stackoverflow
[post_id]: 4274550
[parent_id]: 4273977
[tags]: 
Give this a try: mkfifo alt_in (tail -f alt_in & rlwrap cat) | bash You won't get a prompt, but you can enter commands and use arrow keys, etc., including history retrieval. You can echo commands from another terminal into the named pipe and they'll be executed at the receiving end, but they won't be in its history. Some other things to investigate: expect screen -x and screen -X For the latter, in one terminal start screen . You'll be able to interact with Bash there pretty much as you normally would. Now on another terminal, do screen -ls to determine the PID of the screen session you started. It will be the digits at the start of a line that looks like this: 31544.pts-2.hostname (01/01/2010 01:01:01 PM) (Attached) Now you can do things like this: screen -S 31544 -X stuff $'echo Your ad here.\n' which will cause the echo command to be executed on the other terminal. The $'' causes the escape sequences within to be interpreted, in this case giving us a newline so we can "press" Enter . Let's say we did this: screen -S 31544 -X stuff $'top\n' Now top is running. We could go to that terminal and press q to quit, but where's the fun in that? screen -S 31544 -X stuff 'q' Notice this time we didn't need a newline.
