[site]: stackoverflow
[post_id]: 282572
[parent_id]: 282468
[tags]: 
Adding a character to a string can have two consequences: if there is still space for the character it is just added at the end; (as a commenter noticed, this can not happen with c# strings, as thy are immutable). if there is no space at the end a new block of memory is allocated for the new string, the contents of the old string is copied there and the character is added. To analyse your code, it is simpler to add 1000000 times a single character. Your exact example is a bit more complex to explain because for higher i's you add more characters at a time. Then in the situation where no extra space is reserved, the first example has to do 1000000 allocations and copies, of an average of 0.5 * 1000000 characters. The second one has to do 1000 allocations and copies of an average 0.5 * 1000000 characters, and 1000000 allocations and copies of 0.5 * 1000 characters. If copying is lineair with the size of the copy and allocation free, the first situation takes 500 000 000 000 units of time and the second one 500 000 000 + 500 000 000 units of time.
