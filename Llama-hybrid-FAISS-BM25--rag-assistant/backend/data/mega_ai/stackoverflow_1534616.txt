[site]: stackoverflow
[post_id]: 1534616
[parent_id]: 1533409
[tags]: 
Your example uses EhCacheManagerFactoryBean to expose a reference to the CacheManager , with caches defined in the external cacheConfig.xml file. As @ChssPly76 pointed out, Spring's property resolver only works within Spring's own bean definition files. However, you don't have to define the individual caches in the external file, you can define them right within the Spring bean definition file, using EhCacheFactoryBean : FactoryBean that creates a named EHCache Cache instance... If the specified named cache is not configured in the cache configuration descriptor, this FactoryBean will construct an instance of a Cache with the provided name and the specified cache properties and add it to the CacheManager for later retrieval. In other words, if you use EhCacheFactoryBean to refer to a named cache that isn't already defined in cacheConfig.xml , then Spring will create and configure a new cache instance and register it with the CacheManager at runtime. That includes specifying things like maxElementsInMemory , and because this would be specified in the Spring bean definition file, you get full support of the property resolver:
