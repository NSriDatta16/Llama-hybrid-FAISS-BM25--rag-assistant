[site]: stackoverflow
[post_id]: 2155431
[parent_id]: 
[tags]: 
Data Structures to store complex option relationships in a GUI

I'm not generally a GUI programmer but as luck has it, I'm stuck building a GUI for a project. The language is java although my question is general. My question is this: I have a GUI with many enabled/disabled options, check boxes. The relationship between what options are currently selected and what option are allowed to be selected is rather complex. It can't be modeled as a simple decision tree. That is options selected farther down the decision tree can impose restrictions on options further up the tree and the user should not be required to "work his way down" from top level options. I've implemented this in a very poor way, it works but there are tons of places that roughly look like: if (checkboxA.isEnabled() && checkboxB.isSelected()) { //enable/disable a bunch of checkboxs //select/unselect a bunch of checkboxs } This is far from ideal, the initial set of options specified was very simple, but as most projects seem to work out, additional options where added and the definition of what configuration of options allowed continually grew to the point that the code, while functional, is a mess and time didn't allow for fixing it properly till now. I fully expect more options/changes in the next phase of the project and fully expect the change requests to be a fluid process. I want to rebuild this code to be more maintainable and most importantly, easy to change. I could model the options in a many dimensional array, but i cringe at the ease of making changes and the nondescript nature of the array indexes. Is there a data structure that the GUI programmers out there would recommend for dealing with a situation like this? I assume this is a problem thats been solved elegantly before. Thank you for your responses.
