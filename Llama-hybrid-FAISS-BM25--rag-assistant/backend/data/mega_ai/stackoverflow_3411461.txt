[site]: stackoverflow
[post_id]: 3411461
[parent_id]: 3411388
[tags]: 
Well, it's not quite monadosic yet. This is a prime candidate for an Endo monoid. This leads to the more elegant game = mconcat [ phase1, phase2, ... ] And each phase is written: phase1 = Endo $ \game -> ... You would move to a monad if you needed to return a some additional data along with the new state in each phase. In that case a simple function will make your boilerplate more tolerable: phase :: (GameState -> GameMonad a) -> GameMonad a phase f = f = And then a phase is written: phase1 = phase $ \game -> do ... But if you want to use the state, you are probably going to have to give it a name (unless you can finagle pointfreeness by, say, using gets or data-accessor ), and in that case you can't get much terser than a function and a lambda.
