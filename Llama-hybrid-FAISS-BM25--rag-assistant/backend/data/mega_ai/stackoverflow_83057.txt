[site]: stackoverflow
[post_id]: 83057
[parent_id]: 81158
[tags]: 
I don't want to draw attention away from the "last access time" question, but there might be other ways to speed up your builds. Not knowing the context and your project setup, it's hard to say what might be slow, but there might be some things that might help: Create "uber" builds. That is, create a single compilation uber.cpp file that contains a bunch of lines like #include "file1.cpp" #include "file2.cpp" You might have trouble with conflicting static variable names, but those are generally easy to sort out. Initial setup is kind of a pain, but build times can increase dramatically. For us, the biggest drawback is that in developer studio, you can't right click a file and say 'compile' if that file is part of an uber build. It's not a big deal though. We have seperate build configurations for 'uber' builds which compile the uber files but exclude the individual cpp files from the build process. If you need more info, leave a comment and I can get you that. Also, the optimizer tends to do a slightly better job with uber builds. Also, do you have a large number of include files, or a lot of depencendies between include files? If so, that will drastically slow down build times. Are you using precompiled headers? If not, you might look into that as a solution as that will help as well. Slow build times are usually tracked down to lots of file I/O. That is by far the biggest time sink in a build -- just opening, reading and parsing all of the files. If you cut down file I/O, you will improve build times. Anyway, sorry to slightly derail the topic slightly, but the suggestion at hand to change how the last access time of a file is set seemed to be somewhat of a 'sledgehammer' solution.
