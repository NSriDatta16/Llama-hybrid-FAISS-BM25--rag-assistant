[site]: stackoverflow
[post_id]: 4234128
[parent_id]: 4234057
[tags]: 
I suspect that your index isn't doing you any good because it's not the primary key and your query selection logic (where clause) doesn't use it. Because you're not using the index to choose which rows, you end up having to sort the results after selection. The fact that it's not your primary key means that the results are not already ordered by the average price per month, which would reduce or eliminate the sort time since they would already be ordered. One solution would be to use a compound index that includes the most selective column (plan name) and the ordering column (average_price_per_month). It will still need to do the sort after the selection, but the results will already be ordered by the primary ordering column reducing the time spent. CREATE TABLE `affiliate_new_contracts` ( `id` int(11) NOT NULL AUTO_INCREMENT, `plan_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `contract_length` int(11) DEFAULT NULL, `phone_brand` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `price` float DEFAULT NULL, `average_price_per_month` float DEFAULT NULL, `phone_price_guestimate` float DEFAULT NULL, `credible_shop` tinyint(1) DEFAULT '0', `addon` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL, `addon_price` float DEFAULT NULL, PRIMARY KEY (`id`), KEY `index_affiliate_new_contracts_on_plan_name` (`plan_name`,`average_price_per_month`), KEY `index_affiliate_new_contracts_on_price` (`price`) ) ENGINE=InnoDB AUTO_INCREMENT=2472311 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci You might also want to use EXPLAIN to understand how the query is being performed (if my intuition isn't correct) and adjust the indices accordingly.
