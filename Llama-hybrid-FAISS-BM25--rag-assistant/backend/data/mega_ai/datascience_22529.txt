[site]: datascience
[post_id]: 22529
[parent_id]: 19704
[tags]: 
You can either work with a neural network and add chunks of data to its input layer. This could work, and it's taking the time dependency in some sort of way but not in the cleanest way (in my opinion). If it is a time-series, what I would do is use a recurrent neural network , either a LSTM , or a GRU , even a Simple RNN could work. In the end, a simple RNN is just a Neural network with layers for each timestep, meaning that if you unfold the recurrence of the RNN it will produce a normal feedforward neural network with more than one hidden layer (depending on the number of timesteps). Also, remember that in a neural network we do not know how the network came up with the decision (it's a black box) so either model should work just fine. If you are going to use a RNN, I would train a neural network for each store for example, or make the inputs of all the stores into the input layer (depending on what you want to do). The output layer would be either one store's forecast (1 neuron in the output layer) or the forecast for each of the stores (n neurons in the output layer). A good way of knowing what to do is to train, test, validate and compare approaches. Try both the NN and the RNN to see which one works better in this scenario, change number of layers, change number of inputs, number of outputs, etc. To my understanding there is no fixed solution when using neural networks. Hope this helps to get you going on your research.
