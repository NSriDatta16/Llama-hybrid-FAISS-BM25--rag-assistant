[site]: stackoverflow
[post_id]: 3758064
[parent_id]: 3757589
[tags]: 
You do not have to do anything special to use foreach with objects. From the PHP manual on Object Iteration : PHP 5 provides a way for objects to be defined so it is possible to iterate through a list of items, with, for example a foreach statement. By default, all visible properties will be used for the iteration. Example: class Foo { public $foo = 1; protected $bar = 2; private $baz = 3; } foreach(new Foo as $prop) echo $prop; // outputs 1 only Your class does not have to implement Traversable as suggested elsewhere and in fact, the class above doesn't: var_dump (new Foo instanceof Traversable); // FALSE You can implement one of the Iterator or IteratorAggregate if you need more control over how the iteration should behave: class Foo implements IteratorAggregate { public $foo = 1; protected $bar = 2; private $baz = 3; public function getIterator() { return new ArrayIterator((array) $this); } } foreach(new Foo as $prop) echo $prop; // outputs 123 Because Iterator and IteratorAggregate extend Traversable , your class will now also be an instance of Traversable , but like shown above, it's not necessary for iterating the object. var_dump (new Foo instanceof Traversable); // TRUE You can also use an ArrayObject to make the object behave like a hybrid between class and object. Or you can implement ArrayAccess to allow accessing the class with square brackets. You can also subclass the class to be one of the Iterators PHP provides. Further reading: http://www.phpro.org/tutorials/Introduction-to-SPL.html http://www.phpro.org/tutorials/Introduction-to-SPL-ArrayAccess.html PHP object like array
