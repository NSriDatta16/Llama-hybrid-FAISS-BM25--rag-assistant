[site]: stackoverflow
[post_id]: 5719788
[parent_id]: 3828877
[tags]: 
You can use reinterpret_cast () to access the struct as though it were a char* : #include using namespace std; struct myStruct { char a; int b; }; int main(int argc, char* argv[]) { myStruct instance = { 10, 100 }; //Treat the myStruct instance as though it were a char* char* pchar = reinterpret_cast (&instance); //Output the values of the bytes to the console for(int i = 0; i Note, however, that because of alignment, not all of the char's will contain meaningful data. This can be fixed, in visual studio at least, using the pack pragma.. but the results will still be highly architecture/compiler-dependent. Thus, if you want to pack the bytes in a way that is at all portable/maintainable (ie. you're going to use this in the real-world) , I would highly suggest using one of the serialization methods mentioned by piotr.
