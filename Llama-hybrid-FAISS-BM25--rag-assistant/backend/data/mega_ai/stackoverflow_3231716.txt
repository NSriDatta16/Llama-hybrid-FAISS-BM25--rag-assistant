[site]: stackoverflow
[post_id]: 3231716
[parent_id]: 3231159
[tags]: 
You could use a StAX filter : class MyFilter implements EventFilter { private final List filtered = Arrays.asList("SOAP-ENV:Envelope", "SOAP-ENV:Body", "ns2:createCustomer"); @Override public boolean accept(XMLEvent event) { if (event.isStartElement()) for (String elementName : filtered) if (event.asStartElement().getName().getLocalPart().equals( elementName)) return false; if (event.isEndElement()) for (String elementName : filtered) if (event.asEndElement().getName().getLocalPart().equals( elementName)) return false; return true; } } Usage: DOMResult result = new DOMResult(); XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance(); xmlInputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false); XMLEventReader reader = xmlInputFactory .createXMLEventReader(new StreamSource(new File("soap.xml"))); reader = xmlInputFactory.createFilteredReader(reader, new MyFilter()); TransformerFactory transFactory = TransformerFactory.newInstance(); Transformer transformer = transFactory.newTransformer(); transformer.transform(new StAXSource(reader), result); Document document = (Document) result.getNode(); FYI: SOAP-ENV and ns2 are not elements; they are namespace prefixes. The document is malformed - there is missing namespace declarations & the above code is not what I would write for a valid namespaced document.
