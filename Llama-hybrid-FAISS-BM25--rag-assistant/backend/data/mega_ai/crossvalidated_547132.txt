[site]: crossvalidated
[post_id]: 547132
[parent_id]: 
[tags]: 
Monte Carlo simulations for arbitrary functions

I'm familiar with MC methods for approximating PDF integrals. But in this question, I'm curious how we might adapt these methods for other problems. For example evaluating $\int_{0}^{1} x^2 dx$ . I choose this function because evaluating the integral analytically is trivial; I'm simply curious how one would design an MC simulation to approximate the value that could be found analytically. Edit @Periwinkle, I found the below code snippet (cleaned it up for ease of readability) and posted below. def mc_int(upper, lower, size, func): uniform_samples = np.random.uniform(low=lower, high=upper, size=size) transformed_samples = func(uniform_samples) expected_value = np.average(transformed_samples) * (upper - lower) return expected_value def f(x): return x**2 mc_int(lower=0, upper=1, size=1000, func=f) >>> 0.3333 Based on your comment, I don't grasp why scaling by upper - lower is necessary. Could you explain?
