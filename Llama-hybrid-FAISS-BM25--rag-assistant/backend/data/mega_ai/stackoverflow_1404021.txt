[site]: stackoverflow
[post_id]: 1404021
[parent_id]: 1403927
[tags]: 
You have several questions. I'll break some of them out: When creating Indexes why should I care about Clustered vs Non Clustered? Sometimes you do care how the rows are organized. It depends on your data and how you will use it. For example, if your primary key is a uniqueidentifier , you may not want it to be CLUSTERED , because GUID values are essentially random. This will cause SQL to insert rows randomly throughout the table, causing page splits which hurt performance. If your primary key value will always increment sequentially ( int IDENTITY for example), then you probably want it to be CLUSTERED , so your table will always grow at the end. A primary key is CLUSTERED by default, and most of the time you don't have to worry about it. I was told that inserting and deleting are slow with Non-Clustered indexes as the tree needs to be "rebuilt." I take it Clustered indexes do not affect performance this way? Actually, the opposite can be true. NONCLUSTERED indexes are kept as a separate data structure, but the structure is designed to allow some modification without needing to be "re-built". When the index is initially created, you can specify the FILLFACTOR , which specifies how much free space to leave on each page of the index. This allows the index to tolerate some modification before a page split is necessary. Even when a page split must occur, it only affects the neighboring pages, not the entire index. The same behavior applies to CLUSTERED indexes, but since CLUSTERED indexes store the actual table data, page splitting operations on the index can be much more expensive because the whole row may need to be moved (versus just the key columns and the ROWID in a NONCLUSTERED index). The following MSDN page talks about FILLFACTOR and page splits: http://msdn.microsoft.com/en-us/library/aa933139(SQL.80).aspx What is special about a Primary Key vs a Clustered Unique Index? How are constraints different to Indexes? For both of these I think it's more about declaring your intentions. When you call something a PRIMARY KEY you are declaring that it is the primary method for identifying a given row. Is a PRIMARY KEY physically different from a CLUSTERED UNIQUE INDEX ? I'm not sure. The behavior is essentially the same, but your intentions may not be clear to someone working with your database. Regarding constraints, there are many types of constraints. For a UNIQUE CONSTRAINT , there isn't really a difference between that and a UNIQUE INDEX , other than declaring your intention. There are other types of constraints that do not map directly to a type of index, such as CHECK constraints, DEFAULT constraints, and FOREIGN KEY constraints.
