[site]: stackoverflow
[post_id]: 4604347
[parent_id]: 4603900
[tags]: 
you could get the parameter in Magento and use simple xml to turn the string into xml $xmlstr = self::XML_DECLARATION . urldecode($this->getRequest()->getParam('paramName'); try { $xml = simplexml_load_string($xmlstr); } catch(Exception $ex) { echo "Unable to process xml file because of the following error $ex"; exit; } if it is a file you are trying to get you can setup a php file with the following code in it to get the contents of the url function get_url_contents($url){ $crl = curl_init(); $timeout = 5; curl_setopt ($crl, CURLOPT_URL,$url); curl_setopt ($crl, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($crl, CURLOPT_CONNECTTIMEOUT, $timeout); $ret = curl_exec($crl); curl_close($crl); return $ret; } You can use that function and then where in the above we had $xmlstr = self::XML_DECLARATION . urldecode($this->getRequest()->getParam('paramName'); You should be able to do this $xmlstr = self::XML_DECLARATION . get_url_contents('http://urlhere.com/xml'); Then you could use simple xml and assign the nodes to a products array, where you could have a collection of products and then loop through those and programmatically create the products in Magento with something like this, obviously change the values that might be hard coded for whatever you might need. $product = Mage::getSingleton('catalog/product'); // Build the product $product->setSku($productData['sku']); $product->setAttributeSetId(26); $product->setTypeId('simple'); $product->setName($productData['description']); $product->setCategoryIds(array(162)); $product->setWebsiteIDs(array(1)); $product->setDescription($productData['description']); $product->setShortDescription($productData['description']); $product->setPrice($productData['price']); # Set some price $product->setWeight(4.0000); $product->setVisibility(Mage_Catalog_Model_Product_Visibility::VISIBILITY_NOT_VISIBLE); $product->setStatus(Mage_Catalog_Model_Product_Status::STATUS_ENABLED); $product->setData('is_salable', '1'); $product->setTaxClassId(2); # My default tax class $product->setStockData(array( 'is_in_stock' => 1, 'qty' => 99999 )); try { $product->save(); } catch (Exception $ex) { //Handle the error }
