[site]: stackoverflow
[post_id]: 3975402
[parent_id]: 3973420
[tags]: 
In Common Lisp: (defun merge-lists (lst1 lst2) (let ((m (max (length lst1) (length lst2)))) (flatten (mapcar (lambda (a b) (list a b)) (append-nulls lst1 m) (append-nulls lst2 m))))) Examples: (merge-lists '(1 2 3 4) '(5 6 7 8)) ;; => (1 5 2 6 3 7 4 8) (merge-lists '(1 2 3 4) '(5 6 7)) ;; => (1 5 2 6 3 7 4 NULL) (merge-lists '(1 2) '(5 6 7 8)) ;; => (1 5 2 6 NULL 7 NULL 8) The helper functions flatten and append-nulls : (defun flatten (tree) (let ((result '())) (labels ((scan (item) (if (listp item) (map nil #'scan item) (push item result)))) (scan tree)) (nreverse result))) (defun append-nulls (lst n) (if (
