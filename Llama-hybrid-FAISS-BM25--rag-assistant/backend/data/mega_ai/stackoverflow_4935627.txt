[site]: stackoverflow
[post_id]: 4935627
[parent_id]: 
[tags]: 
C language: How to share a struct (or, if not possible, an array) between parent and child (forked) processes through IPC?

I googled this for the past two weeks and I didn't get any answer. This is what I have: A parent process, which creates a struct myStruct that is basically a linked list using pointers (if this is a major issue, I can accept to use a fixed size array instead). A fixed number of child processes created with fork() that need a read/write access to the struct (or array) created by the parent. I don't know how to do in order to make the variable myStruct become shared between processes. I tried to solve the problem using SysV IPC functions like shmget() , shmat() , etc... in order to allocate my variable in shared memory, but I don't know how to work with void memory pointers to read/write the values into myStruct. Ideally, I would like to be able to use the dot notation (myStruct.node)->attribute = value in every process without having to deal with pointers, since I don't know how my struct is organized into memory. Is that possible? Could some of you please help? Any help is REALLY appreciated. Further note: I know using threads, pipes, sockets or things like that would be much easier, but this work is for academic purposes for which I have to simulate the presence of multiple independent processes.
