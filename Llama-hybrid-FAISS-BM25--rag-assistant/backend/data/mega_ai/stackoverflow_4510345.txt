[site]: stackoverflow
[post_id]: 4510345
[parent_id]: 4509342
[tags]: 
If.. what you mean by "depending on a property" is that there is another property of the DataContext apart from ActualWidthValue which you need in order to calculate the value you want to assign to Width ..then: Modify the IValueConverter you call "Fraction" to take the entire object instead. It can the acquire the value of ActualWidthValue and any other values it needs and then return the required width. Edit From your comment I see the my first "if.." paragraph is false. You actually have a common value across the UserControl that this converter should be using. In this case add a property to the converter, it is after all just another class. When the property on the UserControl is set you assign its value to this property. For example:- Some Value converter:- public class SomeConverter : IValueConverter { public int SomeFactor { get; set } // IValueConverter implementation here uses SomeFactor } UserControl xaml:- UserControl CodeBehind:- public int SomeFactor { get { return ((SomeConverter)Resources["Fraction"]).SomeFactor; } set { ((SomeConverter)Resources["Fraction").SomeFactor = value; } }
