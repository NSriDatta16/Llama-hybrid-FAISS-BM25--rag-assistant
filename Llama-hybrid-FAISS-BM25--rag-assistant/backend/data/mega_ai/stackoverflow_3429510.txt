[site]: stackoverflow
[post_id]: 3429510
[parent_id]: 
[tags]: 
Pythonic way to convert a list of integers into a string of comma-separated ranges

I have a list of integers which I need to parse into a string of ranges. For example: [0, 1, 2, 3] -> "0-3" [0, 1, 2, 4, 8] -> "0-2,4,8" And so on. I'm still learning more pythonic ways of handling lists, and this one is a bit difficult for me. My latest thought was to create a list of lists which keeps track of paired numbers: [ [0, 3], [4, 4], [5, 9], [20, 20] ] I could then iterate across this structure, printing each sub-list as either a range, or a single value. I don't like doing this in two iterations, but I can't seem to keep track of each number within each iteration. My thought would be to do something like this: Here's my most recent attempt. It works, but I'm not fully satisfied; I keep thinking there's a more elegant solution which completely escapes me. The string-handling iteration isn't the nicest, I know -- it's pretty early in the morning for me :) def createRangeString(zones): rangeIdx = 0 ranges = [[zones[0], zones[0]]] for zone in list(zones): if ranges[rangeIdx][1] in (zone, zone-1): ranges[rangeIdx][1] = zone else: ranges.append([zone, zone]) rangeIdx += 1 rangeStr = "" for range in ranges: if range[0] != range[1]: rangeStr = "%s,%d-%d" % (rangeStr, range[0], range[1]) else: rangeStr = "%s,%d" % (rangeStr, range[0]) return rangeStr[1:] Is there a straightforward way I can merge this into a single iteration? What else could I do to make it more Pythonic?
