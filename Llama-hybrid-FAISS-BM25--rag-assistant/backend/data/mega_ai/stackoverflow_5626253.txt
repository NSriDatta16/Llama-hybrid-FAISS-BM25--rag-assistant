[site]: stackoverflow
[post_id]: 5626253
[parent_id]: 1868359
[tags]: 
You are dealing with two issues here: Traversing a large hierarchy. Large object graph. Both are areas where ORMs are going to have trouble. The ORM is going to be the bottle neck here, so you may need to side step the standard ORM functionality and drop down to stored procedures to handle the heavy lifting, when you encounter bottlenecks. Using stored procedures you can leverage SQL's execution plan to work through issues, identify queries slow points, and identify indexing opportunities. From the Nhibernate Documentation (This is a cache Nhibernate Forge was down) Use hand-coded ADO.NET in bottlenecks. In performance-critical areas of the system, some kinds of operations (eg. mass update / delete) might benefit from direct ADO.NET. But please, wait until you know something is a bottleneck. And don't assume that direct ADO.NET is necessarily faster. If need to use direct ADO.NET, it might be worth opening a NHibernate ISession and using that SQL connection. That way you can still use the same transaction strategy and underlying connection provider.
