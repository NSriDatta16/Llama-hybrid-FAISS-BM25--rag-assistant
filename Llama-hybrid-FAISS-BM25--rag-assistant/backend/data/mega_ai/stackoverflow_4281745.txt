[site]: stackoverflow
[post_id]: 4281745
[parent_id]: 4279305
[tags]: 
My advice would be to create identifiers for your entities that contain the minimum amount of information required. e.g. /sport/{unqiueId} /player/{unqiueId} /horse/{unqiueId} /team/{unqiueId} /league/{unqiueId} /season/{unqiueId} /result/{unqiueId} Note that I dropped version from the URL as I am firmly in the camp who believe versions don't belong in URLs. One-to-one relationships can be handled by embedding links to entities in the response: e.g. GET /player/234 => One-to-Many relationships can be handled similarly but it requires creating a sub-resource of the entity resource. GET /team/732 => Usually you will find all kind of scenarios where this pattern is useful: /league/{unqiueId}/teams /league/{unqiueId}/players /season/{unqiueId}/teams /league/{unqiueId}/seasons /player/{unqiueId}/teams /sport/{unqiueId}/teams /sport/{unqiueId}/leagues /sport/{unqiueId}/seasons For representations that only contain subsets of data but are common queries they can easily be created using query strings and embedded into results: GET /league/891 => One of the interesting characteristics of this type of "api" is that instead of building a whole load of rules into your client application on how to build the url structure to make a request, the client application takes a different approach. The client needs to know the starting URL and the meaning of the rel attribute values. From there the client can just navigate to get what it wants. e.g. Instead of the client building a request based on hardcoded knowledge of the server's hierarchy that looks like : GET /Sport/Football/League/Premiership/Season/2011/Teams instead it navigates it's way to the result like this: GET / => ... GET /sport/1 => ... GET /league/891 => ... GET /season/2334 => ... I realize that this appears like a whole lot more work than the first option, however, it is not as bad as it looks. Using caching and bookmarks you can reduce the round trips considerably. The main benefit is that you can easily change the resources exposed by the service and introduce new relationships between resources without any effect on the client at all. Ideally in a REST based system the only coupling between client and server is the root URL and the media-types that are sent back and forth. The client needs to know nothing about the URL space of the server.
