[site]: stackoverflow
[post_id]: 336267
[parent_id]: 336225
[tags]: 
Very simply, you're just missing the glue to put it all together. This is often described as the "business logic". What you currently have as your "model" is actually your data storage layer. Your model needs to use this to return to the controller what it needs to give to the view. Down in the code, you have several alternatives. One would be for the controller to use the data class you have to assemble the array the view wants to use. This is best if no other controller will need to do that. Another solution would be to add some model code to do that. This enables other controllers to call the same model to get the same data, but if you have other classes that need the same procedure, you would be repeating code. The third solution is to extend your data model to provide a collection view. Then the model code becomes a simple translation layer between what sort of collection the controller wants and asking the data model for it. It might even be simple enough to leave in the controller.
