[site]: stackoverflow
[post_id]: 3184301
[parent_id]: 3184244
[tags]: 
From the API: Every string builder has a capacity. As long as the length of the character sequence contained in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer. If the internal buffer overflows, it is automatically made larger. Whenever you append something, there is a check to make sure that the updated StringBuilder won't exceed its capacity, and if it does, the internal storage of the StringBuilder is resized: int len = str.length(); int newCount = count + len; if (newCount > value.length) expandCapacity(newCount); When data is added to it that exceeds its capacity it is re-sized according to the following formula: void expandCapacity(int minimumCapacity) { int newCapacity = (value.length + 1) * 2; if (newCapacity newCapacity) { newCapacity = minimumCapacity; } value = Arrays.copyOf(value, newCapacity); } See the src.zip file that comes with the JDK for more information. (Above snippets taken from the 1.6 JDK)
