[site]: stackoverflow
[post_id]: 3800737
[parent_id]: 3796812
[tags]: 
This is the refactoring I'm currently using. I overrode the ToString() method of CSVMaterial and added a more useful assert message. So I think this helps with code readability and maintainability. It also makes the unit test trustworthy (due to the helpful diagnostic message). And Jon, thanks for the thought about a logical unit of work. My refactored code does about the same thing as the previous iteration. Both still test one logical thing. Also, I'll have to look into the MoreLINQ stuff. If it's in your C# InDepth 2nd edition book, I'll come across it as I bought the MEAP version from Manning. Thanks for your help. public void LoadCSVBillOfMaterials_WithCorrectCSVFile_ReturnsListOfCSVBillOfMaterialsThatMatchesInput() { //arrange object(s) var filePath = "Path Does Not Matter Because of Mole in File object"; string[] csvDataCorrectlyFormatted = { "1000, 1, Alt 1, , TBD, 1, 10.0, Notes, , Description, 2.50, ,A", "1001, 1, Alt 2, , TBD, 1, 10.0, Notes, , Description, 2.50, ,A" }; var materialsExpected = new List (); materialsExpected.Add(new CSVMaterial("1001", 1, "Alt 1", "TBD", 1m, 10.0m, "Notes", "Description", 2.50m,"A")); materialsExpected.Add(new CSVMaterial("1001", 1, "Alt 2", "TBD", 1m, 10.0m, "Notes", "Description", 2.50m,"A")); //by-pass actually hitting the file system and use in-memory representation of CSV file MFile.ReadAllLinesString = s => csvDataCorrectlyFormatted; //act on object(s) var materialsActual = modCSVImport.LoadCSVBillOfMaterials(filePath); //assert something happended //Setup message for failed asserts var assertMessage = new StringBuilder(); assertMessage.AppendLine("Actual Materials:"); materialsActual.ForEach((m) => assertMessage.AppendLine(m.ToString())); assertMessage.AppendLine("Expected Materials:"); materialsExpected.ForEach((m) => assertMessage.AppendLine(m.ToString())); Assert.That(materialsActual, Is.EquivalentTo(materialsExpected),assertMessage.ToString()); }
