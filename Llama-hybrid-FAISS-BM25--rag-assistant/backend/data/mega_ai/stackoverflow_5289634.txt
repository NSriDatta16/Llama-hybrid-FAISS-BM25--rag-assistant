[site]: stackoverflow
[post_id]: 5289634
[parent_id]: 5289562
[tags]: 
I think you've picked a bad data structure. HashMaps are not naturally ordered. The keys in the set for a HashMap have an unpredictable order that is sensitive to the sequence of operations that populated the map. This makes it unsuitable for comparing two HashMaps. In order to compare a pair of HashMaps, you need to extract the respective key sets, sort them and then compare the sorted sets. In other words, a compareTo method for HashSet derived classes is going to be O(NlogN) on average. FWIW, a compareTo implementation would look something like this, assuming that the method is to order the HashMaps based on the sorted lists keys in their respective key sets. Obviously, there are other orderings based on the key sets. public int compareTo(MyMap other) { List myKeys = new ArrayList (this.keySet()); List otherKeys = new ArrayList (other.keySet()); Collections.sort(myKeys); Collections.sort(otherKeys); final int minSize = Math.min(myKeys.size(), otherKeys.size()); for (int i = 0; i If there is only ever one key / value pair in the map, then you should replace it with a simple Pair class. Using a HashMap to represent a single pair is ... crazy.
