[site]: crossvalidated
[post_id]: 337361
[parent_id]: 292651
[tags]: 
auto.arima() is by far a wrap of arima() , hence will act as such in several directions. In presence of covariates entered through xreg , the arima() Rd states "...If am xreg term is included, a linear regression (with a constant term if include.mean is true and there is no differencing) is fitted with an ARMA model for the error term...". Seems like it fits an LM on the x's, imposing an ARMA structure on the errors. This approach differs from that conveyed by the ARMAX framework, hence auto.arima() won't work. To fit an ARMAX(p, q) or any sub-class of it, you may want to try with vector generalized linear models (VGLMs) applied to time series, in R , part of my PhD. Particularly, my family function ARXff() estimates ARXs as that one above, $Y_t - \theta Y_{t - 1} = \beta X_t + \varepsilon_t$ (...[1]), by MLE using Fisher scoring. The following gives an example of such, assuming normal errors: set.seed(201802) nn coef(fit1, matrix = TRUE) ARdrift1 loge(noiseVar1) ARcoeff11 (Intercept) -0.086297 0.20932 0.26196 x2 1.339758 0.00000 0.00000 *** This is what arima() returns: with(ts.data, arima(y, order =c(1, 0, 0), xreg = x2)) Call: arima(x = y, order = c(1, 0, 0), xreg = x2) Coefficients: ar1 intercept x2 0.386 -0.174 1.292 s.e. 0.170 0.290 0.187 sigma^2 estimated as 1.3: log likelihood = -62.02, aic = 132.05 Given the normality assumption, fit1 is the same as fitting a normal distribution with mean conditional on $x_2$ and $Y_{t - 1}$, similar to [1] above. To see this, use the family uninormal() , from the VGAM package, as follows: ts.data fit2 coef(fit2, matrix = TRUE) mean loge(sd) (Intercept) -0.086297 0.10466 x2 1.339758 0.00000 ARcoeff 0.261963 0.00000 But ARXff() is even broader, e.g., you can model $\theta$ using VGLM-link functions, such as logit() , if needed. Also, I have implemented ARXff() to work with the exact expected information matrices (See type.EIM = "exact" ) for the ARX model. However, the covariate effects on the ARXs as above may not be simple to interpret, e.g, as with ordinary LMs. This is the downside of ARX models. For the ease of interpretation, that regression model with ARMA errors arises probably as the most convenient choice. This is how arima() seems to work in presence of covariates. BTW. I have too implemented this approach through my family function ARIMAX.errors.ff() . ARMAXff() and ARIMAXff() have also been implemented accordingly, so you can also fit ARMAX models, similar to fit1 . But for regression models with ARMAX errors, ARIMAX.errors.ff() is the choice. These are incorporated in my package, called VGAMextra, an extension of VGAM in a few directions, including time series analysis. At the moment, VGAMextra concetrates on modelling and estimation. I will incorporate, e.g., automatic forecasting over time.
