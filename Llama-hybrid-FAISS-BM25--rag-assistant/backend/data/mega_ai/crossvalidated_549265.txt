[site]: crossvalidated
[post_id]: 549265
[parent_id]: 
[tags]: 
Best way to train a model having train/test/val set

I'm new in the machine learning field and I'm trying to understand what are the best practices to manipulate the time series. I currently have a dataset structured as well: X0 : the first part of my time series where there are no anomaly values. I have x0_train which is the train set, x0_test which is the test set and x0_val which is the validation set. These three portions have no anomalies. X1 : the second part of the time series, where all the values are anomaly. I only have x1_val and x1_test X2 : the third part of the, where all the values are anomaly too, like X1. Again, I only have x2_val and x2_test . These micro datasets are a time series. The order of them in the time series is: X0train - X0val - X1val - X2val - X0test - X1test - X2test I need to train a model (LSTM) and make a prediction on all the 5 parts of the dataset, so the final code will be: model = tf.keras.models.load_model(filepath=filepath_model) X0train_seq_pred = model.predict(X0train_seq) # X0train X0test_seq_pred = model.predict(X0test_seq) # X0test X0val_seq_pred = model.predict(X0val_seq) # X0val X1test_seq_pred = model.predict(X1test_seq) # X1test X1val_seq_pred = model.predict(X1val_seq) #X1val X2test_seq_pred = model.predict(X2test_seq) #X2test X2val_seq_pred = model.predict(X2val_seq) #X2val My question is: how do I train it? Only on x0_train splitting it 80% in training and 20% in validation? Or should I use one of the validation set? If yes, which one? Two of them (X1, X2) are full of anomalies, so my fear is that the final model underfit/overfit if trained on the wrong validation set.
