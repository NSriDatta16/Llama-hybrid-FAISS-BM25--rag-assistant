[site]: stackoverflow
[post_id]: 1362405
[parent_id]: 1362110
[tags]: 
The Dinkumware STL-Documentation contains the follwing paragraph about that topic. Its probably (as indicated in the text) valid for most implementations. For the container objects defined in the Standard C++ Library, such as STL Containers and objects of template class basic_string, this implementation follows the widely adopted practices spelled out for SGI STL: Multiple threads can safely read the same container object. (There are nunprotected mutable subobjects within a container object.) Two threads can safely manipulate different container objects of the same type. (There are no unprotected shared static objects within a container type.) You must protect against simultaneous access to a container object if at least one thread is modifying the object. (The obvious synchronization primitives, such as those in the Dinkum Threads Library, will not be subverted by the container object.) Thus, no attempt is made to ensure that atomic operations on container objects are thread safe; but it is easy enough to make shared container objects that are thread safe at the appropriate level of granularity.
