[site]: stackoverflow
[post_id]: 2015122
[parent_id]: 1993425
[tags]: 
Whether it's possible to model this in MongoMapper depends on whether there's data that needs to be stored in the Like model. If, as in your example, there isn't any data associated with the Like model, there is a way. The most recent update to MongoMapper has added support for many-to-many relationships, although it's still in the early stages. You'd create your models like this: class User include MongoMapper::Document key :name, String, :required => true key :liked_item_ids, Array many :liked_items, :in => :liked_item_ids, :class_name => "Item" end class Item include MongoMapper::Document key :name, String, :required => true many :fans, :class_name => "User", :foreign_key => :liked_item_ids end Then you can do: >> u = User.new( :name => 'emily' ) >> i = Item.new( :name => 'chocolate' ) >> u.liked_items > u.save >> u.liked_items => [# ] >> i.fans => [# ] Unfortunately, what you can't do with this setup is add a like from the Item side of the relationship yet. However, there's an open issue on GitHub about creating a proper reverse for the many :in relationship which will be used, in this instance, as follows: many :fans, :class_name => "User", :source => :liked_items On the other hand, if there is information that needs to be stored in the Like , such as the date the user liked the item, there isn't a way to model it currently. The ideal setup in this case (disregarding what's supported in MongoMapper right now) would be similar to what you've included in your question. You'd need all three models, with Like embedded in the User model and a has_many :through relationship to create the link from User to Item . Unfortunately, support for this in MongoMapper is probably pretty far away. If you'd like to encourage support for behavior like this in MongoMapper, you can ask about it on the mailing list or open an issue on the MongoMapper github repository .
