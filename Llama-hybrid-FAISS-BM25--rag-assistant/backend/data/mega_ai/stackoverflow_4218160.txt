[site]: stackoverflow
[post_id]: 4218160
[parent_id]: 
[tags]: 
Data transfer between JSF pages in separate projects

Two JSF/JSF pages and associated managed beans in two separate projects (maybe different servers) Name them PageA.jsp and PageB.jsp with BackingBeanA.java and BackingBeanB.java (again, separate projects) Desire is to redirect from PageA.jsp to PageB.jsp and pass an object (FilterData) The following was tried: BackingBeanA.java public String startPageB() { try { FilterData filterData = ... FacesContext facesContext = FacesContext.getCurrentInstance(); HttpServletRequest request = (HttpServletRequest) facesContext.getExternalContext().getRequest(); request.setAttribute("FILTERDATA",filterData); ExternalContext externalContext = facesContext.getExternalContext(); externalContext.setRequest(request); externalContext.redirect("http://localhost:8080/PageB/"); } catch (IOException e) { e.printStackTrace(); System.out.println(e); } return "redirectedData"; } BackingBeanB.java (in a separate project, could be separate server) public String getBeanAData() { FacesContext facesContext = FacesContext.getCurrentInstance(); HttpServletRequest request = (HttpServletRequest) facesContext.getExternalContext().getRequest(); FilterData newFilterData = (FilterData) request.getAttribute("FILTERDATA"); ... do stuff return null; } Result: getBeanAData is called, however: filterData was not null in BackingBeanA, but was null in BackingBeanB - data was not transferred. Any ideas as to how to properly do this data passing? What I should have included in the original question: Java 1.6.0_22-b03 JSF 1.2 JSTL 1.2 Eclipse 3.6.0 (Helios) Tomcat 6.0.28 (needs to run also on Weblogic) IE 7.0.5730.13 Firefox: 3.6.12 Attempt is to be pure JSF if possible, no HTTP desired (but possible), no JavaScript (period). How I solved the problem (good enough for now): From parent web page - ... FacesContext facesContext = FacesContext.getCurrentInstance(); ExternalContext externalContext = facesContext.getExternalContext(); String initialUrl = externalContext.getInitParameter("RedirectUrl"); String requestDataA = "?ValueA=" + activity.getID(); String requestDataB = "&ValueB=" + activity.getName(); redirectUrl = initialUrl + requestDataA + requestDataB; externalContext.redirect(redirectUrl); ... From redirected web page - ... String ownerName = (String) FacesContext.getCurrentInstance(). getExternalContext().getRequestParameterMap().get("ValueB"); String itemId = (String) FacesContext.getCurrentInstance(). getExternalContext().getRequestParameterMap().get("ValueA"); ... Result is that this works great - for strings. This is OK for now. What I would like for later if possible: The same thing, but passing an object. I know I cannot do that on the request line, but I thought there was a way similar to a standard HTTP setup where a request attribute is set and the destination page gets it with a doPost method (do I have this wrong?). The BalusC answer indicates this is not possible. So is it really not possible to have a JSF page redirect (starup or whatever) to an external page, and pass it an object without going to shared storage? Thanks, John
