[site]: stackoverflow
[post_id]: 4641602
[parent_id]: 4641284
[tags]: 
going in reverse order on your questions: 4) Your web services are a facade to your domain, effectively. 3) Domain services can hit the DB too, they're typically the main API that consuming code should use to talk to your domain on anything that involves more than a single entity, or for things that represent a series of transactional steps. Some folks consider Repositories to be a special case of Domain Services (Rather than being an either/or). I usually consider my Services to be my domain's public interface. 2) DTO's are normally useful when you are (or plan to eventually) crossing physical boundaries. Anytime you think you might need to serialize something (e.g. into a SOAP message), you want to think about a DTO. SO in your case, your WCF project would use DTOs as its DataContracts, but internally it might use your domain objects (unless you expect your domain to sit in a different app domain or on a different physical box). 1) It's all personal preference; your layout doesn't look unreasonable, though it's different than how I normally organize.
