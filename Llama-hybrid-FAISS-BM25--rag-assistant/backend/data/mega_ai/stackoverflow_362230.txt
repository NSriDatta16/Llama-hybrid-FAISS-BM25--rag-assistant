[site]: stackoverflow
[post_id]: 362230
[parent_id]: 362215
[tags]: 
When you have non-recursive top-down (Forum -> Thread -> Postings) retrieval of your data in mind for the most common use case, than this table structure is a good start, because this would result mainly in WHERE ParentId = @SomeId queries. When you want to be able to calculate things like "How many postings exist in this Forum/Thread?", you will easily get into the situation that you are unable to tell which Ids are nested into which other Ids (i.e. the children relationship is missing). You could account for that by redundantly saving ThreadId and ForumId into each posting. Then you would be able to ask SELECT COUNT(*) FROM Postings WHERE ThreadId = @SomeId . These IDs are unlikely to ever change for a given posting, so the redundancy will not right away create insert/update anomalies, but you should have a procedure in place to update all related postings with the correct IDs in case you decide to move things around. For more advanced ways of storing hierarcical data into a RDBMS, you can look into the answers to this question (it's my own, "no fishing up-votes" intended): "What is the most efficient/elegant way to parse a flat table into a tree?"
