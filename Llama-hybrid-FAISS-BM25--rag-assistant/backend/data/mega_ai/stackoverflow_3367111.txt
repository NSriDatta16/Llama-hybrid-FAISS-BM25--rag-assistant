[site]: stackoverflow
[post_id]: 3367111
[parent_id]: 
[tags]: 
How to design multithreaded application

I have a multithreaded application. Each module is executed in a separate thread. Modules are: - network module - used to receive/send data from network - parser module - encode/decode network data to internal presentation - 2 application module - perform some application logic on the above data one after other - counter module - used to gather statistics from other modules - timer module - used to schedule timers - and much more ... All threads using message queues for inter thread communication (std::deque sync by conditional variable and mutex). Some modules are used by others ones (e.g. all modules use timer and counter) and this for each message received from network wich should be handled in very high rates. This is pretty complex application and the design looks "reasonable". From other hand, I'm not sure that such design, thread per module, is the "best" one? In particular, I'm afraid that such design "encorage" a lot of context switches. What do you think? Is there're any good guidelines or open source project to learn from how to do "correct" design of threaded application?
