[site]: stackoverflow
[post_id]: 4358009
[parent_id]: 4357957
[tags]: 
First I'll give you an explanation, and then some pseudo code, which you'll have to rewrite in Python. The main idea is to have one function that calls itself passing a lesser problem with each iteration. In this case you would like to decrease the number of items by 1. You can either make a new list with every call, or reuse the same one if you'd like. Before passing on the list to the next iteration, you will need to calculate the averages thus creating a shorter list. The idea is that you sum the numbers in a parameter and divide by the number of items you've added so far into the appropriate index in the list. Once you are done, you can pop the last item out. The code should look something like this: (indexes in sample are zero based) average(list[]) if(list.length == 0) // Check input and handle errors exit if(list.length == 1) // Recursion should stop return list[0] // The one item is it's own average! // calculate the averages into the list in indices 0 to length - 2 list.pop() // remove the last value return average(list) // the recursion happens here
