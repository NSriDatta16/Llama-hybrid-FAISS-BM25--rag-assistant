[site]: stackoverflow
[post_id]: 2316263
[parent_id]: 2315945
[tags]: 
You may want to take a look at the andand plugin at http://github.com/raganwald/andand . Basically, what it does is handle the errors that may arise from trying to call a method on another that has the possibility of being nil . Based solely on your example: Product.find_by_id(self.product_id).name #=> complains that 'name' is being called on nil An implementation of andand would look like: Product.find(self.product_id).andand.name And even if the first statement, Product.find(self.product_id), returns nil it would no longer fire the undefined method on nil error. PS: Again, based solely on your code, I can see that you're reproducing the functionality generated by using the :belongs_to association. Essentially, what it means is that you can use: self.product insead of: Product.find_by_id(self.product_id)
