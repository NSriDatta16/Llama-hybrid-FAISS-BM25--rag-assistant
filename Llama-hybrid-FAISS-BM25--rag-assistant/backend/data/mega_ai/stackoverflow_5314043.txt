[site]: stackoverflow
[post_id]: 5314043
[parent_id]: 5313713
[tags]: 
The diagram could be clearer by showing cardinality of the relationships involved. But I get what the design basically is. It's called an "entity-attribute-value" model, aka an "open schema", and it's not an uncommon thing to do in a database. However, you should be aware that there are significant downsides to this approach: validation of properties and their types by the RDBMS becomes much more difficult queries retrieving property values for a particular entity are more complicated it's harder to reason about that entity using just database queries In sum, you are going to have to have your application, or maybe stored procedures, do a bunch of work managing these properties, as the database is not going to be able to give you much support besides pure storage and lookup. See http://en.wikipedia.org/wiki/Entity-attribute-value_model for a pretty good rundown on when this design might be a good idea. Also check out http://en.wikipedia.org/wiki/Inner-platform_effect on why it might be a bad one. You'll have to decide for your application whether this is the right approach for you. If what you want to do is provide persistence for objects, I should note that this is a problem that object-oriented databases try to solve in a more natural manner. If you're really frustrated by this design, and you're free to look at whatever DBMS might solve the problem, you might look into that.
