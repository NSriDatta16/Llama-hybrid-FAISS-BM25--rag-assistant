[site]: stackoverflow
[post_id]: 854345
[parent_id]: 853638
[tags]: 
Yes, this is a code smell. While this seems like a fairly harmless practice, public properties expose the fields of your class to arbitrary change and create needless dependence on implementation details. You may as well be using a struct. (I'm not implying that structs are bad either. Procedural programming is just as useful as OOP. It all depends on the problem being solved) The point of encapsulation is to hide implementation details from the class' dependents. Rather you should expose abstract interfaces that allow dependent classes to modify the internal data without needing to know its implementation. Consider the following examples: public interface Vehicle { double FuelTankCapacityInGallons{get;} double GallonsOfGasoline{get;} } public interface Vehicle { double getPercentFuelRemaining(); } Both interfaces will get you the amount of remaining gasoline. The first through concrete terms, the second through abstraction. If the size of the tank changes or you need to implement a European car the first example would require changes to both the Vehicle and whatever class is using it. While the second would only require changes to the Vehicle implementation. The example I used is from the book Clean Code - A Handbook of Agile Software Craftsmanship by Robert C. Martin. I would also look up Law of Demeter .
