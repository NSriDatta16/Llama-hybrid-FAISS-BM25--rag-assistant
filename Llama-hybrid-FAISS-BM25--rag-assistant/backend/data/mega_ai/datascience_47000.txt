[site]: datascience
[post_id]: 47000
[parent_id]: 
[tags]: 
Architecture for multivariate multi-time-series model where some features are TS specific and some features are global

I'm looking to build a time series model (using a TCN or a LSTM) with $N$ different series, each of which has $P$ series-specific features $\mathbf{X}$ . My input array is of dimension $N \times t \times P$ , where $t$ is the number of time steps. I've also got features $G$ , which are constant across all time series. For concreteness, imagine I'm predicting city-level ice cream sales with weather data, and I also want to use GDP growth as a predictor. GDP growth is national. A simple approach could be to augment $\mathbf{X}$ with $G$ , adding 1 to the dimension of $P$ . Then my forecast output for the next period would be $N \times 1 \times P+1$ , which is no good because there is a GDP forecast for each city, when in reality GDP growth is common across cities (when measured nationally). I suppose that I want two outputs -- one of shape $N \times 1 \times P$ , and the other of shape $1 \times 1 \times 1$ , a scalar (if $G$ is of dimension $t \times 1$ ). Here's a dummy example in which time is a global variable, but it is constant across all series. (Let's just assume for the moment that time isn't exogenous, but rather something to include in a multivariate forecast). import numpy as np import matplotlib.pyplot as plt from keras.models import Model from keras.layers import Input, Conv1D, Dense from keras.optimizers import Adam time = np.array(range(100)) brk = np.array((time>40) & (time 0: result[:num] = fill_value result[num:] = arr[:-num] elif num How would I modify this architecture to have two inputs and two outputs, with both input and output having local and global components?
