[site]: stackoverflow
[post_id]: 2258929
[parent_id]: 2258870
[tags]: 
GIT, Subversion and the like are all about version control. If you use such technologies for a project, all your source files are stored in a so-called repository (a.k.a. "repo") - except for files that don't need versioning (big files, user-specific files, ...). Some advantages of version control are: Branches. You can create a new branch for each bug you're working on, for example, without tampering other developer's code. Most version control systems will make cheap copies, i.e. a new branch will take up (almost) no extra space. Versioning. You can always go back to old versions, update to new versions or look at the commit log to see what has happened on the code. GUI tools like TortoiseSVN even provide diff utilities which show you difference graphically. The term "commit" basically means to put new versions of files in the repository (or adding/deleting files). Version control systems also support "merging", that is, automatically merging changes on a file that was changed by several people (often line-based). Simultaneous development. Multiple developers can have their own "working copy" (also called "checkout"). This means that - even if you don't use branches - your local code copy will compile even if others are currently working on the project (because they have own working copies). When you feel the current code can be useful for others, you can commit your changes, and others can update their copy. Central storage and backup. This is valid for CVS/Subversion/..., not for GIT. It's an advantage because there's a central place to commit changes to, and to pull changes from other developers. Distribution. But this is valid for GIT (not for Subversion). It means that there can be multiple repositories for a project, independent of each other. The Linux kernel, for example, has this. People can "pull" down their own repository on which they work - it acts like a full repository, i.e. commits are made locally and not to a server. If you want to include patches from other people's repositories (or from public repos like kernel.org ), you just "pull" those changes to your local repo. If you want to give somebody else your patch, you "push" your changes to a remote repo (if you have the rights). Hope that explained the terms you mentioned. I think a good start to get going with version control is Subversion, using TortoiseSVN for Windows if possible. There's even a free book about it - Version Control with Subversion .
