[site]: stackoverflow
[post_id]: 1144970
[parent_id]: 1144661
[tags]: 
You can do the simple thing and just pull out every third value: (define (average-prices a-list) (/ (apply + (map fourth a-list)) (length a-list))) This is a little inefficient since it builds an intermediate list, and my guess is that this is why you tried foldl . Here's the right way to do that: (define (average-prices a-list) (/ (foldl (lambda (x acc) (+ (third x) acc)) 0 l) (length a-list))) There is still a minor inefficiency -- length is doing a second scan -- but that's something that you shouldn't bother about since you'd need some really long lists to get any visible slowdown.
