[site]: stackoverflow
[post_id]: 1234164
[parent_id]: 1233988
[tags]: 
I don't know the specifics of .NET, but I would pass all the update requests through the cache. Are all the update requests done by your ASP.NET web application? Then you could make a Proxy object for your database and have all the requests directed to it. Taking into consideration that your database only has key-value pairs, it is easy to use a Map as a cache in the Proxy . Specifically, in pseudocode, all the requests would be as following: // the client invokes cache.get(key) if(cacheMap.has(key)) { return cacheMap.get(key); } else { cacheMap.put(key, dababase.retrieve(key)); } // the client invokes cache.put(key, value) cacheMap.put(key, value); if(writeThrough) { database.put(key, value); } Also, in the background you could have an Evictor thread which ensures that the cache does not grow to big in size. In your scenario, where you have a set of values frequently accessed, I would set an eviction strategy based on Time To Idle - if an item is idle for more than a set amount of time, it is evicted. This ensures that frequently accessed values remain in the cache. Also, if your cache is not write through, you need to have the evictor write to the database on eviction. Hope it helps :) -- Flaviu Cipcigan
