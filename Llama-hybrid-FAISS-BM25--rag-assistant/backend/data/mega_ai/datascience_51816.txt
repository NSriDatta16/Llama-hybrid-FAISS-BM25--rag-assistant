[site]: datascience
[post_id]: 51816
[parent_id]: 
[tags]: 
Why the accuracy is high on both training and validation set but very low on test set?

I'm using Tensorflow to train a classifier for image recognition, the model below is built via Keras. The original data is (50000, 3072), and reduced to (50000, 100) with PCA. The explained ratio is 91%, which is still pretty good. y is a 1-dimension array represents for 100 labels(from 0 to 99). After that, I used the sklearn.train_test_split to split training and test data. from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X_r, y, random_state=42) Model and training. model = Sequential() model.add(Dense(1024, input_shape=(N_FEATURES,), activation="sigmoid")) model.add(Dense(512, activation="sigmoid", activity_regularizer=regularizers.l2(0.001))) model.add(Dense(100, activation="softmax")) model.compile(optimizer=tf.train.AdamOptimizer(), loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Convert to tpu model. tpu_model = tf.contrib.tpu.keras_to_tpu_model(model, strategy=tf.contrib.tpu.TPUDistributionStrategy(tf.contrib.cluster_resolver.TPUClusterResolver(TPU_WORKER))) history = tpu_model.fit(X_train, y_train, epochs=EPOCHS, batch_size=128 * 8, validation_split=0.2) tpu_model.save_weights('./tpu_model.h5', overwrite=True) tpu_model.evaluate(X_test, y_test, batch_size=128 * 8) And the output is. Epoch 1/125 37500/37500 [==============================] - 11s 304us/sample - loss: 4.8867 - acc: 0.0640 - val_loss: 4.5686 - val_acc: 0.1130 Epoch 2/125 37500/37500 [==============================] - 1s 25us/sample - loss: 4.4489 - acc: 0.1266 - val_loss: 4.2952 - val_acc: 0.1466 Epoch 3/125 37500/37500 [==============================] - 1s 24us/sample - loss: 4.2328 - acc: 0.1645 - val_loss: 4.1275 - val_acc: 0.1840 Epoch 4/125 37500/37500 [==============================] - 1s 24us/sample - loss: 4.0928 - acc: 0.1878 - val_loss: 4.0073 - val_acc: 0.2098 Epoch 5/125 37500/37500 [==============================] - 1s 25us/sample - loss: 3.9866 - acc: 0.2078 - val_loss: 3.9118 - val_acc: 0.2193 Epoch 6/125 37500/37500 [==============================] - 1s 24us/sample - loss: 3.8946 - acc: 0.2247 - val_loss: 3.8255 - val_acc: 0.2388 Epoch 7/125 37500/37500 [==============================] - 1s 25us/sample - loss: 3.8157 - acc: 0.2398 - val_loss: 3.7456 - val_acc: 0.2488 Epoch 8/125 37500/37500 [==============================] - 1s 25us/sample - loss: 3.7425 - acc: 0.2549 - val_loss: 3.6762 - val_acc: 0.2699 Epoch 9/125 37500/37500 [==============================] - 1s 24us/sample - loss: 3.6728 - acc: 0.2675 - val_loss: 3.6140 - val_acc: 0.2780 Epoch 10/125 ... Epoch 116/125 37500/37500 [==============================] - 1s 25us/sample - loss: 0.5966 - acc: 0.9998 - val_loss: 0.5922 - val_acc: 1.0000 Epoch 117/125 37500/37500 [==============================] - 1s 25us/sample - loss: 0.5963 - acc: 0.9998 - val_loss: 0.5913 - val_acc: 0.9997 Epoch 118/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5949 - acc: 0.9998 - val_loss: 0.5905 - val_acc: 0.9997 Epoch 119/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5939 - acc: 0.9998 - val_loss: 0.5895 - val_acc: 0.9997 Epoch 120/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5932 - acc: 0.9998 - val_loss: 0.5892 - val_acc: 0.9999 Epoch 121/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5932 - acc: 0.9997 - val_loss: 0.5884 - val_acc: 0.9997 Epoch 122/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5920 - acc: 0.9998 - val_loss: 0.5877 - val_acc: 1.0000 Epoch 123/125 37500/37500 [==============================] - 1s 26us/sample - loss: 0.5927 - acc: 0.9998 - val_loss: 0.5871 - val_acc: 1.0000 Epoch 124/125 37500/37500 [==============================] - 1s 25us/sample - loss: 0.5909 - acc: 0.9998 - val_loss: 0.5864 - val_acc: 0.9999 Epoch 125/125 37500/37500 [==============================] - 1s 24us/sample - loss: 0.5899 - acc: 0.9998 - val_loss: 0.5855 - val_acc: 1.0000 It looks good and it doesn't feel like there is an overfitting problem since the accuracy is extremely high on both training and validation set. But when it comes to the test data, the accuracy is 0.19, which is unacceptably low. 12500/12500 [==============================] - 2s 131us/sample - loss: 5.6223 - acc: 0.1931 [5.622251008605957, 0.1931018] I've tried to use the different regularisation terms, but the test accuracy is still around 20-25%. It really confused me a lot. Any opinion will be appreciated.
