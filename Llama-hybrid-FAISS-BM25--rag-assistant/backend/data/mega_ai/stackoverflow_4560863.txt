[site]: stackoverflow
[post_id]: 4560863
[parent_id]: 4559822
[tags]: 
My assumption is that you want a query that will tell what the next lesson is for a particular student for a given term, or null if there are no further classes for that student in that term. The result should be one row or null. In order to do that with any efficiency (and IMHO, sanity) you need to revisit your table structure and assumptions about your data first. I am assuming from the table structures that you provided and how you described the lesson numbers, that there would be, for example, class 1, lessons 1, 2, 3, ..., 10, 11, ... 20, 21, ..., 30, and then class 2, lessons 1...30, and then class 3, lessons 1...30, etc. Further, lessons 1-10 for each class correspond to term 1, 11-20, to term 2, and 21-30 to term 3. Finally, terms are completed in order--class 3 lesson 10 is completed before class 1 lesson 11. First, rather than using your class number as both a unique identifier and and ordering number (class 1 happens before class 2, etc), I would suggest a unique id field (probably an auto-increment), and a separate class_num field for the ordering number. (This is less critical for the classes table, than it is for the lessons table, described next.) Next, and similarly, lessons should get a unique id field separate from it's lesson number field. The id would be the PK. This unique id is necessary to greatly simplify the query you want, as well as any other queries you might need. Without it you are dealing with a two-field composite key that makes many joins and subqueries nightmarishly complicated. You would probably want an additional unique index on class_id and lesson_num so that a lesson number is not re-used for a class. Also, this table should contain the term_num (or term_id) that a particular lesson for a particular class is assigned to. This will keep you from having to calculate what term a lesson is in using an overcomplicated MOD formula. That would be overkill. Just store the term number with the lesson information, and you can organize terms however you want. Next, the answers table's id field should be a unique auto-increment. If it is important, you might also want a unique index on lesson_id and student_id (although this means either no retakes, or retake overwrites) . So I now have: hl_classes (int id, int class_num, professor, class_name, description) PK: id, autoinc hl_classes_lessons (int id, int class_id, int lesson_num, int term_num, l_title, l_link, l_data) PK: id, autoinc; Unique Key: class_id, lesson_num hl_classes_answers (int id, int lesson_id, int student, ans, pct) PK: id, autoinc; Unique Key: lesson_id, student With that, I came up with: select hC.id as next_class_id, hL.id as next_lesson_id, hC.class as next_class, hL.term_num as term_num, hC.class_num as next_class_num, hL.lesson_num AS next_lesson_num from hl_classes hC left join hl_classes_lessons hL on hL.class_id = hC.id where hL.term_num = $TERM_NUM and hL.id not in ( select hA.lesson_id from hl_classes_answers hA where student = $USER_ID ) order by hC.class_num, hL.lesson_num limit 1; This will give you back either one row containing the relevant information about the next class for that student, given that term, or all nulls. Note that the ids are not for display, as they could be any ol' number. You would display the _num fields.
