[site]: stackoverflow
[post_id]: 352126
[parent_id]: 351690
[tags]: 
I have taught both programming languages and advanced compilers. Here are what I think are the two most useful reasons to know what the compiler does: If you don't have any idea what the compiler is doing, you may inadvertently write code that is much more expensive than you intended. This is especially true if you are allocating memory without knowing it. A classic example is to concatenate strings in a loop, e.g., as in answer = "" for i = 1 to n do answer = answer .. strings[i] -- .. is string concatenation This code is quadratic, doing a quadratic amount of allocation and copying. Bad news. The other big reason to know something about compilers is that oftentimes a problem requires a little language. If you know something about compilers (interpreters are just as good here, probably better) then you can build a little language. If you have a choice about what the language looks like, it is often better to let somebody else build the language for you. Lua is a language that is particularly good at being used as a component by other programs. Crenshaw's tutorial isn't bad. Another nice book if you can lay your hands on it is P. J. Brown's book on interactive compilers and interpreters. It is long out of print, but you might find it in a library. I would avoid the many fat undergraduate textbooks on compilers. A fat undergrad text that may be more worthwhile for the compiler-curious is Michael Scott's Programming-Language Pragmatics .
