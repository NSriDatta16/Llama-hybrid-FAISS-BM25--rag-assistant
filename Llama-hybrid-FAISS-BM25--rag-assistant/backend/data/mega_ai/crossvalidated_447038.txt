[site]: crossvalidated
[post_id]: 447038
[parent_id]: 447014
[tags]: 
We have thoroughly developed the relationship between SVD and PCA in Relationship between SVD and PCA. How to use SVD to perform PCA? which is worth reviewing if you're uncertain about the connection. The sklearn PCA implementation is working correctly. The main thing to observe is that the SVD of $A$ is given by $$ A=U S V^\top $$ so for a permutation of columns via matrix $P$ we have $$ AP=U S V^\top P. $$ Another way to state this is that if you compute the SVD of $AP$ , you'll end up with $AP = U S \tilde{V}^\top$ , where $\tilde{V}^\top = V^\top P$ . We know that $\tilde{V}^\top=V^\top P$ is orthogonal because permutation matrices are orthogonal and products of orthogonal matrices are orthogonal. Your screenshots show different things because you're comparing $V^\top$ and $V^\top P$ , which are not equal in general. In fact, $V^\top$ and $V^\top P$ are only guaranteed to be equal if $P=I$ . Column order matters just for $V$ ; $U$ and $S$ are the same. We can even show that a permutation yields the same orthogonal rotation. $$ \begin{aligned} AV &= USV^\top V \\ AV &= US \end{aligned} $$ And we can show the same result for $AP$ because a permutation matrix $P$ is orthogonal. $$ \begin{aligned} AP P^\top V &= USV^\top P P^\top V \\ AV &= US \end{aligned} $$ In other words, the column order doesn't matter for creating a linearly independent basis for $A$ , because you obtain the same result for $AP$ and $A$ . We can demonstrate this all in Python. import numpy as np from numpy.linalg import svd from numpy.random import shuffle from sklearn.datasets import load_breast_cancer if __name__ == "__main__": X, y = load_breast_cancer(True) U, S, V = svd(X, full_matrices=False) P = np.eye(X.shape[1]) shuffle(P) print("X and X @ P are not the same.") print(X @ P - X) # This will work correctly because both X and the SVD of X are permuted. assert np.allclose(U @ np.diag(S) @ V @ P - X @ P, 0.0) try: # This will fail because X is permuted but the SVD is ~not~. assert np.allclose(U @ np.diag(S) @ V - X @ P, 0.0) except AssertionError: print("V @ P != V") print(V @ P - V) You can replace P with any permutation matrix you desire, even one which alphabetizes the column names.
