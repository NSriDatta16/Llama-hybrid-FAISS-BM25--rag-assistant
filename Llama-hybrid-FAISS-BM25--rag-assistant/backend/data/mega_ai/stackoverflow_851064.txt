[site]: stackoverflow
[post_id]: 851064
[parent_id]: 850965
[tags]: 
If you create a new model you can make it inherit the methods from an existing class. Example (app/models/mykindofstring.rb): class Mykindofstring Then from the controller: @my_string = Mykindofstring.new('This is my string') and finally calling it from the view: displays as This is my string, while: displays as GNIRTS YM SI SIHT. The class inherits from the string class, so all the methods that apply to a string also apply to a mykindofstring object. The method in it is just a new name for a combination of two existing string methods, but you can make it do whatever you want, such as a method to convert a time into a formatted string. Basically it's just extending a current Ruby class with your own methods instead of using functions/helpers. Major Edit Based on Ians comment to this answer and his own answer to the above question, I played around a bit in Rails and came up with adding this to the application_helper.rb: module ApplicationHelper String.class_eval do def all_caps_and_reverse self.upcase.reverse end end end Now just call the method on any string in the app: @string = 'This is a string.' @string.all_caps_and_reverse .gnirts a si sihT
