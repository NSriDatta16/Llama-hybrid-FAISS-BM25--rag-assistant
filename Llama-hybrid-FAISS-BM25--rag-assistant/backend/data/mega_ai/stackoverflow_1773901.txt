[site]: stackoverflow
[post_id]: 1773901
[parent_id]: 1765908
[tags]: 
Usually the only reasons to duplicate code are to overcome a language's weak template/macro/generics system or for optimization, where there are different low-level function names that handle different types. In C++, which you noted you don't work within, the template system allows zero-overhead type and function generation, with specialization available to "customize" the generated code for certain type parameters. Java has nothing of the sort, removing the both-general-and-specific choice avoidance available within C++. In Common Lisp, one can employ macros and compiler macros to produce code similar to C++ templates, where basic cases can be customized for specific types, yielding different code expansions. In Java, the only time I'd argue against generic code is for inner loops using numeric types. Paying the boxing and unboxing costs for numeric types in generic code is unacceptable in those cases, unless your profiler can convince you that the compiler or HotSpot was clever enough to forgo the boxing. As for readability, well, make your code the model and the challenge to which your coworkers have to rise. Offer to educate those that have trouble reading it. Encourage them to review it for defects. If they find any, you can then demonstrate the benefit of only having to fix the one and only version.
