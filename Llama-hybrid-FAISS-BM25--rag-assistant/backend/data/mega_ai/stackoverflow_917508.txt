[site]: stackoverflow
[post_id]: 917508
[parent_id]: 762009
[tags]: 
I'm posting this as a reference for how I did it. I used WM_INITDIALOG (as referenced in my comment on Tormod's answer) /// /// The standard ColorDialog dialog box with a title property. /// public class ColorDialogWithTitle : ColorDialog { private const int InitDialogMessage = 0x0110; // WM_INITDIALOG /// /// Initializes a new instance of the ColorDialogWithTitle class. /// public ColorDialogWithTitle() : base() { this.Title = Resources.ColorDialogWithTitle_DefaultTitle; return; } /// /// Gets or sets the title that will be displayed on the dialog when it's shown. /// [Browsable(true)] [Category("Appearance")] [Description("The title that will be displayed on the dialog when it's shown.")] public string Title { get; set; } /// /// The hook into the dialog's WndProc that we can leverage to set the /// window's text. /// /// The handle to the dialog box window. /// The message being received. /// Additional information about the message. /// More additional information about the message. /// /// A zero value if the default dialog box procedure processes the /// message, a non-zero value if the default dialog box procedure /// ignores the message. /// [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)] protected override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam) { if (msg == InitDialogMessage) { // We'll ignore failure cases for now. The default text isn't // so bad and this isn't library code. SafeNativeMethods.SetWindowText(hWnd, this.Title); } return base.HookProc(hWnd, msg, wparam, lparam); } }
