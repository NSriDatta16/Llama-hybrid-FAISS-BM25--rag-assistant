[site]: stackoverflow
[post_id]: 5552889
[parent_id]: 
[tags]: 
C# MS Chart Control - two questions

So I've made this range bar chart with the MS Chart Control. I have two questions: How can I implement an event handler for when the user double clicks a series? I can't see one anywhere. For some reason the scrollbar on my X Axis (which, amusingly, the Chart Control seems to think is the Y Axis...) seems to be partially transparent for some reason...can anyone shed any light as to why that might be? Here's my code so far, bastardised from a PDF I found somewhere on the net (yeah, I know, it's messy, needs tidying up): private void PopulateGantt() { foreach (Job jobThis in lstJobs) { if ((jobThis.HireFrom != null) && (jobThis.HireTo != null)) { string xlabel = string.Empty; double xordinal = 0; double yplot1 = 0; double yplot2 = 0; yplot1 = (double)((DateTime)jobThis.HireFrom).ToOADate(); yplot2 = (double)((DateTime)jobThis.HireTo).ToOADate()+1; // Use a different series for each datapoint Series seriesInstance = new Series(); // For Gantt charts, we want a RangeBar graph type seriesInstance.ChartType = SeriesChartType.RangeBar; // Have a start and end date so plotting 2 points on the y-axis seriesInstance.YValuesPerPoint = 2; // We want to draw datapoint side by side (night is day?) seriesInstance.CustomProperties = "DrawSideBySide=false"; // Add the datapoint to the series, specifying tooltiptext, colorand label xordinal = lstJobs.IndexOf(jobThis); //(double)itemIndex; seriesInstance.Points.AddXY(xordinal, yplot1, yplot2); //seriesInstance.Points[0].Color = resourceColor; seriesInstance.Points[0].AxisLabel = xlabel; seriesInstance.Label = jobThis.Number + jobThis.Type + " - " + jobThis.ClientCompanyName; seriesInstance.Points[0].ToolTip = jobThis.Number + jobThis.Type + "\r\n\r\n" + jobThis.ClientCompanyName + "\r\n\r\n" + jobThis.BriefDescription; seriesList.Add(seriesInstance); } chtHC.Series.Clear(); foreach (Series plotSeries in seriesList) { chtHC.Series.Add(plotSeries); } // Force x-axis to show each task or resource chtHC.ChartAreas[0].AxisX.Interval = 1; // Set y-axis to show each day of the month chtHC.ChartAreas[0].AxisY.Interval = 1; // Set x-axis to show in reversed order so dates are displayed leftto-right //chtHC.ChartAreas[0].AxisY.IsReversed = true; //chtHC.ChartAreas[0].AxisX // Set other y-axis properties chtHC.ChartAreas[0].AxisY.IsStartedFromZero = false; chtHC.ChartAreas[0].AxisY.IsMarginVisible = false; chtHC.ChartAreas[0].AxisY.IntervalType = DateTimeIntervalType.Days; // Set the y-axis labels DateTime? datFirst = null;// = new DateTime(); DateTime? datLast = null; //= new DateTime(); //datFirst = (DateTime)lstJobs[0].HireFrom; foreach (Job jobFirst in lstJobs) { if (jobFirst.HireFrom != null) { if (datFirst == null) { datFirst = (DateTime)jobFirst.HireFrom; } else { if (jobFirst.HireFrom datLast) { datLast = (DateTime)jobFirst.HireTo; } } } } if ((datFirst != null)) { //datLast = ((DateTime)datFirst).AddDays(21); chtHC.ChartAreas[0].AxisY.Minimum = ((DateTime)datFirst).AddDays(-1).ToOADate(); chtHC.ChartAreas[0].AxisY.Maximum = ((DateTime)datLast).AddDays(+1).ToOADate(); } chtHC.ChartAreas[0].CursorY.AutoScroll = true; chtHC.ChartAreas[0].AxisY.ScaleView.Zoomable = true; chtHC.ChartAreas[0].AxisY.ScaleView.SizeType = DateTimeIntervalType.Days; //chtHC.ChartAreas[0].AxisY.LabelStyle.Format = "MMM dd ddd"; //chtHC.ChartAreas[0].AxisY.LabelStyle.Format = "ddd MMM dd"; chtHC.ChartAreas[0].AxisY.LabelStyle.Format = "ddd dd/MM/yyyy"; //chtHC.ChartAreas[0].AxisX.// Force redraw of chart chtHC.ChartAreas[0].AxisY.ScaleView.Zoom(chtHC.ChartAreas[0].AxisY.Minimum, chtHC.ChartAreas[0].AxisY.Minimum+21); chtHC.ChartAreas[0].AxisY.ScrollBar.ButtonStyle = ScrollBarButtonStyles.SmallScroll; chtHC.ChartAreas[0].AxisY.ScaleView.SmallScrollSize = 1; chtHC.Update(); } }
