[site]: stackoverflow
[post_id]: 3722003
[parent_id]: 
[tags]: 
Python vs C : Line of Code Comparison vs Dev Time

Hi I'm currently learning Python since the syntax feels so succinct and the idioms match well with my mental model. However I'm also interested in learning about OS internals and reverse engineering software, which ultimately means knowing C in a rather thorough capacity. When originally picking a language I did lots of reading and comparisons, and it seems that a number thrown out a lot is that to write short idiomatic statements in Python would require the equivalent of a few hundred lines of C (I'd guess code for memory management, writing the code for dictionaries,lists etc) that we take for granted as built into the Python language. 1) With an average C programmer, is that 100-200 lines of code per Python idiom anywhere near accurate? Because C doesn't come built-in with Python-like constructs such as dictionaries/lists(with all their nice methods etc): 2) Do C programmers tend to build these constructs from scratch and then re-use them between projects to greatly reduce the actual amount of hand coding for their projects? I assume re-using libraries like boost:: stuff also again, reduces some of the boilerplate hand coding also... 3) But does using popular libraries and re-using common code one has written before in C for basic constructs/etc, how much does that revise the lines of code written in C compared to the code in Python of a enthusiast sized code base? I know specific numbers aren't possible, but is it possible with libraries, code reuse etc, to have a development time in C close to that of Python without being a Linus Torvalds style coding machine? Thanks!
