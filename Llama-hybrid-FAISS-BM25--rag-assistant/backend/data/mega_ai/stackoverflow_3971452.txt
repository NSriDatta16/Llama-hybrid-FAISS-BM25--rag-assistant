[site]: stackoverflow
[post_id]: 3971452
[parent_id]: 3971348
[tags]: 
You're going to love this answer: it depends. Don't just think about development staff, initially or for later maintenance, but also what kind of operators you're going to need. The smaller the market penetration of your platform, the higher their wages, if you can find them at all. And to scale, you're going to need them, since unforeseen problems will arise whatever platform you use: the interaction of network infrastructure with your app servers is seldom completely trouble free. Also don't just think about your current staff, but how easily it is to recruit new people (and how much they're going to charge). To go over the options you are listing, risking religious outcries: RoR is great when you have a certain kind of app and database structure. Going outside those is going to hurt. On the plus side, the developers you'll find are likely to be eager and curious, willing to learn new stuff. On the minus side, will they leave to jump on the next bandwagon? (To be fair, this is a challenge for all relatively new technologies.) I'm not sure I'd recommend J2EE as a strategic direction: other Java enterprise frameworks have gained significant traction. On the plus side, finding staff for generic J2EE dev't isn't too hard, but specific vendor extensions for operation and monitoring will vary between products. .NET suffers from internal fragmentation (or, to be positive, from a multiplicity of options): are you talking ASP.NET + SQL Server? Silverlight or SharePoint front ends? Or even Azure 'cloud' apps? The greater the range of options you actually use, the harder the total set will be to operate and maintain. For some of these technologies, finding staff is a piece of cake.
