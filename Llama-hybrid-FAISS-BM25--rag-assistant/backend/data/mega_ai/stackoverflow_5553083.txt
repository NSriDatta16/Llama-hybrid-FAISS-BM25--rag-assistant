[site]: stackoverflow
[post_id]: 5553083
[parent_id]: 5550740
[tags]: 
Declaration of Bias - I'm the EclipseLink JAXB (MOXy) lead Using EclipseLink JAXB (MOXy) you may be able to get the formatting you need. This will allow you to eliminate the JDOM piece in order to reduce the memory footprint. Example Assuming we have the following class in our model (accessors omitted to save space): import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Customer { private Address billingAddress; private Address shippingAddress; } JAXB Mapping Since EclipseLink MOXy is compliant with the JAXB specification ( JSR-222 ) it will produce the following document by default: Path Mapping If you require fine grain control over your XML you can use MOXy's @XmlPath extension. Annotating the fields as follows: @XmlPath("contact-info/billing-address") private Address billingAddress; @XmlPath("contact-info/shipping-address") private Address shippingAddress; Will cause the following XML to be produced: Positional Mapping The XPath fragments can include a positional indicator: @XmlPath("address[1]") private Address billingAddress; @XmlPath("address[2]") private Address shippingAddress; The resulting XML will look like: Conditional Mapping @XmlPath("address[@type='billing']") private Address billingAddress; @XmlPath("address[@type='shipping']") private Address shippingAddress; And the resulting XML will be: For More Information http://bdoughan.blogspot.com/2010/07/xpath-based-mapping.html http://bdoughan.blogspot.com/2010/09/xpath-based-mapping-geocode-example.html http://bdoughan.blogspot.com/2011/03/map-to-element-based-on-attribute-value.html
