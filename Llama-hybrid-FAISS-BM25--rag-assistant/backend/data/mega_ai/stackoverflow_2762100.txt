[site]: stackoverflow
[post_id]: 2762100
[parent_id]: 2760803
[tags]: 
IN() comes in handy here. There are several methods, they vary in complexity and performance I'll assume that you have a Categories table, and that whatever uses the category uses it by the category identifier, like so: categories id name posts id category name This function also removes the keywords that match a category-- as you described. It also allows you to search multiple categories. It leaves your search implementation up to you, though i discourage using LIKE "%keyword%" as it really hits performance. Use IN keyword $keywords = $escaped_keywords = explode(' ', $user_input); array_walk($escaped_keywords, 'db_escape'); $query = 'SELECT id, name FROM categories WHERE name IN ("' . implode('", "', $escaped_keywords) . ")"; $result = db_query($query); $category_in = ''; while($row = db_fetch($result)) { $category_in .= ($category ? ', ' : '') . db_escape($row['id']); unset($keywords[$row['name'])) } if($category_in) { // $where is your conditional from your current script $where .= ($where ? ' AND ' : '') . "category IN($category_in)"; } Build an search index instead Another solution is drastically more complicated as it requires making a search index. A search index would allow you to insert the category names in part of the search index and mark them as more relevant for that keyword (than say in the post body), and make mark the category as more relevant than the other keywords. The advantage to this is you have all sorts of control on what comes up first: something like: SELECT p.*, MAX(pi.relevance) relevance FROM posts LEFT JOIN post_index pi ON pi.post = post.id WHERE keyword IN (keyword_list) GROUP BY pi.post_date, pi.post ORDER BY relevance DESC Your indexer can do whatever it likes to determine sorting or relevance. The hard part is figuring out when to index your content.
