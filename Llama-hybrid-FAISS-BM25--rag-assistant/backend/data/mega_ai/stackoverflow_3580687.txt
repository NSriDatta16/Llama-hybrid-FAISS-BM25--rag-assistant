[site]: stackoverflow
[post_id]: 3580687
[parent_id]: 3580641
[tags]: 
You indeed need a try-finally block here. The Java equivalent of the using keyword will be introduced in the upcoming Java 7. A Java port of your code would look like: // Prepare. String url = "..."; String sql = "SELECT name FROM people WHERE id = ?"; int id = 123456; List names = new ArrayList (); // Declare before try. Connection connection = null; PreparedStatement statement = null; ResultSet resultSet = null; try { // Acquire inside try. connection = DriverManager.getConnection(url); statement = connection.prepareStatement(sql); statement.setInt(1, id); resultSet = statement.executeQuery(); // Process results. while (resultSet.next()) { names.add(resultSet.getString("name")); } } finally { // Close in reversed order in finally. if (resultSet != null) try { resultSet.close(); } catch (SQLException logOrIgnore) {} if (statement != null) try { statement.close(); } catch (SQLException logOrIgnore) {} if (connection != null) try { connection.close(); } catch (SQLException logOrIgnore) {} } When not using connection pooling, closing the Connection alone would in most cases also close the Statement and ResultSet . Although not strictly specified in the JDBC API, the average JDBC driver would implicitly do that. But this is not the normal JDBC idiom. You should really close all the resources explicitly. This makes your code safely reusable for the case that you'd like to introduce connection pooling. See also: Equivalent of "using" keyword in Java JDBC tutorial JDBC connection pooling practices JDBC connectivity with MySQL
