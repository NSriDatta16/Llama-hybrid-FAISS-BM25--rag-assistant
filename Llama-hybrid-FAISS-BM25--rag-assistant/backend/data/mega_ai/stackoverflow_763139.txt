[site]: stackoverflow
[post_id]: 763139
[parent_id]: 753293
[tags]: 
Well, I think I've found what you want. Take a look here . In brief, you must define a WebMethod on your server side, and then you can easily access it using jQuery. An exellent working example is under the link above, and here I'll modify it to show how you can pass arguments. So... In your page code-behind *.cs: // We'll use this class to communicate public class Dog { public string Name { get; set; } public string Color { get; set; } } // This is your page, in my case Default.aspx public partial class _Default : System.Web.UI.Page { [WebMethod] public static string ProcessData(Dog myDog) { return "Your " + myDog.Color + " dog's name is " + myDog.Name + "!"; } } Then on your *.aspx: $(document).ready(function() { $("#btnProcess").click(function() { // This is what we want to send to the server var dogItem = { Color: $("#txtColor").val(), Name: $("#txtName").val() }; // And this is how it should be sent - in serialized way var dogItemSerialized = JSON.stringify(dogItem); $.ajax({ type: "POST", url: "Default.aspx/ProcessData", data: "{'myDog':" + dogItemSerialized + "}", contentType: "application/json; charset=utf-8", dataType: "json", success: function(msg) { $("#result").text(msg.d); } }); }); }); Color: Name: So here you fill textboxes and then your data is sent to the server which understands it as a Dog object. Pay attention to arguments passing, because this is the most confusing part. You should pass them in JSON format, which is a little bit "too-much-stringy". So I use here json2.js script which helps to convert usual javascript object into JSON-serialized string (JSON.stringify() method). It is available here . But it is still rather ugly =) It is important that I pass argument called "myDog" which value is the serialized dogItem. Because this is exactly what the server expects to get (so, for example, I can't change the argument name, this won't work : data: "{'someAnotherArgumentName':" + dogItemSerialized + "}" And the last thing. Pay attention to the following line: success: function(msg) { $("#result").text(msg.d); } If you are working with ASP.NET prior to 3.5 (for example, ASP.NET 2.0), then you'll need to write just $("#result").text( msg ) instead of msg.d . Only ASP.NET 3.5 encapsulates all the data under "d" member for some reason... Anyway, in the above article you can find useful links (both inside the article and in comments), so you can read more about arguments, "msg.d" and so on. I hope this helps!
