[site]: stackoverflow
[post_id]: 4869588
[parent_id]: 
[tags]: 
Random long IO pauses when writing data periodically

I'm writing an Android application. As far as I know, most SD cards in devices have ~4Mb/s write speed. In the worst case, my application needs to create and write ~0.5Mb to a new file about 5 times a second. Generally, IO is very fast when doing this but, after creating and writing to several files in a short period of time, I experience a sudden long wait time of ~2 seconds. Here are some stats from my application (note that only one IO operation is ever running at a time): E = Time IO operation began S = Number of Mbs written WT = Time taken to write to file E S WT 14.546 ~0.41 MB 0.02s 15.061 ~0.40 MB 0.019s 15.600 ~0.42 MB 0.073s 16.054 ~0.41 MB 0.02s 16.538 ~0.36 MB 0.019s 17.007 ~0.33 MB 0.018s 17.475 ~0.32 MB 0.017s 18.030 ~0.38 MB 0.07s 19.991 ~0.38 MB 1.542s Notice that most of the IO operations finish in My files are being written with the following code (I'm not flushing or syncing): RandomAccessFile fos = new RandomAccessFile(filename, "rw"); FileChannel outChannel = fos.getChannel(); byteBuffer.rewind(); outChannel.write(byteBuffer); fos.close(); I'm no expert in file IO but I know the fast IO operation times indicate the data hasn't actually been written to disk yet and the big pauses are probably buffers being flushed. How do I avoid the pauses? It seems as if my IO operations are small and infrequent enough that I should be able to avoid this pausing. For some context: I'm using the command pattern with mementos to implement undo/redo in a context where there are many destructive operations the user can perform. I cannot store the mementos in memory because I don't have enough memory so I write the mementos to disk instead. This works fantastic except for the above pausing problem as it means the UI is forced to wait for the IO to finish and 1.5s of lag is too much to hide from the user. I know there are other was to implement undo/redo but every approach has flaws.
