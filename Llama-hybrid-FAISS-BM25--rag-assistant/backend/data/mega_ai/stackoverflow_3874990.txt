[site]: stackoverflow
[post_id]: 3874990
[parent_id]: 3874859
[tags]: 
That's a very broad question, but a good one. I will start with a simple structure that I use for ASP.Net web projects (MVC will look completely different). Solution naming isn't a big deal to me. I tend to create solutions for a specific purpose, and add existing projects to the solutions. If your solution is over 15 projects (just a rough number) consider adding some of those projects as references. Most people don't need to work on more than 15 projects at a time. Project Naming is a big deal to me. // class library that supports the site itself and abstracts // more complicated UI logic into a separate place Company.ProductName.Web; // website Company.ProductName.Web.UI; // main business object library for product // // of course, you can have as many of these as needed. Company.ProductName; I try to use enough folders in my projects so that all files in a folder can easily be viewed without scrolling the solution explorer. My typical web project looks something like this. Note the different in casing to represent namespaced/compilable resources versus those that are not. client (css, javascript) config (private, custom config files, if any) Content (Master Pages, ASPXs and ASCXs, broken into logical folders) Handlers (ASHXs and such) images MSBuild (build scripts) WebServices (these should ONLY be small services that are directly related to the site in question. Otherwise, break them into a separate project). I've started using partial classes more and more to create comprehensive classes that can do many things without having the code be cluttered. For example, I recently created a web service whose single purpose is to return JSON to the client, but the logic is spread across almost a dozen partial classes to organize it better. Hope that gets you started.
