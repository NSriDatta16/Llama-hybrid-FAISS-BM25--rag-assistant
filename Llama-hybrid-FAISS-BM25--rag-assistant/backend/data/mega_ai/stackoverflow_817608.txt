[site]: stackoverflow
[post_id]: 817608
[parent_id]: 815292
[tags]: 
My question is not only how to do it in javascript, but what are some tips and strategies to doing these kinds of things in other langauges too. What you want to do is pretty basic string manipution - apart from the missing word separators, as Barry notes, though that's not a technical problem. Basically, for a modern Unicode-aware programming language (which JavaScript has been since version 1.3, I believe) there is no real difference between a Japanese kana or kanji, and a latin letter - they're all just characters. And a string is just, well, a string of characters. Where it gets difficult is when you have to convert between strings and bytes, because then you need to pay attention to what encoding you are using. Unfortunately, many programmers, especially native English speakers tend to gloss over this problem because ASCII is the de facto standard encoding for latin letters and other encodings usually try to be compatible. If latin letters are all you need, then you can get along being blissfully ignorant about character encodings, believe that bytes and characters are basically the same thing - and write programs that mutilate anything that's not ASCII. So the "secret" of Unicode-aware programming is this: learn to recognize when and where strings/characters are converted to and from bytes, and make sure that in all those places the correct encoding is used, i.e. the same that will be used for the reverse conversion and one that can encode all the character's you're using. UTF-8 is slowly becoming the de-facto standard and should normally be used wherever you have a choice. Typical examples (non-exhaustive): When writing source code with non-ASCII string literals (configure encoding in the editor/IDE) When compiling or interpreting such source code (compiler/interpreter needs to know the encoding) When reading/writing strings to a file (encoding must be specified somewhere in the API, or in the file's metadata) When writing strings to a database (encoding must be specified in the configuration of the DB or the table) When delivering HTML pages via a webserver (encoding must be specified in the HTML headers or the pages' meta header; forms can be even more tricky)
