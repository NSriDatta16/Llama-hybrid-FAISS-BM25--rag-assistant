[site]: stackoverflow
[post_id]: 81294
[parent_id]: 
[tags]: 
sizeof(bitfield_type) legal in ANSI C?

struct foo { unsigned x:1; } f; printf("%d\n", (int)sizeof(f.x = 1)); What is the expected output and why? Taking the size of a bitfield lvalue directly isn't allowed. But by using the assignment operator, it seems we can still take the size of a bitfield type. What is the "size of a bitfield in bytes"? Is it the size of the storage unit holding the bitfield? Is it the number of bits taken up by the bf rounded up to the nearest byte count? Or is the construct undefined behavior because there is nothing in the standard that answers the above questions? Multiple compilers on the same platform are giving me inconsistent results.
