[site]: stackoverflow
[post_id]: 5606400
[parent_id]: 5601730
[tags]: 
I agree with everyone else: The answer to your question is 'no'. Indeed you are entirely correct with your approach and your thoughts, especially about code coverage. I would also add that the question (and the answer 'no') also applies to public methods that you might introduce to classes. If you add methods (public/protected or private) because they make a failing test pass, then you've more or less achieved the goal of TDD. If you add methods (public/protected or private) because you just decide to, violating TDD, then your code coverage should catch these and you should be able to improve your process. Also, for C++ (and I should think only for C++) I implement interfaces using private methods only, to indicate that the class should only be used via the interface it implements. It stops me mistakenly calling new methods added to my implementation from my tests
