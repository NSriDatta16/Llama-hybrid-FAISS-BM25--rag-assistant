[site]: stackoverflow
[post_id]: 5299244
[parent_id]: 5276701
[tags]: 
you seem to have the right tools at hand, WPF Unleashed is excellent, but I guess you have that one already. make individual UserControls in one of these cases: you are using the same xaml all over the place (DRY) you xaml file gets too big (get some components out) you need to inherit from some class this depends on how much codebehind you want. you can, as you suggested in your comment, use an ItemsControl as a container for wherever you need selection between multiple items. so this could also be done on the level of Curves, not just on the level of points on the curve. Depending on how you want to handle drawing of the actual lines and curves you can even have an ItemsControl for those. (on a side note: you will not have virtualization out of the box though, as your items won't have a constant height) Path is OK with hundreds of CurvePoints. If you have 10.000, I'd say you could get problems. can't imagine how a transform should be used here, maybe inside an Adorner. your structure looks good. you will be able to implement all of this. I will suggest though how I would do it: first of all use MVVM. CurveEditor ListBox(Panel=Canvas)(ItemsSource=Curves)(ItemTemplate=CurveControl) CurveControl Canvas(Background=Transparent) CurveName ListBox(Panel=Canvas(Background=Transparent))(ItemsSource=CurveParts) ListBox(Panel=Canvas(Background=Transparent))(ItemsSource=CurvePoints)(ItemTemplate=>EditPointControl) EditPointControl Canvas Thumb(Template = Ellipse) (Name=CenterHandle) (with some Visualstates for Selection and hiding of Tangents) Thumb(Template = Ellipse) (Name=LeftHandle) Thumb(Template = Ellipse) (Name=RightHandle) Line (Binding X/Y to Centerpoint and LeftHandlePoint) Line (Binding X/Y to Centerpoint and RightHandlePoint) I have stated to set ItemTemplate for the ListBox. You can however style the listbox however you want (I think the standard style includes a border, you might want to remove that or set bordersize=0) and set instead of ItemTemplate the ItemContainerStyle and bind to IsSelected so you have control over IsSelected from your ViewModel (look here for what I mean). So the viewmodel looks like this: - CurveEditorViewModel - ObservableCollection Curves - CurveViewModel - string Label - (Point LabelPlacement) - bool IsSelected - ObservableCollection CurvePoints - ObservableCollection CurveParts - CurvePointViewModel - Point Position - bool IsSelected - Point LeftHandle - Point RightHandle - CurvePartViewModel - CurvePointViewModel StartPoint - CurvePointViewModel EndPoint - Path CurvePath in here you can subscribe to CurvePointViewModel's PropertyChanged and recalculate the Path you're exposing. I'd probably improve on it as I go but that'd be my first guess. There are some details you might want to watch out for. eg: the style for the thumbs might be a visible circle in the middle and an invisible bigger one around that with background=transparent. that way you can have your visible circle small, but have the user use the tumb in an area around the small circle. EDIT : here is an Example for the Thumb: as you want to position this at a specific point on a canvas setting the Margin to minus half the width and height will place the center of the circle on that point. Furthermore, having that inner ellipse with a transparent fill and Margin of -6 you will get a 6px bigger radius around the inner (smaller) circle where you can drag the thumb.
