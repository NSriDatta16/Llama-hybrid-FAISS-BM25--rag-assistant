[site]: stackoverflow
[post_id]: 2258509
[parent_id]: 
[tags]: 
breadth-first-search on huge graph with little ram

I currently have a graph that has about 10 million nodes and 35 million edges . For now the complete graph is loaded into memory at program start. This takes a couple of minutes (it is Java after all) and needs about half a gigabyte of RAM. For now it runs on a machine with a dual core processor and 4 gigabytes of RAM. When the graph is searched using a breadth-first-search the memory usage rises to a peak of one gigabyte and it takes ten seconds on average. I would like to deploy the program on a couple of computers. The functionality apart from the graph search does take very little resources. My target system is very miniature and has only 512 megabytes of RAM. Any suggestions on how to implement a method (probably using a database) to search that graph without consuming too much memory? The program is idle most of the time as it is accessing a hardware device, so the path-finding could take about 5 minutes max for the mentioned graph... Thanks for any thoughts thrown in my direction. UPDATE: Just found neo4j . Anybody knows if it would be suitable for this kind of humongous graph?
