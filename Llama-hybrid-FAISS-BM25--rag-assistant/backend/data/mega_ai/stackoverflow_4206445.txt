[site]: stackoverflow
[post_id]: 4206445
[parent_id]: 
[tags]: 
Decoding a Java/JSON Map into an F# object

I'm having trouble converting a Java/JSON map into a usable F# object. Here's the heart of my code: member this.getMapFromRpcAsynchronously = Rpc.getJavaJSONMap (new Action (this.fillObjectWithJSONMap)) () member this.fillObjectWithJSONMap (returnedMap : JSONMap option) = let container = Option.get(returnedMap) let map = container.map for thing in map do this.myObject.add thing.key // do stuff with thing () The JSON that's returned by my RPC method looks like this: {"id":1, "result": {"map": {"Momentum":12, "Corporate":3, "Catalyst":1}, "javaClass":"java.util.HashMap"} } I'm attempting to map it to an F# DataContract which looks like this: [ ] type JSONMap = { [ ] mutable map : KeyValuePair array [ ] mutable javaClass : string } [ ] type JSONSingleResult = { [ ] mutable javaClass: string [ ] mutable result: 'T } Finally, the F# method that performs the actual RPC call (Rpc.getJavaJSONMap above) looks like this: let getJavaJSONMap (callbackUI : Action ) = ClientRpc.getSingleRPCResult >, JSONMap > "MyJavaRpcClass" "myJavaRpcMethod" "" // takes no parameters callbackUI (fun (x : option >>) -> match x.IsSome with | true -> Some(Option.get(x).result) | false -> None ) At compile time I get no errors. My RPC method is called, and a result is returned (using Fiddler to see the actual call & return). However, it appears the F# is having trouble matching the JSON into my DataContract, since returnedMap at the very top is always null. Any thoughts or advice would be greatly appreciated. Thank you.
