[site]: stackoverflow
[post_id]: 2504749
[parent_id]: 2504365
[tags]: 
As a starting point see Links and Selected Readings on GCC site. Of particular interest to you, I think, are: GNU C Compiler Internals Compilation of Functional Programming Languages using GCC -- Tail Calls by Andreas Bauer Porting GCC for Dunces by Hans-Peter Nilsson If you want to develop on Windows you probably need to start from MinGW (Minimalist GNU for Windows) Compiler Suite sources (it includes GNU GDB debugger), which is a port of GCC to Windows. For a comfortable development environment I cannot help much because I don't develop in C++. But I suppose a good IDE for C/C++ is what you need: have a look at this comparison , there are plenty free/open source IDEs for Windows. Update: I think ICI can also be of interest to you: The Interactive Compilation Interface (or 'ICI' for short) is a plugin system with a high-level compiler-independent and low-level compiler-dependent API to transform current compilers into collaborative open modular interactive toolsets. The ICI framework acts as a "middleware" interface between the compiler and the user-definable plugins. It opens up and reuses the production-quality compiler infrastructure to enable program analysis and instrumentation, fine-grain program optimizations, simple prototyping of new development and research ideas while avoiding building new compilation tools from scratch. For example, it is used in MILEPOST GCC to automate compiler and architecture design and program optimizations based on statistical analysis and machine learning. It should enable universal self-tuning compilers adaptable to heterogeneous, reconfigurable, multi-core architectures ranging from supercomputers to embedded systems. .. as the rest of projects under the Collective TUNING umbrella. Note: Writing "compilers are one of the most complex programs there are", as BlueRaja wrote in comments, is an overstatement: there are very simple compilers and very complex compilers. But in compiler theory (once you have studied it) there is nothing esoteric. GCC is a complex program to understand as whatever BIG , poorly documented program out there 1 . So rizwanhudda don't be discouraged: start studying the documentation available and then ask GCC developers (on GCC irc channel, as suggested by nvl or GCC developers mailing list ) to explain what is poorly (or not at all) documented. In fact program comprehension is an active field of research.
