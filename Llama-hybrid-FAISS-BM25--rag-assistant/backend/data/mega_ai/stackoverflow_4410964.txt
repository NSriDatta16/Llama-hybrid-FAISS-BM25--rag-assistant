[site]: stackoverflow
[post_id]: 4410964
[parent_id]: 118341
[tags]: 
I wrote a comprehensive article addressing this very question published on Simple-Talk.com ( LINQ Secrets Revealed: Chaining and Debugging ) back in 2010: I talk about LINQPad (as mentioned earlier by OwenP) as a great tool external to Visual Studio. Pay particular attention to its extraordinary Dump() method. You can inject this at one or more points in a LINQ chain to see your data visualized in an amazingly clean and clear fashion. Though very useful, LINQPad is external to Visual Studio. So I also present several techniques available for use within Visual Studio because sometimes it is just not practical to migrate a chunk of code over to LINQPad: (1) Inject calls to the Dump() extension method I present in my article to allow logging. I started with Bart De Smet's Watch() method in his informative article LINQ to Objects â€“ Debugging and added some labeling and colorization to enhance the visualization, though still it pales in comparison to LINQPad's Dump output. (2) Bring LINQPad's visualization right into Visual Studio with Robert Ivanc's LINQPad Visualizer add-in. Not sure if it was through my prodding :-), but the couple inconveniences present when I was writing my article have now all been admirably addressed in the latest release. It has full VS2010 support and lets you examine any object you like when debugging. (3) Embed nop statements in the middle of your LINQ chain so you can set breakpoints, as described earlier by Amazing Pete. 2016.12.01 Update And I just wrote the sequel to the above article, titled simply LINQ Debugging and Visualization , which reveals that true LINQ debugging capability has finally arrived in Visual Studio 2015 with the about-to-be-released new feature in OzCode. @Dror's answer to this question shows a tiny glimpse of it, but I encourage you to read my new article for an in-depth "how to". (And I do not work for OzCode.:-)
