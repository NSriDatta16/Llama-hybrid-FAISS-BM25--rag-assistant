[site]: stackoverflow
[post_id]: 4940265
[parent_id]: 
[tags]: 
Avgerage Time Complexity of a sorting algorithm

I have a treesort function which performs two distinct tasks, each with its own time complexity. I figured out the avg. case time complexity of the two tasks but how do I find the overall complexity of the algorithm. For example the algorithm takes in a random list of "n" keys x: Sort(x): Insert(x): #Time complexity of O(nLog(n)) Traverse(x): #Time complexity of O(n) Do I just add the two complexities together to give me O(n + nLog(n)) or do I take the dominant task (in this case Insert) and end up with an overall complexity of O(nLog(n))
