[site]: stackoverflow
[post_id]: 3811028
[parent_id]: 3810348
[tags]: 
Note that changing a commit in Git requires that all commits that follow it alse have to be changed. This is discouraged if you have published this part of history, and somebody might have build their work on history that it was before change. Alternate solution to git rebase mentioned in Amber's response is to use grafts mechanism (see definition of Git grafts in Git Glossary and documentation of .git/info/grafts file in Git Repository Layout documentation) to change parent of a commit, check that it did correct thing with some history viewer ( gitk , git log --graph , etc.) and then use git filter-branch (as described in "Examples" section of its manpage) to make it permanent (and then remove graft, and optionally remove the original refs backed up by git filter-branch , or reclone repository): echo "$commit-id $graft-id" >> .git/info/grafts git filter-branch $graft-id..HEAD NOTE !!! This solution is different from rebase solution in that git rebase would rebase / transplant changes , while grafts-based solution would simply reparent commits as is , not taking into account differences between old parent and new parent!
