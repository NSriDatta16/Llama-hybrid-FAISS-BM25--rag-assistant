[site]: stackoverflow
[post_id]: 1140243
[parent_id]: 1139571
[tags]: 
The issue with remove dupes this way, is how do you determine which values remain, since you're talking about partial uniqueness. This solution below just keeps the first to appear in index-order. It's not exactly elegant, but it works. 100, 'Oil'=>10, 'Spark Plugs'=>4 ); $aa[] = array('Tires'=>454, 'Oil'=>43, 'Spark Plugs'=>3 ); $aa[] = array('Tires'=>34, 'Oil'=>55, 'Spark Plugs'=>44 ); $aa[] = array('Tires'=>454, 'Oil'=>43, 'Spark Plugs'=>45 ); $aa[] = array('Tires'=>34, 'Oil'=>55, 'Spark Plugs'=>433 ); $aa[] = array('Tires'=>23, 'Oil'=>33, 'Spark Plugs'=>44 ); echo ' '; print_r( arrayUniqeBySubKey( $aa, 'Oil' ) ); echo ' '; function arrayUniqeBySubKey( $array, $key ) { $indexAggregates = array(); foreach ( $array as $idx => $subArray ) { $indexAggregates[$subArray[$key]][] = $idx; } foreach ( $indexAggregates as $originalIndexes ) { $numOriginals = count( $originalIndexes ); if ( 1 == $numOriginals ) { continue; } for ( $i = 1; $i
