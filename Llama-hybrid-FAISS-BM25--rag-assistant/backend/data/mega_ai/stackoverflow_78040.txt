[site]: stackoverflow
[post_id]: 78040
[parent_id]: 77726
[tags]: 
I basically agree with Mitchel , that this can be highly specific depending on what are you going to do with XML and SQLite. For your case (cache), it seems to me that using SQLite (or other embedded databases) makes more sense. First I don't really think that SQLite will need more overhead than XML. And I mean both development time overhead and runtime overhead. Only problem is that you have a dependence on SQLite library. But since you would need some library for XML anyway it doesn't matter (I assume project is in C/C++). Advantages of SQLite over XML: everything in one file, performance loss is lower than XML as cache gets bigger, you can keep feed metadata separate from cache itself (other table), but accessible in the same way, SQL is probably easier to work with than XPath for most people. Disadvantages of SQLite: can be problematic with multiple processes accessing same database (probably not your case), you should know at least basic SQL. Unless there will be hundreds of thousands of items in cache, I don't think you will need to optimize it much, maybe in some way it can be more dangerous from security standpoint (SQL injection). On the other hand, you are not coding web app, so this should not happen. Other things are on par for both solutions probably. To sum it up, answers to your questions respectively: You will not know, unless you test your specific application with both back ends. Otherwise it's always just a guess. Basic support for both caches should not be a problem to code. Then benchmark and compare. Because of the way XML files are organized, SQLite searches should always be faster (barring some corner cases where it doesn't matter anyway because it's blazingly fast). Speeding up searches in XML would require index database anyway, in your case that would mean having cache for cache, not a particularly good idea. But with SQLite you can have indexing as part of database.
