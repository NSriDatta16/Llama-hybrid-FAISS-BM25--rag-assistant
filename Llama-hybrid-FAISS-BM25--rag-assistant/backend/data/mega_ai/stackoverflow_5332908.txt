[site]: stackoverflow
[post_id]: 5332908
[parent_id]: 
[tags]: 
g++ template bug or VC too liberal?

I am writing a heavily templated piece of code in C++. It worked perfectly in VS 2005 but when I try to compile it in g++ I get some really strange errors. The essential piece of code (simplified to a minimum, doesn't compile either) is as follows: template class Generic { public: typedef Actual ThisType; }; template class Intermediate : public Generic { }; template class Derived : public Intermediate > { public: void FooBar() { ThisType q; } }; The error is: "'ThisType' was not declared in this scope" in the line where 'q' is being declared. Curiously, everything works fine when Derived is not a template but a plain class. Why would compiler look into template function implementation before it is even instantiated? I know that VC++ checks far too little when compiling templates (unused templates can even contain syntactically incorrect code) - but isn't g++ checking too much here? I tried adding a typename keyword with little hope and it fails too. Is there any way to get ThisType to work as expected? I dread the thought of adding it manually to every single derived class - it's cumbersome, redundant, inelegant and error-inducing. Best regards, MZ
