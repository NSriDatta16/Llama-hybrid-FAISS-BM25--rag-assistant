[site]: stackoverflow
[post_id]: 1687949
[parent_id]: 1678045
[tags]: 
You can certainly do unit testing without a framework -- just make an app with a "test" button that runs your tests. However, I've found that it's much nicer to use an existing framework -- They're set up to allow you to easily add tests, see success/failure, and run tests automatically. Nunit is fine, or really, anything will do. MSTest is OK, if you have a version of Visual Studio that comes with it. IsValidEmail should be easy to test: test with null, "", a valid email, and an invalid email. Then put on a black hat and try sneaking pernicious garbage in: can you make it break? But since this function only operates on its inputs, it is pretty easy to test. IsNetworkConnected is harder to test. You call GetHostName and GetHostEntry, and you can't control what they return. This makes it hard to check all of the possible modes. Unit testing exerts strong pressure on you to separate your logic from your data retrieval. One option here would be to pass in the IPHostEntry. Of course, this would makes your exception trapping less useful, and push some of it on to the caller. You could build a function to make the calls to GetHostName and GetHostEntry for you, then pass a delegate to the real one in your app and a fake* one in your test. At some point this strategy costs more than it delivers in value -- You'll have to make that judgment yourself, and don't waste effort on work that doesn't produce value. *Followers of the Mock Objects technique will note that you should not mock out GetHostName and GetHostEntry, since you do not own them. If you have a mocking framework and wish to use it, feel free; Just don't mistake using their tools with following their design methods.
