[site]: stackoverflow
[post_id]: 3468297
[parent_id]: 3466783
[tags]: 
That is not multiple inheritance. And you are right C# does not support true multiple inheritance. For what it is worth the canonical pattern for simulating multiple inheritance in C# is below. public interface IA { void DoA(); } public interface IB { void DoB(); } public class A : IA { public void DoA() { Console.WriteLine("A"); } } public class B : IB { public void DoB() { Console.WriteLine("B"); } } public class MultipleInheritanceExample : IA, IB { private IA m_A = new A(); private IB m_B = new B(); public void DoA() { m_A.DoA(); } public void DoB() { m_B.DoB(); } } It is definitely not as elegant as pure mulitple inheritance, but gets the job done, albiet with more work. You get most of the benefits of multiple inheritance including the most important one, polymorphism. However, you do not inherit the implementation. You have to reimplement all members inherited from all base classes. This is done by mapping those member calls onto concrete instances of each base class. In C# you can take advantage of extension methods to mitigate the problem of not inheriting the implementation. public static class IAExtensions { public static void Foo(this IA target) { target.DoA(); } } This, of course, has its own problems. It is not actually causing any kind of inheritance which means the IA interface does not actually have the Foo method. That means only the code which imports the IAExtensions class can use methods from it. In other words, there is no polymorphism here. You can use of these mechanisms together to cludge together something, that for the most part, resembles and functions like multiple inheritance, but it is not as elegant. Personally, I find the workarounds that C# developers are adopting to mimic mulitple inheritance more offensive than if pure multiple inheritance were used. But, it is unlikely that C# will get mulitple inheritance any time soon or perhaps ever.
