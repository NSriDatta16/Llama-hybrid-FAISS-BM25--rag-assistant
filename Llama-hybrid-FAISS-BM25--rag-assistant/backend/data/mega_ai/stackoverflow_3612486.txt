[site]: stackoverflow
[post_id]: 3612486
[parent_id]: 3612209
[tags]: 
However, in an MVC design pattern, the presentational logic must be kept in the view whilst the business logic must be kept in the controller. IMHO: From an architecture standpoint, I push my business logic further back, out of the controller. We use services to handle all the business logic and repositories for data retrieval. The services call the repositories and then pass back our data model with all the business logic decided for us. Any logic outside that is really UI logic (show this, hide that), as our returned data could be (should be able to be) used in any kind of application, whether it's a mobile app, windows app, or web app. You could use an extension helper method for your control, and in the model for the partial you can return EmptyResult() if you don't wish to render the sidebar. Or, more succintly: (x => x.Sidebar({params})); %> And then in the controller: public ViewResult Sidebar({params}) { SidebarModel model = new SidebarModel(); //...get/build model if ({someCondition}) { return View("MySidebarPartialView", model); } return new EmptyResult(); }
