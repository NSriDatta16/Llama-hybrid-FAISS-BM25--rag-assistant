[site]: stackoverflow
[post_id]: 246039
[parent_id]: 245735
[tags]: 
As I wrote in comment, I am not fan of the use of value 0 as flag, making firstNumber both a value and a flag. I did a quick implementation of the algorithm in Java, boldly skipping the validity tests you already correctly covered... public class IntListToRanges { // Assumes all numbers are above 0 public static String[] MakeRanges(int[] numbers) { ArrayList ranges = new ArrayList (); Arrays.sort(numbers); int rangeStart = 0; boolean bInRange = false; for (int i = 1; i 0.2 ? 1 : (int) Math.random() * 3 + 2; c += incr; anr[i] = c; } ShowRanges(MakeRanges(anr)); } } I won't say it is more elegant/efficient than your algorithm, of course... Just something different. Note that 1,5,6,9 can be written either 1,5-6,9 or 1,5,6,9, not sure what is better (if any). I remember having done something similar (in C) to group message numbers to Imap ranges, as it is more efficient. A useful algorithm.
