[site]: stackoverflow
[post_id]: 2325414
[parent_id]: 1859112
[tags]: 
I would say without too much detailed investigation, that you should make sure every object in IB is connected through properties that retain, to File's Owner. That is the number one reason I have seen for crashes. As soon as something is referred to, or even not referred to, but not a child of file's owner in some way, it causes a crash. Start with no connections, no delegates, aside from the ones needed to make this chain. If this works without a crash, make one connection, then test, then repeat. Scrolling crashes almost always happen because something was autoreleased. If you got object b without using [[B alloc] init] expect it to be gone after the run loop proceeds. (After the first time you are able to touch your view). The cure is to tell object b to retain, generally after making a reference to it in another object, -(void)connectTo:(B*)b { self.myReference = b [B retain]; } The other solution to this is through IB. in the headers do this: @interface a : NSObject{ id myReferenceToDelegate; } @property(nonatomic, retain) IBOutlet id myReferenceToDelegate @end Then you need to go into interface builder, and drag a connection from myReferenceToDelegate on object A to the object B. Once this is done, make sure File's owner has this type of connection to A. Thiese interface builder connections can be tricky, because they don't tell you much about the problem, and they don't do as much as you might thing behind the scenes. Good luck solving this one.
