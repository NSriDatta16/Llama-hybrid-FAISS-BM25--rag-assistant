[site]: stackoverflow
[post_id]: 1812340
[parent_id]: 1812259
[tags]: 
There are a couple of things in the code. I still cannot understand why using STL is prohibited in some environments, when it is throughly tested and rather inexpensive (when including STL or any other templated code you only compile the parts you use)... This forces people into reinventing the wheel and more often than not it ends up with rough corners. I would start discussing why the STL is prohibited, and try to work out a library that is allowed before (consider Electronic Arts version of the STL if the decision is on performance, consider STLPort if they don't trust VC6 STL implementation). It takes quite a lot of effort and knowledge to develop anything close to STL in quality. Now to your container. First you want to start by defining your class requirements, what operations you want to perform on the vector and its elements. The limitations on your code as it is are: stored elements are constant: they cannot be changed you cannot remove elements from the vector your resize operation will destroy all stored elements, it cannot grow/shrink non-destructively (I am not sure whether this is an interface limitation or a problem with the implementation you provided) Some particular things with your code: Copy initialization and assignment are impossible: the storage is const T* , so it cannot be changed after construction. Even if it were possible, assignment is not exception safe All elements (used or not) in the vector are constructed (you are paying for construction of non-used elements) All one-argument constructors (but copy constructor) should be explicit to avoid unwanted implicit conversions. GetSize and the methods returning iterators should be constant. Some side notes... you are not allowed to use STL but you are allowed to use std::copy that is part of the STL? What parts of the STL are out of limits?
