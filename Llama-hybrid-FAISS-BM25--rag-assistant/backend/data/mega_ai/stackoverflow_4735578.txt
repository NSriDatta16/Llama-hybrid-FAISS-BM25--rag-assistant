[site]: stackoverflow
[post_id]: 4735578
[parent_id]: 
[tags]: 
magento final_price,min_price,max_price wrong values insertion

Hi i have problem with the final_price,min_price,max_price in the catalog_product_index_price table its is wrongly inserting the values after function save() during import. The file is app\code\core\Mage\Catalog\Model\Convert\Adapter\Product.php The control goes to finish() function public function finish() { Mage::dispatchEvent('catalog_product_import_after', array()); $entity = new Varien_Object(); Mage::getSingleton('index/indexer')->processEntityAction( $entity, self::ENTITY, Mage_Index_Model_Event::TYPE_SAVE ); } where is the insert statement to insert the value in the catalog_product_index_price table? How this can be resolved? My saveRow fucnction to populate database.My excel sheet contains the following additional row Price Type:radio:1 Unit Price:absolute:2691|Case Price:absolute:12420 Unit Price:absolute:762|Case Price:absolute:7029 The save database function is public function saveRow(array $importData) { $product = $this->getProductModel() ->reset(); if (empty($importData['store'])) { if (!is_null($this->getBatchParams('store'))) { $store = $this->getStoreById($this->getBatchParams('store')); } else { $message = Mage::helper('catalog')->__('Skipping import row, required field "%s" is not defined.', 'store'); Mage::throwException($message); } } else { $store = $this->getStoreByCode($importData['store']); } if ($store === false) { $message = Mage::helper('catalog')->__('Skipping import row, store "%s" field does not exist.', $importData['store']); Mage::throwException($message); } if (empty($importData['sku'])) { $message = Mage::helper('catalog')->__('Skipping import row, required field "%s" is not defined.', 'sku'); Mage::throwException($message); } $product->setStoreId($store->getId()); $productId = $product->getIdBySku($importData['sku']); if ($productId) { $product->load($productId); } else { $productTypes = $this->getProductTypes(); $productAttributeSets = $this->getProductAttributeSets(); /** * Check product define type */ if (empty($importData['type']) || !isset($productTypes[strtolower($importData['type'])])) { $value = isset($importData['type']) ? $importData['type'] : ''; $message = Mage::helper('catalog')->__('Skip import row, is not valid value "%s" for field "%s"', $value, 'type'); Mage::throwException($message); } $product->setTypeId($productTypes[strtolower($importData['type'])]); /** * Check product define attribute set */ if (empty($importData['attribute_set']) || !isset($productAttributeSets[$importData['attribute_set']])) { $value = isset($importData['attribute_set']) ? $importData['attribute_set'] : ''; $message = Mage::helper('catalog')->__('Skip import row, the value "%s" is invalid for field "%s"', $value, 'attribute_set'); Mage::throwException($message); } $product->setAttributeSetId($productAttributeSets[$importData['attribute_set']]); foreach ($this->_requiredFields as $field) { $attribute = $this->getAttribute($field); if (!isset($importData[$field]) && $attribute && $attribute->getIsRequired()) { $message = Mage::helper('catalog')->__('Skipping import row, required field "%s" for new products is not defined.', $field); Mage::throwException($message); } } } $this->setProductTypeInstance($product); if (isset($importData['category_ids'])) { $product->setCategoryIds($importData['category_ids']); } foreach ($this->_ignoreFields as $field) { if (isset($importData[$field])) { unset($importData[$field]); } } if ($store->getId() != 0) { $websiteIds = $product->getWebsiteIds(); if (!is_array($websiteIds)) { $websiteIds = array(); } if (!in_array($store->getWebsiteId(), $websiteIds)) { $websiteIds[] = $store->getWebsiteId(); } $product->setWebsiteIds($websiteIds); } if (isset($importData['websites'])) { $websiteIds = $product->getWebsiteIds(); if (!is_array($websiteIds)) { $websiteIds = array(); } $websiteCodes = explode(',', $importData['websites']); foreach ($websiteCodes as $websiteCode) { try { $website = Mage::app()->getWebsite(trim($websiteCode)); if (!in_array($website->getId(), $websiteIds)) { $websiteIds[] = $website->getId(); } } catch (Exception $e) {} } $product->setWebsiteIds($websiteIds); unset($websiteIds); } $custom_options = array(); foreach ($importData as $field => $value) { if (in_array($field, $this->_inventoryFields)) { continue; } if (in_array($field, $this->_imageFields)) { continue; } $attribute = $this->getAttribute($field); if (!$attribute) { /* CUSTOM OPTION CODE */ if(strpos($field,':')!==FALSE && strlen($value)) { $values=explode('|',$value); if(count($values)>0) { @list($title,$type,$is_required,$sort_order) = explode(':',$field); $title = ucfirst(str_replace('_',' ',$title)); $custom_options[] = array( 'is_delete'=>0, 'title'=>$title, 'previous_group'=>'', 'previous_type'=>'', 'type'=>$type, 'is_require'=>$is_required, 'sort_order'=>$sort_order, 'values'=>array() ); foreach($values as $v) { $parts = explode(':',$v); $title = $parts[0]; if(count($parts)>1) { $price_type = $parts[1]; } else { $price_type = 'fixed'; } if(count($parts)>2) { $price = $parts[2]; } else { $price =0; } if(count($parts)>3) { $sku = $parts[3]; } else { $sku=''; } if(count($parts)>4) { $sort_order = $parts[4]; } else { $sort_order = 0; } switch($type) { case 'file': /* TODO */ break; case 'field': case 'area': $custom_options[count($custom_options) - 1]['max_characters'] = $sort_order; /* NO BREAK */ case 'date': case 'date_time': case 'time': $custom_options[count($custom_options) - 1]['price_type'] = $price_type; $custom_options[count($custom_options) - 1]['price'] = $price; $custom_options[count($custom_options) - 1]['sku'] = $sku; break; case 'drop_down': case 'radio': case 'checkbox': case 'multiple': default: $custom_options[count($custom_options) - 1]['values'][]=array( 'is_delete'=>0, 'title'=>$title, 'option_type_id'=>-1, 'price_type'=>$price_type, 'price'=>$price, 'sku'=>$sku, 'sort_order'=>$sort_order, ); break; } } } } /* END CUSTOM OPTION CODE */ continue; } $isArray = false; $setValue = $value; if ($attribute->getFrontendInput() == 'multiselect') { $value = explode(self::MULTI_DELIMITER, $value); $isArray = true; $setValue = array(); } if ($value && $attribute->getBackendType() == 'decimal') { $setValue = $this->getNumber($value); } if ($attribute->usesSource()) { $options = $attribute->getSource()->getAllOptions(false); if ($isArray) { foreach ($options as $item) { if (in_array($item['label'], $value)) { $setValue[] = $item['value']; } } } else { $setValue = false; foreach ($options as $item) { if ($item['label'] == $value) { $setValue = $item['value']; } } } } $product->setData($field, $setValue); } if (!$product->getVisibility()) { $product->setVisibility(Mage_Catalog_Model_Product_Visibility::VISIBILITY_NOT_VISIBLE); } $stockData = array(); $inventoryFields = isset($this->_inventoryFieldsProductTypes[$product->getTypeId()]) ? $this->_inventoryFieldsProductTypes[$product->getTypeId()] : array(); foreach ($inventoryFields as $field) { if (isset($importData[$field])) { if (in_array($field, $this->_toNumber)) { $stockData[$field] = $this->getNumber($importData[$field]); } else { $stockData[$field] = $importData[$field]; } } } $product->setStockData($stockData); $imageData = array(); foreach ($this->_imageFields as $field) { if (!empty($importData[$field]) && $importData[$field] != 'no_selection') { if (!isset($imageData[$importData[$field]])) { $imageData[$importData[$field]] = array(); } $imageData[$importData[$field]][] = $field; } } foreach ($imageData as $file => $fields) { try { $product->addImageToMediaGallery(Mage::getBaseDir('media') . DS . 'import' . trim($file), $fields); } catch (Exception $e) {} } $product->setIsMassupdate(true); $product->setExcludeUrlRewrite(true); $product->save(); /* Remove existing custom options attached to the product */ foreach ($product->getOptions() as $o) { $o->getValueInstance()->deleteValue($o->getId()); $o->deletePrices($o->getId()); $o->deleteTitles($o->getId()); $o->delete(); } /* Add the custom options specified in the CSV import file */ if(count($custom_options)) { foreach($custom_options as $option) { try { $opt = Mage::getModel('catalog/product_option'); $opt->setProduct($product); $opt->addOption($option); $opt->saveOptions(); } catch (Exception $e) {} } } return true; }
