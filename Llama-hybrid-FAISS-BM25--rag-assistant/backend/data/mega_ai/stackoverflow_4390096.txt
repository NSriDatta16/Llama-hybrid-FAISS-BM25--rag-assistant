[site]: stackoverflow
[post_id]: 4390096
[parent_id]: 603870
[tags]: 
Here's a 'prettier' version (no eval, no globals, formal arguments, no fugly code inside strings) of what you need, not setting it on the prototype because that doesn't work for IE. /** * Sets a property on each of the elements in the list * @param {NodeList} list * @param {string} prop The name of property to be set, * e.g., 'style.backgroundColor', 'value'. * @param {mixed} value what to set the value to */ function setListProp( list, prop, value) { for (var i = 0; i Test Case Go to google.com using Firefox, type the above code into the console, then type the following: // Set tooltip on links setListProp( document.getElementsByTagName('a'), 'title', 'YEAH it worked'); // Set bg to red on all links setListProp( document.getElementsByTagName('a'), 'style.backgroundColor', '#f00'); UPDATE My solution won't work if you want to be able to do += as you mentioned. The most elegant solution I think is to use a callback loop like the following. /** * This exists in many libs and in newer versions of JS on Array's prototype * @param {Object[]} arr The array that we want to act on each element. * Does not work for sparse arrays * @param {Function} callback The function to be called for each element, it will be passed * the element as its first argument, the index as the secibd */ function iterate(arr, callback) { for (var i=0,item; item=arr[i]; i++) { callback(item, i); } } Then you can call it like this var as = document.getElementsByTagName('a'); iterate( as, function(el, index) { el.style.backgroundColor = 'red'; el.innerHTML += "Whatever"; });
