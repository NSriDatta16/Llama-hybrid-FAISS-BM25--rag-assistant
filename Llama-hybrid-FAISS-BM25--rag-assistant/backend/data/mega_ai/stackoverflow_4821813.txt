[site]: stackoverflow
[post_id]: 4821813
[parent_id]: 
[tags]: 
Updating managed objects in a background thread and displaying them in main thread, what's wrong

Good evening, I have some problem with CoreData and Concurrency, so I tried the simplest code and it still does not work. Could you indicate me where I am wrong. I created a "DataManager" which update one CoreData object @implementation OBSDataManager @synthesize persistentStoreCoordinator; - (OBSDataManager *)initWithPersistentStoreCoordinator:(NSPersistentStoreCoordinator *)aPersistentStoreCoordinator { if (self = [super init]) { self.persistentStoreCoordinator = aPersistentStoreCoordinator; } return self; } - (void)dealloc { [persistentStoreCoordinator release]; [super dealloc]; } - (void)start { [self performSelectorInBackground:@selector(updateData) withObject:nil]; } - (void)updateData { NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init]; context.persistentStoreCoordinator = self.persistentStoreCoordinator; // get chunk if it exists, or create it OBSChunk *chunk = [OBSChunk theChunkInContext:context]; if (!chunk) { chunk = [NSEntityDescription insertNewObjectForEntityForName:@"Chunk" inManagedObjectContext:context]; } while (1) { // update content chunk.text = [[NSDate date] description]; // save it NSError *error; if ([context save:&error]) { NSLog(@"Problem on save"); } } [context release]; } @end I have a view controller which displays content of my CoreData object @implementation MainViewController @synthesize managedObjectContext; @synthesize label; #pragma mark - #pragma mark UIViewController // Implement viewDidLoad to do additional setup after loading the view, typically from a nib. - (void)viewDidLoad { [super viewDidLoad]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onCoreDataUpdate:) name:NSManagedObjectContextDidSaveNotification object:nil]; } - (void)viewDidUnload { [super viewDidUnload]; [[NSNotificationCenter defaultCenter] removeObserver:self name:NSManagedObjectContextDidSaveNotification object:nil]; } #pragma mark - #pragma mark private - (void)onCoreDataUpdate:(NSNotification *)updateNotification { [self.managedObjectContext mergeChangesFromContextDidSaveNotification:updateNotification]; OBSChunk *chunk = [OBSChunk theChunkInContext:self.managedObjectContext]; self.label.text = chunk.text; } @end It appears that the chunk object that is fetch in onCoreDataUpdate method has faulted data. Where am I wrong ? Regards, Quentin
