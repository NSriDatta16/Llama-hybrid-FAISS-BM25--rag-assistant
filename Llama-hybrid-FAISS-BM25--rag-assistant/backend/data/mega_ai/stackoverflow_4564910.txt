[site]: stackoverflow
[post_id]: 4564910
[parent_id]: 4564355
[tags]: 
Never use MessageBox in an event handler. Controls often get very confused when the focus is jerked away in one of their events. It keeps scrolling like this because it uses a timer to allow continuous scrolling when you lean on the next/prev button. Each timer tick scrolls the calendar again. That timer doesn't get disabled until the mouse button goes up. Which it cannot see, the message box got the mouse up message because it grabbed the focus. It is a bug in the native Windows control but this just never gets put to the test. Using Debug.WriteLine() or a temporary Console.WriteLine() is helpful, output goes to the Output window and doesn't mess with the control events. One way to get the event fired more than once is by accidentally subscribing the event more than once. In general you cannot assume how many events you'll get, there's a human clicking away at it. Be sure that your code is resilient to this. A way to work around this behavior is to delay handling the event until after the event stopped running. Elegantly done with Control.BeginInvoke(). Like this: private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e) { this.BeginInvoke(new DateRangeEventHandler(delayedChanged), sender, e); } private void delayedChanged(object sender, DateRangeEventArgs e) { // etc.. }
