[site]: stackoverflow
[post_id]: 144357
[parent_id]: 131241
[tags]: 
Separation of Concerns It's very nice to separate the iteration code from the 'core' concern of the loop. It's almost a design decision. Indeed, iterating by index ties you to the implementation of the container. Asking the container for a begin and end iterator, enables the loop code for use with other container types. Also, in the std::for_each way, you TELL the collection what to do, instead of ASKing it something about its internals The 0x standard is going to introduce closures, which will make this approach much more easy to use - have a look at the expressive power of e.g. Ruby's [1..6].each { |i| print i; } ... Performance But maybe a much overseen issue is that, using the for_each approach yields an opportunity to have the iteration parallelized - the intel threading blocks can distribute the code block over the number of processors in the system! Note: after discovering the algorithms library, and especially foreach , I went through two or three months of writing ridiculously small 'helper' operator structs which will drive your fellow developers crazy. After this time, I went back to a pragmatic approach - small loop bodies deserve no foreach no more :) A must read reference on iterators is the book "Extended STL" . The GoF have a tiny little paragraph in the end of the Iterator pattern, which talks about this brand of iteration; it's called an 'internal iterator'. Have a look here , too.
