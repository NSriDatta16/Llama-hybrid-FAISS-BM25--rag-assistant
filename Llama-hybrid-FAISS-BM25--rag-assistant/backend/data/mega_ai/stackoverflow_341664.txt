[site]: stackoverflow
[post_id]: 341664
[parent_id]: 341251
[tags]: 
Okay, as nobody else has stepped up to the plate to play devil's advocate, I'll do it. Automated unit testing can have good benefits for some projects, but can also have many of the following issues: It sucks down a ton of engineering resources. It can take many man-hours to remove environment and setup issues from the equation. It has a low ROI for some project types, especially GUIs. It won't catch many errors, because it's impossible to evaluate all execution paths for all but the most trivial programs. It doesn't catch integration errors. It doesn't catch broader system-level errors such as functions performed across multiple units, or non-functional areas such as performance. Test coverage and coverage gates can become an increasingly useless mantra It requires a sustainable process for ensuring that test case failures are reviewed and addressed immediately. Otherwise the app will evolve out of sync with the unit test suite. It has a significant opportunity cost - there are other activities such as code reviews that have an equally good or even better ROI. It can involve a significant culture change. So developers shouldn't adopt a dogmatic (yes or no) approach towards unit testing, but instead do an ROI calculation for every project.
