[site]: stackoverflow
[post_id]: 91127
[parent_id]: 
[tags]: 
Best way to validate drag/drop operations for a TreeView in C#

I want to verify a drag & drop operation is allowed. A valid item can come from another one of our "controls", or internally from within the custom treeview. Currently I have this: bool CanDrop(DragEventArgs e) { bool allow = false; Point point = tree.PointToClient(new Point(e.X, e.Y)); TreeNode target = tree.GetNodeAt(point); if (target != null) { if (CanWrite(target)) //user permissions { if (e.Data.GetData(typeof(DataInfoObject)) != null) //from internal application { DataInfoObject info = (DataInfoObject)e.Data.GetData(typeof(DataInfoObject)); DragDataCollection data = info.GetData(typeof(DragDataCollection)) as DragDataCollection; if (data != null) { allow = true; } } else if (tree.SelectedNode.Tag.GetType() != typeof(TreeRow)) //node belongs to this & not a root node { if (TargetExistsInNode(tree.SelectedNode, target) == false) { if (e.Effect == DragDropEffects.Copy) { allow = true; } else if (e.Effect == DragDropEffects.Move) { allow = true; } } } } } return allow; } I've moved all the checking code to this method to try to improve things, but to me this is still horrible! So much logic, and so much of it to do things that I'd expect the treeview would do itself (eg. "TargetExistsInNode" checks whether the dragged node is being dragged to one of its children). What is the best way to validate input to a control?
