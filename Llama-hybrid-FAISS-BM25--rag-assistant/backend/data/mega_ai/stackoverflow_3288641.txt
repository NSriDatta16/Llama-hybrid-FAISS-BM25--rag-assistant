[site]: stackoverflow
[post_id]: 3288641
[parent_id]: 2256879
[tags]: 
I'm using this: class IS_MCI extends ISP { public $Size; public $Type = ISP_MCI; public $ReqI; public $NumC; public function IS_MCI($data, &$CompCar) { $up = unpack('CSize/CType/CReqI/CNumC', $data); $this->Size = $up['Size']; $this->ReqI = $up['ReqI']; $this->NumC = $up['NumC']; $temp = array(); $p = 4; for ($i = 0; $i NumC; $i++) { $up2 = unpack('SNode/SLap/CPLID/CPosition/CInfo/CSp3/IX/IY/IZ/SSpeed/SDirection/SHeading/sAngVel', substr($data, $p, 28)); $temp[] = new CompCar($up2['Node'],$up2['Lap'],$up2['PLID'],$up2['Position'],$up2['Info'],$up2['Sp3'],$up2['X'],$up2['Y'],$up2['Z'],$ $p += 28; } $CompCar = $temp; } } And CompCar class: class CompCar { public $xNode; // current path node public $Lap; // current lap public $PLID; // player's unique id public $Position; // current race position : 0 = unknown, 1 = leader, etc... public $Info; // flags and other info - see below public $Sp3; public $X; // X map (65536 = 1 metre) public $Y; // Y map (65536 = 1 metre) public $Z; // Z alt (65536 = 1 metre) public $Speed; // speed (32768 = 100 m/s) public $Direction; // direction of car's motion : 0 = world y direction, 32768 = 180 deg public $Heading; // direction of forward axis : 0 = world y direction, 32768 = 180 deg public $AngVel; // signed, rate of change of heading : (16384 = 360 deg/s) public $SpeedKPH; // speed in kph public $SpeedMPH; // speed in mph public $DirectionC; // Direction calculated to degrees public $HeadingC; // Heading calculated to degrees public $AngVelC; // Calculated // ADDED: public $SpeedMS; // speed in mps public function __construct($xNode,$Lap,$PLID,$Position,$Info,$Sp3,$X,$Y,$Z,$Speed,$Direction,$Heading,$AngVel) { $this->xNode = $xNode; $this->Lap = $Lap; $this->PLID = $PLID; $this->Position = $Position; $this->Info = $Info; $this->Sp3 = $Sp3; $this->X = $X; $this->Y = $Y; $this->Z = $Z; $this->Speed = $Speed; $this->Direction = $Direction; $this->Heading = $Heading; $this->AngVel = $AngVel; $this->doCalcs(); } private function doCalcs() { // Speed Calc $old = $this->Speed; $this->SpeedKPH = ($old * (100 / 32768)) * 3.6; $this->SpeedMPH = $this->SpeedKPH * 0.6215; $this->SpeedKPH = floor($this->SpeedKPH); $this->SpeedMPH = floor($this->SpeedMPH); $this->SpeedMS = $this->SpeedKPH/3.6; // Direction $this->DirectionC = CompCar::degrees($this->Direction); // Heading $this->HeadingC = CompCar::degrees($this->Heading); // Angle Calcs $this->AngVelC = $this->AngVel * 180 / 8192; } public static function degrees($input) { $input = $input / 65535 * 360; //$input = 360 - floor($input); $input = floor(360 - $input); return $input; } } And everything it's working fine!
