[site]: stackoverflow
[post_id]: 2709460
[parent_id]: 1005473
[tags]: 
This exposes the dependency being injected and violates the OOP principle of encapsulation. Well, frankly speaking, everything violates encapsulation. :) It's a kind of a tender principle that must be treated well. So, what violates encapsulation? Inheritance does . "Because inheritance exposes a subclass to details of its parent's implementation, it's often said that 'inheritance breaks encapsulation'". (Gang of Four 1995:19) Aspect-oriented programming does . For example, you register onMethodCall() callback and that gives you a great opportunity to inject code to the normal method evaluation, adding strange side-effects etc. Friend declaration in C++ does . Class extention in Ruby does . Just redefine a string method somewhere after a string class was fully defined. Well, a lot of stuff does . Encapsulation is a good and important principle. But not the only one. switch (principle) { case encapsulation: if (there_is_a_reason) break! }
