[site]: stackoverflow
[post_id]: 573593
[parent_id]: 573543
[tags]: 
Do you agree that a reboot of Java (a new version breaking compatibility with old code) will be a good thing? No, at least not without a migration path. Leaving your customers out to sea is a really bad idea. Educating them (particularly about deprecation and what that means) and encouraging them to move toward the new practices (maybe by offering code clinics for example) is important. Another example (probably more effective) is to continue to support legacy code with a service contract (something I thought Sun was doing anyway). What are your pet peeves, things you believe need fixing in the language? My own examples focused on compability-breaking items -- things you just can't do in current Java without breaking existing code. But other ideas are also welcome. Steve Yegge once referred to Java as the "kingdom of nouns" and I have to agree with him. I understand the reason for it, but over the years having to call "setters" and "getters" and the like has made code huge and noisy. I also think literals for lists, maps, regular expressions and XML are long overdue. Things could be a lot more cumbersome--Java could have been rolled out without String literals. Think about what that would be like. I don't believe that the language needs new constructs such as closures. Some have argued Java has that already with anonymous inner classes. They are "noun-y" closures. It would be better if the Java Platform (the JVM) were fixed so that OTHER languages that run on it can move in that direction.
