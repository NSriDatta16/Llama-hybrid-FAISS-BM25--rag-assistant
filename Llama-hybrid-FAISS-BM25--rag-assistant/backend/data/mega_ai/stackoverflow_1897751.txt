[site]: stackoverflow
[post_id]: 1897751
[parent_id]: 1769821
[tags]: 
In the Parachute book, the author tells of how he likes showing off résumés to his friends, who remark that "This résumé will never get anyone hired!", to which he responds "Oh, but it already did!". The lesson is that every employer is different . So the real question is not whether the SCJP will help you get a job, but whether it'll help you get a job at one of the places you want to work. Google has a lot of pretty smart programmers who use Java, for example, and of all the people I know who work there, zero have taken the SCJP, so it's probably not a big concern there. Now, some more personal (i.e., less universal) feedback: It would not help you if you were to interview at my company, and in fact might hurt (especially if you call attention to it), if it looks like you're only a Java programmer . We need good programmers, not good Java programmers. I've not taken the SCJP, but I suspect it's like every other standardized test: it's as much about your SCJP-taking ability than your Java ability. When you interview, we're going to look at the code you've already written (open-source projects are great), and the code you write during the interview. What Sun thought of you is not our concern. (We can't exactly call up Gosling in a year and say "Dude, you told us this loser knew Java! You totally owe us one year of dev time".) Some people have suggested that it'll make you look good over another candidate, if all else is equal. First, all else is never equal when it comes to interviews. In fact, I've rarely interviewed somebody and been neutral: it's either an immediate "No" or an emphatic "Yes". Second, unless it's a really tiny company, everybody needs more great programmers, so if two "Yes"s walk in the door at the same time, we'll hire them both. Yes, even today, in this economy. So figure out where you want to work (a specific place, or a type of place), and see if the SCJP will help you there. There are lots of other ways to get good at Java in the time you might save. First of all, writing real Java programs. :-) Bonus if you open-source them so everybody can see the cool stuff you've done. Double bonus if you write a blog about all the gory details. Second, learn something other than Java. If you spend 6 months learning Haskell, for example, I guarantee it'll significantly help your Java.
