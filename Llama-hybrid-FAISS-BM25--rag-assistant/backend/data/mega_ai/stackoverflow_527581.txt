[site]: stackoverflow
[post_id]: 527581
[parent_id]: 502774
[tags]: 
Build into the code a self-updating process. It will check for updates and run them when/where/how you have configured it for the client. You will have to create some sort of a list of modules (custom or not) that need to be tested with the new build prior to roll-out. When deploying an update you will have to ensure these are tested and integrated correctly. Hopefully your design can handle this. Updates are ideally a few key steps. a) Backup so you can back out. You should be able to back out the entire update at any time. So, that means creating a local archive of the application and database first. b) Update Monitoring Process - Have the CMS system phone home to look for a new build. c) Schedule Update on availability - Chances are you don't want the update to run the second it is available. This means you will have to create a cron/agent of some kind to do the system update automatically in the middle of the night. You can also consider client requirements to update on weekends, or on specific days. You can also stagger rolling out your updates so you don't update 1000 clients in 1 day and get tech support hell. Staggered roll-out of some kind might be beneficial for you. d) Add maintenance mode to update the site -- Kick the site into maintenance mode. e) SVN checkout or downloadable packages -- ideally you can deploy via svn checkout, and if not, setup your server to deliver svn generated packages into an archive that can be deployed on client sites. f) Deploy DB Scripts - Backup the databases, update them, populate them g) Update site code - All this work for one step. h) Run some tests on it. If your code has self-tests built in, it would be ideal.
