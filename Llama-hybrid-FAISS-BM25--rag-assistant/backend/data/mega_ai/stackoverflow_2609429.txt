[site]: stackoverflow
[post_id]: 2609429
[parent_id]: 2609334
[tags]: 
My view: For the first one I think it is average case and worst case form of time-complexity. am i right? and what else do i write in that? No! Big O notation has NOTHING to do with average case or worst case. It is only about the order of growth of a function - particularly, how quickly a function grows relative to another one. A function f can be O(n) in the average case and O(n^2) in the worst case - this just means the function behaves differently depending on its inputs, and so the two cases must be accounted for separately. Regarding question 2, it is obvious to me from the wording of the question that you need to start with the mathematical definition of Big O. For completeness's sake, it is: Formal Definition: f(n) = O(g(n)) means there are positive constants c and k, such that 0 ≤ f(n) ≤ cg(n) for all n ≥ k. The values of c and k must be fixed for the function f and must not depend on n. (source http://www.itl.nist.gov/div897/sqg/dads/HTML/bigOnotation.html ) So, you need to work from this definition and write a mathematical proof showing that f(n) = O(k(n)) . Start by substituting O(g(n)) with O(k*f(n)) in the definition above; the rest should be quite easy.
