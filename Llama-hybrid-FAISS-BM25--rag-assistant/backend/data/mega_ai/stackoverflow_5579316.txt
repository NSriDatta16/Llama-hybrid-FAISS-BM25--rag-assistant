[site]: stackoverflow
[post_id]: 5579316
[parent_id]: 5576571
[tags]: 
The only way to get the time without reflections is to call the method without reflections. This is because the method is so trivial, that attempting to monitor it will create more overhead than the actual method and give you how fast you can monitor the method rather than the speed of the method. public static int addMe(int a, int b) { return a + b; } public static void main(String args[]) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException { Method addMe = CustomeMath.class.getMethod("addMe", int.class, int.class); int result = (Integer) addMe.invoke(null, 37, 47); System.out.println(result); int runs = 10000000; { long start = System.nanoTime(); for (int i = 0; i prints 84 The average call time was 1.4 ns The average call time using reflections was 670.1 ns Some homework for you; Can you can speculate why there is such a difference? Why might you get a different result in a more realistic example?
