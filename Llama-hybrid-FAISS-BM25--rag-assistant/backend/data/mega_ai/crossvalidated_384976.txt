[site]: crossvalidated
[post_id]: 384976
[parent_id]: 278385
[tags]: 
I like this question, mainly because I've had the same question myself for many years. First it helps to understand the different branches of machine learning and AI. There's a whole bunch of terminology that might help clear this up a little. Roughly speaking when people talk about machine learning it falls into two categories supervised and unsupervised learning; supervised learning is what it sounds like you've seen, with MarI/O (the famous super mario AI) the AI processes the input data and produces a set of outputs and these outputs are scored - the score can be used by the algorithm to decide if the AI is performing well and sometimes can give the AI information on how best it can improve. With unsupervised learning there is no 'score' the algorithm is just given a bunch of input data and left to it - this is where algorithms like K-means come in. Unsupervised learning is (for the most part) clustering the data into groups of similarity. There's a second way to divide AIs (at least for me); backpropagation based or evolutionary . Evolutionary algorithms work by having a large number (called population) of agents all trying to complete the same task. The agents are given some allotted time to solve the problem (genetic algorithms often, but not always, work in 'real time' - it can take minutes or hours to solve the problem), and then scored after this time has passed (or after they have 'died' by other means). Scoring can be anything you like, but the more closely is actually represents the problem the better (scoring in MarI/O is how to the right of the level the AI gets, but you could just as easily have used the actual score in Mario, but this would have had different effects on the progression of the AI). The top scoring agents go on to reproduce new agents for the next generation, either by a mutation of their genes or cross breading between 2 or more of the top scorers; the bottom scoring agents are deleted and replaced by the children of the top scorers. Backpropagation on the other hand is just one single agent. It is most typically a neural network by in essence back propagation is just like linear regression, so it can work on a single or multivariate linear, polynomial or any other type of function (caveat: the function must have a differential). This type of AI has many lines of input data with associated expected values - to train a network like this you must have a whole bank of your input data and already know what the outputs are supposed to be for this training data - it's supervised learning. You then feed all your input data into your function or network and then compare what the AI is predicting to what you know is the correct answer; this difference can be used to go back through each layer of the network and accurately attribute the amount of error to each node, thereby allowing you to change the values used for the nodes. In essence you propagate the errors between the expected and the predicted values back through the layers of the network. Now you can in theory use a genetic algorithm to model different 'hyper-parameters'of your neural network (hyper-parameters are things like the number of layers, the number of neurons per layer - these things don't change for a backpropagation AI, this would mean you have to train many hundreds of back propagation networks which would typically be time consuming and (for the most part) unnecessary - there are rules of thumb for picking hyper parameters, and if your network doesn't have the correct it's possible to just start over with different ones.
