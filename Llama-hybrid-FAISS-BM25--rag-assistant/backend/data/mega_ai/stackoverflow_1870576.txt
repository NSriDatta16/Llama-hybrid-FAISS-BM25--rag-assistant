[site]: stackoverflow
[post_id]: 1870576
[parent_id]: 1870557
[tags]: 
First, create a suite of automated unit tests, and confirm you have high code coverage (70% or more). During refactoring, you will run those tests very frequently, in order to convince yourself (and Management) that you haven't broken anything. No unit tests = no refactoring. Let me change my mind a little. You don't need unit tests - you need high code coverage from tests that will be run frequently, as you change the code. These could be automated unit tests, or automated functional tests. I do not believe that manual tests are an adequate substitute. They are much less likely to be run frequently during the refactoring process. Refactoring is much less likely to succeed without the constant reassurance that the code has not been broken in the process of fixing it.
