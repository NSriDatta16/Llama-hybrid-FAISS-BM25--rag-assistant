[site]: stackoverflow
[post_id]: 68566
[parent_id]: 68335
[tags]: 
There are a couple of different ways to approach the problem: Wrap command-line programs use a Python library that provides SSH capabilities (eg - Paramiko or Twisted Conch ) Each approach has its own quirks. You will need to setup SSH keys to enable password-less logins if you are wrapping system commands like "ssh", "scp" or "rsync." You can embed a password in a script using Paramiko or some other library, but you might find the lack of documentation frustrating, especially if you are not familiar with the basics of the SSH connection (eg - key exchanges, agents, etc). It probably goes without saying that SSH keys are almost always a better idea than passwords for this sort of stuff. NOTE: its hard to beat rsync if you plan on transferring files via SSH, especially if the alternative is plain old scp. I've used Paramiko with an eye towards replacing system calls but found myself drawn back to the wrapped commands due to their ease of use and immediate familiarity. You might be different. I gave Conch the once-over some time ago but it didn't appeal to me. If opting for the system-call path, Python offers an array of options such as os.system or the commands/subprocess modules. I'd go with the subprocess module if using version 2.4+.
