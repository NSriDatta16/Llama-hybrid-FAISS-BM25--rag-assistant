[site]: datascience
[post_id]: 51769
[parent_id]: 51763
[tags]: 
How do I download these many different images? Since it's pretty hard to manually download the pictures of all, is there a way to automate it? First of all, you need to get an idea of how your classifier will be, will it classify variable size images or fixed size images? Will it receive only one face as an input or more than one? Will it classify black and white images or with more than one channel? Will it be a multioutput classifier or a single output classifier? Before starting you have to answer this and other questions. Based on the later questions you have to get your data from a different source or in a different way. Instead of thinking these questions you can search for a dataset that already has the images collected and organized and adapt to the dataset, Kaggle has lots of public datasets. Collecting the training data by your own can be tedious work, and more if you need thousands of samples, I recommend you to make a data mining application the crawls through different pages and automatically downloads the images, although you have to be careful not to violate any privacy laws. I am using Fast.ai and we are required to make a different class for each player. How should I go about making different classes for so many players? Now that you have all the data clean and tidy you have to classify the images. There are lots of ways to classify images using deep neural networks, you could use simple feedforward neural networks or recurrent neural networks, but the most commonly used and the one I recommend you are convolutional neural networks. If you do not have a lot of experience classifying images I recommend you to start with an easier project such as the MNIST dataset, which consists of black an white images of handwritten digits, this way you can practice with the different hyperparameters and experiment better, rather than starting with such an ambitious classification task. Either way, to classify the images into multiple outputs you will have to add a final layer to your neural network with a number of hidden neurons equal to the number of classes to distinguish, then you should add a softmax activation function to that layer. Finally, for the model to learn you should use a categorial cross entropy loss/cost function. I don't know if I answered your question or not at all so please don't hesitate into telling me or asking more questions. Either way, glad to help
