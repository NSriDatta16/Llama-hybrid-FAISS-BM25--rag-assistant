[site]: stackoverflow
[post_id]: 1192822
[parent_id]: 1189911
[tags]: 
I think you have to consider that the non-relational DBMS differ a lot regarding their data model and therefore the conceptual data design will also differ a lot. In the thread Data Design in Non-Relational Databases of the NOSQL Google group the different paradigms are categorized like this: Bigtable-like systems (HBase, Hypertable, etc) Key-value stores (Tokyo, Voldemort, etc) Document databases (CouchDB, MongoDB, etc) Graph databases (AllegroGraph, Neo4j, Sesame, etc) I'm mostly into graph databases , and the elegance of data design using this paradigm was what brought me there, tired of the shortcomings of RDBMS . I have put a few examples of data design using a graph database on this wiki page and there's an example of how to model the basic IMDB movie/actor/role data too. The presentation slides (slideshare) Graph Databases and the Future of Large-Scale Knowledge Management by Marko Rodriguez contains a very nice introduction to data design using a graph database as well. Answering the specific questions from a graphdb point of view: Alternate design: adding relationships between many different kinds of entities without any worries or a need to predefine which entities can get connected. Bridging the gap: I tend to do this different for every case, based on the domain itself, as I don't want a "table-oriented graph" and the like. However, here's some information on automatic translation from RDBMS to graphdb. Explicit data models: I do these all the time (whiteboard style), and then use the model as it is in the DB as well. Miss from RDBMS world: easy ways to create reports. Update: maybe it's not that hard to create reports from a graph database, see Creating a Report for a Neo4J Sample Database .
