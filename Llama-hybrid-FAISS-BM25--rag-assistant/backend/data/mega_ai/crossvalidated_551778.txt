[site]: crossvalidated
[post_id]: 551778
[parent_id]: 
[tags]: 
Why does the RMSE stay the same regardless of the algorithm that I use?

I have a dataframe with users, items, and ratings that are either 0 or 1. There are more items than users, some users might rate lots of common items, and some not any common items at all. Here is a snippet, but in reality I have like 1500 users and 4000 items: user item rating u1 i1 0 u1 i2 1 u2 i2 1 u2 i3 1 u3 i1 0 u3 i3 0 u3 i4 1 u3 i5 1 In order to recommend items to users, I used the suprise Python package. import surprise reader = Reader(rating_scale=(0, 1)) data = Dataset.load_from_df(df_user_activity, reader) from surprise.model_selection import train_test_split trainset, testset = train_test_split(data, test_size=0.2) trainsetfull = data.build_full_trainset() trainset_iids = list(trainset.all_items()) iid_converter = lambda x: trainset.to_raw_iid(x) trainset_raw_iids = list(map(iid_converter, trainset_iids)) from surprise import NMF, SVD, SVDpp, KNNBasic, KNNWithMeans, KNNWithZScore, CoClustering my_k = 15 my_min_k = 5 my_sim_option = { 'name':'pearson', 'user_based':False, } algo = KNNWithMeans( k = my_k, min_k = my_min_k, sim_option = my_sim_option ) algo.fit(trainset) from surprise import accuracy predictions = algo.test(testset) accuracy.rmse(predictions) from surprise.model_selection import cross_validate results = cross_validate( algo = algo, data = data, measures=['RMSE'], cv=5, return_train_measures=True ) results['test_rmse'].mean() algo.fit(trainsetfull) I always get the RMSE around 0.38, regardless of what parameters or algorithm I use. What should I pay attention to? The original dataset, as described in the first paragraph, is a bit strange because there are much less users than items. Is it because of that?
