[site]: stackoverflow
[post_id]: 448422
[parent_id]: 447002
[tags]: 
I would consider avoiding the dynamic object, and rather create the data storage class (SettingsModel?) with one method for storing and one method for retrieving data. So instead of using: configurationSettings.randomSetting = value; ...you would write: configurationSettings.store("randomSetting", value); You could store the named settings internally in a Dictionary, and do whatever magic needs to be done in the store() method. The main advantage here is readability: when you see a method being called, you know there's functionality behind it. For the same reason I tend to dislike getter/setter functions. In the end it is a matter of taste, so if your code isn't broken, why fix it. :)
