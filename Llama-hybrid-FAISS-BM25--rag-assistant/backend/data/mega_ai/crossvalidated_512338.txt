[site]: crossvalidated
[post_id]: 512338
[parent_id]: 511929
[tags]: 
I agree with Patrick's comments above. I found the following articles useful which highlight that removing independent variables related to multicollinearity will improve the model output and this can be performed using a loop. https://beckmw.wordpress.com/2013/02/05/collinearity-and-stepwise-vif-selection/ Why is multicollinearity not checked in modern statistics/machine learning https://www.kaggle.com/robertoruiz/dealing-with-multicollinearity The VIF factor can be checked automatically by creating a loop. See my sample code below. Example code: from statsmodels.stats.outliers_influence import variance_inflation_factor import statsmodels.api as sm def check_vif(self): def_vif_X = self.def_X.copy() def_vif_X = sm.add_constant(def_vif_X) def_columns_removed = [] def_vif_check = pd.DataFrame() def_vif_check["VIF"] = [variance_inflation_factor(def_vif_X.values, i) for i in range(def_vif_X.shape[1])] def_vif_check["features"] = def_vif_X.columns def_vif_check_condition = False while def_vif_check_condition == False: vif_const_index = (def_vif_check[def_vif_check["features"] == "const"]).index def_vif_check.drop(vif_const_index, axis=0, inplace=True) def_vif_check.sort_values(by="VIF", ascending=False, inplace=True) def_vif_check.reset_index(drop=True, inplace=True) vif_number = def_vif_check.loc[0, "VIF"] if vif_number
