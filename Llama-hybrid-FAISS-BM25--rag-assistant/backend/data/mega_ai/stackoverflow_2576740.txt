[site]: stackoverflow
[post_id]: 2576740
[parent_id]: 2576734
[tags]: 
If you are using Apache you can set allow/deny on locations. http://www.apachesecurity.net/ or here is a link to the apache docs on the Deny directive http://httpd.apache.org/docs/2.0/mod/mod_access.html#deny EDITS (responding to the new info). The Deny directive also works with environment variables. You can restrict access based on browser string (not really secure, but discourages casual browsing) which would still allow XHR calls. I would suggest the best way to accomplish this is to have a token of some kind that validates the request is a 'good' request. You can do that with a cookie, a session store of some kind, or a parameter (or some combination). What I would suggest for something like this is to generate a unique url for the service that expires after a short period of time. You could do something like this pretty easily with Memcache. This strategy could also be used to obfuscate the service url (which would not provide any actual security, but would raise the bar for someone wanting to make direct calls). Lastly, you could also use public key crypto to do this, but that would be very heavy. You would need to generate a new pub/priv key pair for each request and return the pubkey to the js client (here is a link to an implementation in javascript) http://www.cs.pitt.edu/~kirk/cs1501/notes/rsademo/
