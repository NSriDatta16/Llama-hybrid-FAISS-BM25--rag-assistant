[site]: stackoverflow
[post_id]: 4026964
[parent_id]: 4024072
[tags]: 
Let me clarify something first: the accented characters you show are not actually Unicode (as one answer implies); these are 8-bit ASCII characters. One thing to keep in mind: you see characters like è and à simply because this is how your code page (the code page used by your OS and/or SQL Server [I'm not sure which one]) displays them. In a different code page, these characters would be represented by totally different symbols (e.g. if you use a Cyrillic or Turkish code page). Anyway, say you want to replace these 8-bit chars with the closest US/Latin character equivalent for your default code page [I assume these are characters from some variation of a Latin character set]. This is how I approached a similar problem (disclaimer: this is not a very elegant solution, but I could not think of anything better at the time): Create a UDF to translate an 8-bit ASCII character to a 7-bit printable ASCII equivalent, such as: CREATE FUNCTION dbo.fnCharToAscii ( @Char AS VARCHAR ) RETURNS VARCHAR AS BEGIN IF (@Char IS NULL) RETURN '' -- Process control and DEL chars. IF (ASCII(@Char) = 32) AND (ASCII(@Char) ' WHEN 156 THEN 'o' WHEN 157 THEN '?' WHEN 158 THEN 'z' WHEN 159 THEN 'Y' WHEN 160 THEN ' ' WHEN 161 THEN 'i' WHEN 162 THEN 'c' WHEN 163 THEN 'L' WHEN 164 THEN '?' WHEN 165 THEN 'Y' WHEN 166 THEN '|' WHEN 167 THEN '$' WHEN 168 THEN '^' WHEN 169 THEN 'c' WHEN 170 THEN 'a' WHEN 171 THEN ' ' WHEN 188 THEN '?' WHEN 189 THEN '?' WHEN 190 THEN '?' WHEN 191 THEN '?' WHEN 192 THEN 'A' WHEN 193 THEN 'A' WHEN 194 THEN 'A' WHEN 195 THEN 'A' WHEN 196 THEN 'A' WHEN 197 THEN 'A' WHEN 198 THEN 'A' WHEN 199 THEN 'C' WHEN 200 THEN 'E' WHEN 201 THEN 'E' WHEN 202 THEN 'E' WHEN 203 THEN 'E' WHEN 204 THEN 'I' WHEN 205 THEN 'I' WHEN 206 THEN 'I' WHEN 207 THEN 'I' WHEN 208 THEN 'D' WHEN 209 THEN 'N' WHEN 210 THEN 'O' WHEN 211 THEN 'O' WHEN 212 THEN 'O' WHEN 213 THEN 'O' WHEN 214 THEN 'O' WHEN 215 THEN 'x' WHEN 216 THEN 'O' WHEN 217 THEN 'U' WHEN 218 THEN 'U' WHEN 219 THEN 'U' WHEN 220 THEN 'U' WHEN 221 THEN 'Y' WHEN 222 THEN 'b' WHEN 223 THEN 'B' WHEN 224 THEN 'a' WHEN 225 THEN 'a' WHEN 226 THEN 'a' WHEN 227 THEN 'a' WHEN 228 THEN 'a' WHEN 229 THEN 'a' WHEN 230 THEN 'a' WHEN 231 THEN 'c' WHEN 232 THEN 'e' WHEN 233 THEN 'e' WHEN 234 THEN 'e' WHEN 235 THEN 'e' WHEN 236 THEN 'i' WHEN 237 THEN 'i' WHEN 238 THEN 'i' WHEN 239 THEN 'i' WHEN 240 THEN 'o' WHEN 241 THEN 'n' WHEN 242 THEN 'o' WHEN 243 THEN 'o' WHEN 244 THEN 'o' WHEN 245 THEN 'o' WHEN 246 THEN 'o' WHEN 247 THEN '-' WHEN 248 THEN 'o' WHEN 249 THEN 'u' WHEN 250 THEN 'u' WHEN 251 THEN 'u' WHEN 252 THEN 'u' WHEN 253 THEN 'y' WHEN 254 THEN 'b' WHEN 255 THEN 'y' END RETURN '' END The code above is general-purpose, so you can adjust the character mappings to remove all non-alphabetic characters, e.g. you can use code like this in the match for printable 7-bit ASCII character (this assumes case-insensitive collation): IF @Char NOT LIKE '[a-z]' RETURN '' To see if your character mapping for 8-bit ASCII symbols works correctly, run the following code: DECLARE @I INT DECLARE @Msg VARCHAR(32) SET @I = 128 WHILE @I Now you can create a UDF to process a string: CREATE FUNCTION dbo.fnStringToAscii ( @Value AS VARCHAR(8000) ) RETURNS VARCHAR(8000) AS BEGIN IF (@Value IS NULL OR DATALENGTH(@Value) = 0) RETURN '' DECLARE @Index INT DECLARE @Result VARCHAR(8000) SET @Result = '' SET @Index = 1 WHILE (@Index
