[site]: stackoverflow
[post_id]: 175731
[parent_id]: 175717
[tags]: 
I highly recommend reading Cleaning Up Unmanaged Resources on MSDN, it has articles touching on when to use Dispose and how to implement IDisposable correctly. Your gut instinct is mostly correct as you rarely have to implement IDisposable, unless your class uses unmanaged resources or is a container for an object that implements IDisposable. As to enforcing the calling of Dispose, when you properly implement the IDisposable interface you attach a finalizer which calls Dispose to catch those stragglers and deviant classes that forgot. Relevant articles: Implementing a Dispose Method Describes the implementation of the Dispose method for releasing unmanaged resources. Using Objects That Encapsulate Resources Describes ways to ensure that the Dispose method is called, such as the C# using statement (Using in Visual Basic). (edit: additional information added) In your example you have SomeClass.SomeMethod which does some work, presumably with a resource. If this resource isn't a class member, you may be better served wrapping it in a using-statement , and forgetting about the devilish details of IDisposable. Public Class someClass() sub someMethod Using someResource As New ResourceType( arguments ) ' no worries about IDisposable for someResource, as it is automatic End Using end sub End Class
