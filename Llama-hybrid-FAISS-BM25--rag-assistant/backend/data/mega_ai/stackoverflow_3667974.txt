[site]: stackoverflow
[post_id]: 3667974
[parent_id]: 3663349
[tags]: 
In a functional language as XSLT there is no "order of computation" defined . Therefore, trying to number the "computations" by their ordering "in time" isn't meaningful and if attempted will often produce surprising results. For example , nothing restricts to apply templates in the same order in time as the document order of the nodes in the selected node-list. These could be done in parallel, meaning in any order . Many XSLT processors perform lazy evaluation which means that a certain XSLT instruction will only be evaluated when it is really needed and not according to its textual order in the XSLT stylesheet. Often some instructions are not executed at all. Sometimes the optimizer will execute a given XSLT instruction twice because it decided to discard the first result in order to optimize space utilization. The requested numbering can be produced using recursion (generally) and continuation-passing style CPS or Monads (more specifically). The FXSL library (both version 1 -- for XSLT 1.0 and version 2 -- for XSLT 2.0) contains templates that can be used to organize such numbering: foldl, foldr, iter, iterUntil, scanl, scanr, ..., etc. Whenever the problem is precisely defined (which is not the current case), such numbering can be produced but be warned about the results .
