[site]: stackoverflow
[post_id]: 4676588
[parent_id]: 4675445
[tags]: 
The uiTableFilter plugin doesn't support what you're trying to do. A quick look at the source reveals this: elems.each(function(){ var elem = jQuery(this); jQuery.uiTableFilter.has_words(getText(elem), words, false) ? matches(elem) : noMatch(elem); }); and that expands to (essentially) this: elems.each(function(){ var elem = jQuery(this); jQuery.uiTableFilter.has_words(getText(elem), words, false) ? elem.show() : elem.hide(); }); So all it does is spin through all the rows, .show() those that match, and .hide() those that don't; uiTableSorter doesn't pay attention to the current shown/hidden state of the rows and there's no way to tell it to filter on multiple columns. If you really need your desired functionality then you can modify the plugin's behavior (the code is pretty small and simple) or just write your own. Here's a stripped down and simplified version that supports multiple filters and is a more conventional jQuery plugin than uiTableFilter: (function($) { $.fn.multiFilter = function(filters) { var $table = $(this); return $table.find('tbody > tr').each(function() { var tr = $(this); // Make it an array to avoid special cases later. if(!$.isArray(filters)) filters = [ filters ]; howMany = 0; for(i = 0, f = filters[0]; i tr > th').each(function(i) { if($(this).text() == f.column) { index = i; return false; } }); var text = tr.find('td:eq(' + index + ')').text(); if(text.toLowerCase().indexOf(f.word.toLowerCase()) != -1) ++howMany; } if(howMany == filters.length) tr.show(); else tr.hide(); }); }; })(jQuery); I'll leave error handling and performance as an exercise for the reader, this is just an illustrative example and I wouldn't want to get in the way of your learning. You could wire it up something like this: $('#type').keyup(function() { $('#leeLooDallas').multiFilter({ column: 'petType', word: this.value }); }); $('#color').keyup(function() { $('#leeLooDallas').multiFilter([ { column: 'petType', word: $('#type').val() }, { column: 'petColor', word: this.value } ]); }); And here's a live example (which assumes that you're going to enter something in "type" before "color"): http://jsfiddle.net/ambiguous/hdFDt/1/
