[site]: stackoverflow
[post_id]: 384890
[parent_id]: 
[tags]: 
is SFig language syntax efficient and clear (and better than Spring-Framework's XML DSL)?

ADDENDUM EDIT: Have not accepted an answer to this as there has not been any feedback from experienced Spring Framework developers. I've been working on a replacement DSL to use for Spring-Framework applicationContext.xml files (where bean initialization and dependency relationships are described for loading up into the Spring bean factory). My motivation is that I just flat out don't like Spring's use of XML for this purpose nor do I really like any of the alternatives that have been devised so far. For various reasons that I won't go into, I want to stay with a declarative language and not some imperative scripting language such as Groovy. So I grabbed the ANTLR parser tool and have been devising a new bean factory DSL that I've dubbed SFig. Here's a link that talks more about that: SFigâ„¢ - alternative metadata config language for Spring-Framework And here is the source code repository site: http://code.google.com/p/sfig/ I'm interested to know how I'm doing on the language syntax so far. Do you think SFig is both efficient and clear to understand? (I'm particularly concerned right now with the mulit-line text string): properties_include "classpath:application.properties"; org.apache.commons.dbcp.BasicDataSource dataSource { @scope = singleton; @destroy-method = close; driverClassName = "${jdbc.driverClassName}"; url = "${jdbc.url}"; username = "${jdbc.username}"; password = "${jdbc.password}"; defaultAutoCommit = true; } org.springframework.orm.ibatis.SqlMapClientFactoryBean sqlMapClient { @scope = singleton; @init-method = afterPropertiesSet; @factory-method = getObject; configLocation = "classpath:sqlmap-config.xml"; dataSource = $dataSource; } /* this string will have Java unescape encoding applied */ STRING str = "\tA test\u0020string with \\ escaped character encodings\r\n"; /* this string will remain literal - with escape characters remaining in place */ STRING regexp = @"(\$\{([a-zA-Z][a-zA-Z0-9._]*)\})"; /* multi-line text block - equates to a java.lang.String instance */ TEXT my_multi_line_text = /// Here is a line of text. This is yet another. Here is a blank line: Now picks up again. ///; /* forward use of 'props' bean */ java.util.HashMap map { this( $props ); } /* equates to a java.util.Propertis instance */ PROPERTIES props { "James Ward" = "Adobe Flex evangelist"; "Stu Stern" = "Gorilla Logic - Flex Monkey test automation"; Dilbert = "character in popular comic strip of same title"; "App Title Display" = "Application: ${app.name}"; "${app.desc}" = "JFig processes text-format Java configuration data"; } /* equates to a java.util.ArrayList instance */ LIST list { this( ["dusty", "moldy", "${app.version}", $str] ); [234, 9798.76, -98, .05, "numbers", $props, ["red", "green", "blue"]]; }
