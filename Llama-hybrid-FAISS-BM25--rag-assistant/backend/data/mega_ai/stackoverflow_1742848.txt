[site]: stackoverflow
[post_id]: 1742848
[parent_id]: 
[tags]: 
Why exactly do I need an explicit upcast when implementing QueryInterface() in an object with multiple interfaces()

Assume I have a class implementing two or more COM interfaces: class CMyClass : public IInterface1, public IInterface2 { }; Almost every document I saw suggests that when I implement QueryInterface() for IUnknown I explicitly upcast this pointer to one of the interfaces: if( iid == __uuidof( IUnknown ) ) { *ppv = static_cast ( this ); //call Addref(), return S_OK } The question is why can't I just copy this ? if( iid == __uuidof( IUnknown ) ) { *ppv = this; //call Addref(), return S_OK } The documents usually say that if I do the latter I will violate the requirement that any call to QueryInterface() on the same object must return exactly the same value. I don't quite get that. Do they mean that if I QI() for IInterface2 and call QueryInterface() through that pointer C++ will pass this slightly different from if I QI() for IInterface2 because C++ will each time make this point to a subobject?
