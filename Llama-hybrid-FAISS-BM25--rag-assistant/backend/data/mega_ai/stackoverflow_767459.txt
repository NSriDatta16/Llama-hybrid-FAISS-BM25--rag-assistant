[site]: stackoverflow
[post_id]: 767459
[parent_id]: 767401
[tags]: 
Yes you -can- rewrite you current code so that it can be unit tested according to all guidelines and best-practices. However, that can be expensive, and You should estimate the cost and compare that against the earnings... The earnings is that you might discover a problem with the code and also, if done right, the reduction of the complexity as the result of the refactoring. Both factors might save some time - in the future. The cost is the time and effort you have to spend both refactor your code, writing the test cases and also the extra time you might have to spend in the future to maintain the test-cases and the mocking code - and that can be significant costs. You are comparing a known cost against a future risk and I am sure a lot of smart guys knows how to do that, but it's obvious that You can actually spend an infinite time refactoring and mocking without ever reducing the risk of failure to zero (or even at all if the code and problem is complex and you are messing things up when refactoring), so you need to find a balance here. In this case, as the code is old, it might be ok to be "sloppy" or "pragmatic" and do black box testing - or top-down testing and just test the interface (or abstraction) without bothering to mock the database. And yes, you can argue that this is not a unit test but instead a system test or a function test practice. ...But, it might give the best value for your money - or your employers/customers money - or more time with your significant other (or at least more time to watch discovery channel.) If you have old code, allow black box testing, allow dependencies between the tests and compile a sequence of test that sets up the test data and manipulates it, and its at least tested automatically while not tested 100%.
