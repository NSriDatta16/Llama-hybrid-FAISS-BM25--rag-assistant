[site]: stackoverflow
[post_id]: 5612944
[parent_id]: 
[tags]: 
Can't understand multi_index

class ObjectStorage { private: std::string objName; int zIndex; // Reference for the Object interface boost::shared_ptr mCppObject; // Reference for the Python interface boost::python::object mPythonObject; public: ObjectStorage(const std::string &name, int zIndex_, boost::shared_ptr cpp, boost::python::object python) : objName(name), zIndex(zIndex_), mCppObject(cpp), mPythonObject(python) {} std::string getName() const { return objName; }; int getZIndex() const { return zIndex; } boost::shared_ptr getCppObject() const { return mCppObject; } boost::python::object getPythonObject() const { return mPythonObject; } }; // Tagging for multi_index container struct tag_zindex {}; struct tag_name {}; struct tag_cpp {}; struct tag_py {}; typedef boost::multi_index_container , bmi::const_mem_fun >, // Name bmi::ordered_unique , bmi::const_mem_fun >, // CPP reference bmi::ordered_non_unique , bmi::const_mem_fun , &ObjectStorage::getCppObject> >, // Python reference bmi::ordered_unique , bmi::const_mem_fun > > > ObjectWrapperSet; If first index in multi_index is right: sorting objects inside container refer to ZIndex value, I'm not sure about another. I need such functionality: Order by ZIndex but return getCppObject when iterating. Is it possible not only to set ordering, but result when accessing? Also, for example tag_py I want to iterate through all getPythonObject , not ObjectStorage . Is this really possible with multi_index ?
