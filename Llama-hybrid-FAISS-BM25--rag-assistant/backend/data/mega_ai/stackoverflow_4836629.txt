[site]: stackoverflow
[post_id]: 4836629
[parent_id]: 4836504
[tags]: 
I would go with the second option if we are limited to your options (otherwise read item 3 below), because: 1) when you write $query = $this->Execute("SELECT * FROM $table"); $total = $this->NumRows($query); it seams like you have one class, which executes queries (all kind of), and processes result of some specific queries (in your case number of rows. Imagine you have two entities, both of them are stored in tables (different), you will have two classes and both of them will either duplicate Execute method logic, or one entities DAO will use another to execute its Execute method (but these entities can be and mostly will be not related, so you will harm OOP principles) 2) now your last case $query = parent::Execute("SELECT * FROM $table"); $total = parent::NumRows($query); better than previous one, but in this case you DAOs are inherited from a class, which performs query execution... I'm not sure that it is right way to go, Imagine you have two different storages, like database and xml, to retrive information from first one you will use SQL, for last one it will be probably XPath; to work with storage you will use the same interface and two implementations, not the question - which one to inherit for your User class? No one, they are not related; User entity should not have any idea where is it stored. 3) Last case $query = DBManager::Execute("SELECT * FROM $table"); $total = DBManager::NumRows($query); it sound like delegating (sorry, I'm not that familiar with PHP), here you specify which class to use to process queries, for me, when I read this code, it sounds like Execute/NumRows are static methods of DBManager class (again sorry, I just use my architecture knowledge to help you and basic conventions for e.g. Java to read your code). In this case I would recommend you to create instance of DBManager and then use it: class UserDAO { private $storageManager = new DBManager(); ... $query = $storageManager::Execute("SELECT * FROM $table"); $total = $storageManager::NumRows($query); .... } something like this (please correct me if I made mistake in PHP code; for now just look at it like 'the way to go', abstract algorithm description ;). In this case, if have to switch to another implementation of DBManager, you will just change line private $storageManager = new DBManager(); and that's all.
