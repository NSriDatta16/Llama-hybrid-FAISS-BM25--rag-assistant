[site]: stackoverflow
[post_id]: 5171389
[parent_id]: 5171317
[tags]: 
Yes, it is possible. Here is a function that I wrote for a test harness use to do unit testing of Python shell scripts. def testrun(cmdline): try: cmdout, cmderr = "","" cmdp = Popen(cmdline, shell=True,stdout=PIPE, stderr=PIPE) cmdout,cmderr = cmdp.communicate() retcode = cmdp.wait() if retcode >sys.stderr, "Child was terminated by signal", -retcode else: return (retcode,cmdout,cmderr) except OSError, e: return (e,cmdout,cmderr) The function returns a tuple which contains the shell return code issues by sys.exit() , the standard output text, and the standard error output text. They are both text strings so you would need to use splitlines to break them into lines before processing. If you really need to interact with the output, line by line, then it is probably better to use pexpect rather than the subprocess module.
