[site]: crossvalidated
[post_id]: 549768
[parent_id]: 
[tags]: 
The validation accuracy remains at 0 or at 11% and validation loss increasing. Why?

I am training a multi-channel deep 3D-CNN. There are 4 channels. Shape of input of first channel is (3, 64, 48, 1), 2nd channel is (1, 64, 48, 1), 3rd channel is (1, 64, 48, 1) and 4th channel has (1, 64, 48, 1). There are 7 layers. Whenever I start training the model the validation accuracy starts increasing after first epoch and validation accuracy remains at 0 or 11% or 12%. Following is my code. How to reduce the validation loss and increase validation accuracy? def conv1(input_layer): x = layers.Conv3D(filters=8, kernel_size=(3, 3, 3), strides=(1,1,1), padding='same', activation="relu")(input_layer) x = layers.MaxPool3D((3, 3, 3), strides=(2, 2, 2), padding="same")(x) x = layers.BatchNormalization()(x) return x def conv2(x): x = layers.Conv3D(filters=16, kernel_size=(3,3,3), strides=(2,2,1), padding='same', activation="relu")(x) x = layers.BatchNormalization()(x) return x def conv3(x): def f(x): x = layers.Conv3D(filters=32, kernel_size=(3,3,3),strides=(1,1,1), padding='same',activation="relu")(x) x = layers.BatchNormalization()(x) return f return x def _shortcut(x, conv3): shortcut = layers.Conv3D(filters=16, kernel_size=(3,3,3), strides=(2,2,1), padding='same', activation="relu" )(x) return layers.add([shortcut, conv3]) def concat_layer(x1, x2, x3, x4): concatted = keras.layers.concatenate([x1, x2, x3, x4]) return concatted def conv4(x): x = layers.Conv3D(filters=64, kernel_size=(3,3,3), strides=(2,2,2), padding='same')(x) x = layers.AveragePooling3D(pool_size=(3,3,3), strides=(2,2,2), padding='same')(x) x = layers.BatchNormalization()(x) return x def output_layers(x): x = layers.Flatten()(x) x = layers.Dense(units=128, activation="relu")(x) x = layers.Dropout(0.5)(x) x = layers.Dense(units=6, activation="softmax")(x) return x inputs1 = keras.Input((3, 64, 48,1)) x11 = conv1(inputs1) x1 = conv2(x11) x1 = _shortcut(x11, conv3(x1)) inputs2 = keras.Input((1, 64, 48,1)) x22 = conv1(inputs2) x2 = conv2(x22) x2 = _shortcut(x22, conv3(x2)) inputs3 = keras.Input((1, 64, 48,1)) x33 = conv1(inputs3) x3 = conv2(x33) x3 = _shortcut(x33, conv3(x3)) inputs4 = keras.Input((1, 64, 48,1)) x44 = conv1(inputs4) x4 = conv2(x44) x4 = _shortcut(x44, conv3(x4)) merged = concat_layer(x1, x2, x3, x4) x = conv4(merged) output = output_layers(x) model = Model(inputs=[inputs1, inputs2, inputs3, inputs4], outputs=output, name="pointcnn") opt = keras.optimizers.Adam(learning_rate=0.0001) model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy']) print(model.summary()) history = model.fit(x=[x1train, x2train, x3train, x4train], y=ytrain, batch_size=100, epochs=50, validation_split=0.2) loss, acc = model.evaluate([x1train, x2train, x3train, x4train], ytrain, verbose=0) print('Train Accuracy: %f' % (acc*100)) loss, acc = model.evaluate([x1test, x2test, x3test, x4test], ytest, verbose=0) print('Test Accuracy: %f' % (acc*100)) Following is the training and validation acc/loss obtained.
