[site]: stackoverflow
[post_id]: 1851300
[parent_id]: 1851289
[tags]: 
I try and avoid this if I can just from an information hiding point of view. The less information a class has or needs the easier it is to test and verify. That being said, it does lead to more elegant solutions in some cases so if not doing it is horribly convoluted involving an awful lot of parameter passing then by all means go for it. Java for example uses this a lot with inner classes: public class Outer { private class Inner { public Inner() { // has access to the members of Outer for the instance that instantiated it } } }
