[site]: stackoverflow
[post_id]: 3072978
[parent_id]: 
[tags]: 
Code Contracts Static Analysis: Prover Limitations?

I've been playing with Code Contracts and I really like what I've seen so far. They encourage me to evaluate and explicitly declare my assumptions, which has already helped me to identify a few corner cases I hadn't considered in the code to which I'm adding contracts. Right now I'm playing with trying to enforce more sophisticated invariants. I have one case that currently fails proving and I'm curious if there is a way I can fix this besides simply adding Contract.Assume calls. Here is the class in question, stripped down for ease of reading: public abstract class MemoryEncoder { private const int CapacityDelta = 16; private int _currentByte; /// /// The current byte index in the encoding stream. /// This should not need to be modified, under typical usage, /// but can be used to randomly access the encoding region. /// public int CurrentByte { get { Contract.Ensures(Contract.Result () >= 0); Contract.Ensures(Contract.Result () = 0); Contract.Requires(value /// Current number of bytes encoded in the buffer. /// This may be less than the size of the buffer (capacity). /// public int Length { get; private set; } /// /// The raw buffer encapsulated by the encoder. /// protected internal Byte[] Buffer { get; private set; } /// /// Reserve space in the encoder buffer for the specified number of new bytes /// /// The number of bytes required protected void ReserveSpace(int bytesRequired) { Contract.Requires(bytesRequired > 0); Contract.Ensures((Length - CurrentByte) >= bytesRequired); //Check if these bytes would overflow the current buffer);); if ((CurrentByte + bytesRequired) > Buffer.Length) { //Create a new buffer with at least enough space for the additional bytes required var newBuffer = new Byte[Buffer.Length + Math.Max(bytesRequired, CapacityDelta)]; //Copy the contents of the previous buffer and replace the original buffer reference Buffer.CopyTo(newBuffer, 0); Buffer = newBuffer; } //Check if the total length of written bytes has increased if ((CurrentByte + bytesRequired) > Length) { Length = CurrentByte + bytesRequired; } } [ContractInvariantMethod] private void GlobalRules() { Contract.Invariant(Buffer != null); Contract.Invariant(Length = 0); Contract.Invariant(CurrentByte I'm interested in how I can structure the Contract calls in ReserveSpace so that the class invariants are provable. In particular, it complains about (Length
