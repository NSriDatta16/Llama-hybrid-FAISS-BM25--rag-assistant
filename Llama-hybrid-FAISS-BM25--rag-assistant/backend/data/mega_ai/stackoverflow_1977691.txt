[site]: stackoverflow
[post_id]: 1977691
[parent_id]: 1977605
[tags]: 
Try this instead, and see what happens: class ThreadingBug { private const string CONNECTION_STRING = "Data Source=.\\wfea;Initial Catalog=catalog;Persist Security Info=True;Trusted_Connection=yes;"; static void Main(string[] args) { try { Thread threadOne = new Thread(GetConnectionOne); Thread threadTwo = new Thread(GetConnectionTwo); threadOne.Start(); threadTwo.Start(); threadOne.Join(2000); threadTwo.Join(2000); } catch (Exception e) { File.AppendAllText("Main.txt", e.ToString()); } } static void GetConnectionOne() { try { using (SqlConnection conn = new SqlConnection(CONNECTION_STRING)) { conn.Open(); } } catch (Exception e) { File.AppendAllText("GetConnectionOne.txt", e.ToString()); } } static void GetConnectionTwo() { try { using (SqlConnection conn = new SqlConnection(CONNECTION_STRING)) { conn.Open(); } } catch (Exception e) { File.AppendAllText("GetConnectionTwo.txt", e.ToString()); } } } I believe there is a bug here, though it's neither major, nor fundamental. After working to narrow this down (and to do things like removing one thread), it looks like the same instance of the Exception class is thrown by the Connection Pool implementation on both threads (kudos to Gregory for discovering this). This sometimes shows up as a corrupt ("intermingled") stack trace, and sometimes simply as the same stack trace on both threads, even when the code is quite different between the two threads. Commenting out one of the Thread.Start calls shows an entirely different stack trace, demonstrating that the odd part is in the connection pool implementation - the odd stack traces are being handed out by the connection pool, since both threads use the same connection string and credentials. I've submitted a Connect issue on this at https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=522506 . Everyone should feel free to vote on how important (or unimportant) you feel it is, whether you can reproduce it, or whether you have a workaround. This will help Microsoft prioritize a fix. Update: The Connect issue has been updated. Microsoft acknowledges it as a bug, and plans to fix it in a future release. Thanks to nganju, Gregory, and everyone else who participated in solving this problem. It was indeed a bug, and it will be fixed, and it's because of us.
