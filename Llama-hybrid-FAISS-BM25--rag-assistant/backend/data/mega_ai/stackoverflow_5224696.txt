[site]: stackoverflow
[post_id]: 5224696
[parent_id]: 5224524
[tags]: 
Can't really speak to Prolog, but here's why Lisp: Lisp is a homoiconic language, which means that the code is expressed in the same form ( s-expressions ) as data structures in the language. i.e. "code is data". This has big advantages if you are writing code that modifies/manipulates other code, e.g. genetic algorithms or symbolic manipulation. Lisp's macro system makes it well suited for defining problem-specific DSLs. Most Lisp developers effectively "extend the language" to do what they need. Again the fact that Lisp is homoiconic helps enormously here. There is some historical connection, in that Lisp became popular at about the same time as a lot of the early AI research. Some interesting facts in this thread . Lisp works pretty well as a functional programming language. This is quite a good domain fit for AI (where you are often just trying to get the machine to learn how to produce the correct output for a given input). Subjective view: Lisp seems to appeal to people with a mathematical mindset, which happens to be exactly whet you need for a lot of modern AI..... this is possible due to the fact that Lisp is pretty closely related to the untyped lambda calculus I'm doing some AI/machine learning work at the moment, and chose Clojure (a modern Lisp on the JVM) pretty much for the above reasons.
