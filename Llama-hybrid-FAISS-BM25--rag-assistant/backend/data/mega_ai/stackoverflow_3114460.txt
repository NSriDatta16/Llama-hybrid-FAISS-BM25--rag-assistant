[site]: stackoverflow
[post_id]: 3114460
[parent_id]: 
[tags]: 
Need to make context available to C++ ostream insertion operators

For an API that I am working on, I want to allow the user to insert custom objects into an ostream , but these objects have no meaning on their own, and are too memory constrained to include an additional pointer or reference for context. (Think tens of millions of 16-/32-/48-bit objects in an embedded system with limited memory.) Suppose the user initializes the underlying context, and looks up one of these objects: DDB ddb("xc5vlx330t"); Tilewire tw = ddb.lookUpTilewire("DSP_X34Y0", "DSP_IMUX_B5_3"); ... std::cout In an entirely different scope, possibly nested far away from the user's explicit code, we may need to insert the object into an ostream , with ddb unavailable. os The actual value encapsulated by tw is 97,594,974 , but the desired output is this: DSP_IMUX_B5_3@[263,84] DSP "DSP_X34Y0" (1488@77406) In order for this to work, the appropriate insertion operator would need access to ddb , but it cannot rely on static or global variables or functions (for multithreading reasons). What I'd like to do is allow the user to request and use a stream wrapper kind of like this: ostream& wrappedCout = ddb.getWrappedOstream(std::cout); The returned subclass of ostream would include a reference to ddb for use by special stream inserters that needed it, and a reference to the original stream— std::cout in this case—where it would forward all of its output. Unfortunately, the inheritance or composition schemes that I have come up with are messy to code up (not an enormous concern), and possibly problematic for the user (a much larger concern). Any suggestions on how to elegantly make ddb available to insertion operators? I am marginally aware of boost.Iostreams, but not sure that it will help me out here.
