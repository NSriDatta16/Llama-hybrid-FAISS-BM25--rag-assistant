[site]: stackoverflow
[post_id]: 3776552
[parent_id]: 3776521
[tags]: 
The rule of thumb is test everything which could possibly break . So if you are convinced that the one-liner can't reasonably break under any real circumstances, it may be fine to leave it untested. However, if you already have working unit tests for some of these methods, IMHO there is no reason to drop them - having more unit tests never hurts, and the maintenance costs should be negligible. As it is, the method looks trivial enough. However, consider also the possibility of future extensions / modifications - any real chance of the method being modified in the foreseeable future is a strong enough case to warrant a unit test now . You may want to cover the bigger scenario with an integration test though, to ensure that different parts of the system as a whole work together as expected under (close to) real circumstances. IMHO 100% unit test coverage is almost always unrealistic and unnecessary in real-world projects. There is usually a fair amount of e.g. exception-handling code which is difficult to test and trivial, thus in my experience it may not simply worth the effort. Focus on the most critical parts first, using your limited resources to get the most benefit . If methods like this are the most interesting code parts left untested though, and you still have time and energy to cover them, you could just as well go and round your test suite out :-) However, I am afraid most real-life projects are far from this level of dilemmas :-(
