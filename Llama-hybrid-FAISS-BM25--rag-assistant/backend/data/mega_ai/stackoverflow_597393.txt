[site]: stackoverflow
[post_id]: 597393
[parent_id]: 597318
[tags]: 
Think of your source tree as a nested namespace and the include path is allowing you to pull directories into the root of this namespace. The question is then one of forming a logical namespace for your code base irrespective of how the code is organised on disk. I would avoid paths like: "include/foo/bar.h" — the "include" seems illogical and redundant "../foo/bar.h" — the ".." assumes relative location and is fragile "bar.h" — unless bar.h is in the current directory, this pollutes the global namespace and is asking for ambiguities. Personally, I tend to add a path like the following to my projects include path — "..;../..;../../..;../../../.." . This allows you to apply a sort of hiding rule to your #include s and allows some freedom of moving headers without breaking other code. Of course this is at the expense of introducing a risk of binding to the wrong header file if you are not careful as non-fully qualified names may be (or become over time) ambiguous. I tend to fully qualify #include s in public headers so any third parties consuming my code do not need to add the "..;../..;../../..;../../../.." to their project — it's just a convenience for my private code and build system.
