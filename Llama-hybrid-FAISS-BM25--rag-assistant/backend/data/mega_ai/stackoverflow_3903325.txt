[site]: stackoverflow
[post_id]: 3903325
[parent_id]: 3900557
[tags]: 
There are no disadvantages, use timestamp(9) if it makes sense. Timestamp(9) and timestamp(1) use the same amount of space, and their performance is identical. I could only find one case where there was a performance difference, and in that case timestamp(9) was actually faster than timestamp(1). (I'll spare you the many lines of boring code inserting into timestamp(1) and timestamp(9) columns and comparing different operations on them.) This demonstrates that they use the same amount of space (inserting many values and comparing dba_segments): --Create tables with timestamps and populate them with the same data (with different precision) --Set initial and next to a low value so we can closely check the segment size) create table timestamp1 (t1 timestamp(1), t2 timestamp(1), t3 timestamp(1), t4 timestamp(1), t5 timestamp(1)) storage(initial 65536 next 65536); insert into timestamp1 select current_timestamp(1), current_timestamp(1), current_timestamp(1), current_timestamp(1), current_timestamp(1) from dual connect by level This is where timestamp(9) is faster, when using current_timestamp, which you'll probably need to use at some point to generate the data. But we're only talking about the difference between about 0.175 and 0.25 seconds on my slow desktop to generate 100K timestamps. I'm not sure why timestamp(9) is faster, maybe timestamps are always generated as timestamp(9) and then rounded to other precisions? --current_timestamp(9) is slightly faster than current_timestamp(1) select count(*) from ( select * from dual --where current_timestamp(9) = current_timestamp(9) where current_timestamp(1) = current_timestamp(1) connect by level EDIT: The performance difference exists in 10g but not 11g.
