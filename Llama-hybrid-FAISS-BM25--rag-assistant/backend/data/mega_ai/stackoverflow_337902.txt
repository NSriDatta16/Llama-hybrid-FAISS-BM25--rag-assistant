[site]: stackoverflow
[post_id]: 337902
[parent_id]: 337327
[tags]: 
thanks, this is homework (asp.net) The task is to write an asp.net application in c# that takes 2 dates as input from the user, works out the number of days between them and displays that number back to the user. This should not use any of the in-built .net framework DateTime or TimeSpan classes. and alas my most elegant implementation at production strength private int CalculateDays(DateTime start, DateTime end ) { DateTime origin = new DateTime(); return (end - origin).Days - (start - origin).Days; } protected void Button1_Click(object sender, EventArgs e) { // Parse dates for correctness and range errors, warn as necessary DateTime start; DateTime end; // rough error implement error handling implementation string errors = string.Empty; if(!DateTime.TryParse(txt_start_date.Text.Trim(), out start)) errors+="Start date was incorrect"; else if(!DateTime.TryParse(txt_end_date.Text.Trim(), out end)) errors+= (errors.Length>0? errors+= "\n":"") + "End date was incorrect" ; else if ((end.Day - start.Day) 0? errors+= "\n":"" ) + "End date must be greater than the Start date" ; //CultureInfo.InvariantCulture else { Response.Write(CalculateDays(start, end)); } Debug.Assert(errors.Length Reason being am unable to see how to do this without touching DateTime.Days at least. edit okay thought over again and a bit of monkey work, however, no use of DateTime or Timespan anywhere public static class PrimitiveCal { // incremental total days a normal year private static int[] DaysInYr = new int[] {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 }; // incremental total days in a leap year private static int[] DaysInLeapYr = new int[] { 0,31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }; public static long GetDays(int[] dt_start, int[] dt_end) { int day_diff = dt_end[0] - dt_start[0]; int s_mth = dt_start[1]; int e_mth = dt_end[1]; int s_year = dt_start[2]; int e_year = dt_end[2]; int yr_diff = e_year - s_year; return day_diff + (yr_diff > 0 ? // use months as boundaries, cater for leap years (YrType(e_year)[e_mth - 1] + (YrType(s_year)[YrType(s_year).Length - 1] - YrType(s_year)[s_mth - 1])) + (yr_diff == 1 ? 0 : AddMiddleYears(s_year, e_year)) // get month sums in same year : YrType(e_year)[e_mth - 1] - YrType(e_year)[s_mth - 1]); } private static int AddMiddleYears(int s_year, int e_year) { int total_days = 0; for (int i = s_year + 1; i
