[site]: crossvalidated
[post_id]: 445554
[parent_id]: 
[tags]: 
Simulations using correlated random numbers from Multivariate Normal and fat-tailed distributions

This question makes use of the LaplacesDemon package in R, but it is not a coding question, so I believe this is the most appropriate forum. First, the unsurprising results. I generate k correlated random numbers from each of the multivariate normal and laplace distributions. I take a weighted sum of each, where weights are usually around 0.05 and the sum of the weights is always exactly 1, so that k is, on average, about 20. I do this n times using rmvn and rmvl. Mean is 0 and dependence structure, S, uses the same covariance matrix for both the MV normal and MV laplace distributions. Covariance comes from a historical stream of numbers for each of the k=20 variables. After the n runs ( say, 1 million or so), I create a histogram of the results. The area on both the left and right tails of the MV Laplace simulation are consistently larger than that of the MV normal simulation. Specifically, the values representing a 2 standard deviation event are higher for the MV Laplace. So far so good for me. Now the surprising part. If I extend this study further by first, for each of the k variables take the weighted sum of a run from each run of rmvl and rmvn say, m times( where m is around 250) and geometrically compound those results, and record the maximum peak-to-trough decline of the geometrically linked series and do this same procedure n times and create a histogram representing each of the n peak-to-trough values, I do not consistently get a larger 2 standard deviation value for the peak-to-trough values coming from MV laplace as compared to MV normal. I am wondering if there is something from the central limit theorem that I am missing that might explain this, or some other phenomenon. For what it is worth, these random numbers represent the returns of stocks, hence the need for geometrically linking return streams to get maximum peak-to-trough declines in what amounts to a portfolio of stocks (hence the weighted sum of 1). This study assumes the portfolio is rebalanced to the initial weights on each of the m x n runs. Please advise. updated with code here library(tidyquant) library(magrittr) library(tibbletime) library(scales) library(QRM) library(LaplacesDemon) n $sim_drawdowns_Laplace[ order(sims_tspmDD$ sim_drawdowns_Laplace)][ DD5_cut:NumSims] DD5_laplace_unconditional $sim_drawdowns_Normal[ order(sims_tspmDD$ sim_drawdowns_Normal)][ DD5_cut:NumSims] DD5_normal_unconditional
