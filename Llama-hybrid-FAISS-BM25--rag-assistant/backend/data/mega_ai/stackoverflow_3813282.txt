[site]: stackoverflow
[post_id]: 3813282
[parent_id]: 3812905
[tags]: 
First, make sure you app code runs OK when not set up as a service. If your code runs OK when not set up as a service, my guess is that your OnStart is taking too long for some reason. If you cannot speed it up, the info here allows you to handle necessary startup latency. In Win32, you have to update the service status by notifying the Service Control Manager (SCM) of startup (and stop) progress periodically, or it will think your service is hung and kill it. You may need to do this only once, or on a timer if your initialization takes a long time. While your startup (stop) logic is in progress, you tell SCM you are in state START_PENDING (STOP_PENDING) and once it's done you tell it you are in STARTED (STOPPED) state. In the managed world, this goal is achieved by calling ServiceBase.RequestAdditionalTime . There is a thorough overview of this topic here . The money quote: This is where your managed service needs to pay attention to avoid the SCM flagging your service as unresponsive. You donâ€™t have to explicitly update the state; ServiceBase does this for you when your OnStart or OnStop method completes You do have to call RequestAdditionalTime if you expect the OnX method to exceed the timeout.
