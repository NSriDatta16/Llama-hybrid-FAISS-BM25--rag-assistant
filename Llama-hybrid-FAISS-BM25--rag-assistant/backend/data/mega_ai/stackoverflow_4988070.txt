[site]: stackoverflow
[post_id]: 4988070
[parent_id]: 
[tags]: 
Is there a better way to initialize a mocked repository using generics?

I am trying to find a generic way of initializing a mock repository for my test class. As I have multiple repositories I tried doing it using generics. I have a generic repository interface: public interface IRepository where T: class { IQueryable GetAll(); } My static initialization method looks like this: public static Mock GetRepository (params TK[] items) where T: class, IRepository where TK: class { Mock mock = new Mock (); mock.Setup(m => m.GetAll()).Returns(items.ToList().AsQueryable); return mock; } To initialize my repository in code I use: Mock > linkRepository = UnitTestHelpers.GetRepository , Link>(new[] { new Link { LinkId = 1, Title = "Title 1", Created = DateTime.Now, Url = "http://google.com" }, new Link { LinkId = 1, Title = "Title 2", Created = DateTime.Now, Url = "http://google.com" }, new Link { LinkId = 1, Title = "Title 3", Created = DateTime.Now, Url = "http://google.com" } }); I feel this is not the most elegant way of doing this as I have to specify Link twice in the GetRepository method. Is there a nicer/cleaner way of doing this?
