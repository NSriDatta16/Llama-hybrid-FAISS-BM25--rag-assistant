[site]: crossvalidated
[post_id]: 204032
[parent_id]: 
[tags]: 
Surrogate Time Series using Fourier Transform

In the Surrogate Time Series (Schreiber, Schmitz) paper, the authors claim that surrogates for a second order stationary time series can be generated by taking the Fourier Transform of the series, multiplying random phases to the coefficients, and then transforming back. This procedure should preserve the autocorrelation function. I am trying to implement this in python using numpy. import numpy import pandas import matplotlib.pyplot as plt numpy.random.seed(0) ts = numpy.random.normal(0, 1, 1000) pandas.tools.plotting.autocorrelation_plot(ts) plt.ylim([-0.1,0.1]) plt.title('Autocorrelation function of random time series') The attempt at the mentioned procedure: ts_fourier = numpy.fft.fft(ts) ts_fourier_new = [x*numpy.exp(numpy.random.uniform(0,2*numpy.pi)*1.0j) for x in ts_fourier] new_ts = numpy.fft.ifft(ts_fourier_new) pandas.tools.plotting.autocorrelation_plot(new_ts) plt.ylim([-0.1,0.1]) plt.title('Autocorrelation function of surrogate time series') As can be seen, the autocorrelation function of the surrogate is not identical to the original time series. What is the mistake in my implementation?
