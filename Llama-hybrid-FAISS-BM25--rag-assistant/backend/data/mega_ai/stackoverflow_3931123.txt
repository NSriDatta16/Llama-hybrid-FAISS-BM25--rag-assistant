[site]: stackoverflow
[post_id]: 3931123
[parent_id]: 
[tags]: 
Object generator pattern

I have a class that represents a pretty complex object. The objects can be created by many ways: incremental building, by parsing text strings in different formats and by analyzing binary files. So far my strategy was as follows: Have the constructor ( __init__ , in my case) initialize all the internal variables to None Supply different member functions to populate the object Have those functions return the new, modified object to the caller so we can do sd = SuperDuper().fromString(s) For example: class SuperDuper: def __init__(self): self.var1 = None self.var2 = None self.varN = None ## Generators def fromStringFormat1(self, s): #parse the string return self def fromStringFormat2(self, s): #parse the string return self def fromAnotherLogic(self, *params): #parse params return self ## Modifiers (for incremental work) def addThis(self, p): pass def addThat(self, p): pass def removeTheOtherOne(self, p): pass The problem is that the class becomes very huge. Unfotunately I am not familiar with OOP pattern designs, but I assume that there is a more ellegant solution for this problem. Is taking the generator functions out of the class (so that fromString(self, s) becomes superDuperFromString(s) a good idea?
