[site]: stackoverflow
[post_id]: 1417727
[parent_id]: 
[tags]: 
Can someone please explain what these ApacheBench results mean?

i'm trying to figure out how to use ApacheBench and benchmark my website. I installed the default site project (it's ASP.NET MVC but please don't put stop reading if u're not a .NET person). I didn't change anything. Add new project. Set confuration to RELEASE. Run without Debug. (so it's in LIVE mode). Yes, this is with the built in webserver, not the production grade IIS or Apache or whatever. So here's the results :- C:\Temp>ab -n 1000 -c 1 http://localhost:50035/ This is ApacheBench, Version 2.3 Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking localhost (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: ASP.NET Server Hostname: localhost Server Port: 50035 Document Path: / Document Length: 1204 bytes Concurrency Level: 1 Time taken for tests: 2.371 seconds Complete requests: 1000 Failed requests: 0 Write errors: 0 Total transferred: 1504000 bytes HTML transferred: 1204000 bytes Requests per second: 421.73 [#/sec] (mean) Time per request: 2.371 [ms] (mean) Time per request: 2.371 [ms] (mean, across all concurrent requests) Transfer rate: 619.41 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 1.1 0 16 Processing: 0 2 5.5 0 16 Waiting: 0 2 5.1 0 16 Total: 0 2 5.6 0 16 Percentage of the requests served within a certain time (ms) 50% 0 66% 0 75% 0 80% 0 90% 16 95% 16 98% 16 99% 16 100% 16 (longest request) C:\Temp> Now, i'm not sure exactly what I should be looking at. Firstly, I after the number of requests a second. So if we have a requirement to handle 300 reqs/sec, then is this saying it handles and average of 421 req's a sec? Secondly, what is the reason for adding more concurrent? As in, if i have 1000 hits on 1 concurrent, how does that differ to 500 on 2 concurrent? Is it to test if there's any code that blocks other requests? Lastly, is there anything important I've missed from the results which I should take note of? Thanks :)
