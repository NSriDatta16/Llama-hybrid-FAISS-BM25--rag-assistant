[site]: stackoverflow
[post_id]: 1255659
[parent_id]: 1255460
[tags]: 
The answers referring to "initialization order of statics" are correct for objects that are defined in different translation units but within the same TU the order is defined: 9.4.2/7: Static data members are initialized and destroyed exactly like non-local objects (3.6.2, 3.6.3). 3.6.2/1: Objects with static storage duration defined in namespace scope in the same translation unit and dynamically initialized shall be initialized in the order in which their definition appears in the translation unit. Your definitions are ordered correctly, and so they should be initialized in the correct order. I would go with the comment by AProgrammer regarding the multiple definitions. Unlike non member const objects, your objects have external linkage: 3.5/5: In addition, a member function, static data member, class or enumeration of class scope has external linkage if the name of the class has external linkage. If the header file is included into multiple translation units, then the code violates the ODR and it is my guess that the resulting undefined behaviour is the strangness with the initializations. Try putting the definition of the static members into a single source file and see what happens.
