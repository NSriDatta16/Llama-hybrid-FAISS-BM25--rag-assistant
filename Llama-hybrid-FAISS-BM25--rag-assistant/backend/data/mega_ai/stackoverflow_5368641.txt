[site]: stackoverflow
[post_id]: 5368641
[parent_id]: 5368441
[tags]: 
Best example N*log(N) in my opinion would be to look at comparison based search: Lets take merge-sort as an example. The algorithm takes an array of elements, splits it by 2 recursively until it get an array of length 2, then merges back the pieces at O(n) each merging sorted arrays is easier. Ok, that was a nutshell description, now lets see what it looks like: [ 1 2 3 4 5 6 7 8 ] | /\ [1 2 3 4] [ 5 6 7 8 ] | | /\ /\ [1 2 ] [ 3 4] [5 6] [7 8] What I hope you can see here, that the depth of the recursion is log(n) (Because it's a tree that has 2 branches... so it's log(n) with base 2) But in each level of the tree there's O(n) operations (because we are actively re-arranging n object). So there a N*log(N) complexity here. Most algorithms that have Log(N) complexity get that from a tree-based algorithm. There are a few that are just probabilistic log(n) (which means that after a long math computation you get that in average it would be something like log(n))
