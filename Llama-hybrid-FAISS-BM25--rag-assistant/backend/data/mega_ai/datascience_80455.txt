[site]: datascience
[post_id]: 80455
[parent_id]: 80436
[tags]: 
CNN learns the same way a Dense Neural network learns i.e. Forwardpass and Backpropagation . What we learn here are the weights of the filters . So, answers to your individual questions - But how are they getting initialized? - Standard init. e.g. glorot_uniform then the values should get changed on the training process of the network . Yes How does someone backpropagate the filter of the convolutional layer? What is the algorithm behind this process? - Just like ANN Backpropagation with GradientDescent I can add an activation function to the convolutional layer in Keras. Is the entire matrix of the output getting passed through the activation function? - Yes, we keep ReLU most of the time How does the usage of an activation function change the learning process of the convolutional layer? - It's for the same reason we use it in ANN i.e. Non-linearity Does a convolutional layer has weight and biases like a dense layer? - Yes If that's true, then do we follow the same process as we do with the dense layers to train these weights and biases? Yes, just adding the concept of shared weight/filters/convolution and pooling I will try to explain some key points of CNN to clarify above answers - Each filter does a convolution across the n-D volume e.g. 3-D for RGB So, it does an element-wise multiplication with the pixels, the output is summed and passes through an Activation function This becomes the single element of one Feature map Each filter creates one feature map. Filter depth will be equal to the number of feature maps e.g. if you used 20 filters for the first RGB image. It will create 20 feature maps and if you use 5x5 filters on this layer, then filter size = 5x5x20 . Each filter will add parameters = its size e.g. 25 for the last example If you want to visualize like a simple NN. See below image . All the theta are multiplied, summed, and pass through an activation function. Backpropagation happens in the same manner as in a Dense neural network $\hspace{6cm}$ Image Credit - Jeremy Jordan You can read these references to develop a black and white intuition. CS231n: Winter 2016 Jeremy Jordan blog Numpy Implementation
