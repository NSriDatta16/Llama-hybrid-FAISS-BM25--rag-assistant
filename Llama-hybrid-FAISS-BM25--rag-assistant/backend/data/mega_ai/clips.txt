CLIPS (C Language Integrated Production System) is a public-domain software tool for building expert systems. The syntax and name were inspired by Charles Forgy's OPS5. The first versions of CLIPS were developed starting in 1985 at the NASA Johnson Space Center (as an alternative for existing system ART*Inference) until 1996, when the development group's responsibilities ceased to focus on expert system technology. The original name of the project was NASA's AI Language (NAIL). As of 2005, CLIPS was probably the most widely used expert system tool. CLIPS is written in C, extensions can be written in C, and CLIPS can be called from C. Its syntax resembles that of the programming language Lisp. CLIPS incorporates a complete object-oriented programming language for writing expert systems. COOL combines the programming paradigms of procedural, object oriented, and logic programming (automated theorem proving) languages. Facts and rules CLIPS uses forward chaining. Like other expert system languages, CLIPS deals with rules and facts. Various facts can make a rule applicable. An applicable rule is then fired. Facts and rules are created by first defining them, as shown below: (deftemplate car_problem (slot name) (slot status)) (deffacts trouble_shooting (car_problem (name ignition_key) (status on)) (car_problem (name engine) (status wont_start)) (car_problem (name headlights) (status work))) (defrule rule1 (car_problem (name ignition_key) (status on)) (car_problem (name engine) (status wont_start)) => (assert (car_problem (name starter) (status faulty)))) Having set this up, the (reset) command causes CLIPS to read the facts and rules. In this case, that would lead to the three "trouble_shooting" facts being asserted. Then the (run) command is used. Given that the two facts listed in rule1 have both been asserted, the conditions for doing its action have been met so the additional fact is asserted as a result of the run. CLIPS> (reset) CLIPS> (agenda) 0 rule1: f-1,f-2 For a total of 1 activation. CLIPS> (facts) f-0 (initial-fact) f-1 (car_problem (name ignition_key) (status on)) f-2 (car_problem (name engine) (status wont_start)) f-3 (car_problem (name headlights) (status work)) For a total of 4 facts. CLIPS> (run) CLIPS> (facts) f-0 (initial-fact) f-1 (car_problem (name ignition_key) (status on)) f-2 (car_problem (name engine) (status wont_start)) f-3 (car_problem (name headlights) (status work)) f-4 (car_problem (name starter) (status faulty)) For a total of 5 facts. CLIPS> (assert <fact>+) (Assert (object (name "chair") (Material wood) (height 3feet) (Color brown)) CLIPS(retract <fact-index+) (retract 0) for a color In CLIPS, salience allows a user to assign priority (or weight) to a rule. Descendants Descendants of the CLIPS language include Jess (rule-based portion of CLIPS rewritten in Java, it later grew in a different direction), and FuzzyCLIPS (which adds concept of relevancy into the language). See also Constraint Handling Rules Drools OpenL Tablets References External links Official website, downloads, information, news, history CLIPS expert system tool: a candidate for the Diagnostic System engine CLIPS tutorial on Code Project CLIPSEditor on GitHub, code editor for CLIPS