[site]: stackoverflow
[post_id]: 4271460
[parent_id]: 4270541
[tags]: 
An average-case O(n log n) solution: Think of your set of rectangles as a tree, where parent nodes "contain" the child nodes -- the same kind of thing as a DOM structure. You'll be building the tree a rectangle at a time. Make a dummy node to serve as the root of your tree. Then, for each of your rectangles ("current_rect"), start with the root's children and work downwards until you find where it goes: parent_node = root_node sibling_nodes = [children of parent_node] for this_node in sibling_nodes: if current_rect contains this_node: move this_node: make it a child of current_rect instead of parent_node elseif this_node contains current_rect: parent_node = this_node sibling_nodes = [children of parent_node] restart the "for" loop using new set of sibling_nodes make current_rect a child of parent_node The "contains" relation asks whether one rectangle contains the other. "Parent", "child", and "sibling" are referring to the tree structure. EDITED : Fixed a bug that would miss moving some nodes into current_rect.
