[site]: stackoverflow
[post_id]: 4968951
[parent_id]: 4943396
[tags]: 
I thought Chapter 8 of Kernighan and Pike's The Unix Programming Environment was excellent. It covers much of programming in the Unix environment, all while implementing a programming language. Chapter 8 is called Program Development . It discusses the development of a non-trivial program through various stages of design. That non-trivial program is hoc, the High-Order Calculator. For more details on hoc, see http://en.wikipedia.org/wiki/Hoc_(programming_language ) It is a great, practical introduction to implementing a simple language using the standard tools yacc and lex. yacc and lex are too much to cover here, but by following the examples in this book and doing the exercises you will develop an understanding of them. The development lasts through various phases; in the first phase you don't even have variables in the language. By the third stage you have variables, defined constants (PI, E, etc.), and built-in functions like sin() and log(). By the last stage you have the fully implemented language. Now, is hoc the best language to try and implement? I have no clue, but I know that The Unix Programming Environment was an excellent book to read in parallel with a traditional compiler book. As I began reading the Aho compiler book (dragon book) I re-read chapter 8 of TUPE and followed the examples and exercises. Sure, anyone can re-type the code from the book, but the exercises require that you have a good understanding of what is going on. In the end I don't think it matters exactly which language you choose to do, but the process you follow while implementing it.
