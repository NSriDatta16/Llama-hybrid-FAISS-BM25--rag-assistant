[site]: stackoverflow
[post_id]: 5228740
[parent_id]: 5217973
[tags]: 
Based on the information you've provided, I can suggest a couple of approaches for you: Store each image in a separate color channel. This is by far the easiest approach. You can store up to 3 images this way (one for RGB or YUV). If your file format supports the alpha channel, you can store 4 images. This assumes you are working with 8 bits per pixel. Interlace your images. If you do this losslessly, the output image dimensions will increase (multiplied by the number of images you're combining). If you're doing it in a lossy way, you will lose spatial resolution (e.g. if you do scanline interlacing of two images, then the vertical resolution will be decreased to half of its original value). Jonas already suggested hiding data in lower-order bits, so I won't go much more into it other than say that it's a lossy approach Look at random shuffling of image pixels to disguise concatenated images. The link is for Python, but matlab should have something similar. Basically, your problem is having to deal a trade-off between the following: Output image size. The trivial case is just tiling the images in a grid. It's perfectly recoverable, completely lossless but also extremely obvious, and hence probably useless. Lossy vs lossless. Lossy approaches will let you achieve smaller output image sizes. Visibility vs recoverability. The more visible embedded data is, the easier it is to recover it (or at least detect that something is there). Less visible embedded information is typically more fragile to such things as affine transforms and common image processing operations like blurring. Read about watermarks for more info. That should be enough to get you started.
