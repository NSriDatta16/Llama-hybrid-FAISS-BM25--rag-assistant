[site]: stackoverflow
[post_id]: 3502717
[parent_id]: 3468795
[tags]: 
I used a helper class for that. it's quite simple really. With the helper class you can use a SelectList and put it in the helper, like you'd do for a dropdownfor. in the folder "Helpers" i have Checkboxlist.cs using System; using System.Web.Mvc; using System.Collections.Generic; using System.Text; using System.Linq; namespace MVC2_NASTEST.Helpers { public static class CheckBoxListHelper { public static string CheckBoxList(this HtmlHelper helper, string name, IDictionary items) { return CheckBoxList(helper, name, items, null, null); } public static string CheckBoxList(this HtmlHelper helper, string name, IDictionary items, IDictionary checkboxHtmlAttributes) { return CheckBoxList(helper, name, items, null, checkboxHtmlAttributes); } public static string CheckBoxList(this HtmlHelper helper, string name, IDictionary items, IEnumerable selectedValues) { return CheckBoxList(helper, name, items, selectedValues, null); } public static string CheckBoxList(this HtmlHelper helper, string name, IDictionary items, IEnumerable selectedValues, IDictionary checkboxHtmlAttributes) { var selectListItems = from i in items select new SelectListItem { Text = i.Key, Value = i.Value, Selected = (selectedValues != null && selectedValues.Contains(i.Value)) }; return CheckBoxList(helper, name, selectListItems, checkboxHtmlAttributes); } public static string CheckBoxList(this HtmlHelper helper, string name, IEnumerable items) { return CheckBoxList(helper, name, items, null); } public static string CheckBoxList(this HtmlHelper helper, string name, IEnumerable items, IDictionary checkboxHtmlAttributes) { var output = new StringBuilder(); foreach (var item in items) { output.Append(" "); var checkboxList = new TagBuilder("input"); checkboxList.MergeAttribute("type", "checkbox"); checkboxList.MergeAttribute("name", name); checkboxList.MergeAttribute("value", item.Value); // Check to see if it's checked if (item.Selected) checkboxList.MergeAttribute("checked", "checked"); // Add any attributes if (checkboxHtmlAttributes != null) checkboxList.MergeAttributes(checkboxHtmlAttributes); checkboxList.SetInnerText(item.Text); output.Append(checkboxList.ToString(TagRenderMode.SelfClosing)); output.Append("&nbsp; " + item.Text + " "); } return output.ToString(); } } } the code in my controller: public static List lesgeverList() { return lesgeverList(-1); } public static List lesgeverList(int selectedID) { return lesgeverList(new int[] { selectedID }); } public static List lesgeverList(int[] lg) { NASDataContext _db = new NASDataContext(); var lesg = (from l in _db.Lesgevers where l.LG_Naam != "leeg" orderby l.LG_Naam, l.LG_Vnaam select l).ToSelectList(m => m.LG_Naam + " " + m.LG_Vnaam, m => m.LG_ID.ToString(), m => lg.Contains(m.LG_ID)); return lesg.ToList(); } // // GET: /Projectleiders/Create public ActionResult Create(int projID) { ViewData["projNaam"] = getProject(projID).Proj_Kortenaam; int[] keys = (from p in _db.ProjectleiderProjectens where p.Proj_ID == projID from l in _db.Lesgevers where p.LG_ID == l.LG_ID select l.LG_ID).ToArray(); ViewData["projleiders"] = MvcApplication.lesgeverList(keys); return toegankelijk(projID, null); } // // POST: /Projectleiders/Create [HttpPost] public ActionResult Create(FormCollection collection, int projID) { if (collection["lesgeverlist"] != null) { string[] lgevers = collection["lesgeverlist"].Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries); List lst = new List (); foreach (string s in lgevers) { ProjectleiderProjecten prl = new ProjectleiderProjecten(); prl.LG_ID = int.Parse(s); prl.Proj_ID = projID; int count = (from m in _db.ProjectleiderProjectens where m.LG_ID == prl.LG_ID && m.Proj_ID == prl.Proj_ID select m).Count(); if (count p.Proj_ID == projID && !lgevers.Contains(p.LG_ID.ToString())).ToList(); _db.ProjectleiderProjectens.DeleteAllOnSubmit(_db.ProjectleiderProjectens.Where(p => p.Proj_ID == projID && !lgevers.Contains(p.LG_ID.ToString()))); _db.ProjectleiderProjectens.InsertAllOnSubmit(lst); _db.SubmitChanges(); return RedirectToAction("Index"); } else { ModelState.AddModelError("lesgeverlist", "Je hebt geen lesgevers geselecteerd"); ViewData["projleiders"] = MvcApplication.lesgeverList(); ViewData["projNaam"] = getProject(projID).Proj_Kortenaam; return View(); } } I use the ToSelectList extension which is something everyone should have. public static class VSKOExtensions { public static IList ToSelectList (this IEnumerable itemsToMap, Func textProperty, Func valueProperty, Predicate isSelected) { var result = new List (); foreach (var item in itemsToMap) { result.Add(new SelectListItem { Value = valueProperty(item), Text = textProperty(item), Selected = isSelected(item) }); } return result; } } the code in my create view (which also is an edit view in the same time) is very simple " %> Create Koppel projectleider voor Fields )%> how it works: i get the values from the DB of the already selected users, get their id's and give it to the method MvcApplication.lesgeverList(keys); then i get the selectlist back, put it in the viewdata, and the selected persons are selected in my view when i open it up. then when i change some boxes and save it, i check if the collection isnt null (so something is selected) then i split the variables i get back, which are the 'value's you give in the SelectList. I foreach through them, parse them to ints, get the users from the DB with their parsed ID's. With the count i look if they exist or not in the 'linked' table which is called _db.ProjectleiderProjectens when all are added, i delete all the 'unselected' ones in 1 time using the linq statement _db.ProjectleiderProjectens.DeleteAllOnSubmit(_db.ProjectleiderProjectens.Where(p => p.Proj_ID == projID && !lgevers.Contains(p.LG_ID.ToString()))); which i think is pretty readable. delete all objects from, get all objects their ID and check which ones are not in the string[] of ID's it works rather well i must say. if you have some more questions just ask.
