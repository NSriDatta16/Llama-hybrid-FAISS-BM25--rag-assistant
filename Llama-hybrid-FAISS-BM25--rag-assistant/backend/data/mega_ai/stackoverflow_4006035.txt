[site]: stackoverflow
[post_id]: 4006035
[parent_id]: 
[tags]: 
How can I reduce the execution time of this loop (java)

I have a piece of code which seems to take an unusual amount of time to execute. I'm in need of reducing the execution speed as much as possible. Essentially, the code does the following. I create an array of objects size[10][10][10]. The object contains a list of numbers as follows: class MyClass{ ArrayList numberList; public MyClass(){ numberList= new ArrayList (); } } MyClass storage[][][] = new MyClass[10][10][10]; I then have the following code which adds numbers to the lists for(int i =0; i I'm fairly certain the vast majority of the execution time comes from the following line storage[j][k][l].numberList.add(i); More specifically, it's the .add(i) . I'm fairly new to Java, and am only familiar in C++. If ArrayList is similar to a list in C++, surely adding an element to the end requires very little CPU time? Is it just because I'm doing so many add operations (probably a million)? Another thing I want to ask is can I speed this up by using threads? (assuming dual core processor with 4 threads) I'm thinking I could create 4 threads, each processing a 50,000 chunk. However, I'm not sure about synchronization. Presumably I would have to have some mutual exclusion on storage[][][]. Do I need to write synchronized(storage) or would this be fine? synchronized(storage[j][k][l]) Any help greatly appreciated Regards
