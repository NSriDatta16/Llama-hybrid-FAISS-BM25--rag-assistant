[site]: stackoverflow
[post_id]: 2037826
[parent_id]: 
[tags]: 
I need some C++ guru's opinions on extending std::string

I've always wanted a bit more functionality in STL's string. Since subclassing STL types is a no no, mostly I've seen the recommended method of extension of these classes is just to write functions (not member functions) that take the type as the first argument. I've never been thrilled with this solution. For one, it's not necessarily obvious where all such methods are in the code, for another, I just don't like the syntax. I want to use . when I call methods! A while ago I came up with the following: class StringBox { public: StringBox( std::string& storage ) : _storage( storage ) { } // Methods I wish std::string had... void Format(); void Split(); double ToDouble(); void Join(); // etc... private: StringBox(); std::string& _storage; }; Note that StringBox requires a reference to a std::string for construction... This puts some interesting limits on it's use (and I hope, means it doesn't contribute to the string class proliferation problem)... In my own code, I'm almost always just declaring it on the stack in a method, just to modify a std::string. A use example might look like this: string OperateOnString( float num, string a, string b ) { string nameS; StringBox name( nameS ); name.Format( "%f-%s-%s", num, a.c_str(), b.c_str() ); return nameS; } My question is: What do the C++ guru's of the StackOverflow community think of this method of STL extension?
