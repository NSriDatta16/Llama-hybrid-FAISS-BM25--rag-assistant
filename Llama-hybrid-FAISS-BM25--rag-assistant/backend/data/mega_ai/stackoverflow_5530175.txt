[site]: stackoverflow
[post_id]: 5530175
[parent_id]: 5530020
[tags]: 
I'm guessing you're missing one of the following: // FILE: MyHeader1.hpp #ifndef MyHeader1_hpp // sentinel #define MyHeader1_hpp ...your header code... #endif Those sentinels should be on all headers, and typically in all template implementation files to guard against duplicate inclusion when you cannot anticipate order (almost never can it be anticipated). (Some people prefer "#pragma once " over the sentinels, but since that's not in the C++ standard, I'm not a fan, even though it pretty much works cross-platform.) ...OR... Do not forget, headers must compile to size zero . DO NOT: // FILE: MyHeader1.hpp #ifndef MyHeader1_hpp #define MyHeader1_hpp int my_global; // NO! NOT IN A HEADER! extern int my_global; // Fine, instantiate in the *.cpp #endif Headers contain interface definitions permitting the single-pass compiler to establish type sizes and interface "hook-ups" across modules. They SHOULD NOT contain logic or state that compiles to greater-than-zero-bytes (that is the purpose of the *.cpp files). A minor (but interesting) exception is template meta-programming, which can be done (pretty much) entirely in headers, with the compiler generating all the source code as the templates are "used" (but the templates themselves still compile to "size zero", and thus are fine for headers -- and typically must be defined in headers).
