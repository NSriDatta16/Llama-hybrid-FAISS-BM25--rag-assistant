[site]: stackoverflow
[post_id]: 2847359
[parent_id]: 2847282
[tags]: 
Using a decorator could be pretty elegant, I haven't tested this but something like this could work: class myDecorator(object): def __init__(self, inner): self.inner = inner self.log = {} def __getattr__(self,name): self.log[name] = self.log.get(name,0)+1 return getattr(self.inner,name) def __setattr__(self,name,value): setattr(self.inner,name,value) I am realizing that you didn't want to log the number of calls to each method but calls to each different logger. All the same I think a decorator could be pretty elegant. I don't think I've had enough sleep, the idea would be to wrap calls to your logger, I am mixing the use of a decorator with the decorator pattern. (Actually a mix of the pattern and the syntax would be a great answer) Here is a more complete solution. I'm sorry I realized I was the someone that was wrong on the internet . class LoggerLogger(object): def __init__(self,inner,name): self.inner = inner self.calls = 0 def __call__(self,*args,**kwargs): self.calls += 1 return self.inner(*args,**kwargs) def loggerDecorator(func): def inner(name): logger = func(name) logger.debug = LoggerLogger(logger.debug,name) return inner getLogger = loggerDecorator(getLogger)
