[site]: stackoverflow
[post_id]: 4164796
[parent_id]: 4164281
[tags]: 
The basic working concept is perform your time consuming work on background (non-ui) Thread. In Android theres only one and only one UI thread. You must handle all UI changes on that single UI thread i.e. in your case showing and dismissing ProgressDialog. package .....; . . import android.app.ProgressDialog; . . public class WorkingClass extends Activity { ProgressDialog mProgressDialog; . . @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); //DEFINING A NEW THREAD WHICH WOULD DO SOME WORK AND THEN DISMISS THE DIALOG Thread workThread=new Thread(new Runnable(){ @Override public void run() { //@ albertsmus :call your getAllEntos() here! someTimeConsumingWork(5000); //ONLY ONE THREAD CAN HANDLE UI, INCLUDES DISSMISSAL OF //PROGRESS DIALOG. runOnUiThread WILL DO ITS MAGIC HERE! runOnUiThread(new Runnable(){ @Override public void run() { mProgressDialog.dismiss(); Toast.makeText(ContentProviderSample.this, "Work done!", Toast.LENGTH_LONG).show(); } }); } }); workThread.start(); mProgressDialog=ProgressDialog.show(this, "Work Notify!", "Working hard, Phew!"); } private void someTimeConsumingWork(long milisToWork){ SystemClock.sleep(milisToWork); } } I have defined someTimeConsumingWork in this example I coded. Which basically pauses Thread for some long miliseconds. You can replace that call with some real worker thread which is consuming time, in your case albertsmus call your getAllEntos() here. The basic you should remeber is again you can only call and dismiss UI related functionalities only from UI thread , there are other classes and methods which can help you out with the same purpose, a UI handler or AsynTask for more complex functionalities. You can find their implemenation in documentation. Hope this helps!
