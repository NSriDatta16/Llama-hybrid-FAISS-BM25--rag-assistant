[site]: stackoverflow
[post_id]: 4409217
[parent_id]: 4404242
[tags]: 
Almost all (every?) osx program can be launched from command line using: appName.app/Contents/MacOS/command For terminal the command is: /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal You can use the autocomplete (tab) or ls to find the correct filenames. ".app" is basically a folder. To change the colors and run a script... I think you cannot do it with shell scripts as Terminal does not accept arguments ("Terminal myScript.sh" does not launch myScript). With iTerm this works. Workaround is to use applescript (wrapped in a shell script): #!/bin/sh osascript -e ' tell application "Terminal" activate tell window 1 do script "sleep 5; exit" set background color to {0, 11111, 11111} set win_id to id end tell set w_ids to (id of every window) repeat while w_ids contains win_id delay 1 set w_ids to (id of every window) end repeat end tell' Ok, now it should behave exactly the same as the xterm example. The drawback is the constant polling of the window ids (which is bad programming). edit: A bit more elegant applescript would use the 'busy' property of Terminal. I will leave the original code as is works for a general program (not just terminal). tell application "Terminal" tell window 1 do script "sleep 2" set background color to {0, 11111, 11111} repeat while busy delay 1 end repeat close end tell end tell Also for perfectly correct program, one should check that whether the terminal is running or not. It affects the number of windows opened. So, this should be run first (again a nasty looking hack, that I will edit later as I find a working solution). tell application "System Events" if (count (processes whose name is "Terminal")) is 0 then tell application "Terminal" tell window 1 close end tell end tell end if end tell br, Juha
