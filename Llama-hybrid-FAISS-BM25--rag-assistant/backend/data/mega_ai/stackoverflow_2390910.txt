[site]: stackoverflow
[post_id]: 2390910
[parent_id]: 2390809
[tags]: 
When the compiler is compiling TopVC.m, it has no way to know that some other file is going to provide the rest of the required protocol methods. In gcc, every .m file is compiled independently. Your desire to split up this stuff into separate categories is fine, but all of them need to be implemented in TopVC.m. Your re-definition of the protocol methods in TopVC+ABPeoplePickerNavigationControllerDelegate.h has no effect on anything. There is no relationship between a particular category tag in an @interface and one in an @implementation. A category definition in an @interface just says "here are some other methods that are legal to pass to this object without generating a compiler warning." It's not even an explicit promise to create such methods. That was already handled when you indicated that you conform to the protocol (which is a promise to implement the methods). A category definition in an @implementation just says "here are some other methods for this class." The category tag itself is nothing more than a comment. It is not correlated in any way. You need to move the protocol implementations into TopVC.m, and there is no reason to have a TopVC+ .h file. If you like to break up your .m into separate @implementation blocks, that's fine, and I know folks who do it that way. Personally, I just use #pragma mark to break up the file.
