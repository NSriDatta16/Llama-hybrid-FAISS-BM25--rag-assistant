[site]: stackoverflow
[post_id]: 2767957
[parent_id]: 2767823
[tags]: 
First A Dictionary is going to perform far better than your duelling arrays will. Putting aside how this data gets into the arrays/Dictionary (hardcoded vs. read in from another location, like a resource file), this is still a better and more intuitive storage mechanism Second As others have suggested, do your loading in another thread. I'd use a helper function to help you deal with this. You could use an approach like this: public class YourClass { private static Dictionary characterLookup; private static ManualResetEvent lookupCreated; static YourClass() { lookupCreated = new ManualResetEvent(false); ThreadPool.QueueUserWorkItem(LoadLookup); } static void LoadLookup(object garbage) { // add your pairs by calling characterLookup.Add(...) lookupCreated.Set(); } public static string GetDescription(int code) { if (lookupCreated != null) { lookupCreated.WaitOne(); lookupCreated.Close(); lookupCreated = null; } string output; if(!characterLookup.TryGetValue(code, out output)) output = null; return output; } } In your code, call GetDescription in order to translate your integer into the corresponding string. If the UI doesn't call this until later, then you should see a marked decrease in startup time. To be safe, though, I've included a ManualResetEvent that will cause any calls to GetDescription to block until the dictionary has been fully loaded.
