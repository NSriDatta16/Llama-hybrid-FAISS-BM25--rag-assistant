[site]: stackoverflow
[post_id]: 1277721
[parent_id]: 1277682
[tags]: 
Using strings to indicate error conditions, whether they are actual exceptional cases or not, is error prone in and of itself. If you must do it this way, one thing to watch out for when doing string comparisons like this is that they are case sensitive so you should probably use String.Compare(string, string, StringComparison) rather than equality. Since the error strings are from an external application (which I take to mean you don't have any control over them), the best option would be to wrap the calls to that external application so you can encapsulate the "error handling" (i.e., the string evaluation) and either throw exceptions as appropriate or return some sort of error "code" (handled through an enum). If the error conditions themselves don't represent actual exceptional cases, you are most likely using them to control program flow in which case you don't want to throw exceptions. Keep in mind that while throwing an exception is not expensive, catching one. Otherwise, you should consider throwing exceptions, preferably by using an existing .NET exception that meets the description of the error. If you can't find one you should create custom exceptions. As far as the resource strings themselves, it is probably the best idea to store the actual text in a resource file. This allows you the ability (at some later point) to be able to more easily localize the text, allows you a single storage location, and provides a strongly typed class to access the string.
