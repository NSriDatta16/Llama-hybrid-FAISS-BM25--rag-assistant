[site]: datascience
[post_id]: 108666
[parent_id]: 
[tags]: 
Scaled-input-trained ML Models

I have input data, the magnitudes vary quite a lot between features. I have scaled them using sklearn's StandardScaler(), then used keras to train a NN on this data to predict my target. I have trained/tested this neural network and it performs well. Training data is a timeseries of input to a function as such of a bigger model, and my target being a timeseries of output. I have trained the model on scaled input data (off-line), but would like it to replace that function in the model. Then it would take unscaled input data (same features) at each time step and give a good prediction for the target (output). Being trained on the timeseries data offline, it does not seem best suited to then take unscaled data, one tilmestep a time, which it will have to when used in the model. Should I scale that online-input also (and how to make it consistent with scaled offline input?) or should I e.g. train on unscaled data and use "this optimisation method which performs well with unscaled data"? Does anyone know how to fix this type of issue?
