[site]: stackoverflow
[post_id]: 3662567
[parent_id]: 3662450
[tags]: 
I am not sure on what your dilemma is. If you are wondering how the template can be instantiated when there is no default constructor, that is fine. The defaulted first argument of the template constructor is only required if no argument is provided. The compiler is happy with C not having a default constructor as it does not need to use it. On the other hand, if you tried A a; The compiler would have to match the constructor call to A ::A( C ) with the default argument C() , and that will trigger a compile time error as the type C does not have a default constructor. The actual quote from the standard is from §14.7.1[temp.inst]/11: If a function template f is called in a way that requires a default argument expression to be used, the dependent names are looked up, the semantics constraints are checked, and the instantiation of any template used in the default argument expression is done as if the default argument expression had been an expression used in a function template specialization with the same scope, the same template parameters and the same access as that of the function template f used at that point. This analysis is called default argument instantiation. The instantiated default argument is then used as the argument of f. There is an actual example in the next paragraph §14.7.1[temp.inst]/12: Each default argument is instantiated independently. [Example: template void f(T x, T y = ydef(T()), T z = zdef(T())); class A { }; A zdef(A); void g(A a, A b, A c) { f(a, b, c); // no default argument instantiation f(a, b); // default argument z = zdef(T()) instantiated f(a); // ill-formed; ydef is not declared } —end example]
