[site]: stackoverflow
[post_id]: 5164277
[parent_id]: 
[tags]: 
Is this update lost?

I just want understand the meaning of "update lost" which is solved by transaction. Please take a look at following two transaction, I use mysql 5.5.8 and innodb storage engine: create table counter (what varchar(5), id integer, count integer, primary key (id)); insert into counter values ('total', 0, 0); session 1 (T1) session 2(T2) ------------------------------------------------------------------------- 0 | begin; ------------------------------------------------------------------------- 1 begin; | ------------------------------------------------------------------------- 2 select count from counter | where id = 0; | ------------------------------------------------------------------------- 3 | update counter set count = 50 | where id = 0; ------------------------------------------------------------------------- 4 | commit; ------------------------------------------------------------------------ 5 update counter set count | = 1000 where id = 0; | ------------------------------------------------------------------------- 6 commit; | ------------------------------------------------------------------------- you can consider value 1000 and 50 as this: The update value 1000 depends on the read of count, i.e. select. The update value 50 depends on another read(isn't conflict with session1). So, this is the typical read-write-write dependency. After session1 (T1) commit and execute 'select count from counter where id=0' again, the count will be 1000. I am wondering whether it is update lost or not? if not why? If I remembered correctly any kind of update last will be avoided in any isolation level. One of possible fix is using "select count from counter where id = 0 for update;" at step 2, that's equivalent to add xlock on the record, and hence T2 will be blocked. So this is serial executed as [T1,T2] . Is this the (known) bug of Innodb? Note, this isn't equivalent to execute [T2,T1] , because, T1 will read 50 other 0 with this sequence, and the final result will be different. Thanks
