[site]: crossvalidated
[post_id]: 225725
[parent_id]: 171342
[tags]: 
This question might be of interest to statisticians and data scientists because of the multidimensional array handling issues it presents. Loops aren't the problem. Your goal likely is to perform the operation efficiently, regardless of how it might be done, and perhaps to do it in an obviously parallelizable way. Exploit R's ability to manage multidimensional arrays. (It inherits this from FORTRAN, which even in its original design handled up to seven dimensions.) Move groups of data en masse into an array and then reshape it as needed. These native operations will be fast, even if some looping needs to be done. Although it uses short high-level loops (each executing $n+1$ times), the following solution will create a "block Toeplitz" array with $n=999$ and $2\times 2$ blocks--an array with four million elements--within a half second and small use of overhead storage. It is based on the observation that the Toeplitz pattern can be constructed from the string $$U_n, U_{n-1}, \ldots, U_1, U_0, U_1^\prime, U_2^\prime, \ldots, U_n^\prime$$ by taking the last $n+1$ elements to form the first column of output, shifting those elements to the left to form the second column of output, and so on, until the last column of output is formed from the first $n+1$ elements of this string. The code uses n to represent $n+1$ (because R indexing starts at 1 instead of 0). The string of matrices itself, as a $k\times (2n-1)$ array, is stored in a temporary array strip . At the end, the $k\times k\times n\times n$ array that is created by "blasting" parts of the strip down the columns of the output X is permuted to get its values stored in the right order (I was too lazy to work out the optimal storage configuration at the outset) and then recast as a $kn\times kn$ array (which involves no movement of data). These column-wise operations are each highly vectorized and capable of massive parallelism. The initial value of U contains obvious patterns to check that the output is correct. # # Create n square matrices of dimension k by k. # U 1) for (i in 2:n) strip[,,n+i-1]
