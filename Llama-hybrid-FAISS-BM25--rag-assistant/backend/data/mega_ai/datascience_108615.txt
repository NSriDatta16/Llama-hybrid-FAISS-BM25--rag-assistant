[site]: datascience
[post_id]: 108615
[parent_id]: 108197
[tags]: 
Assuming that you have univariate time series representing the evolution (in time) of the price value in a specific time-frame (e.g., 15 minutes, 4 hours, 1 day, etc.), a workaround for your problem would be to compute the first discrete derivative of such data before the training and the prediction phase. Formally, given a sequence $n$ of time-stamped observations: $$S = \langle p_1,p_2,\ldots,p_n\rangle,$$ where $p_i$ represents the price value of the $i$ -th time-frame (of Bitcoin, in your context), its corresponding first dicrete derivative sequence of $n-1$ observations is: $$S' = \langle p_2 - p_1, p_3 - p_2, \ldots, p_n - p_{n-1}\rangle,$$ where $p_{i+1} - p_i$ , for all $1 \le i , represents the quantitative trend of the price action from the $i$ -th time-frame to the $(i+1)$ -th time-frame. As an example, consider the following sequence and its corresponding first derivative sequence: $$S_1 = \langle p_1, p_2, \ldots, p_n \rangle = \langle 10,20,40,60,50,50,20\rangle,$$ $$S_1' = \langle p_2 - p_1, p_3 - p_2, \ldots, p_n - p_{n-1}\rangle = \langle 10,20,20,-10,0,-30\rangle,$$ that could represent a $7$ days monitoring of the price action of Bitcoin in 2021. Observe that $\min(S_1) = 10$ and $\max(S_1) = 60$ . Now, consider another sequence with its first derivative form: $$S_2 = \langle p_1,p_2,\ldots,p_n \rangle = \langle 15,5,30,25,50,80,60 \rangle$$ $$S_2' = \langle p_2 - p_1, p_3 - p_2, \ldots, p_n - p_{n-1}\rangle = \langle -10,25,-5,25,30,-20 \rangle,$$ that could represent a (different) $7$ days monitoring of the price of Bitcon in 2022. Note that, in this case, $\min(S_2) = 5$ and $\max(S_2) = 80$ , to follow your scenario. One issue with such methodology is the loss of information when performing the transformation, but it immediately shows its strengths when facing problems like yours.
