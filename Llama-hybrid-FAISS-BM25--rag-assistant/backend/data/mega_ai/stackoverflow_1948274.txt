[site]: stackoverflow
[post_id]: 1948274
[parent_id]: 648463
[tags]: 
We are moving forward with a model like this: Person (id, given_name, family_name, title, suffix, birth_date) Address (id, culture_id, line1, line2, city, state, zipCode, province, postalCode) AddressType (id, descriptiveName) PersonAddress (person_id, address_id, addressType_id, activeDates) Most may consider this excessive. However, an undeniable common theme amongst the apps we develop is that they will have some of these fundamental entities - People, Organizations, Addresses, Phone Numbers, etc.. - and they all want to combine them in different ways. So, we're building in some generalization up-front that we are 100% certain we have use cases for. The Address table will follow a table-per-hierarchy inheritance scheme to differentiate addresses based on culture; so a United States address will have a state and zip field, but Canadian addresses will have a province and postal code. We use a separate connecting table to "give" a person an address. This keeps our other entities - Person & Address - free from ties to other entities when our experience is this tends to complicate matters down the road. It also makes it far simpler to connect Address entities to many other types of entities (People, Organizations, etc.) and with different contextual information associated with the link (like activeDates in my example).
