[site]: stackoverflow
[post_id]: 3512920
[parent_id]: 3476054
[tags]: 
I've introduced unit tests to code bases that did not have it previously. The last big project I was involved with where I did this the product was already in production with zero unit tests when I arrived to the team. When I left - 2 years later - we had 4500+ or so tests yielding about 33 % code coverage in a code base with 230 000 + production LOC (real time financial Win-Forms application). That may sound low, but the result was a significant improvement in code quality and defect rate - plus improved morale and profitability. It can be done when you have both an accurate understanding and commitment from the parties involved. First of all, it is important to understand that unit testing is a skill in itself. You can be a very productive programmer by "conventional" standards and still struggle to write unit tests in a way that scales in a larger project. Also, and specifically for your situation, adding unit tests to an existing code base that has no tests is also a specialized skill in itself. Unless you or somebody in your team has successful experience with introducing unit tests to an existing code base, I would say reading Feather's book is a requirement (not optional or strongly recommended). Making the transition to unit testing your code is an investment in people and skills just as much as in the quality of the code base. Understanding this is very important in terms of mindset and managing expectations. Now, for your comments and questions: However, I'm concerned that I'll end up missing the big picture and end up missing fundamental tests that would have been included if I'd used TDD from the get go. Short answer: Yes, you will miss tests and yes they might not initially look like what they would have in a green field situation. Deeper level answer is this: It does not matter. You start with no tests. Start adding tests, and refactor as you go. As skill levels get better, start raising the bar for all newly written code added to your project. Keep improving etc... Now, reading in between the lines here I get the impression that this is coming from the mindset of "perfection as an excuse for not taking action". A better mindset is to focus on self trust. So as you may not know how to do it yet, you will figure out how to as you go and fill in the blanks. Therefore, there is no reason to worry. Again, its a skill. You can not go from zero tests to TDD-perfection in one "process" or "step by step" cook book approach in a linear fashion. It will be a process. Your expectations must be to make gradual and incremental progress and improvement. There is no magic pill. The good news is that as the months (and even years) pass, your code will gradually start to become "proper" well factored and well tested code. As a side note. You will find that the primary obstacle to introducing unit tests in an old code base is lack of cohesion and excessive dependencies. You will therefore probably find that the most important skill will become how to break existing dependencies and decoupling code, rather than writing the actual unit tests themselves. Are there any process/steps that should be adhered to in order to ensure that an existing solutions is properly unit tested and not just bodged in? Unless you already have it, set up a build server and set up a continuous integration build that runs on every checkin including all unit tests with code coverage. Train your people. Start somewhere and start adding tests while you make progress from the customer's perspective (see below). Use code coverage as a guiding reference of how much of your production code base is under test. Build time should always be FAST. If your build time is slow, your unit testing skills are lagging. Find the slow tests and improve them (decouple production code and test in isolation). Well written, you should easilly be able to have several thousands of unit tests and still complete a build in under 10 minutes (~1-few ms / test is a good but very rough guideline, some few exceptions may apply like code using reflection etc). Inspect and adapt. How can I ensure that the tests are of a good quality and aren't just a case of any test is better than no tests. Your own judgement must be your primary source of reality. There is no metric that can replace skill. If you don't have that experience or judgement, consider contracting someone who does. Two rough secondary indicators are total code coverage and build speed. Is it worth the effort for an existing solution that's in production? Yes. The vast majority of the money spent on a custom built system or solution is spent after it is put in production. And investing in quality, people and skills should never be out of style. Would it better to ignore the testing for this project and add it in a possible future re-write? You would have to take into consideration, not only the investment in people and skills, but most importantly the total cost of ownership and the expected life time of the system. My personal answer would be "yes of course" in the majority of cases because I know its just so much better, but I recognize that there might be exceptions. What will be more benefical; spending a few weeks adding tests or a few weeks adding functionality? Neither. Your approach should be to add tests to your code base WHILE you are making progress in terms of functionality. Again, it is an investment in people, skills AND the quality of the code base and as such it will require time. Team members need to learn how to break dependencies, write unit tests, learn new habbits, improve discipline and quality awareness, how to better design software, etc. It is important to understand that when you start adding tests your team members likely don't have these skills yet at the level they need to be for that approach to be successful, so stopping progress to spend all time to add a lot of tests simply won't work. Also, adding unit tests to an existing code base of any sizeable project size is a LARGE undertaking which requires commitment and persistance. You can't change something fundamental, expect a lot of learning on the way and ask your sponsor to not expect any ROI by halting the flow of business value. That won't fly, and frankly it shouldn't. Thirdly, you want to instill sound business focus values in your team. Quality never comes at the expense of the customer and you can't go fast without quality. Also, the customer is living in a changing world, and your job is to make it easier for him to adapt. Customer alignment requires both quality and the flow of business value. What you are doing is paying off technical debt. And you are doing so while still serving your customers ever changing needs. Gradually as debt is paid off, the situation improves, and it is easier to serve the customer better and deliver more value. Etc. This positive momentum is what you should aim for because it underlines the principles of sustainable pace and will maintain and improve moral - both for your development team, your customer and your stakeholders.
