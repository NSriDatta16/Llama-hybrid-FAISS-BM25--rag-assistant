[site]: stackoverflow
[post_id]: 2322598
[parent_id]: 2322357
[tags]: 
I think I get what you are after: simple, default formatted input. I think the reason there is no TextReader.ReadXXX() is that this is parsing , and parsing is hard : for example: should ReadFloat(): ignore leading whitespace require decimal point require trailing whitespace ( 123abc ) handle exponentials ( 12.3a3 parses differently to 12.4e5 ?) Not to mention what the heck does ReadString() do? From C++, you would expect "read to the next whitespace", but the name doesn't say that. Now all of these have good sensible answers, and I agree C# (or rather, the BCL) should provide them, but I can certainly understand why they would choose to not provide fragile, nearly impossible to use correctly, functions right there on a central class. EDIT: For the buffering problem, an ugly solution is: static class TextReaderEx { static public string ReadWord(this TextReader reader) { int c; // Skip leading whitespace while (-1 != (c = reader.Peek()) && char.IsWhiteSpace((char)c)) reader.Read(); // Read to next whitespace var result = new StringBuilder(); while (-1 != (c = reader.Peek()) && !char.IsWhiteSpace((char)c)) { reader.Read(); result.Append((char)c); } return result.ToString(); } } ... int.Parse(Console.In.ReadWord())
