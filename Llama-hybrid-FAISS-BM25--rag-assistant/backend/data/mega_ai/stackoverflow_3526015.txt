[site]: stackoverflow
[post_id]: 3526015
[parent_id]: 
[tags]: 
Guice vs AspectJ

I was working with GUice some months ago and now when I return to it, I find I have to reread the Guice documentation and examples to understand what I did with my code. However, when I look at AspectJ it is all too intuitive. It is an intuitive extension of the Java language. I feel I can sit down and write AspectJ code immediately already. Therefore, I am tempted to abandon my pursuit of Guice and go with AspectJ. Especially the fact that Spring is generating AspectJ code. What features of Guice are there above AspectJ that should discourage me from abandoning Guice? Why wouldn't Google abandon Guice and use AspectJ instead? Vice Versa, What are the features of AspectJ that would encourage me to abandon Guice, besides the intuitiveness of it? If I may be allowed to "weave" in a question here, what is precluding Java language from being merged with AspectJ or provide similar "aspects" in a future version of Java? Note : to trigger happy delete-azillas, I realise this question may be too general - but if I knew what further specifics to ask, then I would not even need to ask but just google/bing for what I know that I don't know. As you can see, my Guice knowledge has degraded so badly that I don't even recognise my own handwriting .
