[site]: stackoverflow
[post_id]: 5671507
[parent_id]: 5671457
[tags]: 
If you want the optimal algorithm in terms of speed, but O(n^2) space, then for each node create a sorted list of other nodes (ordered by closeness). When you get a new node, you have to add it to the indexed list of all the other nodes, and all the other nodes need to be added to its list. To find the closest node, just find the first node on any node's list. Since you already need O(n^2) space (in order to store all the closeness information you need basically an NxN matrix where A[i,j] represents the closeness between i and j) you might as well sort it and get O(1) retrieval.
