[site]: stackoverflow
[post_id]: 4069241
[parent_id]: 4069193
[tags]: 
Assuming that you are getting the data from a database the first thing that comes to mind is that you are going to be hitting the database n+1 times for as many parents that you have in the database. You should try and get the whole tree structure out in one hit. Secondly, you seem to get the idea patterns seeing as you appear to be using the repository pattern so you might want to look at IoC . It allows you to inject your dependency on a particular object such as your repository into your class where it is going to be used allowing for easier unit testing. Thirdly, regardless of where you get your data from, move the structuring of the data into a tree data structure into a service which returns you an object containing all your departments that have already been organised (This basically becomes a DTO ). This will help you reduce code duplication . With anything you need to apply the yagni principle. This basically says that you should only do something if you are going to need it so if the code you have provided above is complete, needs no further work and is functional don't touch it. The same goes with the performance issue of select n+1, if you are not seeing any performance hits don't do anything as it may be premature optimization . In your edit DepartmentRepository repo = new DepartmentRepository(); var entries = repo.FindAllDepartments(); var parentDepartments = entries.Where(d => d.IDParentDepartment == null).ToList(); foreach (var parent in parentDepartments) { TreeNode node = new TreeNode(parent.Name); treeView1.Nodes.Add(node); var children = entries.Where(x => x.IDParentDepartment == parent.ID).ToList(); foreach (var child in children) { node.Nodes.Add(child.Name); } } You still have a n+1 issue. This is because the data is only retrieved from the database when you call the ToList() or when you iterate over the enumeration. This would be better. var entries = repo.FindAllDepartments().ToList(); var parentDepartments = entries.Where(d => d.IDParentDepartment == null); foreach (var parent in parentDepartments) { TreeNode node = new TreeNode(parent.Name); treeView1.Nodes.Add(node); var children = entries.Where(x => x.IDParentDepartment == parent.ID); foreach (var child in children) { node.Nodes.Add(child.Name); } }
