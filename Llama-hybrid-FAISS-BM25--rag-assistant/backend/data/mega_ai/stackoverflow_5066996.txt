[site]: stackoverflow
[post_id]: 5066996
[parent_id]: 5062521
[tags]: 
If E is a generic class, we have the problem that one can't create generic arrays without reflection, and with Reflection we need the class object (or an example array object). I'm not sure this is "elegant", but let's try: import java.lang.reflect.Array; public static E[][] toArray(List > list, Class elementType) { E[] sample = (E[])Array.newInstance(elementType, 0); List tempList = new ArrayList (list.size()); for(List subList : list) { tempList.add( subList.toArray(sample)); } E[][] finalSample = (E[][])Array.newInstance(sample.getClass(), 0) return tempList.toArray(finalSample); } This may need some @SuppressWarning("unchecked") for the casts from Array.newInstance.
