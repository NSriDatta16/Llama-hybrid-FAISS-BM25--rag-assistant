[site]: stackoverflow
[post_id]: 2133691
[parent_id]: 2133442
[tags]: 
I've been using this small code to send e-mails in a newsletter system of my own. This excerpt handles specifically a single message. It's based on RFC specs. /** * @package jaMailBroadcast * @author Joel A. Villarreal Bertoldi (design at joelalejandro.com) * * @usage * * $msg = new jaMailBroadcast_Message("My Website", "my@website.com"); * $msg->to = new jaMailBroadcast_Contact("John Doe", "john@doe.com"); * $msg->subject = "Something"; * $msg->body = "Your message here. You can use HTML."; * $msg->send(); **/ class jaMailBroadcast_Contact { public $id; public $name; public $email; function __construct($contactName, $contactEmail, $contactId = "") { $this->name = $contactName; $this->email = $contactEmail; if (!$contactId) $this->id = uniqid("contact_"); else $this->id = $contactId; } function __toString() { return json_encode ( array ( "id" => $this->id, "name" => $this->name, "email" => $this->email ) ); } function rfc882_header() { return sprintf('"%s" ', $this->name, $this->email); } } class jaMailBroadcast_Message { public $from; public $to; public $subject; public $body; public $mime_boundary; public $headerTemplate; public $footerTemplate; function __construct($fromName, $fromEmail) { $this->from = new jaMailBroadcast_Contact($fromName, $fromEmail); $this->mime_boundary = "==" . md5(time()); } private function mail_headers($EOL = "\n") { $headers = "From: " . $this->from->rfc882_header() . $EOL . "Reply-To: from->email . ">" . $EOL . "Return-Path: from->email . ">" . $EOL . "MIME-Version: 1.0" . $EOL . "Content-Type: multipart/alternative; boundary=\"{$this->mime_boundary}\"" . $EOL . "User-Agent: jaMailBroadcast/1.0" . $EOL . "X-Priority: 3 (Normal)" . $EOL . "Importance: Normal" . $EOL . "X-Mailer: jaMailBroadcast"; return $headers; } private function rfc882_body_format($EOL = "\r\n") { return wordwrap($this->body, 70, $EOL); } function send() { $EOL = ( stripos($this->to->email, "hotmail") !== false || stripos($this->to->email, "live") !== false ) ? "\n" : "\n"; return mail ( $this->to->rfc882_header(), $this->subject, $this->multipart_alternative_body($EOL), $this->mail_headers($EOL), "-f" . $this->from->email ); } private function multipart_alternative_body($EOL = "\r\n") { $multipart = "Content-Transfer-Encoding: 7bit" . $EOL . "This is a multi-part message in MIME format. This part of the E-mail should never be seen. If you are reading this, consider upgrading your e-mail client to a MIME-compatible client." . $EOL . $EOL = "--{$this->mime_boundary}" . $EOL . "Content-Type: text/plain; charset=iso-8859-1" . $EOL . "Content-Transfer-Encoding: 7bit" . $EOL . $EOL . strip_tags($this->br2nl($this->headerTemplate)) . $EOL . $EOL . strip_tags($this->br2nl($this->body)) . $EOL . $EOL . strip_tags($this->br2nl($this->footerTemplate)) . $EOL . $EOL . "--{$this->mime_boundary}" . $EOL . "Content-Type: text/html; charset=iso-8859-1" . $EOL . "Content-Transfer-Encoding: 7bit" . $EOL . $EOL . $this->headerTemplate . $EOL . $this->body . $EOL . $this->footerTemplate . $EOL . "--{$this->mime_boundary}--" . $EOL; return $multipart; } private function br2nl($text, $EOL = "\n") { $text = str_ireplace(" ", $EOL, $text); $text = str_ireplace(" ", $EOL, $text); return $text; } }
