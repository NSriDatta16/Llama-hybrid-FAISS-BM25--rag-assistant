[site]: stackoverflow
[post_id]: 2181545
[parent_id]: 2181526
[tags]: 
You are not presenting the entire code, where a lot of things can go wrong, but one error is already obvious. The line memset( primary, 0, sizeof(struct data *) * primarypcs ); is not doing what you think it is doing. It is not zeroing the entire array due to type mistake in sizeof . It was most likely supposed to be memset( primary, 0, sizeof(struct data) * primarypcs ); Note no * under sizeof . Because of this error, most of the pointers in your array contain garbage as their initial values. If you don't set them to something meaningful in the omitted code, your calls to free will receive garbage arguments and fail. In general, to reduce the chance of such errors it is best to avoid mentioning type names in your program, except in declarations. Since your question is tagged C++ (even though it surely looks like C), it is not possible to get rid of type casts on malloc , but otherwise I'd say that the following looks better struct data *primary = (struct data *) malloc( primarypcs * sizeof *primary ); memset( primary, 0, primarypcs * sizeof *primary ); And, as a side note, if your code was intended to be C++, you could get the same result in a much more elegant, compact and portable way data *primary = new data[primarypcs](); Of course in this case you'll have to deallocate the memory using the appropriate C++ functionality instead of free .
