[site]: stackoverflow
[post_id]: 4523732
[parent_id]: 4522738
[tags]: 
When you created your dbml file, and dragged your Beer table on the canvas, the designer generates a class called Beer for you. By default this class maps 1-1 to the table - a property for each column, same datatypes etc. You can change those properties if you want to - you can change their name and datatype, you can remove them (they will need to be nullable in the database if you remove them), you can add properties that don't necessarily map to the database, and so on. When you instantiate a data context object, you can retrieve those Beer objects (the class, not the table) from the database using db.Beers . LINQ-to-SQL populates these objects according to the rules laid out in the designer - i.e. which column maps to which property, the data types etc. Any property on the class which doesn't map to a column will be given default value, just like a normal initialised object. You can use those objects just as you would use any other object; they are just classes with additional attributes. You can see them in the MyDatabase.designer.cs file which sits behind the dbml file. Put them in a list and return them, project them into other objects, select just their id properties - whatever you need to do.
