[site]: stackoverflow
[post_id]: 3313804
[parent_id]: 3265589
[tags]: 
With a multitude of data sources mapping each one correctly to an intermediate format is not trivial. Regular expressions are good with a finite set of known data formats. Multipass can help when data is ambiguous without context (month,day fields and have several days of data), and also help defeat data entry errors. But it seems as this data is connected to salaries there needs a good reliable transfer. An import configuring trick Get the customer to make a set of training data in the application. It should have a "predefined unique date" and each subsequent data field have a number corresponding to the target data field in your application. On importing your application needs to recognise the predefined date, determine the unique translation required and effect the displaying/saving of this "mapping key", and stop the import. eg If you expect "Duration hours" in field two then get the user to enter 2 in the relevant field which might be "Attendance hours". On subsequent runs, and with the mapping definition key, import becomes a fairly easy process of translation. Note on terms "predefined date" - must be historical, say founding date of your company?, might need to be in PC clock settable range. "mapping key" - could be string of hex digits and nybble based so tractable to workout The entered code can be extended to signify required conversions ie customer's application has durations in days and your application expects it in hours. Interfacing with windows programs (in order if increasing fragility) Ye Olde saving as CSV file Print to operating system printer that is setup as a text file/pdf, then scavenge the data out of that Extract data via the application interface control, typically ActiveX for several windows programs ie like Matlab's Spreadsheet Link Read native file format xls format ie like Matlab's xlsread Add an additional intermediate spreadsheet sheet that has extended cell references ie ='[filename]rawdata'!$A$3
