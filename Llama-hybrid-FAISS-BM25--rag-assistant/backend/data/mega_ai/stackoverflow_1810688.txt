[site]: stackoverflow
[post_id]: 1810688
[parent_id]: 1809916
[tags]: 
Given that you want to sort your searches on statistics, adding counter caches to the Restaurant model looks like your best option. In the case of total visitors this is simple. In the case of total time_spent, it will be a little more complex, but still not unmanageable. If you're looking for an average then things get a little more complicated. Here's the code required to add counter caches to your restaurant model. Notice that most of new model code is in the visitor's model. Add new columns to Restaurant via migration: class AddCounterCaches 0 add_column :restaurants, :total_time_spent, :integer, :default => 0 Restaurant.reset_column_information Restaurant.find(:all).each do |r| count = r.visitors.length total = r.visitors.inject(0) {|sum, v| sum + v.time_spent} average = count == 0 ? 0 : total/count r.update_counters r.id, :visitors_count => count :total_time_spent => total, :average_time_spent => average end end def self.down remove_column :restaurants, :visitors_count remove_column :restaurants, :total_time_spent end end Update visitor model to update counter caches class Vistor true after_save :update_restaurant_time_spent, :if => Proc.new {|v| v.changed.include?("time_spent")} def :update_restaurant_time_spent difference = changes["time_spent"].last - changes["time_spent"].first Restaurant.update_counters(restaurant_id, :total_time_spent => difference) restaurant.reload avg = restaurant.visitors_count == 0 ? 0 : restaurant.total_time_spent / restaurant.visitors_count restaurant.update_attribute(:average_time_spent, avg) end end N.B. Code hasn't been tested, so it may contain minor errors. Now you can sort by these columns, create named scopes that include them or use them in your methods.
