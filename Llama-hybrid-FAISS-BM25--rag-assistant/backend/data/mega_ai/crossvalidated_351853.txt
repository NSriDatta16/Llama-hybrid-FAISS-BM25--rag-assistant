[site]: crossvalidated
[post_id]: 351853
[parent_id]: 
[tags]: 
how to calculate curvature of multivariate function?

EDIT1: tried to clarify the question Context In the context of an MCMC investigation of non-linear interaction effects in dichotomous models, I am creating data generating processes based on the logistic CDF, $\Lambda()$, that are not monotone. The issue that I am facing is that the same functional form can have a very different surface based on the coefficients, and therefore different performance of the simulation. In other words, the extent to which the surface is curved, influences the performance of the simulation, under the same basic functional form. So I cannot just compare between different functional forms, but also between each draw of the monte carlo. For example: The generic functional form $y = \Lambda(\beta_1x_1 + \beta_2x_2 + \beta_{12}x_1^2x_2 + \epsilon)$ has very different surfaces based of the betas. On one hand, $$y = \Lambda(-1.72x_1 -3.41x_2 +0.3x_1^2x_2 + \epsilon)$$ has a nice monotone surface: On the other hand, $$y = \Lambda(0.72x_1 -0.86x_2 +2.91x_1^2x_2 + \epsilon)$$ has a crazy surface. way forward I tried looking at $\frac{\partial^2\Lambda}{\partial x_1 \partial x_2}$ in order to distinguish between them, but I could not a deterministic relationship between the shape of the cross partial for all the cases. This made sense only for the extreme cases. It is clear that there are clues there, but not something I know how to quantify in a defensive way. Ideally, I would be like to find a scalar that represents how curved the surface is. I think I need something like https://en.wikipedia.org/wiki/Mean_curvature but this is well over my head. Can someone suggest something more applied? Hopefully that is also implemented in R or python?
