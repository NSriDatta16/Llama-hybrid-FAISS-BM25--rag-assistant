[site]: crossvalidated
[post_id]: 581400
[parent_id]: 581275
[tags]: 
Because the streets are on an irregular orthogonal grid, the Fourier Transform solutions--although clever--will likely fail. The following approach exploits two ideas: Using the Hough transform to identify sets of points that tend to line up. Exploiting the assumed orthogonality of the grid to augment the data. The link explains and illustrates the Hough transform and the Mathematica code I am using. Here is the gist of it, as extracted from the second paragraph: ... the Hough transform depicts sets of lines. A line in the plane can be parameterized by its slope, $x,$ and its distance, $y,$ from a fixed origin. A point in this $x,y$ coordinate system thereby designates a single line. Each point in the original plot determines a pencil of lines passing through that point: this pencil appears as a curve in the Hough transform. When features in the original plot fall along a common line, or near enough to one, then the collections of curves they produce in the Hough transform tend to have a common intersection corresponding to that common line. By finding these points of greatest intensity in the Hough transform, we can read off good solutions to the original problem. Please refer to the rest of that post for further explanation and code. Here, I'll simply take you through the workflow with your example (the dots in the left image). Import the image and crop it. img = Import["https://i.stack.imgur.com/uAjLw.jpg"] i = ColorNegate[Binarize[img]]; crop2 = ImageCrop[ImageTake[i, {25, 700}, {1, 1050}], 940]; Combine the image with its 90 degree rotation. (Optionally, combine it with all three rotations at 90, 180, and 270 degrees.) I also downsample it for speed and because coarsening the resolution is a crude kind of windowed smooth that helps identify points that line up. Various forms of additional smoothing will appear further below without comment. The amount of smoothing is a matter of trial and error but good results are quickly found. crop3 = ImageResize[crop2, 80]; (* crop3 = ImageAdd[crop3, ImageRotate[crop3]]; *) crop3=ImageAdd[crop3, ImageRotate[crop3, \[Pi]]] Notice how much more clearly the orthogonal geometry of the street intersections comes through in this combined image. [Edit: I made a mistake here. The commented-out line performs the 90 degree rotation; the final line rotates by 180 degrees. I intended to comment out the last line only. The result of this error is to produce an inferior solution--the one shown below--but it still illustrates the ideas, so I have left the figures as is.] Compute the Hough transform. hough2 = Radon[crop3, Method -> "Hough"] // ImageAdjust Smooth the Hough transform to help detect peaks. blur = ImageAdjust[Blur[ImageAdjust[hough2, {1, 0}], 5]] Identify the "morphological components" (isolated high points). comp = MorphologicalComponents[blur, 0.85] // Colorize Find the angles associated with component centroids. width = ImageDimensions[blur][[1]]; slopes = Module[{x, y, z}, ComponentMeasurements[comp, "Centroid"] /. Rule[x_, {y_, z_}] :> Round[((y - 1/2)/(width - 1)) 180., 0.1] ] {101., 93.4, 7.1, 93.4, 101.} The output varies a little depending on choices made previously, but the variation is consistent with the amount of noise apparent in the original image. Rotate the original to make the grid appear isothetic (parallel to the coordinate axes). j = ImageRotate[crop2, -slopes[[1]] / 180 * \[Pi]]; ImageResize[j, 150] Smooth row and column sums to plot the marginal distributions of intensity. "Streets" run left to right; "avenues" run straight up and down. ListPlot[ListConvolve[{1,2,3,2,1}, (Plus @@ #)& /@ ImageData[j]], Joined->True, PlotRange-> {Full, Full}, PlotLabel->"Streets"] You can post-process the locations of the peaks to identify the coordinates of the "street" centerlines. The values along the horizontal axis are pixels indexing the cropped image I have been using. Here is a plot for the transpose of the image data (the code is essentially the same): Standard errors for these location estimates can also be obtained from the half-widths of the peaks in these "spectra." At this juncture we have obtained the angle of the street grid and locations of all identifiable streets and avenues in the image. Further processing will depend on the data structures you need and what you intend to do with this information. I consider this to be a great result, because it has succeeded in identifying the numbers of streets and avenues and estimating the resulting $1+4+6=11$ parameters with appropriate precision from just $17$ rather uncertain point locations. This method still works without the second idea (of combining the image with rotated versions of itself), when it can identify gridlines on a non-orthogonal street system, but it requires more data to achieve the same level of precision.
