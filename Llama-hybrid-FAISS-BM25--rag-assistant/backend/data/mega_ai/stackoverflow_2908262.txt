[site]: stackoverflow
[post_id]: 2908262
[parent_id]: 2907759
[tags]: 
The above reuses the cells, as you draw attention to in your comments, but; after finding a cached cell you do the setup again, not matter if the cell is old or new. The UITableViewCell is a "two-parter", the first time a cell is referenced it is instantiated and build, all the subsequent times it is referenced it should only be updated. (a cell is referenced each time it is scrolled onto the screen or the tableview is reloaded etc. this happens often so to save CPU time it is also best not to do the same setup again and again). So, try approaching it like this instead: - (void) configureCell:(UITableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { UILabel *settingText = [ISInterfaceElement getLabel:Headline]; //Opps... ISInterfaceElement is my custom class. All it does is return a UILabel with settings that comply for a Headline label, according to an enum in the header. [settingText setFrame:CGRectMake(0.0f, 15.0f, 320.0f, 20.0f)]; [settingText setTextAlignment:UITextAlignmentCenter]; [settingText setTag:SETTINGS_LABEL]; [cell addSubview:settingText]; UIView *background = [[UIView alloc] initWithFrame:CGRectMake(0.0f, 0.0f, 320.0f, 50.0f)]; [cell addSubView:background]; //added [background release]; //added [cell setSelectionStyle:UITableViewCellSelectionStyleNone]; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:CellIdentifier] autorelease]; [self configureCell:cell atIndexPath:indexPath]; } [(UILabel*)[cell viewWithTag:SETTINGS_LABEL] setText:@"Settingsâ€¦"]; return cell; } So the cellForRowAtIndexPath call the configureCell method if it needs a new cell setup, else it simply updates the cell with the correct value from the model (usually [someArray objectAtIndex:indexPath.row] but in my case just a string. So send along any parameter(height) you need the configureCell method to know to be able to build your cell, and do all the building in that method and all the updating in cellForRowAtIndex. Hope it makes sense:)
