[site]: datascience
[post_id]: 117313
[parent_id]: 117308
[tags]: 
Multi-output classification for text input could be done thanks to Random Forest Classifier . First, you need to vectorize your text to make your data multidimensional and allow the Classifier to segregate the data easily. from sklearn.ensemble import RandomForestClassifier from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split # Extract features with a word frequency (for example) vectorizer = CountVectorizer() X = vectorizer.fit_transform(texts) Then, you can apply the Random Forest Classifier from sklearn that would automatically classify the vectorized data easily. #Train/test split X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2) # Training clf = RandomForestClassifier(n_estimators=200, max_depth=15) clf.fit(X_train, y_train) # Make predictions on the test set y_pred = clf.predict(X_test) # Model accuracy accuracy = clf.score(X_test, y_test) X_test would be the text input and y_pred the multi-output classification result. Alternatively, you can use TfidfVectorizer instead of CountVectorizer.
