[site]: stackoverflow
[post_id]: 5186005
[parent_id]: 5181555
[tags]: 
Perhaps the following might help you organize your code within a GUIDE application. I have used application data (see the appdata docs here or the general docs here ) to create a execution flag runflag . Once the start button is pressed the main loop is entered within the button's callback. The loop terminates when the stop button is pressed setting which sets the flag in the figures application data to FALSE. Here are steps I used to set this up. Start by creating a new GUIDE application, add two buttons (Start and Stop) and define the following callbacks Opening Function Callback %# --- Executes just before testStop is made visible. function testStop_OpeningFcn(hObject, eventdata, handles, varargin) %# Choose default command line output handles.output = hObject; %# Add a global variable as a MATLAB application data %# see sharing application data documentation in the MATLAB %# docs %# APPDATA documentation: %# http://www.mathworks.com/help/techdoc/creating_guis/f13-998352.html#f13-999565 %# General doc on sharing application data %# http://www.mathworks.com/help/techdoc/creating_guis/f13-998449.html %# setappdata(handles.figure1,'runFlag',true); %# Update handles structure guidata(hObject, handles); Start button call back %# --- Executes on button press in btnGo. function btnGo_Callback(hObject, eventdata, handles) i=0; %# This loop will stop when the stop button is pressed %# setting the application data _runFlag_ to false while getappdata(handles.figure1,'runFlag') i=i+1; %# Work you want to inturrupt can go here. pause(.1) end Stop Button Callback %# --- Executes on button press in btnStop. function btnStop_Callback(hObject, eventdata, handles) setappdata(handles.figure1,'runFlag',false)
