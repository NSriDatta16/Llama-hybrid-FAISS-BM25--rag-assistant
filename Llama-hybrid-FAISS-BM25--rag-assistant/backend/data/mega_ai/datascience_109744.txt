[site]: datascience
[post_id]: 109744
[parent_id]: 
[tags]: 
Implementing a Randomized Neural Network using Tensorflow?

I want to implement a Randomised Neural Network (alt. Neural Network with Random Weights (NNRW)) in keras based on the following paper: https://arxiv.org/pdf/2104.13669.pdf Essentially the idea is the hidden layers are fixed randomly and only the output layer is optimized. (leading to a simple Least Squares solution). I am familiar with using the Sequential API in keras to create models although I'm not sure how I would go about 'fixing' the hidden layers and only focus on optimising the output layer. My last ditch attempt would be to simply code the network manually in NumPy, but I wanted to ask if anyone had any ideas on doing so in Tensorflow
