[site]: stackoverflow
[post_id]: 191691
[parent_id]: 
[tags]: 
Should C# have multiple inheritance?

I have come across numerous arguments against the inclusion of multiple inheritance in C#, some of which include (philosophical arguments aside): Multiple inheritance is too complicated and often ambiguous It is unnecessary because interfaces provide something similar Composition is a good substitute where interfaces are inappropriate I come from a C++ background and miss the power and elegance of multiple inheritance. Although it is not suited to all software designs there are situations where it is difficult to deny it's utility over interfaces, composition and similar OO techniques. Is the exclusion of multiple inheritance saying that developers are not smart enough to use them wisely and are incapable of addressing the complexities when they arise? I personally would welcome the introduction of multiple inheritance into C# (perhaps C##). Addendum : I would be interested to know from the responses who comes from a single (or procedural background) versus a multiple inheritance background. I have often found that developers who have no experience with multiple inheritance will often default to the multiple-inheritance-is-unnecessary argument simply because they do not have any experience with the paradigm.
