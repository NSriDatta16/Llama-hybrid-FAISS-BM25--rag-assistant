[site]: stackoverflow
[post_id]: 1111298
[parent_id]: 1109020
[tags]: 
I've taken the liberty of rewriting your snippet as I would. Below my suggested code is a rogues gallery of less than optimal methods you might see in the wild. use strict; use warnings; my $stuff_path = 'c:/scripts/stuff.txt'; open (my $stuff, ' ) { print "Line $. is : $line\n"; } Here are other methods you might see. Each one could be substituted for the while loop in my example above. # while statement modifier # - OK, but less clear than explicit code above. print "Line $. is : $_" while ; # while loop # - OK, but if I am operating on $_ explicitly, I prefer to use an explicit variable. while( ) { print "Line $. is : $_"; } # for statement modifier # - inefficient # - loads whole file into memory print "Line $. is : $_" for ; # for loop - inefficient # - loads whole file into memory; for( ) { print "Line $. is : $_\n"; } # for loop with explicit variable # - inefficient # - loads whole file into memory; for my $line ( ) { print "Line $. is : $line\n"; } # Exotica - # map and print # - inefficient # - loads whole file into memory # - stores complete output in memory print map "Line $. is : $_\n", ; # Using readline rather than <> # - Alright, but overly verbose while( defined (my $line = readline($stuff) ) { print "Line $. is : $line\n"; } # Using IO::Handle methods on a lexical filehandle # - Alright, but overly verbose use IO::Handle; while( defined (my $line = $stuff->readline) ) { print "Line $. is : $line\n"; }
