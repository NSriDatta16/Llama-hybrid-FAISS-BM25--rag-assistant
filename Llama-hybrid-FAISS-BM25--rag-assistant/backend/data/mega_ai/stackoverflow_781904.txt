[site]: stackoverflow
[post_id]: 781904
[parent_id]: 781685
[tags]: 
the easy way (now, but you'll pay later )is to store the entire article within one text field, but you give up some display control because you'll might need to put some html in that text. If you put html in the text, you'll have a lot of data to fix if you ever change your web page's look/feel. This may not be an issue As a rule I try not to ever put html into the database. You might be better off using XML to define your article, and store that in one text field, so your application can properly render the contents in a dynamic way. You could store page breaks in the XML, or let the app read in the entire article and split it up dynamically based on your current look/feel. You can use my "poor man's CMS" schema (below) if you don't want to use XML. It will give you more control over the formatting than the "all text in one field" method. these are just a wild guess based on your question tables: Articles -------- ArticleID int --primary key ArticleStatus char(1) --"A"ctive, "P"ending review, "D"eleted, etc.. ArticleAuthor varchar(100) --or int FK to a "people" table DateWritten datetime DateToDisplay datetime etc... ArticleContent -------------- ArticleID int --primary key Location int --primary key, will be the order to display the article content, 1,2,3,4 ContentType char(1) --"T"ext, "I"mage, "L"ink, "P"age break ArticleContentText ------------------ ArticleID int --primary key Location int --primary key FormatStyle char(1) --"X"extra large, "N"ormal, "C"ode fragment ArticleText text ArticleContentImage ------------------- ArticleID int --primary key Location int --primary key AtricleImagePath varchar(200) AtricleImageName varchar(200) You can still put the entire article in one field, but you can split it up if it contains different types of "things". If you have an article about PHP code with examples, the "one field method" would force you to put html in the text to format the code examples. with this model, you store what is what, and let the application display it properly. You can add and expand different types, put page breaks in, remove them. You can store your content in multiple "ArticleContentText" rows each representing a page break, or include "ArticleContent" rows that specify page breakes. You could let the app read the entire article and then only display what it wants.
