[site]: crossvalidated
[post_id]: 608524
[parent_id]: 
[tags]: 
How to make a DL price prediction model aware of market fluctuations

here's a pretty general question, so i do not expect to get precise answers. Instead i hope to read ideas and suggestions. I have a deployied proprietary Deep Learning model that make retail price prediction of pre-owned cars. Data are shaped like this: car characteristics, selling date and selling price and i'm receiving updated data every other day. The model makes a preliminary clustering phase to restrict the proper training to already pretty sililar car. Cannot share the proper architecture, sorry. Problem is: the model seems not to react to market fluctuations in average selling price, i.e. the MAE and PMAE are getting worst during and immediately after trending phases. I'm aware that a NN is most probably not the best choice for this kind of tasks, but the client wants to stick with his beloved model. The model is being re-trained every sunday on new datas and the best model based on MAE is being deployed. What you guys would try to enhance the model awareness of trends? [Update] We are running some experiments and there is a pretty promising one. Our model got linearly time-dependent weights: newest data (recently sold cars) got are taking an higher training weight w/r to older. We switched to exponential weights instead and the model seems to be more efficently and more promptly aware of the market trends. The current solution we are testing is an adaptive one: pooling a linear and and exponential model and take the most accurate, agnostically with respect to the market trends.
