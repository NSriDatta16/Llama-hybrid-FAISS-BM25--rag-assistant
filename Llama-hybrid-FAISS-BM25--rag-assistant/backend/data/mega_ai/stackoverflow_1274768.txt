[site]: stackoverflow
[post_id]: 1274768
[parent_id]: 1274681
[tags]: 
It looks like you're making the problem out of nothing. erlang:process_info/1 gives enough information for debugging purposes. If your REALLY need loop function arguments, why don't you give it back to caller in response to one of the special messages that you define yourself? UPDATE: Just to clarify terminology. The closest thing to the 'state of the process' on the language level is process dictionary, usage of which is highly discouraged. It can be queried by erlang:process_info/1 or erlang:process/2. What you actually need is to trace process's local functions calls along with their arguments: -module(ping). -export([start/0, send/1, loop/1]). start() -> spawn(?MODULE, loop, [0]). send(Pid) -> Pid ! {self(), ping}, receive pong -> pong end. loop(S) -> receive {Pid, ping} -> Pid ! pong, loop(S + 1) end. Console: Erlang (BEAM) emulator version 5.6.5 [source] [smp:2] [async-threads:0] [kernel-poll:false] Eshell V5.6.5 (abort with ^G) 1> l(ping). {module,ping} 2> erlang:trace(all, true, [call]). 23 3> erlang:trace_pattern({ping, '_', '_'}, true, [local]). 5 4> Pid = ping:start(). 5> ping:send(Pid). pong 6> flush(). Shell got {trace, ,call,{ping,loop,[0]}} Shell got {trace, ,call,{ping,loop,[1]}} ok 7>
