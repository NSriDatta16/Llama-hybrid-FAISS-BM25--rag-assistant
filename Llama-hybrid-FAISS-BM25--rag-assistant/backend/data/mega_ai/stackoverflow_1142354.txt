[site]: stackoverflow
[post_id]: 1142354
[parent_id]: 1142296
[tags]: 
If you're talking about large volumes of data (millions of rows+), then you will get have a benefit from using different tables to store them in. e.g. basic example 50 million log entries, assuming 5 different "types" of log table Better to have 5 x 10 million row tables than 1 x 50 million row table INSERT performance will be better with individual tables - indexes on each table will be smaller and so quicker/easier to be updated/maintained as part of the insert operation READ performance will be better with individual tables - less data to query, smaller indexes to traverse. Also, sounds like you'd need to store an extra column to identify what type of Log entry a record is (Product, Shipping....) MAINTENANCE on smaller tables is less painful (statistics, index defragging/rebuilding etc) Essentially, this is about partitioning data. From SQL 2005 onwards, it has built in support for partitioning (see here ) but you need Enterprise Edition for that, which basically allows you to partition data in one table to improve performance (e.g. you'd have your one Log table, and then define how the data within it is partitioned) I listened to an interview with one of the eBay architects recently, who stressed the importance of partitioning when needing performance and scalability and I strongly agree based on my experiences.
