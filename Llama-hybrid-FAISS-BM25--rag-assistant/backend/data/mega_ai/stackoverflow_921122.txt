[site]: stackoverflow
[post_id]: 921122
[parent_id]: 920896
[tags]: 
Can not use class, name or id to populate the second value as they are used already. and can only have one value in the value attribute Ok so saying you cannot any of use these(common) methods is limiting your choices. Since you are already using jQuery, the .data() function comes to mind. It basically allows you to store key/value pairs on any given DOM object. So you could spin through all your options in the list and $('#selectID options').each(function(){ $.data($(this), 'key', 'value') }); More info on .data() here Edit: There would be no change at all to your HTML structure, which sounds like it's a bonus in this situation. The .data() function just allows you to store 'metadata' for any existing html element on your page. If you were to view source on the page, there would be no trace of this data. It gets stored somewhere in jQuery land, and I can't speak to exactly how this mechanism works although I assume it's just a layer of abstraction on a basic JavaScript array. In this case, you are going to be attaching a peice of data to each of your elements. So to set the data you use the loop as shown above. Then to retrieve the data you just need to know which option is currently selected, and then use .data() and the key again to get the value back. var storedValue = $.data( $('#selectID option:selected'),'key' ) The retrieval is easy, I expect your challenge is going to be getting the data so you can set it. One way would be to generate the javascript on the server side and then emit it to the page. You may end up not using the loop as I'm going to assume each value is unique, it may look something more like: $.data( $('#selectID options:eq(0)'), 'key', 'value1' ); $.data( $('#selectID options:eq(1)'), 'key', 'value2' ); $.data( $('#selectID options:eq(2)'), 'key', 'value3' ); $.data( $('#selectID options:eq(3)'), 'key', 'value4' ); 'value1' could be anything, including a json string that would allow you to store several values with one key if need be. And finally, if you are going to using this functionality repeatedly it would be pretty easy to create a jQuery plugin that lets you do so with a bit less legwork, but that's an answer for another question.
