[site]: crossvalidated
[post_id]: 371711
[parent_id]: 
[tags]: 
How to fit an autoregressive (AR(1)) model with trend and/or seasonality to a time series?

I want to test a model I have on a time series. The model is that the time series adapts to a trend $f(t)$ with a speed $\alpha$ . There is also noise in the model. So, the time series is a function plus an AR(1) process. Mathematically the model is as follows: $$ y_{t + 1} = (1 - \alpha)y_{t} + \alpha f(t) + \epsilon_t $$ where $\epsilon_t \sim \mathcal{N}(0,1)$ and $\alpha$ is the parameter I want to fit. The only thing we know about $f(t)$ is that it changes slowly. I want to obtain $\alpha$ , the speed at which the system adjusts to the external trend ( $f(t)$ ). Is there a way to do such fit? My naive attempt was to use python library statsmodel to decompose the time series. After decomposing, I tried to fit an AR(1) model to the residuals to estimate $\alpha$ but I am not sure if this is mathematically founded. Below I show a toy example of my attempt using a very simple seasonality function $f(t) = A(1 + \sin(t))$ , where $A$ is some amplitude. The simulated time series. Decomposition of time series. Residual is not the AR(1) process I hoped for. Below the code, I used to generate the examples and the actual fit (which fails). import numpy as np import pandas as pd import statsmodels.api as sm from statsmodels.tsa.arima_model import ARMA #defining the trend function def trend(t, amp=1): return amp*(1 + np.sin(t)) #length of time series n_time_steps = 250 #amplitud of time series amplitud=10 #initializing the time series time_series = np.zeros(n_time_steps) time_series[0] = trend(0, amplitud) #The AR(1) parameter. Our goal will be to find this parameter. alpha = 0.1 #making the time series for t in range(1,n_time_steps): time_series[t] = (1 - alpha)*time_series[t - 1] + alpha*trend(t, amp=amplitud) + alpha*np.random.normal(0,1) #passing the time series to a pandas format dates = sm.tsa.datetools.dates_from_range('2000m1', length=len(time_series)) time_series_pd= pd.Series(time_series, index=dates) #decomposing the time series res = sm.tsa.seasonal_decompose(time_series_pd) #fitting the AR(1) model mod = ARMA(list(res.resid[6:-6]), order=(1,0)) ar1_fit = mod.fit() #The alpha parameter is... print(1 - ar1_fit.params[1]) #... wrong I made the time series with a parameter $\alpha = 0.1$ but the fit was of $0.4$ . I ran the code several times with different values of $\alpha$ and the resulting fit was always around 0.4 so the naive method is definitely not working. My question is, is there a way in which we can fit $\alpha$ to an observed time series, where $f(t)$ can be a trend, seasonality or both? I have very little knowledge of time series so references to similar problems would also be greatly appreciated. Edits To answer the request in comments I add values below. Random seed is set to 1. [10. , 10.72595885, 11.52358917, 11.34826863, 10.45888924, 9.48023122, 9.38369266, 10.07843437, 10.9787728 , 11.27459181, 10.63483361, 9.49017098, 8.87688341, 9.435671 , 10.57884086, 11.06298176, 10.57606807, 9.39747464, 8.72211285, 9.04041155, 10.22283847, 11.11969964, 11.13273664, 10.2063528 , 9.23146764, 9.13337707, 10.05086883, 10.93238285, 11.15283698, 10.28641578, 9.26554459, 8.73949121, 9.3985384 , 10.40135548, 10.75713964, 10.26221266, 9.39586217, 8.88760798, 9.2262743 , 10.26346529, 10.93825431, 10.67017454, 9.61173689, 8.72868546, 8.86633691, 9.64753428, 10.70219519, 10.63893072, 9.71554529, 8.87046796, 8.82872384, 9.67172944, 10.75581672, 10.91077525, 10.25928348, 9.19834758, 8.61558807, 9.25163173, 10.48970349, 11.10617916, 10.46977925, 9.5732737 , 8.85475124, 8.97903685, 10.00109005, 10.84209007, 10.75244881, 9.90575842, 9.04823385, 8.99914474, 9.84467462, 10.71211039, 10.80225592, 10.21593102, 9.19557713, 9.03864446, 9.83039095, 10.89768424, 11.41492796, 10.88613347, 9.74998291, 9.12889748, 9.77000435, 10.7379209 , 11.29238873, 11.01397586, 9.92263867, 9.0497853 , 9.06670674, 10.06797882, 10.91946614, 10.75447231, 9.8593913 , 8.77796022, 8.65757981, 9.35618397, 10.42261619, 10.81248526, 10.17407762, 9.16612511, 8.68497338, 9.25949543, 10.211867 , 10.82158327, 10.437084 , 9.33053699, 8.74546459, 9.04645056, 9.9856934 , 10.99536028, 10.8958873 , 9.94829915, 9.08498071, 9.0035942 , 9.91447592, 11.07908555, 11.20526544, 10.37895494, 9.37160344, 8.80010115, 9.46337901, 10.58708338, 10.78607294, 10.32424094, 9.16009977, 8.62251457, 8.87281301, 10.05402341, 10.72336744, 10.46214931, 9.51550051, 8.76102929, 8.72676343, 9.75099838, 10.81271358, 10.83078971, 9.92121378, 9.04353229, 8.84804249, 9.93844871, 10.95795999, 11.32510231, 10.58624608, 9.45974764, 8.87414693, 9.58640768, 10.598634 , 11.11499991, 10.76228583, 9.75698432, 8.98065554, 9.44689388, 10.42816038, 11.17091396, 11.00807861, 9.94053838, 9.1140563 , 8.9552398 , 9.88206657, 10.63387079, 10.92697227, 10.00724925, 8.91875369, 8.59912546, 9.34680328, 10.31753613, 10.64674645, 9.8817167 , 8.80257229, 8.23773322, 8.79169434, 9.89682222, 10.48888907, 10.25241797, 9.39400307, 8.7057619 , 8.99374914, 9.89105015, 10.74620886, 10.77312919, 9.91989239, 8.95413862, 8.87388559, 9.47038948, 10.45047886, 10.68004816, 9.99261556, 9.10365258, 8.75129197, 9.34825329, 10.44429514, 11.12300637, 10.65483865, 9.74536512, 9.15844642, 9.47802227, 10.46330973, 11.17151834, 11.12758286, 10.22367137, 9.27834142, 9.30365438, 10.18663464, 11.18485597, 11.15170387, 10.29866589, 9.11982997, 8.91104241, 9.80878568, 10.85327493, 11.20982531, 10.51675446, 9.4423296 , 8.94555971, 9.48191945, 10.33734695, 11.01616257, 10.81084773, 9.62627669, 8.92889768, 9.18181565, 10.05359308, 10.83954893, 10.93661697, 9.91016779, 9.07952059, 9.02910723, 9.85877605, 10.94195393, 11.25544372, 10.71564569, 9.73269725, 9.29290009, 9.89389186, 10.7409496 , 11.16487499, 10.70772978, 9.60656358, 8.96676045, 9.17003758, 10.237347 , 11.07078796, 10.98060372, 10.07576214, 9.16544225, 9.13707365, 9.96672701, 10.93080113, 10.93401823, 10.15791743]
