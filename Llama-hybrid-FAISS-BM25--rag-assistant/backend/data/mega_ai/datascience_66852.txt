[site]: datascience
[post_id]: 66852
[parent_id]: 66812
[tags]: 
Here, first I created the column values as a list and then assigned them to be the new dataframe's columns. However, we could do it using the columns and without creating lists. It just seems easier this way. #Initializing the new_df (df2) dataframe import pandas as pd new_columns = ['GCF', 'Genome'] new_df = pd.DataFrame(columns = new_columns) #new_df #df1.columns #creating the column GCF of the new dataframe GCF = [str(df1['BGC Class'][i])+ '_GCF' + str(df1['GCF No'][i]) for i in range(len(df1))] #creating the new column 'Genome' of the new dataframe organism = [df1['Organism'][i].replace(' ', '_') for i in range(len(df1))] #substituting ' ' by '_' BGC_name = [list(df1['BGC Name'].str.split('_'))[i][0] for i in range(len(df1))] genome = [organism[i] + '_' + BGC_name[i] for i in range(len(df1))] new_df['GCF'] = GCF new_df['Genome'] = genome Output: GCF Genome 0 PKSI_GCF1813 Streptomyces_sp_Hm106 1 NRPS_GCF1813 Streptomyces_sp_MBT13 2 PSKI_GCF1883 Listeria_sp_MBT23 3 NRPS_GCF1887 Streptomyces_sp_MBT36 The second way in which we do not create lists and change the columns' values sort of inplace, is as following: #Initializing the new_df (df2) dataframe import pandas as pd new_columns = ['GCF', 'Genome'] new = pd.DataFrame(columns = new_columns) #new_df #df1.columns BGC_name = [list(df1['BGC Name'].str.split('_'))[i][0] for i in range(len(df1))] new['GCF'] = df1['Organism'].str.replace(' ', '_')+ '_' + BGC_name new['Genome'] = df1['BGC Class']+ '_GCF'+ df1['GCF No'].astype('str') #new
