[site]: crossvalidated
[post_id]: 364126
[parent_id]: 349755
[tags]: 
Don't try to do online learning, it is not needed and does not bring any benefit in this case. Instead make many recordings of input,output pairs. Keep them to a standard length. Since there should be very little time-dependency in such a distortion pedal, keep them short. Around 100ms clips might be useful to help human evaluations. The model processing should probably be done on chunks of around 1ms, by chopping up the input data, possibly with a weighted window function. Second, characterize your recording system. Plug the audio out cable directly to your recording input, instead of through the guitar pedal. Record some input,output pairs here. Verify that frequency response is approximately linear in the hearable range. But more importantly, determine the time delay in your (recording) system. This should be removed when comparing outputs to inputs (delay compensation). This means that the model does not have to learn this time delay, and makes it suitable for actually implementing as a real-time model you can use to play later. As for the training input data, I would recommend using typical guitar playing as the primary source. Play all the styles you'd typically do, from monotonic licks to chords etc. Record some minutes of it, and then split it up into your sample size. If you don't want to record it all yourself, get music online and split into clips. The non-linearity of a guitar pedal depends a lot on volume. So for each input sample, you should record many variations with different volume levels (data augmentation). You can also augment by applying different filters, generating variations with different mixes of frequency content. System identification of guitar amplifier and distortion pedals has been researched quite a bit. Neural network approaches has been in use since EMULATING ELECTRIC GUITAR EFFECTS WITH NEURAL NETWORKS by David Sanchez Mendoza, 2005. Lots of relevant submissions to Digital Audio Effects conference (DAFX) since then.
