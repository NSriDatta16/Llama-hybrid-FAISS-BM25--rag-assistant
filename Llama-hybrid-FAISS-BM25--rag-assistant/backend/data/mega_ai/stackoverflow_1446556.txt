[site]: stackoverflow
[post_id]: 1446556
[parent_id]: 1446226
[tags]: 
this is something that occurred to me at this time, I hope you can help. be responsible for an orderly call methods of each module, and all are called in one event ready. what level is in case you need to call any module before another // Call the initial organizer of each modules var modules = (function(){ var level_0 = new Array(); var level_1 = new Array(); var level_2 = new Array(); return { add: function(method, level){ var returned = true; try{ switch(level){ case 0: level_0.push(method); break; case 1: level_1.push(method); break; case 2: level_2.push(method); break; }; }catch(ex){returned=false;} return returned; }, callAll: function(){ var returned = true; var returned_0 = true; var returned_1 = true; var returned_2 = true; try{ returned_0 = this.call(0); returned_1 = this.call(1); returned_2 = this.call(2); }catch(ex){returned=false;} return ((returned && returned_0 && returned_1 && returned_2) || false); }, call: function(level){ var returned = true; var level_call = null; try{ switch(level){ case 0: level_call = level_0; break; case 1: level_call = level_1; break; case 2: level_call = level_2; break; }; if (level_call!=null) for(xcall in level_call) level_call[xcall].call(); }catch(ex){returned=false;} return returned; } }; })(); //in each file JS with ini method in module modules.add(function(){alert("method file/module A in level 1 a");}, 1); modules.add(function(){alert("method file/module B in level 1 b");}, 1); modules.add(function(){alert("method file/module C in level 0 a");}, 0); modules.add(function(){alert("method file/module D in level 0 b");}, 0); modules.add(function(){alert("method file/module E in level 2 a");}, 2); modules.add(function(){alert("method file/module F in level 2 b");}, 2); modules.add(function(){alert("method file/module G in level 2 c");}, 2); modules.add(function(){alert("method file/module H in level 0 c");}, 0); // single call to the event ready $(function(){ //call all modules.callAll(); // OR //call in other order modules.call(0); modules.call(2); modules.call(1); });
