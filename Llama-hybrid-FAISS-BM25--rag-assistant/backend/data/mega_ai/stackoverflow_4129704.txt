[site]: stackoverflow
[post_id]: 4129704
[parent_id]: 4129543
[tags]: 
It all depends, if you can afford refactoring, meaning, you don't have other more important tasks in your queue then refactoring into "easier to read" code is always a good thing ;) It also depends in the situation. If you are part of a bigger team then refactoring could mean faster learning of your code by other developers. While refactoring sometimes you uncover issues/cases not seeing by QA or text fixture, but it is also possible give birth to other issues that may go unseen... something to keep in mind. I'd say continue refactoring a piece of code if you: don't have more important tasks in your queue you are fixing a performance related issue other team mates think your code sucks (messy code) and needs to be organized better! in this case you are the only developer, so you need to judge your own stuff you wrote 40 lines of code for something YOU KNOW could be written in 2 lines, but needed to get it out fast Messy code = declaring variables all over the place, not using object oriented principle, not encapsulating code snippets and re-writing the same code multiple times, looping everywhere! nasty joins, no comments, etc... etc... Anybody has more cases?
