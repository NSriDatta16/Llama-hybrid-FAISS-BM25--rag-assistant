[site]: datascience
[post_id]: 39714
[parent_id]: 39621
[tags]: 
Not a very clever solution though. But I managed to do some trick to make it work. I am not fully satisfied by the result but the algorithm is able exactly predict the Item based on given Composition column. from io import StringIO import json col = ['Item', 'Composition'] df = dfmin[col] df['Item'] = df['Item'].apply(lambda x: ''.join(str(x).strip('[]') if isinstance(x, list) else x)) df['Composition'] = df['Composition'].apply(lambda x: ''.join(str(x).strip('[]') if isinstance(x, list) else x)) df['Composition'] = df['Composition'].apply(lambda x: x.replace(',',' ')) df['Composition'] = df['Composition'].apply(lambda x: x.replace(' ','')) df['Composition'] = df['Composition'].apply(lambda x: x.replace("'",'')) df['Composition'] = df['Composition'].apply(lambda x: "".join(x.rstrip())) df.head() Doing this removed all spaces in the text in Composition column and it ended up becoming one long string set. df['Indexer'] = df['Composition'].factorize()[0] #df['Indexer'] Indexer_dfmin = df[['Item', 'Indexer']].drop_duplicates().sort_values('Indexer') df_to_Indexer = dict(Indexer_dfmin.values) Indexer_to_df = dict(Indexer_dfmin[['Indexer', 'Item']].values) #df['Composition'] = df['Composition'].str.split(",") df.head() I factorized the Composition column using pd.factorize(). from sklearn.feature_extraction.text import TfidfVectorizer tfidf = TfidfVectorizer(sublinear_tf=True, norm='l2', encoding='latin-1', ngram_range=(1,8), analyzer='word',lowercase=True) features = tfidf.fit_transform(dftest.Composition.values.astype('U')).toarray() labels = dftest.Indexer features.shape Using sklearn RigdeClassifierCV I was able to model the data and predict the Item name using the string of the Composition column. from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.linear_model import RidgeClassifierCV X_train, X_test, y_train, y_test = train_test_split(df['Composition'].values.astype('U'),df['Item'].values.astype('U'), random_state=42) count_vect = CountVectorizer() X_train_counts = count_vect.fit_transform(X_train) tfidf_transformer = TfidfTransformer() X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) clf = RidgeClassifierCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X_train_tfidf, y_train) Issues with this approach: 1) The model is not learning the words in the Composition column and building a vocabulary. 2) So, if I use the words with space from the Composition column the model will not be able to predict properly. 3) The accuracy can go near to 100% percent which means the model is overfit. That is why I say this is not a clever solution. I would like to get to know how to fix the mistakes and issues in my model. Appreciate some expert advice on this. Please feel free to comment. Thanks in advance.
