[site]: stackoverflow
[post_id]: 2379746
[parent_id]: 2378698
[tags]: 
The book version would break if passed in an atom or an improper list (a pair which is not a list -- something like (1 2 . 3) ) as an argument. (Note it does work with '() , of course -- not sure if TLS considers this to be an atom or not.) This makes your function actually more robust, though possibly better named eqv? / equal? than eqlist? . (I see equal? is used in eqan? to test numeric equality, but traditionally this name is attached to a universal value equality testing function.) Basically, your eqlist? works on any type of arguments under the assumptions that (1) atom? is able to tell pairs (things with car and cdr ) from non-pairs (it's the negated version of pair? ), (2) eqan? tests the equality of atoms, (3) everything is either '() or a pair or an atom. (Well, actually '() is an atom in my eyes -- and Petite Chez Scheme agrees.) The book version works on proper lists (including '() ), makes similar assumptions and disregards the possibility of encountering an improper list. I wouldn't be surprised if a more robust equality testing function was presented later on in the book, but I don't have it available to check. Anyway, the book version of eqlist? you posted seems like something meant to illustrate the basic ideas behind lists, not something you'd actually want to use in day-to-day programming. In fact, the given version of eqan? would break in an unrestricted environment where there's more atomic types of data to consider, among which at the very least strings would need to be accounted for separately, thus invalidating the assumptions listed in the second paragraph above and breaking both versions of eqlist? .
