[site]: datascience
[post_id]: 115400
[parent_id]: 74444
[tags]: 
One option is to group overlapping columns under a separate pipeline . from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.preprocessing import StandardScaler, OneHotEncoder X = pd.DataFrame({'ts_1': np.random.randint(0,1000,100), 'ts_2': np.random.randint(0,1000,100), 'n_1': np.random.randint(0,1000,100), 'n_2': np.random.randint(0,1000,100) }) dates_columns = ['ts_1', 'ts_2'] numeric_columns = ['n_1', 'n_2'] dates_pipeline = Pipeline(steps=[ ('imputer_dates', SimpleImputer(strategy='median', missing_values=0)), ('scaler', StandardScaler()) ]) column_transformer = ColumnTransformer([ ('dates_pipeline', dates_pipeline, dates_columns), ('scaler', StandardScaler(), numeric_columns) ]) X_transformed = column_transformer.fit_transform(X) print(X_transformed.shape)
