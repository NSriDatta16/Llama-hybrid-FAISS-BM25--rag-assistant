[site]: stackoverflow
[post_id]: 1238774
[parent_id]: 1238633
[tags]: 
Mike, It seems like the process has a significant amount of complexity (with the possibility of introducing more) just to avoid using MQ? There may be plenty of reasons NOT to use MQ, cost in my experience, but if you have access to it, use it with wild abandon! :) Its far easier to monitor the new MQ process than it is to write the code to introduce like capabilities. Ideally, a robust queue would prevent P1 ever really needing to know about P2, or its status. MQ should also really mitigate the need for P2 to notify P1 that its remote node went down - P1 can continue to happily queue up messages to P2 (depending on message frequency/size/storage limits). If the remote node is down for a significant amount of time, then hopefully it was a planned event and operators can shutdown P1. The administrative channel between P2 and P1 sounds like a nice to have? It also introduces additional complexity - you know your environment, but it can lead to questions like "why am I not getting messages anymore?" - turns out that a service autonomously shutdown another service. Done right, this is awesome and relieves a support burden for the operators - done wrong, it just adds more support burden. Nobody likes that guy. Could you also queue at the data tier, where storage for P2 might not be as much of an issue? Embrace the queue (MQ, MSMQ, Sql Queue)! Z
