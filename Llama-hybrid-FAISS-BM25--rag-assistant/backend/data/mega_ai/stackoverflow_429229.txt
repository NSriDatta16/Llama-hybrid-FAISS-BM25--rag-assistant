[site]: stackoverflow
[post_id]: 429229
[parent_id]: 429149
[tags]: 
Use nHibernate or another ORM that can map to POCO:-) Then you can decide to pass DTO or POCO based on how much seperation you want between your producer and consumer. The question I'd ask is are you goign to pull the data into Entities / IQueryables and then convert them to DTO's? This is a very valid pattern especially if your going to transition a service boundary and don't want to expose your domain model; however there is a trade off. A minimal performance hit depending on the size of the data but that's something you'd need to measue. Recently I had to display a list of a bunch of Organization objects in a drop downlist. Organization has lots of properties and other child objects. None of which I needed for my drop down all I needed was an ID and the name, and a couple of extra properties... Here's my HQL query to search the DB and return a list of DTO's using nHibernate: return CurrentSession.CreateQuery( "select new OrganizationListDTO(o.Id,o.Name,o.xxx,o.xxx)" + " from Organization i where i.State=:state") .SetParameter("state", state) .List (); Point here is that even if your using an ORM you can still leverage DTO's for report like queries and let it do all the heavy lifting.
