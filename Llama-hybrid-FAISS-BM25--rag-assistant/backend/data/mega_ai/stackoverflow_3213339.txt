[site]: stackoverflow
[post_id]: 3213339
[parent_id]: 3213218
[tags]: 
Here is how I have done this in the past. For the insert you can basically just write the dataset's xml representation out to a string and save it directly to a field in the database. In this case I leveraged Sql Server 2008 and an XML datatype for the database field. I think the datatype in Oracle is XMLTYPE. Insert: public static void InsertDataSet(string key, DataSet dataSet) { string xml = string.Empty; using (MemoryStream ms = new MemoryStream()) { dataSet.WriteXml(ms, XmlWriteMode.WriteSchema); ms.Position = 0; using (StreamReader sr = new StreamReader(ms)) { xml = sr.ReadToEnd(); } using (SqlServerConnection c = new SqlServerConnection(connectionString)) { c.command.CommandType = CommandType.StoredProcedure; c.command.CommandText = "some stored procedure to do the insert"; c.command.Parameters.Clear(); c.command.Parameters.Add(new SqlParameter("@key", key)); c.command.Parameters.Add(new SqlParameter("@xml", xml)); c.command.ExecuteNonQuery(); } } } Getting the dataset back out of the database is as simple as reading the xml data from the database back into a TextReader and then building a new DataSet. Get: public static DataSet GetDataSet(string key) { using (SqlServerConnection c = new SqlServerConnection(connectionString)) { c.command.CommandType = CommandType.StoredProcedure; c.command.CommandText = "some stored procedure to get the xml"; c.command.Parameters.Clear(); c.command.Parameters.Add(new SqlParameter("@key", key)); dr = c.command.ExecuteReader(); if (dr == null) { return null; } if (dr.HasRows) { while (dr.Read()) { if (dr["xml_field"] != DBNull.Value) { TextReader tr = new StringReader(dr["xml_field"].ToString()); result = new DataSet(); result.ReadXml(tr, XmlReadMode.ReadSchema); } } } } return result; } Hope this helps. Enjoy!
