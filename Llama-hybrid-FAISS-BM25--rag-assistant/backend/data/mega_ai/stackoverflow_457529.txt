[site]: stackoverflow
[post_id]: 457529
[parent_id]: 457480
[tags]: 
I try to not keep data in any string based formats. But I encountered several situations, in which it was not possible to know in advance how the structure of the data will be (e.g. it was possible for the customer/end-user to dynamically add fields). In contrast to your approach, we decided to store the data in XML, e.g. in your case this would be something similar like this: Gina HouseMatriarch This gives you the following advantages: The classes to work with the data (read/write) are already available in the framework (e.g. XmlDocument or XML serialization) you can easily exchange the data with other systems (if/when required) You can store the data in a file you can store the data in a database column (xml data type). You can even query that column when using SQL Server (although I'd try to avoid storing data in XML, that has to be queried) using XML allows to add additional fields to your data at any time Update : I'm not sure why my answer was downvoted that much - maybe it is because of the bad example. Therefore I'd like to make it clear: I would not use XML for properties such as an ID/primary key of a user, or for standard properties like "name", "email", etc. But for "extended/dynamic" properties (as described above) I still think this is an easy and elegant solution.
