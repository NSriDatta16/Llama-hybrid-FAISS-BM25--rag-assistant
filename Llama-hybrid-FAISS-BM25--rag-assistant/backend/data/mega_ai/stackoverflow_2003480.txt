[site]: stackoverflow
[post_id]: 2003480
[parent_id]: 
[tags]: 
Help loading contstants stored in serialized array using eval() and constant()

DISCLAIMER: Please read carefully as this is NOT a question about storing arrays in constants or simple eval() or serialize() techniques. This IS a question primarily about how constants work in PHP and why the constant() function is not working to convert a constant name into a constant value. Thanks. BACKGROUND: For various reasons, I started out with a flat config file for a homebrewed LAMP(PHP) CMS (in private development). Looking back this may have been misguided, and I have transitioned my variable storage into a DB table. However, the bulk of the code still depends on the CONSTs, so I use eval("define(A, B...);") to load the DB values A and B into constants. This part works fine. But it gets a bit more complicated. PROBLEM: The problem I'm having now is with constants in arrays (NB. NOT arrays in constants). I have a big, GLOBAL array called defaults that contains config settings in the format shown below. Initially, I declare: (And THIS WORKS...) Next, I define $GLOBALS['defaults'] as the following nested array: Array ( 'var_name' => Array ( 'display' => THIS_IS_A_CONSTANT, 'value' => 12, 'type' => 'int', 'params' => Array ( ... ) ), ... Lots more variables... ... ) To prevent the client (who has file system access but no direct DB access but can change certain values, including most constants, via the CMS's administrative backend) from mucking up this array structure, I serialize the array structure and store that string in the DB. On each page request, I first define all the constants (stored in the DB) using the eval(define(A,B...)), then I unserialize the array above (which was serialized and stored in the DB). However, no matter what I try I cannot get the values at $GLOBALS['defaults']['var_name']['display'] to be recognized as the values that the constants contain. Instead, the constant name shows up and NOT the constant value (in other words, my output contains THIS_IS_A_CONSTANT instead of 'abcdefg' ). Very frustrating, right? I've tried something like the following (where $arr contains the unserialized array that I fetch from the DB): foreach ($arr as $item => $contents) { $display = isset($contents['display']) ? $contents['display'] : 1; $value = constant("$display"); // This doesn't work, though it seems like it should $contents['display'] = $value; // Neither does this, no matter how much I juggle the quotation marks and backslashes eval("\$contents['display'] = constant(\"$value\");"); // or this ... eval("\$contents['display'] = $value;"); // or this ... eval("\$contents['display'] = \$value;"); // or a number of other things... } $GLOBALS['defaults'] = $arr; QUESTIONS: Has anyone dealt with this kind of situation before? Can anyone advise me how to force my constants to be recognized as CONSTANTS and not strings. Do I need to serialize my array differently? Or maybe process the unserialized array differently (after retrieving it from the DB)? Is these some combination of eval() and constant() that will allow me to do this? Why are the constants within my array behaving badly while the constants I define normally are working without problem? Any help at all would be greatly appreciated, as I've been puzzling over this for a few days now and haven't come to any solutions. All the best, Dakota.
