[site]: stackoverflow
[post_id]: 1816930
[parent_id]: 1161947
[tags]: 
It sounds like you need a way to sum the actual and target values for a list of all the employees under a certain manager as well as everyone under them, and so on, to get the totals for an entire branch. Is that correct? I wrote a recursive function to do that in SQL Server. I can post it if I am understanding the problem correctly. Here it is: CREATE FUNCTION [dbo].[ListStaff] (@Supv int) --Recursively returns tree of managed staff --select * from ListStaff(5) RETURNS @result TABLE (empid int , Name varchar(26), managedby int, SupvName varchar(26), NestLev int ) AS BEGIN DECLARE @empid int, @Name char(26), @managedby int, @SupvName char(26) SELECT @SupvName = supv.Name, @managedby = emp.managedby, @Name = emp.Name FROM yourTable emp LEFT JOIN yourTable supv ON emp.managedby = supv.empid WHERE emp.empid = @Supv ----------------------- INSERT INTO @result VALUES (@Supv, @Name, @managedby, @SupvName, @@NESTLEVEL) ----------------------- SET @empid = (SELECT MIN(emp.empid) FROM yourTable emp LEFT JOIN yourTable supv ON emp.managedby = supv.empid WHERE emp.managedby = @Supv) WHILE @empid IS NOT NULL BEGIN IF @@NESTLEVEL @Supv INSERT INTO @result SELECT * FROM ListStaff(@empid) SET @empid = (SELECT MIN(emp.empid) FROM yourTable emp LEFT JOIN yourTable supv ON emp.managedby = supv.empid WHERE emp.managedby = @Supv AND emp.empid > @empid) END RETURN END /* This draws the organizartion chart in a formatted tree. select CONVERT(CHAR(1),nestLev) + REPLICATE('-', nestLev * 4 - 4) + Name + ' is supervised by ' + SupvName FROM ListStaff(@bossid) */ /* link the results back to your table to get values like this: SELECT * FROM ListStaff(5) supv INNER JOIN yourTable ON supv.empid = yourTable.empid */
