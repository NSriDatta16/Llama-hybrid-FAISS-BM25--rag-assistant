[site]: stackoverflow
[post_id]: 168878
[parent_id]: 167131
[tags]: 
1. Considering the DAO - VO transformation; whether this is usefull depends on how Hibernate is used. If the entire Web request handling is in a single Hibernate session you should not really need separate VO's. If, however, your DAO layer opens a session to retrieve an object and closes the session before you are finished using the DAO you may get trouble with collections and references to other objects. There is a fair chance that those are lazily loaded, meaning that the Session must still be opened when requesting those properties. In short, before you start ditching those VO's have a good, hard look at you database transaction and session boundaries. 3. As for using a VO in a Form; if the VO maps nicely to the JSP I would say why not? I'm either impressed that the data model so closely matches the process it supports, and a bit suspicious that the database has not been normalized (which may or may not pose problems in the future). Going back to 1. If you use DAO's with lazy loading and collections, remember that the database session must also include the JSP phase as the DAO will be read in that phase. The service layer must have a facility to know which database objects to alter, and the id is designed to do just that. The service layer will have to retrieve the DAO from the database and write the fields from the VO in the DAO, though it obviously does not need to update the id of the DAO with the id of the VO :) What you need from the request is the id of the foreign key field. As it comes from the client you should probably check in the business logic whether an object with such an id exists. Depending on whether the VO accepts the id of the foreign object or requires an object you should then either: set the id, or get the foreign object as a VO by id using the service layer and put it in your VO, and store it using the service layer Your business layer is responsible for translations as the service layer only deals with object retrieval and storage. And either the text or the id are not objects but identifiers of the objects. The service layer may offer search facilities, but it should not need context information. And if I read your question right your VOs refer to other objects in the database by id. In that case you enter the id. If you get a String from the client you should look it up in the business layer (using the service layer) and put the id of the found object in the VO. Or, if no ID is found, return a decent error message. As a closing note; don't touch the DAO-VO thing unless you know what you're doing REALLY WELL. Hibernate is a powerfull and complex tool which is deceptively easy to use. You can very easily make mistakes and they can be very hard to find. And customers and bosses alike don't seem to appreciate the introduction of bugs in stuff that used to work. By the way; my conservatism in the DAO-VO thing come from fixing problems due to similar problems in EJB2 to Hibernate transitions. The devil is in the details, and changing how you deal with the data layer is a major refactoring even if it looks like a piece of cake.
