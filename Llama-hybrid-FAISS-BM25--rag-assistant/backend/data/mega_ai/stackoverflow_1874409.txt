[site]: stackoverflow
[post_id]: 1874409
[parent_id]: 1874208
[tags]: 
#pragma pack(push,1) template struct THeader { char msgType[1+N]; char filler[1+N]; char third[1+N]; char fourth[1+N]; }; typedef THeader Header0; typedef THeader Header1; Header1 Convert(const Header0 & h0) { Header1 h1 = {0}; std::copy(h0.msgType, h0.msgType + sizeof(h0.msgType)/sizeof(h0.msgType[0]), h1.msgType); std::copy(h0.filler, h0.filler+ sizeof(h0.filler)/sizeof(h0.filler[0]), h1.filler); std::copy(h0.third , h0.third + sizeof(h0.third) /sizeof(h0.third [0]), h1.third); std::copy(h0.fourth, h0.fourth+ sizeof(h0.fourth)/sizeof(h0.fourth[0]), h1.fourth); return h1; } #pragma pack(pop) int main(void) { cout (data); Header1 header = Convert(*header0); cout
