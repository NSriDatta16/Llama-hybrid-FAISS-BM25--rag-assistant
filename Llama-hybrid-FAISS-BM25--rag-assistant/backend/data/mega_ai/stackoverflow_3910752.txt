[site]: stackoverflow
[post_id]: 3910752
[parent_id]: 3910324
[tags]: 
The reason is that Java do not fully support so-called "Closures" - in which case the final would not be necessary - but instead have found a trick by letting the compiler generate some hidden variables which is used to give the functionality you see. If you disassemble the generated byte code you can see how the compiler does it, including the strangely named hidden variables containing copies of the final variables. It is an elegant solution to give functionality without bending the language backwards to do so. Edit: For Java 8 lambdas give a more concise way to do what was previously done with anonymous classes. The restrictions on variables have also loosened from "final" to "essentially final" - you do not have to declare it final, but if it is treated like it is final (you could add the final keyword and your code would still compile) it can be used. This is a really nice change.
