[site]: stackoverflow
[post_id]: 4867486
[parent_id]: 4867345
[tags]: 
This is an interesting approach. The problem is not that Triangle lacks a vararg constructor, but rather the fact than newInstance() can only invoke the default constructor. mschaef has proposed a reasonable approach. It does still require a static awareness of the constructor forms of each shape. This knowledge will then be hidden in the respective factories. It is probably the best solution. The problem is that you have to write a factory for each shape. However, you can write code that dynamically invokes the correct constructor using the reflection APIs. If you have lots of shapes, that will solve the problem in one place for all of them. You would obtain the Class object, and then call getDeclaredConstructors() to obtain an array of constructors. Constructor argument types can be queried by getParameterTypes() . Your code would have to find the ideal constructor based on the parameters you have. This is essentially what the compiler would have done with static types. This solution is not particularly elegant, but it does have plus points: If you write it correctly once, it will always work for any new shape that you might introduce. You can place the code in a neat utility class and never look at it again. In general, I still consider using reflection as an undesirable choice.
