[site]: stackoverflow
[post_id]: 4892522
[parent_id]: 4890247
[tags]: 
Luckily for you, I have this. In the code below the CreateForm div gets the dynamically rendered view that comes from the controller action. The AJAX call is trigged when dropdown list selection changes. I've left some other stuff in like wiring up the TinyMCE dynamically and localized resource string loading, etc. The main view: var ddlContentTypes; $(document).ready(function () { ddlContentTypes = $("#ContentTypes"); ddlContentTypes.bind("change", loadCreate); loadCreate(); }); function loadCreate() { var typeId = $("#ContentTypes option:selected").val(); $.get('~/' + typeId + '/Create?modal=true', function (data) { $.get('~/' + typeId + '/Create', function (data) { $("#CreateForm").html(data); $("fieldset textarea").each(function () { tinyMCE.execCommand('mceAddControl', false, this.id); }); }); } Ajax call ( loadCreate() in the above JS) gets routed to the controller action Create for certain Content Type. Below is the code of Create() controller action for Section content type: // // GET: /Section/Create [CanReturnModalView] [Authorize(Roles = "Administrators")] public ActionResult Create() { if (Request.IsAjaxRequest()) return PartialView("Section-CreateEditForm", new SectionViewModel()); // return ascx return View(new SectionViewModel()); // return plain aspx } Here is the Section 's content type Create view (Views/Section/Create.aspx) : And the Section-CreateEditForm.ascx control, which we also need because we render it as a part of RenderPartial() call and also return it from the controller action when the request is AJAX. This can essentially be anything you want but obviously it has to contain tag and pay attention to the form POST action URL construction. " enctype="multipart/form-data" method="post"> model.Title, Resources.Localize.Section_Title)%> model.Title) %> model.Title) %> " /> HTH
