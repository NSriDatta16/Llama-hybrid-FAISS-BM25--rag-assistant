[site]: stackoverflow
[post_id]: 3464760
[parent_id]: 152745
[tags]: 
I have done this some time back for raw images by declaring my own 2 dimensional array classes. In a normal 2D array, you access the elements like: array[2][3]. Now to get that effect, you'd have a class array with an overloaded [] array accessor. But, this would essentially return another array, thereby giving you the second dimension. The problem with this approach is that it has a double function call overhead. The way I did it was to use the () style overload. So instead of array[2][3], change I had it do this style array(2,3). That () function was very tiny and I made sure it was inlined. See this link for the general concept of that: http://www.learncpp.com/cpp-tutorial/99-overloading-the-parenthesis-operator/ You can template the type if you need to. The difference I had was that my array was dynamic. I had a block of char memory I'd declare. And I employed a column cache, so I knew where in my sequence of bytes the next row began. Access was optimized for accessing neighbouring values, because I was using it for image processing. It's hard to explain without the code but essentially the result was as fast as C, and much easier to understand and use.
