[site]: stackoverflow
[post_id]: 4777355
[parent_id]: 4777072
[tags]: 
You can do this: # find lines with authors import re # multiline string to simulate possible input text = ''' Stuff before This won't be matched... Author(s) : Firstname Lastname Firstname Lastname Firstname Lastname Firstname Lastname Other(s) : Something else we won't match More shenanigans.... Only the author names will be matched. ''' # run the regex to pull author lines from the sample input authors = re.search(r'Author\(s\)\s*:\s*(.*?)^[^\s]', text, re.DOTALL | re.MULTILINE).group(1) The above regex matches the beginning text (Author(s), whitespace, colon, whitespace) and it gives you the results below by matching all lines afterward that begin with whitespace: '''Firstname Lastname Firstname Lastname Firstname Lastname Firstname Lastname ''' You can then use the below regex to group all authors from those results # grab authors from the lines import re authors = '''Firstname Lastname Firstname Lastname Firstname Lastname Firstname Lastname ''' # run the regex to pull a list of individual authors from the author lines authors = re.findall(r'^\s*(.+?)\s*$', authors, re.MULTILINE) Which gives you the list of authors: ['Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname'] Combined example code: text = ''' Stuff before This won't be matched... Author(s) : Firstname Lastname Firstname Lastname Firstname Lastname Firstname Lastname Other(s) : Something else we won't match More shenanigans.... Only the author names will be matched. ''' import re stage1 = re.compile(r'Author\(s\)\s*:\s*(.*?)^[^\s]', re.DOTALL | re.MULTILINE) stage2 = re.compile('^\s*(.+?)\s*$', re.MULTILINE) preliminary = stage1.search(text).group(1) authors = stage2.findall(preliminary) Which sets authors to: ['Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname'] Success!
