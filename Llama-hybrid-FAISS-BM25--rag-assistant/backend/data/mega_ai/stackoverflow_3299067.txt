[site]: stackoverflow
[post_id]: 3299067
[parent_id]: 
[tags]: 
How do I make a nasty C++ program scriptable with Python and/or Lua?

I'm confronted with the task of making a C++ app scriptable by users. The app has been in development for several years with no one wasting a thought on this before. It contains all sorts of niceties like multithreading, template wizardry and multiple inheritance. As the scripting language, Python is preferred, but Lua might be accepted if it is significantly easier to implement. Question 1 From what I have learned so far, there are broadly speaking two ways to integrate Python/Lua with C++ : "extending" and "embedding". In this case, it looks like I need both. The scripting language need access to objects, methods and data from the app but needs to be called by the app once the user has written the script - without restarting anything. How is this usually done in the real world? Question 2 There seems to be a bewildering array of of manual solutions and binding generators out there, all of them less than perfect. swig, pyste, Py++, ctypes, Boost.Python sip, PyCXX, pybindgen, robin, (Cython/Pyrex, Weave) CppLua, Diluculum, Luabind, Luabridge, LuaCpp, Luna/LunaWrapper, MLuaBind, MultiScript, OOLua, SLB, Sweet Lua, lux (this list from the lua wiki) CPB, tolua, tolua++, toLuaxx, luna and again swig Most commments on these found on the web are a little out of date. For example, swig is said to be difficult in non-trivial cases and to generate incomprehensible code. OTOH, it has recently gone to v2.0. Some of the above use pygccxml to let gcc analyze the C++ code and then genarate the binding. I find this idea appealing, as gcc probably understands the code better than i do :-). Does this work well? Testing them all might easily cost me half of the time allocated for the whole project. So, which ones do you recommend?
