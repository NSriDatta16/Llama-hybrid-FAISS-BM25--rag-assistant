[site]: datascience
[post_id]: 111444
[parent_id]: 111282
[tags]: 
In this case, you can consider a payoff matrix to use average profit as your evaluation metric . It is important to mind the difference between the cost function (used in the learning process of the algorithm during training, which must be also differentiable with gradient-based optimization) and the performance metric (which is what I think you should consider in this case, your average profit for instance). In case you have the following confusion matrix: you can assign a benefit/loss per quadrant of your matrix: and in this case, your evaluation metric (to select your best model): $ Average Profit = \frac{(TN number*TN benefit + TP number*TP benefit - FN number*FN losses - FP number*FP losses)}{Number Of Predictions}$ This metric can also be used to select the optimal threshold of your model: In case you want to feed you training algorithm to an XGB in R for instance, have a look at the documentation, where you have an argument called feval, to include your custom evaluation metric function ( documentation link ): feval --> customized evaluation function. Returns list(metric='metric-name',value='metric-value') with given prediction and dtrain
