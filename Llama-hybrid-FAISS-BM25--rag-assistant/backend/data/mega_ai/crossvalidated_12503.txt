[site]: crossvalidated
[post_id]: 12503
[parent_id]: 12495
[tags]: 
You could turn your matrix of distances into raw data and input these to K-Means clustering. The steps would be as follows: Distances between your N points must be squared euclidean ones. Perform " double centering " of the matrix: From each element, substract its row mean of elements, substract its column mean of elements, add matrix mean of elements, and divide by minus 2. (The row, column, and matrix means are from the initial squared distance matrix. The vectors of row means and the column means contain, of course, the same values, because the distance matrix is symmetric. The matrix mean scalar should be based on all matrix elements, including diagonal.) $^1$ The matrix you have now is the SSCP (sum-of-squares-and-cross-product) matrix between your points wherein the origin is put at geometrical centre of the cloud of N points. (Read explanation of the double centering here .) Perform PCA (Principal component analysis) on that matrix and obtain NxN component loading matrix. Some of last columns of it are likely to be all 0, - so cut them off. What you stay with now is actually principal component scores, the coordinates of your N points onto principal components that pass, as axes, through your cloud. This data can be treated as raw data suitable for K-Means input. P.S. If your distances aren't geometrically correct squared euclidean ones you may encounter problem: the SSCP matrix may be not positive (semi)definite. This problem can be coped with in several ways but with loss of precision. $^1$ It is easy to show that the subtrahend from $d_{ij}^2$ , the [rowmean + colmean - matrixmean], equals $h_i^2+h_j^2$ of the euclidean space's law of cosines : $d_{ij}^2 = h_i^2+h_j^2-2 s_{ij}$ , where $s_{ij}$ is the scalar product similarity between the two vectors. Thus, the double centration operation is the reversing a (euclidean) distance into the corresponding angular similarity by that law. Specifically, it is a particular case of that law, the case when we put (via the specific subtrahend) the origin into the centroid of the bunch of points (the vectors' endpoints).
