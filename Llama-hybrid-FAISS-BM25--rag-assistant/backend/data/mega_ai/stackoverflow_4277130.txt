[site]: stackoverflow
[post_id]: 4277130
[parent_id]: 4275805
[tags]: 
I'm a developer with 2 years .NET experience and 1.5 years previous testing experience and an ISTQB/ISEB Foundation qualification. To answer your questions: 1: A test manager will (typically) have a test plan and awareness of the specification documents to be tested against. Using what a developer is using is a good start. If the development methodology is agile this will probably be "user story". A good way to look at the documents is to go through and look at where individual elements of functionality are specified and create steps to exercise them (see some of the functional techniques below). 2: What do you mean by "test spec"? You will need to prioritise the areas of the application that need testing and understand the coverage needed. A "Test case spec". (or test script) will fit into higher level documents (like Test Plans, and Test Strategies) can be efficiently and effectively written using some Black box (Functional) techniques including: Equivalence Partitioning , Boundary Value Analysis , Decision Tables , State Transition analysis , Use Case analysis (which could be based on a user story) to come up with scripts that contain test cases. These techniques can be looked up online. White box (Structural) testing involves an awareness of the code and includes: Statement Coverage , Decision coverage If you're are looking at a website, this may involve JavaScript; QUnit is a testing framework for automating JavaScript testing and would be useful to research. NUnit is a commonly used test framework for .NET applications (including web applications) - NUnit was ported from its Java equivanlent JUnit and has been expanded (most probably owing to the popularity of .NET). 3: I don't understand what you mean by this? A web application will need to be tested in many different ways, and contains server and client functionality that will be tested using different techniques and the testing needs will need to be analysed. It will depend on the project. As mentioned in other answers there are also other types of testing: Unit - modular testing of functions at the lowest possible levels Integration - testing functionality between different functional areas Regression - testing to ensure that previously working functionality hasn't been broken by changes System testing ( Functional ) - ensuring that the code/system under test is working as specified System testing ( Non-functional ) - ensuring that aspects of the system that may not be specified are appropriate e.g. performance, load, stress, interoperability, maintainability, reliability, portability, usability Acceptance (something called User Acceptance Testing or UAT) - ensuring that the system under test is fit for use As mentioned in other answers, you will be retesting existing defects and inclusion of these to your test scripts is a good idea. Hopefully this answer has given you a lot of food for thought and a good base for research. Testing qualifications or a role as a Junior Tester in an established team to build your understanding and experience could prove to be very useful.
