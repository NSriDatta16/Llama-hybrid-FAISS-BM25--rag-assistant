[site]: stackoverflow
[post_id]: 695811
[parent_id]: 
[tags]: 
Pitfalls of code coverage

I'm looking for real world examples of some bad side effects of code coverage. I noticed this happening at work recently because of a policy to achieve 100% code coverage. Code quality has been improving for sure but conversely the testers seem to be writing more lax test plans because 'well the code is fully unit tested'. Some logical bugs managed to slip through as a result. They were a REALLY BIG PAIN to debug because 'well the code is fully unit tested'. I think that was partly because our tool did statement coverage only. Still, it could have been time better spent. If anyone has other negative side effects of having a code coverage policy please share. I'd like to know what kind of other 'problems' are happening out there in the real-world. Thanks in advance. EDIT: Thanks for all the really good responses. There are a few which I would mark as the answer but I can only mark one unfortunately.
