[site]: stackoverflow
[post_id]: 1088906
[parent_id]: 
[tags]: 
Adding a custom dependency property to a Control Template in XAML

I have managed to get further with my read only check box after a bit of a break and now have the functionality I want in a reasonably elegant form. The problem is I have used a bit of a hack to make it work, although this is not a disaster it would be nice to do it better. To recap: I want a regular looking checkbox that does not self check when it is clicked, instead the click event triggers a background worker that later on causes a variable to be updated. This variable is bound to checkbox.ischecked and it is then updated with the new value. I would like to use a control template based on the idea here: A read-only CheckBox in C# WPF I have modified this and stripped out stuff I thought I didn't need (perhaps unwisely) and ended up with: This checkbox works as described above and I call it like this: The hack I made was to use the 'Tag' DependencyProperty to carry the data binding into the control template. This bypasses whatever mechanism is normally causing the checkbox to self check. To revert to a normal acting checkbox just change binding to Tag to a binding to IsChecked and inside the BulletDecorator set the TemplateBinding to IsChecked instead of Tag. So I guess my questions are: Have I got the wrong end of the stick? Is there a place where I can override whatever mechanism causes the box to self check? Perhaps in ControlTemplate Triggers? Is it a good idea to go around eliminating any spare XAML that I think is just being brought in from the default CheckBox or should I try and keep a complete replacement for all styles? If what I am doing is not too crazy, can I add a dependency property in XAML so that I don't have to use the Tag property? It also occurs to me that perhaps what I really want is a button control that looks like a checkbox, maybe an invisible button with the usual animated checkbox on top which I bind data to the graphic of. Any thoughts on that plan would also be very welcome. Thanks very much Ed
