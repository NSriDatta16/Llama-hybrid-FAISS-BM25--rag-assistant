[site]: stackoverflow
[post_id]: 4179462
[parent_id]: 4175718
[tags]: 
If you can use OpenGL ES 2.0, you could do this with a custom fragment shader. If you're using a framework that is built on 1.1 or are targeting devices that don't support 2.0, this won't be much help. But if you can, this is how you do it: uniform lowp sampler2D sampler; // which texture unit to use uniform lowp vec4 solidColor; varying highp vec2 fragmentTexCoord; void main() { // Get the color with an alpha of zero vec4 color = vec4(1,1,1,0) * solidColor; // Get the alpha from the texture, zero the r,g,b components vec4 alpha = vec4(0,0,0,1) * texture2D(sampler, fragmentTexCoord); // their sum is the solid color with the alpha mask of the texture gl_FragColor = color + alpha; } If you can ensure the solidColor has an alpha of zero you could skip the multiplication step.
