[site]: stackoverflow
[post_id]: 3389363
[parent_id]: 3389260
[tags]: 
Your file is organized in an unfortunate manner for Pythonic processing. Note that when you call reader.read() , you are reading the entire file into memory. Let's say this takes up X bytes. Calling split will effectively add another X bytes of memory usage, as it will create a new string for each separate string in the file. Then you call row[:x] and row[x:] , which will add ANOTHER X bytes (because the slice operator makes a copy). Then you call zip, and make a list comprehension, etc, etc. Strings and tuples are immutable data, which means you are always creating them from scratch. I would approach this problem at a lower level. Open one file descriptor and point it to the beginning of the file. Open another and have it seek to the beginning of the (na/0/1/2) values (you will know where this is by counting the spaces). Now, read one name and one value at a time, and if the value is not "na" you can write the name to an output file. If you need to write the values to the output file also, hold them in memory and write them all at once when you are done. Unfortunately this will be more difficult to code than just using the high-level functions that Python provides (you will need to write code that operates at the character level), but as you have seen there is a price to pay for those high-level functions.
