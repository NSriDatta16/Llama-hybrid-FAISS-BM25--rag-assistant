[site]: stackoverflow
[post_id]: 1195330
[parent_id]: 1195230
[tags]: 
Well, I would like to start by recommending that you bring in a consulting company that knows TDD to help your team get started. This is especially important if you don't have anyone on the team that is familiar with TDD, unit-testing, mocking frameworks, etc. I am not sure how much buy in you already have from management or the team, but you don't want your first attempt to fail, because of mistakes that could have been prevented by hiring a specialist to assist you take those first steps. Anyway, I would recommend that you start small and pick a new project that isn't extremely large. Even a small subset of a larger project would work. Use this as both a place to get the team familiarized with TDD and to show management that it is feasible. Then once the team is more versed you can pick at larger projects. As for legacy code I would recommend looking at this book: Working Effectively with Legacy Code, Michael Feathers Also I would surely recommend taking a look at this book: Art of Unit testing, Roy Osherove It might not be a TDD book, but it is great book to learn about unit-testing, mocking frameworks, and it even has a chapter on legacy code. Also it has some recommendations on how to get team and management buy in. It does talk a little about TDD, integration tests, organizing your codebase, and extensively about what makes a good unit test. All in all a great read. Hope this helps.
