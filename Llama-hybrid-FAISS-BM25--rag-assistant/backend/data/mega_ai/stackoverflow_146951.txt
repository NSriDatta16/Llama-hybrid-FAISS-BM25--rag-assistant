[site]: stackoverflow
[post_id]: 146951
[parent_id]: 146936
[tags]: 
Read Michael Feather's book "Working effectively with Legacy Code" This is a GREAT book. If you don't like that answer, then the best advice I can give would be: First, stop making new legacy code[1] [1]: Legacy code = code without unit tests and therefore an unknown Changing legacy code without an automated test suite in place is dangerous and irresponsible. Without good unit test coverage, you can't possibly know what affect those changes will have. Feathers recommends a "stranglehold" approach where you isolate areas of code you need to change, write some basic tests to verify basic assumptions, make small changes backed by unit tests, and work out from there. NOTE: I'm not saying you need to stop everything and spend weeks writing tests for everything. Quite the contrary, just test around the areas you need to test and work out from there. Jimmy Bogard and Ray Houston did an interesting screen cast on a subject very similar to this: http://www.lostechies.com/blogs/jimmy_bogard/archive/2008/05/06/pablotv-eliminating-static-dependencies-screencast.aspx
