[site]: stackoverflow
[post_id]: 3447625
[parent_id]: 3447566
[tags]: 
I advise you to look at TopCoder tutorial that have very pragmatic apporach. You will need to find out how STL priority queue works and make sure you don't have any negative edge weights in your graph. Decent full implementation can be found here . You will have to add Path vector to it and implement RecoverPath method in order to get nodes on path from source to sink. To use this solution you will also need to convert your adjacency matrix to adjacency list in following way: for (int i=0;i EDIT: If your graph is dense I would advise you to use Ford Bellman algorithm is much simpler and shouldn't be much slower. EDIT2: To calculate path you should add in the header int P[MAX]; /*array with links to parents*/ for(i=0; i Then you have to add RecoverPath method (it works only when path exists) vector RecoverPath(int src, int dest){ vector path; int v = dest; while (v != src) { path.push_back(v); v = P[v]; } path.push_back(src); std::reverse(path.begin(),path.end()); return path; }
