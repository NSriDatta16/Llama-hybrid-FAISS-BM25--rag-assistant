[site]: crossvalidated
[post_id]: 31793
[parent_id]: 31764
[tags]: 
I assume the x values are somewhat controlled and not really measurements. You shouldn't assume these to be "equivalent" to the y values, so stay away from k -means, which assumes that Euclidean distance is a sensible distance measurement. Instead, treat the x axis as a source of given similarity and the y axis as a kind of measured similarity. Try to see this as time series. The most simple method would be just to always align one "column" with the next. For example by sorting them by y value, and mapping them in an ordered way. Lowest to lowest, second lowest to second lowest etc. Maybe introduce some threshold. Do not just throw the data into some random clustering algorithm, this will not get you anywhere. Try to find a good model for your data, and try to optimize this. A more advanced approach would be to: Find the column with the lowest number of peaks. Grow both to the left and right, column by column For matching the next column, start with matching the median to the median, then align them one by one. Define the cost function $$C=\sum_i |y_{old}(i) - y_{new}(i)|$$ Try to optimize this cost function by moving the alignments one step at a time, but never criss-crossing lines and maybe also never losing lines! Proceed to the next columns outward. At the very end, maybe try another pass at optimizing the cost function outward-in. And add partial lines that disappeared somewhere. Note that on your example data set, the result will be trivial: it will map the lowest value for each x to the lowest of each other x, the highest to the highest each, and so on. It's a way too simple example.
