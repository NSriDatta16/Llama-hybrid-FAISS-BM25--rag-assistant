[site]: stackoverflow
[post_id]: 4039875
[parent_id]: 4038302
[tags]: 
Allowing the execution flow to leave main by returning a value or allowing execution to reach the end of the function is the way a program should terminate except under unrecoverable circumstances. Returning a value is optional in C++, but I typically prefer to return EXIT_SUCCESS found in cstdlib (a platform-specific value that indicates the program executed successfully). #include int main(int argc, char *argv[]) { ... return EXIT_SUCCESS; } If, however, your program reaches an unrecoverable state, it should throw an exception. It's important to realise the implications of doing so, however. There are no widely-accepted best practices for deciding what should or should not be an exception, but there are some general rules you need to be aware of. For example, throwing an exception from a destructor is nearly always a terrible idea because the object being destroyed might have been destroyed because an exception had already been thrown. If a second exception is thrown, terminate is called and your program will halt without any further clean-up having been performed. You can use uncaught_exception to determine if it's safe, but it's generally better practice to never allow exceptions to leave a destructor. While it's generally always possible for functions you call but didn't write to throw exceptions (for example, new will throw std::bad_alloc if it can't allocate enough memory), it's often difficult for beginner programmers to keep track of or even know about all of the special rules surrounding exceptions in C++. For this reason, I recommend only using them in situations where there's no sensible way for your program to continue execution. #include #include #include int foo(int i) { if (i != 5) { throw std::runtime_error("foo: i is not 5!"); } return i * 2; } int main(int argc, char *argv[]) { try { foo(3); } catch (const std::exception &e) { std::cout exit is a hold-over from C and may result in objects with automatic storage to not be cleaned up properly. abort and terminate effectively causes the program to commit suicide and definitely won't clean up resources. Whatever you do, don't use exceptions, exit , or abort / terminate as a crutch to get around writing a properly structured program. Save them for exceptional situations.
