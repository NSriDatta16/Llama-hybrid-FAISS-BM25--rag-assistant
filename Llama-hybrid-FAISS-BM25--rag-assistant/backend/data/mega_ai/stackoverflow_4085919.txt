[site]: stackoverflow
[post_id]: 4085919
[parent_id]: 4084897
[tags]: 
lack of readability and maintainability for anyone born after 1970 Are people born before 1970 better at maintaining unreadable code then? If so, that's good because I was and it can only be a selling point. before we decide whether or not to bring this person back in for round 2, I'd like to know if it has any redeeming features beyond job security for the author. The code has no one redeeming feature s . It bizarrely uses the xor swap technique whose only potential redeeming feature would be saving oner integer's worth of stack space. However, even that is negated by the five pointers defined and the unused int. It also has a gratuitous use of the comma operator. Normally, I'd also say "goto, yuck", but in this case, it has been used in quite an elegant way, once you understand the sort algorithm used. In fact, you could argue that it makes the gnome sort algorithm clearer than using an index variable (except it cannot be generalised to n elements). So there you have the redeeming feature, it makes goto look good :) As for "do you bring the candidate back for the second interview". If the code fragment was accompanied by a detailed comment explaining how the algorithm worked and the writer's motivation for using it, I'd say definitely yes. If not, I'd probably ring him up and ask those questions. NB, the code fragment uses K&R style parameter declarations. This means the author probably hasn't programmed in C for 10 to 15 years or he copied it off the Internet.
