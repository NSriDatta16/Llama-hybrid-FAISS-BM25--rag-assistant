[site]: stackoverflow
[post_id]: 4455227
[parent_id]: 4454791
[tags]: 
You probably want to have your query and the 5 assignments above that outside of the foreach. Instead in a new loop which only executes once for every item instead of 5 times. Your indentation even suggests the same however your brackets do not. Currently it is only assigning one value each time and executing a new query. After 5 times all the variables are assigned and the last inserted row finally has everything proper. error_reporting(E_ALL); $items = array(); foreach($yourArr as $k => $v) { // check here if the variable is one you need list($type, $num) = explode('_item_', $k); $items[$num][$type] = $v; } foreach($items as $item) { $pnr = mysql_real_escape_string($item['pnr']); $pkt = mysql_real_escape_string($item['pkt']); $desc = mysql_real_escape_string($item['desc']); $qty = mysql_real_escape_string($item['qty']); $price = mysql_real_escape_string($item['price']); $eintragen = mysql_query("INSERT INTO rechnungspositionen (artikelnummer, menge, artikel, beschreibung,preis) VALUES ('$pnr', '$qty', '$pkt', '$desc', '$price')"); } Switching on your error level to E_ALL would have hinted in such a direction, among else: unquoted array-keys: if a constant of the same name exists your script will be unpredictable. unescaped variables: malformed values or even just containing a quote which needs to be there will fail your query or worse. na√Øve exploding: not each $_POST-key variable will contain the string item and your list will fail, including subsequent use of $num
