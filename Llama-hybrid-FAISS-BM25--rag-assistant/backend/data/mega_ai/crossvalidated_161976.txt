[site]: crossvalidated
[post_id]: 161976
[parent_id]: 
[tags]: 
Experimental design for high dimensional model

I am running a computer model with a lot of inputs ( > thousands). I am not familiar with this area, so may I ask for any instructions/directions on how to make design on such high dimensional space? For example, something like Latin Hypercube design (high-dimensional version)... More details are described below. Many thanks! Basically, the computer model can be expressed as $y=f(\mathbf{x})$, where $\mathbf{x}=(x_1,x_2,...,x_p)$ are the $p$-dimensional input. Since running the simulator $f(\cdot)$ is computationally expensive, we are trying to build emulator for it, i.e. a statistical surrogate of the simulator. Giving $n$ training samples $(\mathbf{x}_1,y_1),...,(\mathbf{x}_n,y_n)$, we can bulid $\tilde{f}$ which approximate or interpolate $f$, then for any new input $\mathbf{x}_{new}$, the output can be approximated with $\tilde{f}(\mathbf{x}_{new})$ which is very cheap to evaluate. In the application of emulation, we usually want to make good design of the training samples $(\mathbf{x}_1,y_1),...,(\mathbf{x}_n,y_n)$, as we do not want to run many times of simulation while the samples should have good coverage of the possible input space to make the emulator more accurate. For example, Latin Hypercube sampling design is often used. But in my case, the dimension of input space $p$ is very large, the usual LHS design is not applicable (or not?). It is intuitive that as $p$ increases, we need more samples to cover the whole input space well. However, we found that we can do some dimension reduction on the input space $\mathbf{x}$, that is to find $d$-dimensional space $R(\mathbf{x})$, where $d$ is much smaller saying less than $10$ or $20$. In this sense, we do not need too many training samples to cover the low-dimensional space $R(\mathbf{x})$ well. However, how to design is still the problem. We can design on $R(\mathbf{x})$ using e.g. the usual LHS design. But (1) we have to run the computer model some times to estimate the $R(\mathbf{x})$ - we have to run computer model before making design (which is different from the usual case where we make design then run the computer model on the design points) (2) even we can make design on $R(\mathbf{x})$, we cannot apply it directly as we have to run the computer model with $\mathbf{x}$ not $R(\mathbf{x})$ - how to transform the design points back to $\mathbf{x}$. Thanks!
