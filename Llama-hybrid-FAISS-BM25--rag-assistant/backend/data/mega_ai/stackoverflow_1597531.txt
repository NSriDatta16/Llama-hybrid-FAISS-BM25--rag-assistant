[site]: stackoverflow
[post_id]: 1597531
[parent_id]: 
[tags]: 
Dependency Injection and .NET Attributes

I have a couple of method attributes which do some logging. Our logging code sits behind an interface (ILog) and I'd like it if the attributes were only dependent upon that interface as opposed to an implementation. This isn't really about testability or dependency inversion so much as it is about keeping the coupling of components clean. An example would be where we have a web (Mvc) specific attribute as follows: HandleExceptionAttribute : FilterAttribute, IExceptionFilter { public void OnException(ExceptionContext context) { LogFactory.CreateInstance().Info("message here", "log entry type"); } } LogFactory is dependant upon the concrete implementation Log.cs. This has the unfortunate effect of coupling my Web DLL to the DLL containing the concrete implementation - making the overall system more rigid and fragile. Any other location where such a dependency becomes apparent we just use our IOC container to inject it. This is exactly what I'd like to do now with the attribute but I'm not really sure how to! So, my question is: How can a concrete dependency be injected into a .NET Framework attribute behind an interface (preferably via an IOC container like StructureMap - but anything that works will be fine)?
