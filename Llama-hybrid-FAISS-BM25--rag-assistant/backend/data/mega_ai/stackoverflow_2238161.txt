[site]: stackoverflow
[post_id]: 2238161
[parent_id]: 2229191
[tags]: 
I had a chance to work on this this morning (we are having a 2nd blizzard for the last 3 days). You are right, if you try to redraw the entire figure in the on_motion, it messes up the animation of the yellow rectangle. The key is to also blit the line on the master sub plot. Try this code out: import datetime import numpy as np import sys import time import wx import matplotlib from matplotlib.figure import Figure import matplotlib.dates as mdates import matplotlib.ticker as mtickers from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas import matplotlib.patches as mpatches class DraggableRectangle: lock = None def __init__(self, rect, master, xMin, xMax): self.rect = rect self.press = None self.slave_background = None self.master_background = None self.xMax = xMax self.xMin = xMin self.master = master self.master_line, = self.master.get_lines() def connect(self): self.cidpress = self.rect.figure.canvas.mpl_connect('button_press_event', self.on_press) self.cidrelease = self.rect.figure.canvas.mpl_connect('button_release_event', self.on_release) self.cidmotion = self.rect.figure.canvas.mpl_connect('motion_notify_event', self.on_motion) def on_press(self, event): if event.inaxes != self.rect.axes: return if DraggableRectangle.lock is not None: return contains, attrd = self.rect.contains(event) if not contains: return x0, y0 = self.rect.xy self.press = x0, y0, event.xdata, event.ydata DraggableRectangle.lock = self canvas = self.rect.figure.canvas axes = self.rect.axes # set up our animated elements self.rect.set_animated(True) self.master_line.set_animated(True) self.master.xaxis.set_visible(False) #we are not animating this canvas.draw() # backgrounds for restoring on animation self.slave_background = canvas.copy_from_bbox(self.rect.axes.bbox) self.master_background = canvas.copy_from_bbox(self.master.axes.bbox) axes.draw_artist(self.rect) canvas.blit(axes.bbox) def on_motion(self, event): if DraggableRectangle.lock is not self: return if event.inaxes != self.rect.axes: return x0, y0, xpress, ypress = self.press dx = event.xdata - xpress dy = 0 if x0+dx > self.xMax: self.rect.set_x(self.xMax) elif x0+dx
