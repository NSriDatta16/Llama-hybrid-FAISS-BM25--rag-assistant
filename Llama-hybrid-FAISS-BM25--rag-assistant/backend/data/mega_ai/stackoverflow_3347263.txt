[site]: stackoverflow
[post_id]: 3347263
[parent_id]: 3345933
[tags]: 
Interesting question. Let me try to answer... Is it ok to use compare strings here (checking whether "en" exists as a substring)? You could something like this. Note, I am just providing a way that does not use strings, however, I think that in this case substring approach will also work since its simpler. CultureInfo enCulture = new CultureInfo("en"); // use "de" var langPref = Request.UserLanguages[0]; var userCulture = CultureInfo.GetCultureInfo(langPref); var baseCulture = CultureInfo.GetCultureInfo(cult.TwoLetterISOLanguageName); // get the base culture var isSame = baseCulture.Equals(enCulture); What about using the Headers["Accept-Language"] . Section 14.4 Accept-Language of RFC 2616. There may be a bit more work involved using this, but off hand it seems that that it can hold more valuable information. Do we have to take the order into account or would you just disregard it? The UserLanguages array is sorted by preference ( MSDN ). Having said that, I would assume that each browser has its own specific way to create the Language String (I stand under correction, but I think that FF4 is considering removal of this part of the user-agent string). You could check each language and decide when the correct language is found using the approach described above. Am I overcomplicating this? The problem is though that IE and Firefox (and others) have different strings for regional settings (for instance, "sl" in Firefox and "sl-SI" in IE8) To me localisation is tricky. I would suggest having read through RFC 1766 and RFC 2616 (HTTP Protocol, Section 3.10 . I hope this helps.
