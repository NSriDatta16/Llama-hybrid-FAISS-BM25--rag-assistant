[site]: stackoverflow
[post_id]: 138259
[parent_id]: 137753
[tags]: 
One word of warning. The OrderedDictionary has really bad performance characteristics for most operations except insertion and lookup: Both removal and modification of a value may require a linear search of the whole list, resulting in runtime O ( n ). (For modification, this depends on whether access occurred by index or by key.) For most operations with reasonable amounts of data, this is completely inacceptable. Furthermore, the data structure stores elements both in a linear vector and in a hash table, resulting in some memory overhead. If retrieval by index doesn't happen too often, a SortedList or SortedDictionary will have much better performance characteristics (access by index can be achieved through the ElementAt extension method). If, on the other hand, access by index is the norm, then stop using dictionary data structures alltogether and simply store your values in a List > . Although this means a linear search for access by key, all other operations are very cheap and overall performance is hard to beat in practice. /EDIT: Of course, the latter is also a dictionary data structure in the theoretical sense. You could even encapsulate it in a class implementing the appropriate interface.
