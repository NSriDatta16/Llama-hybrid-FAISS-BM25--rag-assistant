[site]: crossvalidated
[post_id]: 625292
[parent_id]: 624737
[tags]: 
The simplest way to do this is to use simulation. You can generate future sample paths from the daily model, and then combine the historical data and simulated futures to create the forecast distributions. The following code works with the fable package. I've added some noise to your artificial data so you can see the effect more easily when converting from daily to monthly. # cross validated question library(fpp3) #> ── Attaching packages ─────────────────────────────────────── fpp3 0.5.0.9000 ── #> ✔ tibble 3.2.1 ✔ tsibble 1.1.3 #> ✔ dplyr 1.1.2 ✔ tsibbledata 0.4.1.9000 #> ✔ tidyr 1.3.0 ✔ feasts 0.3.1.9000 #> ✔ lubridate 1.9.2 ✔ fable 0.3.2.9000 #> ✔ ggplot2 3.4.3 ✔ fabletools 0.3.3.9000 #> ── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ── #> ✖ lubridate::date() masks base::date() #> ✖ dplyr::filter() masks stats::filter() #> ✖ tsibble::intersect() masks base::intersect() #> ✖ tsibble::interval() masks lubridate::interval() #> ✖ dplyr::lag() masks stats::lag() #> ✖ tsibble::setdiff() masks base::setdiff() #> ✖ tsibble::union() masks base::union() repro_data mutate( obs = 1:84 + rnorm(84, sd=20), explanatory_var = 1:84 + 10 ) #> Using `date` as index variable. # it is trivial to model the underlying daily series tslm_fit model(tslm = TSLM(obs ~ explanatory_var)) explanatory_scenarios mutate(explanatory_var = 84:(84 + 37) + 10), # trend reversing scenario decrease = new_data(repro_data, 38) |> mutate(explanatory_var = 84:(84 - 37) + 10) ) # Daily forecasts thru september fcast1 forecast(new_data = explanatory_scenarios) Increase nsim below to something larger. At least 1000. # Generate future sample paths nsim generate(new_data = explanatory_scenarios, times = nsim) |> as_tibble() |> # Add in historical data to each sample path bind_rows( expand_grid( date = unique(repro_data$date), .scenario = names(explanatory_scenarios), .model = colnames(tslm_fit), .rep = as.character(seq(nsim)) ) |> left_join(repro_data |> transmute(.sim = obs), by = "date") ) |> # Compute monthly averages mutate(month = yearmonth(date)) |> group_by(month, .scenario, .model, .rep) |> summarise(.sim = mean(.sim), .groups = "drop") |> # Nest replicates nest(.sim = .sim, .by = c("month", ".scenario", ".model")) |> # Create forecast distributions group_by(month, .scenario,.model) |> mutate( .sim = distributional::dist_sample(list(unlist(.sim))), .mean = mean(.sim) ) |> ungroup() |> # Create fable as_fable( index = month, response = ".sim", distribution = .sim, key = c(.scenario, .model) ) # Daily forecasts autoplot(fcast1) + geom_line(data=repro_data, aes(y=obs)) # Monthly forecasts autoplot(fcast2) + geom_line(data = fcast2, aes(x=month, y=.mean)) Created on 2023-08-30 with reprex v2.0.2
