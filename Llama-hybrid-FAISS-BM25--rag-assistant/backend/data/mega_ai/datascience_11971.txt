[site]: datascience
[post_id]: 11971
[parent_id]: 11970
[tags]: 
There is an awesome library called MPLD3 that generates interactive D3 plots. This code produces an HTML interactive plot of the popular iris dataset that is compatible with Jupyter Notebook. When the paintbrush is selected, it allows you to select a subset of data to be highlighted among all of the plots. When the cross-arrow is selected, it allows you to to mouseover the data point and see information about the original data. This functionality is very useful when doing exploratory data analysis. import matplotlib.pyplot as plt import numpy as np import pandas as pd import seaborn as sb import mpld3 from mpld3 import plugins %matplotlib inline iris = sb.load_dataset('iris') from sklearn.preprocessing import StandardScaler X = pd.get_dummies(iris) X_scal = StandardScaler().fit_transform(X) dim = 3 from sklearn.decomposition import PCA pca = PCA(n_components = dim) Y_sklearn = pca.fit_transform(X_scal) # Define some CSS to control our custom labels css = """ table { border-collapse: collapse; } th { color: #ffffff; background-color: #000000; } td { background-color: #cccccc; } table, th, td { font-family:Arial, Helvetica, sans-serif; border: 1px solid black; text-align: right; } """ fig, ax = plt.subplots(dim,dim, figsize=(6,6)) fig.subplots_adjust(hspace=.4, wspace=.4) tooltip = [None]*dim N = 200 index = np.random.choice(range(Y_sklearn.shape[0]),size=N) for m in range(dim): for n in range(m+1): ax[m,n].grid(True, alpha=0.3) scatter = ax[m,n].scatter(Y_sklearn[index,m],Y_sklearn[index,n],alpha=.05) labels = [] for i in index: label = X.ix[[i], :].T.astype(int) label.columns = ['Row {0}'.format(X.index[i])] labels.append(str(label.to_html())) ax[m,n].set_xlabel('Component ' + str(m) ) ax[m,n].set_ylabel('Component ' + str(n) ) #ax[m,n].set_title('HTML tooltips', size=20) tooltip[m] = plugins.PointHTMLTooltip(scatter, labels, voffset=20, hoffset=20, css=css) plugins.connect(fig, tooltip[m]) plugins.connect(fig, plugins.LinkedBrush(scatter)) test = mpld3.fig_to_html(fig=fig) with open("Output.html", "w") as text_file: text_file.write(test) See it in action on my blog . Update [July 9, 2016]: I just found out that Plot.ly has an offline mode and is now open source. It has a lot of the bells and whistles prepackaged, but MPLD3 may still be appropriate in some cases.
