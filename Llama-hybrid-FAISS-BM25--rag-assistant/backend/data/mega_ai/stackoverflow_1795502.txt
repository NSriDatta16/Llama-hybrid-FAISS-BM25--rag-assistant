[site]: stackoverflow
[post_id]: 1795502
[parent_id]: 1795438
[tags]: 
Edit: It's 2022. If you are interested in detailed coverage on the load and execution of a web page and how the browser works, you should check out https://browser.engineering/ (open sourced at https://github.com/browserengineering/book ) According to your sample, h2{font-wight:bold;} $(document).ready(function(){ $("#img").attr("src", "kkk.png"); }); roughly the execution flow is about as follows: The HTML document gets downloaded The parsing of the HTML document starts HTML Parsing reaches jquery.js is downloaded and parsed HTML parsing reaches abc.js is downloaded, parsed and run HTML parsing reaches abc.css is downloaded and parsed HTML parsing reaches ... Internal CSS rules are parsed and defined HTML parsing reaches ... Internal Javascript is parsed and run HTML Parsing reaches abc.jpg is downloaded and displayed HTML Parsing reaches kkk.js is downloaded, parsed and run Parsing of HTML document ends Note that the download may be asynchronous and non-blocking due to behaviours of the browser. For example, in Firefox there is this setting which limits the number of simultaneous requests per domain. Also depending on whether the component has already been cached or not, the component may not be requested again in a near-future request. If the component has been cached, the component will be loaded from the cache instead of the actual URL. When the parsing is ended and document is ready and loaded, the events onload is fired. Thus when onload is fired, the $("#img").attr("src","kkk.png"); is run. So: Document is ready, onload is fired. Javascript execution hits $("#img").attr("src", "kkk.png"); kkk.png is downloaded and loads into #img The $(document).ready() event is actually the event fired when all page components are loaded and ready. Read more about it: http://docs.jquery.com/Tutorials:Introducing_$(document).ready() Edit - This portion elaborates more on the parallel or not part: By default, and from my current understanding, browser usually runs each page on 3 ways: HTML parser, Javascript/DOM, and CSS. The HTML parser is responsible for parsing and interpreting the markup language and thus must be able to make calls to the other 2 components. For example when the parser comes across this line: a hypertext link The parser will make 3 calls, two to Javascript and one to CSS. Firstly, the parser will create this element and register it in the DOM namespace, together with all the attributes related to this element. Secondly, the parser will call to bind the onclick event to this particular element. Lastly, it will make another call to the CSS thread to apply the CSS style to this particular element. The execution is top down and single threaded. Javascript may look multi-threaded, but the fact is that Javascript is single threaded. This is why when loading external javascript file, the parsing of the main HTML page is suspended. However, the CSS files can be download simultaneously because CSS rules are always being applied - meaning to say elements are always repainted with the freshest CSS rules defined - thus making it unblocking. An element will only be available in the DOM after it has been parsed. Thus when working with a specific element, the script is always placed after, or within the window onload event. Script like this will cause error (on jQuery): /* */ Hello World Because when the script is parsed, #mydiv element is still not defined. Instead this would work: Hello World /* */ OR /* */ Hello World
