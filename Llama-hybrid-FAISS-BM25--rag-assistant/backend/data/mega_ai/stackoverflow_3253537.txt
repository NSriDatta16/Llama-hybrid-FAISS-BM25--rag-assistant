[site]: stackoverflow
[post_id]: 3253537
[parent_id]: 3253383
[tags]: 
The two RE patterns of interest seem to be...: p1 = r'^---- ([^(]+) \(([^)]+)\) changed status from (\w+) to (\w+) (\S+) (\S+) ----$' p2 = r'^---- ([^(]+) \(([^)]+)\) became (\w+) (\S+) (\S+) ----$' so I'd do: import csv, re, sys # assign p1, p2 as above (or enhance them, etc etc) r1 = re.compile(p1) r2 = re.compile(p2) data = [] with open('somefile.txt') as f: for line in f: m = p1.match(line) if m: data.append(m.groups()) continue m = p2.match(line) if not m: print>>sys.stderr, "No match for line: %r" % line continue listofgroups = m.groups() listofgroups.insert(2, 'NaN') data.append(listofgroups) with open('result.csv', 'w') as f: w = csv.writer(f) w.writerow('UserName/ID Previous Status New Status Date Time'.split()) w.writerows(data) If the two patterns I described are not general enough, they may need to be tweaked, of course, but I think this general approach will be useful. While many Python users on Stack Overflow intensely dislike REs, I find them very useful for this kind of pragmatical ad hoc text processing. Maybe the dislike is explained by others wanting to use REs for absurd uses such as ad hoc parsing of CSV, HTML, XML, ... -- and many other kinds of structured text formats for which perfectly good parsers exist! And also, other tasks well beyond REs' "comfort zone", and requiring instead solid general parser systems like pyparsing . Or at the other extreme super-simple tasks done perfectly well with simple strings (e.g. I remember a recent SO question which used if re.search('something', s): instead of if 'something' in s: !-). But for the reasonably broad swathe of tasks (excluding the very simplest ones at one end, and the parsing of structured or somewhat-complicated grammars at the other) for which REs are appropriate, there's really nothing wrong with using them, and I recommend to all programmers to learn at least REs' basics.
