[site]: stackoverflow
[post_id]: 690149
[parent_id]: 689943
[tags]: 
I usually use some variation of the following example, depending on the environment of course: My basic helper methods that I call throughout my code public static SqlCommand CreateStoredProcCmd(string name, SqlConnection con) { var cmd = new SqlCommand(name, con); cmd.CommandType = CommandType.StoredProcedure; return cmd; } public static void AddParams(this SqlCommand cmdObject, Params SqlParameter[] parameters) { foreach(SqlParameter param in parameters) { cmdObject.Parameters.add(param); } } /* Any overloaded methods to create params receiving my param definitions in any manner that the usual new SqlParameter() constructor doesn't handle */ public static SqlParameter CreateSqlParam(string ParamName, SqlDbType ParamType, object value) { return CreateSqlParam(ParamName, ParamType, ParameterDirection.Input, value); } public static SqlParameter CreateSqlParam(string ParamName, SqlDbType ParamType, ParameterDirection ParamDir) { return CreateSqlParam(ParamName, ParamType, ParamDir, null; } public static SqlParameter CreateSqlParam(string ParamName, SqlDbType ParamType, ParameterDirection ParamDir, object value) { var parm = new SqlParameter(ParamName, ParamType); parm.Direction = ParamDir; parm.Value = value; return parm; } Now here's how I set up my stored procs and add all my parameters elegantly public static string DoStuff() { using (var oCon = new SqlConnection("MyConnectionString")) { oCon.Open(); var oCmd = CreateStoredProcCmd("sp_Name", oCon).AddParams( CreateSqlParam("Param1", SqlDBType.Int, 3), CreateSqlParam("Param2", SqlDBType.VarChar, "Hello World"), CreateSqlParam("Param3", SqlDBType.VarChar, ParameterDirection.Output) ); oCmd.Prepare(); oCmd.ExecuteNonQuery(); object outVal = oCmd.Parameters["Param3"]; return null != outVal ? outVal.ToString() : String.Empty; } }
