[site]: stackoverflow
[post_id]: 4491073
[parent_id]: 
[tags]: 
Jquery Dialog issue

In order to use jquery UI dialog module with use of $.extend() method , I wrote this: User.confirmationDialog = function(options) { if(undefined === options.selector) { return false; } this.close = function() { modal.dialog('close'); } this.forward = function() { if(undefined !== trigger.attr('href')) { document.location.href = trigger.attr('href'); } } var modalButtons = {}; if(undefined !== options.buttons) { for(var buttonTitle in options.buttons) { modalButtons[buttonTitle] = (function(e, f) { return function() { e.call(f); } })(options.buttons[buttonTitle], this); } delete options.buttons; } var modalHtmlElementId = 'confirmDialog'; if(undefined !== options.id) { modalHtmlElementId = options.id; delete options.id; } var modalOptions = jQuery.extend({ autoOpen: false, width: 410, height: 'auto', minHeight: false, dialogClass: 'modalDefault', modal: true, resizable: false, draggable: false, close: function() { bindTriggers(); }, open: function() { unbindTriggers(); }, buttons: modalButtons }, options || {}); var modal = jQuery(' ', {'id': modalHtmlElementId}); if(undefined !== options.text) { modal.html(options.text); } modal.dialog(modalOptions); var trigger = null; var onTriggerClick = function(e) { e.preventDefault(); trigger = jQuery(e.target); if(undefined !== options.beforeOpen) { options.beforeOpen.call(trigger, modal, e); } modal.dialog('open'); }; //bind custom event to current options.selector elements var bindTriggers = function() { jQuery(options.selector).live('click', onTriggerClick); } //unbind custom event to current options.selector elements var unbindTriggers = function() { jQuery(options.selector).die('click', onTriggerClick); } //First init: bind custom event listener on option.selector bindTriggers(); } /* * * @required User.confirmationDialog */ User.singleBtnDialog = function (options) { if(undefined === options.selector) return false; var text= options.text, ok = options.okBtnTxt, dialogButton = {}; dialogButton[ok] = function() { this.forward(); }; var modalOptions = jQuery.extend({ selector: options.selector, text : text, closeOnEscape: false, open: function(event, ui) { jQuery(".ui-dialog-titlebar-close").hide() }, buttons: dialogButton }, options || {}); User.confirmationDialog(modalOptions); } User.twoBtnDialog = function(options) { if(undefined === options.selector) return false; var text= options.text, ok = options.okBtnTxt, cancel = options.cancelBtnTxt, dialogButtons = {}; dialogButtons[ok] = function() { forward(); }; dialogButtons[cancel] = function() { close(); }; var modalOptions = jQuery.extend({ selector: options.selector, text: text, buttons: dialogButtons }, options || {}); User.confirmationDialog(modalOptions); }; User.ajaxContentDialog = function(options) { if(undefined === options.selector) return false; var modalOptions = jQuery.extend({ selector: options.selector, beforeOpen: function(modal, e) { e.stopPropagation(); jQuery.ajax({ async: false, type: 'GET', url: this.attr('href'), success: function(data, textStatus, XMLHttpRequest) { modal.html(data); } }); } }, options || {}); User.confirmationDialog(modalOptions); }; Frontend, i'm actually binding any of the 3 methods (singbutton, 2buttons, or ajax) this way : [User.singleBtnDialog, { okBtnTxt: 'Ok', text: 'blablablablabl', selector: '.addToFav'}], [User.twoBtnDialog, { okBtnTxt: 'Ok', cancelBtnTxt: 'Ablehnen', text: 'blablablablabl', selector: '.topicOpenClose'}], My issue is quite simple, yet I cannot seem to resolve it easily : event is well binded on each of my selectors, buttons are created properly, yet, when clicking on the 'ok' button, I get a trigger is null [Break On This Error] if(undefined !== trigger.attr('href')) error. I suspect some scope misunderstanding, but can't seem to find the correct solution. Thanks for the help, greatly appreciated.
