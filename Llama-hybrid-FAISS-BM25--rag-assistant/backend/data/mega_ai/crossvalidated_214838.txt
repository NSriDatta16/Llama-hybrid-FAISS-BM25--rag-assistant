[site]: crossvalidated
[post_id]: 214838
[parent_id]: 138392
[tags]: 
One option: For each cluster, estimate a distribution over time series, using the data assigned to that cluster as training points. This gives $P(X_t \mid C)$, where $X_t$ is a time series from $0$ to $t$, and $C$ is the cluster. You'll need a separate distribution for every value of $t$. You could use a simple multivariate Gaussian (probably with some constraints on the covariance matrix). Or, you could use some kind of temporal model. Estimate the prior probability of each cluster as the fraction of points assigned to that cluster in your original data set. This gives $P(C)$. Given a new time series $x_t$, the goal is to calculate the probability of membership in each cluster, $P(C \mid X=x_t)$. Use Baye's rule: $$P(C \mid X=x_t) = \frac{P(X=x_t \mid C) p(C)}{P(X=X_t)}$$ You can just calculate the numerator for each class, then normalize so that the sum is 1. Alternatively: Consider the cluster ids as class labels. Train your favorite probabilistic classifier on the original set of time series and corresponding cluster ids. You'll need to train a different classifier for each choice of $t$. Feed each new time series $x_t$ to the corresponding classifier, which will output the membership probabilities $P(C \mid X=x_t)$.
