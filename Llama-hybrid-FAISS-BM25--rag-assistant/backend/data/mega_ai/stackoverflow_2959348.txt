[site]: stackoverflow
[post_id]: 2959348
[parent_id]: 2794638
[tags]: 
I loved the answer from icio, but I prefer to have arrays of arrays, rather than arrays of objects. Here is his script modified to work without making objects: '; $categories = Taxonomy::getTopCategories(); print_r($categories); echo ' '; class Taxonomy { public static function getTopCategories() { return self::getCategories('parent_taxonomycode_id = 0'); } public static function getCategories($where = '') { if ($where) $where = " WHERE $where"; $result = mysql_query("SELECT * FROM taxonomycode $where"); $categories = array(); // while ($category = mysql_fetch_object($result, 'Category')) while ($category = mysql_fetch_array($result)){ $my_id = $category['id']; $category['children'] = Taxonomy::getCategories("parent_taxonomycode_id = $my_id"); $categories[] = $category; } mysql_free_result($result); return $categories; } } I think it fair to note that both my answer, and icios do not address your question directly. They both rely on having a parent id link in the main table, and make no use of the closure table. However, recursively querying the database is definitely the way to do, but instead of recursively passing the parent id, you have to pass in the parent id AND the level of the depth (which should increase by one on each recursion) so that the queries at each level can use parent + depth to get the direct parent information from the closure table rather than having it in the main table. HTH, -FT
