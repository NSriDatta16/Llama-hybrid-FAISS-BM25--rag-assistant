[site]: stackoverflow
[post_id]: 4333968
[parent_id]: 4333889
[tags]: 
The first is O(NÂ²), because you iterate over the array once for each outer iteration. The second is O(N log N), because you are sorting first. The last is O(N), because you iterate over the array in a single pass with no loop inside each iteration. Try this: case 1: var max = array.Max(x => x.value); array.First(x => x.value == max).Dump(); break; It should now be comparable with the third case, though not quite, since you have to traverse the array 1.5 times, on average (assuming only one element has the max value).
