[site]: stackoverflow
[post_id]: 5493531
[parent_id]: 5453625
[tags]: 
When FluentNHibernate is automapping, it uses table-per-concrete-class for mapping inheritance hierarchies. Since Organism and Animal are both concrete types, it generates two tables, OrganismTable and AnimalTable. OrganismTable stores all the properties common with all Organisms. AnimalTable only stores the properties added by the Animal subclass. The PK on AnimalTable is also a FK to OrganismTable. Hence it being affected by your FK convention. Note that PKNameConvention is only called for Organism and not for Animal. Similarly FKColumnNameConvention is only called by Animal. Because the Animal FK is only used internally to hook up the inheritance hierarchy, the property is null. Hence you're getting OrganismId as the FK name. To set this PK/FK, you need to use an IJoinedSubclassConvention. (I've included your TableNameConvention and PrimaryKeyNameConvention for completeness.) public class TableNameConvension : IClassConvention, IClassConventionAcceptance { public void Apply(IClassInstance instance) { instance.Table(instance.EntityType.Name + "Table"); } public void Accept(IAcceptanceCriteria criteria) { criteria.Expect(x => x.TableName, Is.Not.Set); } } public class PrimaryKeyNameConvention : IIdConvention { public void Apply(IIdentityInstance instance) { instance.Column(instance.EntityType.Name + "Id"); } } public class JoinedSubclassIdConvention : IJoinedSubclassConvention { public void Apply(IJoinedSubclassInstance instance) { instance.Table(instance.EntityType.Name + "Table"); instance.Key.Column(instance.EntityType.Name + "Id"); } } This generates: OrganismTable OrganismId AnimalTable AnimalId with a FK from AnimalTable.AnimalId to OrganismTable.OrganismId. Please note that table-per-concrete-class is not my preferred choice for inheritance mapping due to the number of joins required when querying entities. Often table-per-subclass or table-per-class-hierarchy are better choices. I'll leave it as an exercise for the reader to investigate the differences in the NHibernate documentation on inheritance strategies .
