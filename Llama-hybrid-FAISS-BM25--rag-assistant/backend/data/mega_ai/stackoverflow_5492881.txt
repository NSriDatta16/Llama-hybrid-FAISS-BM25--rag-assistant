[site]: stackoverflow
[post_id]: 5492881
[parent_id]: 
[tags]: 
Too Much Abstraction/Interfaces

I am in the process of designing my data access code, the data is going to be stored in RavenDB, and I am trying to see if my current design has too much abstraction with the number of interfaces I am going to have. I am going to have DTOs that will just hold the data and then I am going to have Entity (or Model, Business, or whatever you call them) objects that will have extra functionality. I am also going to have an interface per entity defining what data it needs to have. So for example: interface IUser { string Id { get; } string Username { get; } string Password { get; } bool ResetPassword { get; } } class UserDTO : IUser { public string Id { get; set; } public string Username { get; set; } public string Password { get; set; } public UserDTO() { Id = null; Username = null; Password = null; ResetPassword = false; } } class User : IUser { public string Id { get; set; } public string Username { get; set; } public string Password { get; set; } public User() { Id = null; Username = null; Password = null; ResetPassword = false; } public User(IUser user) { Id = user.Id; Username = user.Username; Password = user.Password; ResetPassword = user.ResetPassword; } public ResetPassword() { Id = null; Username = null; Password = null; } } The reason I want to have an interface for each entity is because I want to make sure the both EntityDTO and Entity have the required shared data. Now for retrieving and saving the data, I am going to use the repository pattern. I am going to have one generic interface called IDataRepository and then each entity is going to have is own repository interface. For example: interface IDataRepository { bool Save(T entity); bool Delete(T entity); } interface IUserRepository : IDataRepository { IUser Load(string key); IUser LoadByLogin(string username, string password); } class UserRepository : IUserRepository { bool Save(T entity) { //save code } bool Delete(T entity) { //delete code } IUser Load(string key) { //load code } IUser LoadByLogin(string username, string password) { //load code } } The reason I want to have a repository interface for each entity is so that I can if I need to use different data storage options for different entities. Do this seem like too much abstraction?
