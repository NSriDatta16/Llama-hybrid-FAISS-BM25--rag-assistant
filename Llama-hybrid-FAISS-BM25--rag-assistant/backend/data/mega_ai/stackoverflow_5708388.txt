[site]: stackoverflow
[post_id]: 5708388
[parent_id]: 2087682
[tags]: 
Here's a solution you can implement immediately, like copy/paste/compile. First, download the Unicode database (UCD) here: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt Next, add this code to your project to read the UCD and create a Dictionary for looking up the name of a .NET char value: string[] unicodedata = File.ReadAllLines( "UnicodeData.txt", Encoding.UTF8 ); Dictionary charname_map = new Dictionary ( 65536 ); for (int i = 0; i = 0 && char_code " ); if (is_range) //add all characters within a specified range { char_name = char_name.Replace( ", First", String.Empty ); //remove range indicator from name fields = unicodedata[++i].Split( ';' ); int end_char_code = int.Parse( fields[0], NumberStyles.HexNumber ); if (!fields[1].EndsWith( ", Last>" )) throw new Exception( "Expected end-of-range indicator." ); for (int code_in_range = char_code; code_in_range The UnicodeData.txt file is UTF-8 encoded, and consists of one line of information for each Unicode code point. Each line contains a semi-colon-separated list of fields, where the first field is the Unicode code point in hexadecimal (with no prefixes) and the second field is the character name. Information about the file and the other fields each line contains can be found here: Infomation on the format of the UCD can be found here: http://www.unicode.org/reports/tr44/#Format_Conventions Once you use the above code to build a mapping of characters to character names, you just retrieve them from the map with something like this: char c = 'Ã‚'; string character_name; if (!charname_map.TryGetValue( c, out character_name )) character_name = " "; //character not found in map //character_name should now contain "LATIN CAPITAL LETTER A WITH CIRCUMFLEX"; I suggest embedding the UnicodeData.txt file in your application resources, and wrapping this code into a class, which loads and parses the file once in a static initializer. To make code more readable, you could implement an extension method in that class 'char' class like 'GetUnicodeName'. I've purposely restricted the values to the range 0 through 0xFFFF, because that's all a .NET UTF-16 char can hold. .NET char doesn't actually represent a true "character" (also called code point), but rather a Unicode UTF-16 code unit, since some "characters" actually require two code units. Such a pair of code units are called a high and low surrogate. Values above 0xFFFF (the largest value a 16-bit char can store) are outside the Basic Multilingual Plane (BMP), and according to UTF-16 encoding require two char s to encode. Individual codes that are part of a surrogate pair will end up with names like "Non Private Use High Surrogate", "Private Use High Surrogate", and "Low Surrogate" with this implementation.
