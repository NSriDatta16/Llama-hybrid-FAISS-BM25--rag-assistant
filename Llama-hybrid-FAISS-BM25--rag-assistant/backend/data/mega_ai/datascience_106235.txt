[site]: datascience
[post_id]: 106235
[parent_id]: 88146
[tags]: 
I see some approaches: The first one you already mentionned, that is getting a metric that better fit your problem (overall cost ? overall cost relative to transaction involved ?). In your case that might translate into some weight in the eval metric. That is probably the better way to go. Depending on the data you have, the algo you chose and the metric you retained you might also want to use some instance wiegths in the training phase. That is usually empirical (no rule for the formulation of weights). Another thing, more important for explainability than pure performance, is how you take amount into account in feature engineering. Using amount as is might not be the best feature. You might want to consider things like amount/total_assets, amount/liquid_assets, amount/avg_account_amount or standardising other features by the amount like for exemple fees/amount. This usually help your model learn common features instead of over-fitting on some amount.
