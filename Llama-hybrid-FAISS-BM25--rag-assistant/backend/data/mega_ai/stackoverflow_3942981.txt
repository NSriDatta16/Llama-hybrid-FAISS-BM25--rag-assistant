[site]: stackoverflow
[post_id]: 3942981
[parent_id]: 3941972
[tags]: 
The general practice of interacting with the DOM as strings of HTML using innerHTML has many serious drawbacks: Event handlers are removed or replaced Opens the possibility of script inject attacks Doesn't work in XHTML It also encourages lazy thinking. In this particular instance, you're matching against the string "text" within the HTML with the assumption that any occurrence of the string must be within a text node. This is patently not a valid assumption: the string could appear in a title or alt attribute, for example. Use DOM methods instead. This will get round all the problems. The following will use only DOM methods to surround every match for regex in every text node that is a descendant of a element: $(function() { var regex = /text/; function getTextNodes(node) { if (node.nodeType == 3) { return [node]; } else { var textNodes = []; for (var n = node.firstChild; n; n = n.nextSibling) { textNodes = textNodes.concat(getTextNodes(n)); } return textNodes; } } $('div').each(function() { $.each(getTextNodes(this), function() { var textNode = this, parent = this.parentNode; var result, span, matchedTextNode, matchLength; while ( textNode && (result = regex.exec(textNode.data)) ) { matchedTextNode = textNode.splitText(result.index); matchLength = result[0].length; textNode = (matchedTextNode.length > matchLength) ? matchedTextNode.splitText(matchLength) : null; span = document.createElement("span"); span.style.color = "red"; span.appendChild(matchedTextNode); parent.insertBefore(span, textNode); } }); }); });
