[site]: stackoverflow
[post_id]: 227454
[parent_id]: 227148
[tags]: 
Normally, if you see a non-linear increase in processing time vs. input size, you should suspect your code more than the framework. But since the problem goes away when the tool is compiled with .NET 2.0, all bets are off. With XSLT, it's hard to create a non-linear performance curve if you do all your parsing with straight template matches: Pay careful attention to anywhere you might have resorted to for parsing; template matches are virtually always a better way to achieve the same result. One way to troubleshoot this performance problem is to recreate your XSLT one template-match at a time, testing the processing time after adding each match. You might start with this match: This will match and copy every node, one at a time, to a new document. This should not exhibit a non-linear increase in processing time vs. input size (if it does, then the problem is not with your XSLT code). As you recreate your XSLT, if you add a template-match that suddenly kills performance, comment out every block inside the template. Then, uncomment one block at a time, testing the processing time each iteration, until you find the block that causes the problem.
