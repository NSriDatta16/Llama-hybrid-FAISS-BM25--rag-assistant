[site]: stackoverflow
[post_id]: 849527
[parent_id]: 
[tags]: 
Efficient modelling of an MruList in C# or Java

How would you implement a capacity-limited, generic MruList in C# or Java? I want to have a class that represents a most-recently-used cache or list (= MruList). It should be generic, and limited to a capacity (count) specified at instantiation. I'd like the interface to be something like: public interface IMruList { public T Store(T item); public void Clear(); public void StoreRange(T[] range); public List GetList(); public T GetNext(); // cursor-based retrieval } Each Store() should put the item at the top (front?) of the list. The GetList() should return all items in an ordered list, ordered by most recent store . If I call Store() 20 times and my list is 10 items long, I only want to retain the 10 most-recently Stored items. The GetList and StoreRange is intended to support retrieval/save of the MruList on app start and shutdown. This is to support a GUI app. I guess I might also want to know the timestamp on a stored item. Maybe. Not sure. Internally, how would you implement it, and why? (no, this is not a course assignment)
