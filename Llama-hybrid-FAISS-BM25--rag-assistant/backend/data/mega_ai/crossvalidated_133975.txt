[site]: crossvalidated
[post_id]: 133975
[parent_id]: 133971
[tags]: 
Python is more robust for production use cases, but is somewhat less friendly than R for tinkering around data. Pandas gets most of the way there, but is fundamentally a DSL on top of Python with resultant inconsistencies that R simply doesn't have. Mainly that's because R is vectorized throughout, whereas python is fundamentally a scalar language with vector extensions through Numpy and Pandas. Whenever I have "dirty data" I always reach for R, because it is intrinsically designed around data workflows. R is also, in my opinion, vastly superior to Python for static plotting. That said, Python has some enormous momentum in areas other than statistics, which means that it often plugs in better to text data sources than R. Think all the web scraping tech that happens in Python, the PDF parsers, the twitter clients, not to mention Python is the de-facto language of machine learning. R usually has the same but less developed. Moreover, Python has threads which, though much maligned because of the GIL, do give you more freedom as a programmer to do stuff concurrently. Python is also significantly faster than R, mainly because its memory management is much better. You're talking between 3 and 10 times faster in my experience, though we're still slow by comparison with the compiled languages. R has the advantage of huge libraries that are sometimes easier to install and use. Interestingly, outside of machine learning, academia seems to do a lot of work on cutting edge algorithms in R, and that might be for historical reasons but I suspect is more because it is an (even) better "playground" for data exploration. I think it's fair to say that R feels like a higher level, functional language, by comparison to the (still high level) Python. That means that if you're doing what it's designed for (data/stats/plotting), it's unbeatable. But the tradeoff is that when you step outside these domains, pain comes quickly.
