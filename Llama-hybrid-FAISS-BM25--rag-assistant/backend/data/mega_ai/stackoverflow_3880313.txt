[site]: stackoverflow
[post_id]: 3880313
[parent_id]: 3871396
[tags]: 
Yeah, I see the issue you mean. See example below, I have tested it to make sure it works. It's probably not the most elegant solution, but here goes. This time I have set the height to 0 and the weight to 1 for each text view. This makes each View take an equal slice of the height. In the activity code, I have the following instance declarations: private TextView tv1; private TextView tv2; private TextView tv3; private TextView tv4; private TextView tv5; private boolean singleViewExpanded = false; private OnClickListener myOnClickListener = new OnClickListener(){ public void onClick(View arg0) { if(singleViewExpanded) { showAllViews(); singleViewExpanded = false; } else { // Hide all views apart from the clicked one hideAllViews(); arg0.setVisibility(View.VISIBLE); singleViewExpanded = true; } } }; singleViewExpanded lets you track whether you are showing all views or just one. The onClickListener is defined here so that we can set it for each of the TextViews. These are the show and hide methods: private void showAllViews() { tv1.setVisibility(View.VISIBLE); tv2.setVisibility(View.VISIBLE); tv3.setVisibility(View.VISIBLE); tv4.setVisibility(View.VISIBLE); tv5.setVisibility(View.VISIBLE); } private void hideAllViews() { tv1.setVisibility(View.GONE); tv2.setVisibility(View.GONE); tv3.setVisibility(View.GONE); tv4.setVisibility(View.GONE); tv5.setVisibility(View.GONE); } And finally, wire up the onClick handlers inside onCreate method: tv1 = (TextView)findViewById(R.id.textview1); tv2 = (TextView)findViewById(R.id.textview2); tv3 = (TextView)findViewById(R.id.textview3); tv4 = (TextView)findViewById(R.id.textview4); tv5 = (TextView)findViewById(R.id.textview5); tv1.setOnClickListener(myOnClickListener); tv2.setOnClickListener(myOnClickListener); tv3.setOnClickListener(myOnClickListener); tv4.setOnClickListener(myOnClickListener); tv5.setOnClickListener(myOnClickListener);
