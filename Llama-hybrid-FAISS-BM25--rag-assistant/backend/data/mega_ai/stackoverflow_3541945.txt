[site]: stackoverflow
[post_id]: 3541945
[parent_id]: 
[tags]: 
Different behavior/content of Spring/Hibernate/SessionFactory when running Maven+Surefire vs Eclipse+jUnit

I try to be quick. In fact, one of my jUnit test is failing when running the Maven command of my project (mvn install, so with the Surefire plugin) while it's successful when I run it in Eclipse. I tried many things and the only difference I managed to see is that : - With Maven/Surefire in debug-mode, in the Hibernate-SessionFactory I have only 3 EntityPersister instances - With Eclipse in debug perspective, I could see 6 EntityPersister instances (in fact the number of annotatedClasses I have in my project) Here is my Spring configuration file ("dataSource" is defined in another project, I don't put the DAO classes) : org.hibernate.dialect.MySQL5InnoDBDialect true create com.wft.model com.wft.model.user com.wft.model.Project com.wft.model.Authors com.wft.model.user.User com.wft.model.user.Administrator com.wft.model.user.Gamer com.wft.model.user.Organizer --> --> PROPAGATION_REQUIRED *DAO com.wft.model.Project com.wft.model.user.User And the test class : public class TestDAO extends AbstractTransactionalDataSourceSpringContextTests { private IUserDAO userDAO; private IProjectDAO projectDAO; private SessionFactory sessionFactory; public void setSessionFactory(SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; } protected String[] getConfigLocations() { return new String[] { "classpath*:myapp-persistence-tech.xml", "classpath*:datasource_mysql.xml" }; } @Override protected boolean isDefaultRollback() { return false; } @Override protected boolean isRollback() { return false; } /** * Spring will automatically inject userDAO object on startup * * @param userDAO */ public void setUserDAO(IUserDAO userDAO) { this.userDAO = userDAO; } /** * Spring will automatically inject projectDAO object on startup * * @param projectDAO */ public void setProjectDAO(IProjectDAO projectDAO) { this.projectDAO = projectDAO; } public void test1() { System.out.println("Session Factory : "+sessionFactory); @SuppressWarnings("unused") SessionFactoryImpl sfImpl = (SessionFactoryImpl)sessionFactory; Administrator admin = new Administrator("admin", "admin"); User user1 = new User("user1", "user1"); User user2 = new User("user2", "user2"); for (User user : userDAO.findAll()) { if (user instanceof Administrator) { System.out.println("Deleting administrator"); } else { System.out.println("Deleting user"); } userDAO.delete(user); } userDAO.add(user1); userDAO.add(admin); // dao.add(user2); System.out.println(); assertTrue(true); } } When I debug the jUnit in Eclipse, I can see all the EntityPersisters : entityPersisters HashMap (id=75) entrySet HashMap$EntrySet (id=87) keySet null loadFactor 0.75 modCount 6 size 6 table HashMap$Entry [16] (id=95) threshold 12 values HashMap$Values (id=136) but when remote-debugging Surefire on the port 5005, I only got 3 â€¦ and it ends with : test1(com.wft.service.services.TestDAO) Time elapsed: 2.139 sec One important thing maybe (is that Administrator is a subclass of User) : @Entity @Table(name = "USER") @Inheritance(strategy=InheritanceType.SINGLE_TABLE) @DiscriminatorColumn(name="DTYPE", discriminatorType=DiscriminatorType.STRING, columnDefinition="VARCHAR(32) DEFAULT \"ROLE_USER\"", length=32) @DiscriminatorValue(value="ROLE_USER") @ForceDiscriminator public class User extends LightEntity implements Serializable {} @Entity @DiscriminatorValue(value="ROLE_ADMINISTRATOR") @ForceDiscriminator public class Administrator extends User {} but the inheritance does not seem to be the root cause. Is someone aware of such a discrepancy between the 2 environments (Maven+Surefire vs Eclipse+jUnit launcher) ? Does it look like a bug in surefire (or somewhere else) or a wrong usage of one of the frameworks involved ?
