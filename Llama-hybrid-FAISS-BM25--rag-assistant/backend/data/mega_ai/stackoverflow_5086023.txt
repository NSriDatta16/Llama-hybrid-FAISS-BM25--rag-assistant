[site]: stackoverflow
[post_id]: 5086023
[parent_id]: 5073663
[tags]: 
Well, we (the patterns & practices team) just optimized for showing other things we considered useful. The code above is not really a "general purpose library", but rather a specific method for the sample that uses it. At that moment we thought that adding that extra error handling would not add much, and we diceided to keep it simple, but....we might have been wrong. Anyway, if you follow the link in the //TODO:, you will find another section of a previous guide we wrote that talks a little bit more on error handling in "complex" storage transactions (not in the "ACID" form though as transactions "ala DTC" are not supported in Windows Azure Storage). Link is this: http://msdn.microsoft.com/en-us/library/ff803365.aspx The limitations are listed in more detail there: Only one instance of the entity should be present in the batch Max 100 entities or 4 MB payload Same PartitionKey (which is being handled in the code: notice that "batch" is only specified if there's a single Partition key) etc. Adding some extra error handling should not overcomplicate things too much, but depends on the type of app you are building on top of this and your preference to handle this higher or lower in your app stack. In our example, the app would never expect > 100 entities anyway, so it would simply bubble the exception up if that situation happens (because it should be truly exceptional). Same with the total size. The use cases implemented in the app make it impossible to have the same entity in the same collection, so again, that should never happen (and if it happens, it wouls simply throw) All "entity group transactions" limitations are documented here: http://msdn.microsoft.com/en-us/library/dd894038.aspx Let us know how it goes! I'm also interested to know if other pieces of the guide were useful for you.
