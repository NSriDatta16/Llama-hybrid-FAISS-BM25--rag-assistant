[site]: stackoverflow
[post_id]: 594381
[parent_id]: 593590
[tags]: 
Take this example, taken from this article : public class Position { public double distance( Position position ) { // calculate and return distance... } public double heading( Position position ) { // calculate and return heading... } public double latitude; public double longitude; } According to the same article this is a good example of encapsulation, because data and operations that perform on that data are bundled. Note that encapsulation here does not guarantee data hiding or protection. In contrast, Steve McConnell in Code Complete (2nd. ed., Section 6.2, Good Encapsulation) would argue that encapsulation is broken, because member data is exposed. In your situation, if your data objects and the objects manipulating them are separated but don't have public fields, then encapsulation is broken according to the first definition, but not necessarily in the second case. So we have two contrasting views. One says data hiding is not a part of encapsulation, the other source says data hiding is a vital part of encapsulation. Data hiding can be seen as a part of information hiding which is the principle that states you should hide complex design decisions and sources of change. The general consensus seems to be that encapsulation is seen as a manifestation of information hiding, including data hiding. Or, as Wikipedia puts it: The term encapsulation is often used interchangeably with information hiding. Not all agree on the distinctions between the two though; one may think of information hiding as being the principle and encapsulation being the technique. A software module hides information by encapsulating the information into a module or other construct which presents an interface. But... the reference that follows this paragraph is the same article from which I took the first example, so even Wikipedia is mixing up things here. Also, the use of the word "distinctions" seems wrong here. It's a bit lame to have to say this at the end, but the terminology for encapsulation and information hiding is overloaded, so it all depends on the source. In your case I would stick to the definition of encapsulation as "hiding implementation details behind an abstraction". Therefore you are not necessarily breaking encapsulation.
