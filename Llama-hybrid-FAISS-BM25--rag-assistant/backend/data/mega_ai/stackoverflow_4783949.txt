[site]: stackoverflow
[post_id]: 4783949
[parent_id]: 4783551
[tags]: 
Servers: More information is needed to make any kind of suggestions. Thousands is a huge range, it could be 2000, it could be 200,000. Likewise the amount of data and processing you require form the servers will make a difference. If there will be lots of data, and integrity is important, it might be better to have a storage area network (SAN) for you app and database servers. Networks: Thousands of users sending lots of data is quickly going to cause network connection issues. If this is internet based you'll need multiple connections (just to handle the data, as well as for failover), if it's LAN based you may still need multiple "external" IP points. Internally (behind any load balancers/firewalls) you may also need to subnet things out since inter server communication may be quite high. Backup: What happens if one server goes down? Do users of that server get disconnected? Is their progress lost? If it's an app server, perhaps nothing is lost (as long as it's using database for all session data) but what about a database server? Final Size: Do you really want to design for a final size now? Designing the software and architecture now for a scalable setup is a great idea. If it's scalable (for example starting with: 1 connection, 1 app server and 1 db server) you can always modify the infrastructure as required (more users - add a load balancer and a second app server). As long as you designed with this in mind you should be able to scale out as things grow. Total Tangent (AWS): If you're not tied into something yet, and it's an online system, could you perhaps build off Amazon Web Services ? Not only does their setup allow scalability, but they have some excellent cases studies on how to split up tasks/design your layout. Given AWS services are typically an analog of real-world servers, you can even take the case studies as a guide to building a non-AWS setup.
