[site]: stackoverflow
[post_id]: 5406423
[parent_id]: 5406064
[tags]: 
Do you mean (+ 1 a) instead of (1+ a) ? The latter is not syntactically valid. Scope of variables defined by let are bound to the latter, thus (define (f x) (let ((a 1)) (+ a x))) is syntactically possible, while (define (f x) (let ((a 1))) (+ a x)) is not. All variables have to be define d in the beginning of the function, thus the following code is possible: (define (g x) (define a 1) (+ a x)) while this code will generate an error: (define (g x) (define a 1) (display (+ a x)) (define b 2) (+ a x)) because the first expression after the definition implies that there are no other definitions. set! doesn't define the variable, rather it is used to assign the variable a new value. Therefore these definitions are meaningless: (define (f x) (set! ((a 1)) (+ a x))) (define (g x) (set! a 1) (+ a x)) Valid use for set! is as follows: (define x 12) > (set! x (add1 x)) > x 13 Though it's discouraged, as Scheme is a functional language.
