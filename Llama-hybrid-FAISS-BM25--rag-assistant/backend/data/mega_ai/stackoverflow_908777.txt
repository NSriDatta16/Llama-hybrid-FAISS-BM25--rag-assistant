[site]: stackoverflow
[post_id]: 908777
[parent_id]: 856115
[tags]: 
Axiom: each programmer should test their own code I don't think this is universally true. In cryptography, there's a well-known saying: "it's easy to create a cipher so secure you don't know how to break it yourself." In your typical development process, you write your code, then compile and run it to check that it does what you think it does. Repeat this a bunch of time and you'll feel pretty confident about your code. Your confidence will make you a less vigilant tester. One who doesn't share your experience with the code will not have the issue. Also, a fresh pair of eyes may have fewer preconceptions not just about the code's reliability but also about what the code does. As a consequence, they may come up with test cases the code's author hasn't thought of. One would expect those to either uncover more bugs, or spread knowledge about what the code does around the organization a bit more. Additionally, there's an argument to be made that to be a good programmer you have to worry about edge cases, but to be a good tester you have worry obsessively ;-) also, testers may be cheaper, so it may be worth having a separate test team for that reason. I think the overarching question is this: which methodology is the best at finding bugs in software? I've recently watched a video (no link, sorry) stating that randomized testing is cheaper than and as effective as human-generated tests.
