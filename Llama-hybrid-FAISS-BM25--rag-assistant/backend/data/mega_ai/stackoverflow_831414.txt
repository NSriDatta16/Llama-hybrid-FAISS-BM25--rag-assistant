[site]: stackoverflow
[post_id]: 831414
[parent_id]: 831319
[tags]: 
This is always hard to do without manual intervention. Once you remove the object reference and have a stale object. In the other use case you just remove the object to which some other object points (the list). This should be a problem, too. If this is accepted to lazily it will cover a lot of errors. For simplicity you could add the dao remove operation to the person removeDog() but then the use case removing the dog from one person and add it to another wouldn't be possible. What is the problem that you remove the dog from the person and then remove it from the persistence if you know it has to be removed at all? You spare one step. So returning the removed dog will bring you a pattern of dogDAO.remove(person.removeDog(dog)) Having the add and remove in person enables you not only to mimick the list behaviour but also to have some extra functionality. In your case it is hard to decide because it is an easy setup and it depends how accesible the dao stuff is and where you like to put that. You should at least have an impression of every single use case you want to support. Then the mandatory and optional object links and settings need to be defined. With some pragmatism (e.g. coupling the persistence stuff with the objects) we have to chance to do some more object oriented setup that is easy (and therefor less error prone) to use
