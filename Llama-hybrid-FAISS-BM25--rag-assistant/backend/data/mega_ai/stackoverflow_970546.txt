[site]: stackoverflow
[post_id]: 970546
[parent_id]: 
[tags]: 
Java design issue - Adding functionality to fixed classes

I have a set of classes that all need to be acted on in some (individual) way. Ordinarily I'd just create a DoSomethingInterface with a single doSomething() method and have each class implement that method in a way that suits each class' needs. However, I cannot do that in this case as the class definitions are unmodifyable (auto-generated) So, I reckon I need to create a set of different classes that each take one of the autogenerated classes and performs the operation on them. So, say I have 2 autogenerated classes, Class1 and Class2 , I will first define a common Operator interface: public interface Operator { public void doSomething(TYPE type); } and then implement one of these per class public class Class1Operator implements Operator { public void doSomething(Class1 type){ ... ... } } and public class Class2Operator implements Operator { public void doSomething(Class2 type){ ... ... } } Ok, so far so good. Now, given that I have an object of type Class1 , is there any way of getting its operator without resorting to: public Operator getOperator(Object obj){ if(obj instanceof Class1){ return new Class1Operator(); }else if(obj instanceof Class2{ return new Class2Operator(); } return null; } Which kinda seems like bad practice to me... The only other way I can think of is by creating a map of operators to class names like so: Map allOperators = new HashMap (); allOperators.put(Class1.class, new Class1Operator()); allOperators.put(Class2.class, new Class2Operator()); and then return the operator using: public Operator getOperator(Object obj){ return allOperators.get(obj); } But this doesn't seem right (I'm not sure, are there any issues with keying an object off its class....) Any input as to whether either of these approaches is 'correct'? or is there a more elegant solution?? Thanks
