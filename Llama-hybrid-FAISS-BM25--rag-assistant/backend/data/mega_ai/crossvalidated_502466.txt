[site]: crossvalidated
[post_id]: 502466
[parent_id]: 
[tags]: 
Selecting Priors for the Function sdPrior() to include in a Bayesian Time Series Analysis with MCMC using the BSTS Package with a Poisson Response

Overview I am conducting a Bayesian time series analysis using the bsts package that incorporates mcmc simulations with a Poisson response for counts of birds. The predictors are (see data frame BSTS_df below): Year - numeric Month - categorical The response variable is Frequency (counts of birds) I am following this tutorial below: https://michaeldewittjr.com/dewitt_blog/posts/2018-07-05-bayesian-time-series-analysis-with-bsts_files/ The default priors selected when you AddLocalLevel or AddSeasonal typically assume that you're working with Gaussian data. Therefore, I need to directly supply priors using SdPrior() when you call AddSomeComponent because my data is Poisson distributed . Issue I cannot find any R help tutorials online that aids to select prior values to input into the function sdPrior() , which will ultimately produces the model of best fit with the lowest mean absolute percentage error (MAPE) value . Additionally, I cannot find any tutorials regarding running bsts with a Poisson response . My MAPE values are very high (see plot below) , so I need to adjust the prior values to produce the lowest MAPE . I am also not an advanced R user with advanced knowledge of Bayesian statistics. In this case, I feel that I need to ask an expert for help to point me in the right direction. Question Is there a pre-processing method to set-up the Bayesian priors for the best model (running many models) when you do not have clear priors? If anyone can help me, I would like to express my deepest appreciation because I am struggling. Many thanks in advance. R-code ########################################################################################## ########Time series analysis ########Bayesian regression with MCMC ########################################################################################## * 500 MCMC draws. * Use 2017 as the holdout period. * Trend and seasonality. * Forecast created by averaging across the MCMC draws. * Credible interval generated from the distribution of the MCMC draws. * Discarding the first MCMC iterations (burn-in). * Using a log transformation to make the model multiplicative ################################################################################# ##Time Series Bayesian Inference Model with mcmc using the bsts() function ################################################################################## #Set seed set.seed(45L) ##Open packages for the time series analysis library(lubridate) library(bsts) library(dplyr) library(ggplot2) library(ggfortify) library(forecast) ##Change the Year column into YY/MM/DD format for the first of evey month per year BSTS_df $Year Year, BSTS_df$Month,"-01")) ##Order the Year column in YY/MM/DD format into the correct sequence: Jan-Dec allDates $Year), max(BSTS_df$ Year), "month") ##Produce and arrange the new data frame ordered by the first of evey month in YY/MM/DD format BSTS_new_df % right_join(data.frame(Year = allDates), by = c("Year")) %>% dplyr::arrange(Year) %>% tidyr::fill(Frequency, .direction = "down") ##Calculate the mean count per month over 3 years BSTS_new_df %>% group_by(the_month = month(Year)) %>% summarize(Avg = mean(Frequency)) ######################################################################################### ##Create a time series object myts2 $one.step.prediction.errors[-(1:burn),])+y), as.numeric(p$ mean)), # actual data and dates as.numeric(BSTS_new_df $Frequency), as.Date(BSTS_new_df$ Year)) ###Rename the columns names(d2) $interval[1,]), as.numeric(p$ interval[2,]), tail(d2,12)$Date) ##Rename the columns names(posterior.interval) Plot showing a high MAPE value Data frame - BSTS_df structure(list(Year = c(2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017), Month = structure(c(5L, 4L, 8L, 1L, 9L, 7L, 6L, 2L, 12L, 11L, 10L, 3L, 5L, 4L, 8L, 1L, 9L, 7L, 6L, 2L, 12L, 11L, 10L, 3L, 5L, 4L, 8L, 1L, 9L, 7L, 6L, 2L, 12L, 11L, 10L, 3L), .Label = c("April", "August", "December", "February", "January", "July", "June", "March", "May", "November", "October", "September"), class = "factor"), Frequency = c(36, 28, 39, 46, 5, 0, 0, 22, 10, 15, 8, 33, 33, 29, 31, 23, 8, 9, 7, 40, 41, 41, 30, 30, 44, 37, 41, 42, 20, 0, 7, 27, 35, 27, 43, 38), Days_Sea_Month = c(31, 28, 31, 30, 6, 0, 0, 29, 15, 29, 29, 31, 31, 29, 30, 30, 7, 0, 7, 30, 30, 31, 30, 27, 31, 28, 30, 30, 21, 0, 7, 26, 29, 27, 29, 29)), row.names = c(NA, -36L), class = "data.frame")
