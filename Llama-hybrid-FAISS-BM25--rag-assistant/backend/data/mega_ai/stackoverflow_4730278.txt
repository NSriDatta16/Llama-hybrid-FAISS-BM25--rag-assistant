[site]: stackoverflow
[post_id]: 4730278
[parent_id]: 4730142
[tags]: 
In C# I would completely disregard this advice in favor of something more declarative such as using .ToString directly. The only potential advantage this syntax provides you is it will create an empty string if x is null . I would favor an extension method if this is considered an advantage in your code. public static string NullSafeToString (this T value) where T : class { return value == null ? "" : value.ToString(); } The other reason to avoid this is because it can create precedence confusion. For example do you know exactly what the value of z is in the following scenario without the use of reference materials? int x = 42; int y = 15; string z = x + y + ""; Now same question with the following int x = 42; int y = 15; string z = x + y.ToString(); The latter is more likely to be understood at a glance by the average developer who hasn't taken the time to memory C# operator precedence. Hence I would prefer it because it has a lesser chance of being misunderstood.
