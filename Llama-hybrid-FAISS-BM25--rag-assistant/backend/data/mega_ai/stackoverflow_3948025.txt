[site]: stackoverflow
[post_id]: 3948025
[parent_id]: 3947902
[tags]: 
here is the code i'm using : public class AccountabilityMap : ClassMap { public AccountabilityMap() { Schema("organizationstructure"); Not.LazyLoad(); Id(p => p.Id); References(p => p.AccountabilityType) .Not.Nullable(); References(p => p.Child) .Column("ChildPartyId") .Not.LazyLoad() .Not.Nullable(); References(p => p.Parent) .Column("ParentPartyId") .Not.LazyLoad() .Not.Nullable(); } } public class PartyMap : ClassMap { public PartyMap() { Schema("organizationstructure"); Id(p => p.Id); HasMany(p => p.Children) .LazyLoad() .Cascade.AllDeleteOrphan() .Inverse() .KeyColumn("ParentPartyId"); HasMany(p => p.Parents) .LazyLoad() .Inverse() .Cascade.AllDeleteOrphan() .KeyColumn("ChildPartyId"); } } public class DepartmentMap : SubclassMap { public DepartmentMap() { Schema("organizationstructure"); KeyColumn("PartyId"); Map(p => p.DepartmentType) .Not.Nullable() .CustomSqlType("tinyint") .CustomType () .Length(1); HasManyToMany(p => p.DepartmentGroup) .Table("DepartmentGroupToDepartment") .Schema("formation"); } } fetching the departments: _department = Parents // =====> parents:IList .Where(p => p.AccountabilityType.Id == (int)AccountabilityTypeDbId.ParentDepartmentOfPerson) .Select(p => p.Parent) .Cast() .SingleOrDefault();
