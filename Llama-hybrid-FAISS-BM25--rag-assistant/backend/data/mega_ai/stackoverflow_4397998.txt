[site]: stackoverflow
[post_id]: 4397998
[parent_id]: 4397572
[tags]: 
One approach we've taken for some of our key items of information stored inside an XML column is to "surface" them as computed, persisted properties on the "parent" table. This is done using a little stored function. It works great, because the value is computed only once every time the XML changes - as long as it's not changing, there's no recomputation, the value is stored on the table like any other column. It's also great since it can be indexed! So if you're searching and/or joining on such a field - that works like a charm! So you basically need a stored function along the lines of this: CREATE FUNCTION [dbo].[GetPhoneNo1](@DataXML XML) RETURNS VARCHAR(50) WITH SCHEMABINDING AS BEGIN DECLARE @result VARCHAR(20) SELECT @result = @DataXML.value('(/PhoneNumbers/PhoneNumber[@Type="1"]/@Value)[1]', 'VARCHAR(50)') RETURN @result END If you don't have a phone number of type 1, you'll just get back a NULL. Then, you need to extend your parent table with a computed, persisted column: ALTER TABLE dbo.Customers ADD PhoneNumberType1 AS dbo.GetPhoneNo1(PhoneNumbers) As you can see - it works just fine for single entries, but unfortunately, you cannot surface a whole list of properties. But if you have some key items, like ID's or something, that you expect most of your rows to have, this can be a very nice and slick way to get at that information more easily and more efficiently.
