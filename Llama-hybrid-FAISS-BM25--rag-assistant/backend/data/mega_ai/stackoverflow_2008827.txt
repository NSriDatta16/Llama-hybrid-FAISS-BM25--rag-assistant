[site]: stackoverflow
[post_id]: 2008827
[parent_id]: 2007786
[tags]: 
It's a little difficult to figure out what you're after exactly. The list and __call__ stuff is confusing me so I'm mainly sticking with your first paragraph: __all__ = ['dec', 'A'] from types import InstanceType from functools import wraps import inspect def dec(func): #get the sig of the function sig = [] @wraps(func) def wrapper(*args, **kwargs): ret = None #if this is a method belonging to an object... if args and getattr(args[0], func.__name__, None): instance, args = args[0], args[1:] #if sig of object is not already set if not hasattr(instance, "sig"): instance.sig = [] ret = func(instance, *args, **kwargs) print "Sig of %s is %s" % (func.__name__, id(instance.sig)) #else this is a function else: ret = func(*args, **kwargs) print "Sig of %s is %s" % (func.__name__, id(sig)) return ret #modify the doc string try: docs = inspect.getsourcelines(func) except: docs = " " else: docs = docs[0][1].rstrip('\n').rstrip(':').lstrip(' ').lstrip('def') wrapper.__doc__ = docs + "\n" + (func.__doc__ or '') return wrapper class A(object): def __init__(self): super(A, self).__init__() @dec def f(self, x): """something""" print '%s.f(%s)' % (self, x) @dec def myfunc(): print "myfunc" @dec def myfunc2(): print "myfunc2" @dec def myfunc3(): print "myfunc3" if __name__ == "__main__": list = [] for x in xrange(3): list.append(A()) [a.f(123) for a in list] myfunc() myfunc() myfunc2() myfunc2() myfunc3() myfunc3() Output: .f(123) Sig of f is 11932616 .f(123) Sig of f is 11925464 .f(123) Sig of f is 11918112 myfunc Sig of myfunc is 11925624 myfunc Sig of myfunc is 11925624 myfunc2 Sig of myfunc2 is 11794592 myfunc2 Sig of myfunc2 is 11794592 myfunc3 Sig of myfunc3 is 11925144 myfunc3 Sig of myfunc3 is 11925144
