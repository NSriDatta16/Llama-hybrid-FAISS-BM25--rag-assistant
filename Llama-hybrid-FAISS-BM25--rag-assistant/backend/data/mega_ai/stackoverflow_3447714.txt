[site]: stackoverflow
[post_id]: 3447714
[parent_id]: 3438700
[tags]: 
A solution to this can be created using the techniques described in this blog post http://weblog.raganwald.com/2008/06/what-does-do-when-used-as-unary.html def call_me_three_times yields &(Proc.new) if block_given? end When you define a method as def some_method(&block) ruby will expect you to pass a block to the method. It will convert that block to a Proc and store it in the block variable. If you prefix a Proc object with an & it will convert it to a block. If you call Proc.new within a method and do not provide it with a block then it will create a Proc from the block passed to it. Some test results are below def yields puts "Tripling" 3.times do yield end end def call_me_three_times yields &(Proc.new) if block_given? end x="Foo" call_me_three_times { puts x } x="Bar" call_me_three_times { puts x } call_me_three_times Output Tripling Foo Foo Foo Tripling Bar Bar Bar
