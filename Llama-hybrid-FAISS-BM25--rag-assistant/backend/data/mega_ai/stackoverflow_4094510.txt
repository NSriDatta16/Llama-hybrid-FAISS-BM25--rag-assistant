[site]: stackoverflow
[post_id]: 4094510
[parent_id]: 4094336
[tags]: 
First of all, note that the cost they mention is size , not speed. Just for example, let's assume that the macro expands to 16 bytes of code. Let's further assume that the function compiles to 32 bytes of code, and calling the function takes 6 bytes of code (of course, none of these is guaranteed, but they're all probably at least in the general ballpark of correct for 32-bit code). In this case, if you use a function, but only call it from one place, you end up with 38 bytes of code. If you use the macro instead you only get 16 bytes of code, for a savings of 22 bytes. If you use the macro in two places, you get 32 bytes of code, vs., 44 bytes if you'd used a function -- still a savings, but a smaller one. Jumping ahead a bit, let's assume you used it from 10 different places in your code. In this case, the macro would take 160 bytes, but the function would only take 92 bytes. On a modern processor, I can also see a fairly reasonable argument that a function could be faster as well though. Most modern processors use caching. If you use the function enough that it's usually going to be in the cache when you call it, that can well be faster than using a macro, where each time you use the code, you're (more) likely to have to fetch the code from memory again. The reason is pretty simple: a modern processor runs a lot faster than memory. Even at best, you can plan on a latency of at least 50 ns to fetch some data from memory (and 75-100 ns is fairly common). Just as an average let's assume 75 ns. A typical modern CPU executes around 1.8 instructions per clock, and at (say) 2.5 GHz, has a clock cycle time of .4 ns. That means in 75 ns, it can (on average) execute something like 75/0.4*1.8 = 337.5 instructions. Calling, executing, and returning from a function like we're talking about here is somewhere on the order of a half dozen instructions -- so in a tight loop, by the time you'd fetched the code for the macro from memory once you could execute the function from the cache somewhere around 56 times. Of course, if you're executing only that in a tight loop, the macro will be in the cache most of the time too. The advantage for the function happens when you have calls to that function from enough different places in the code that it'll usually be in the cache even on the first iteration of a loop, which usually won't be the case for a macro.
