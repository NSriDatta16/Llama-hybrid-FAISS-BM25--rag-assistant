[site]: stackoverflow
[post_id]: 681788
[parent_id]: 681774
[tags]: 
Sure. Nothing in the framework supports this, however. You'll have to do a search for the tags then use reflection to access the appropriate properties in your Order object. Another, easier way (no reflection) would be to dump your Order into a hashtable... Here's some pseudocode which might actually work as is: var hashy = (from o in Orders where o.Id = id select new Dictionary { {"Id", o.Id}, {"Name",o.Name}, /*yadda*/}).Single(); At this point, all you need to do is get the string from your text file and index into your hashy. Apparently Linq to Sql doesn't like list initializers in queries. You might be able to wrap this in a method call; I'm not sure. A little modification and you get this working version: var hashy = (from o in Orders where o.Id = id select o).ToArray() .Select(o=> new Dictionary {{"Name",o.Name}}) .First() Its not as elegant because you're tripping the Linq call via ToArray(), which will pull back all the orders. In the end, its probably best just to pull out your order, stuff the information you need in a hash, then process your text file. You'll have to recompile if your database changes; again, its not as elegant as my first attempt...
