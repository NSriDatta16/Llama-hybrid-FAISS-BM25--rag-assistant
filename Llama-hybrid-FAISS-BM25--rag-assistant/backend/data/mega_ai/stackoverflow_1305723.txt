[site]: stackoverflow
[post_id]: 1305723
[parent_id]: 1300426
[tags]: 
TDD isn't exactly what you're looking for. TDD happens at the beginning of the project and drives development, hence Test Driven Development. What you're likely looking for is a test writing strategy. From being on numerous big projects that have implemented testing later on, here are some tips: Start small. Don't try to get 100% coverage on the entire project, choose one class or one set of functions and begin there. The impulse will be to start with your smallest/simplest class/functions just to get some quick wins and have code coverage at 100% for one file. Don't. Instead, as you get bug reports and fix them, write tests to support yourself. It becomes an incredibly effective exercise to write tests to demonstrate bug, fix bugs, run tests and not see a bug. As you get new feature requests, write tests to support yourself. It's the same effect as fixing bugs. Once you have a few tests written, run them continuously. There's no point to having tests if they're all broken and/or not being run. True, you don't end up with 100% code coverage, but you can steadily and regularly apply more and more tests and after a dozen bugs or so, you'll have quite a few useful tests. And more importantly, you'll get more and more tests is the "worst" or most problematic areas of the system. We're doing this now with web2project: http://caseysoftware.com/blog/unit-testing-strategy-web2project .
