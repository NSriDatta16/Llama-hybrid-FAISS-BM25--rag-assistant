[site]: stackoverflow
[post_id]: 4774794
[parent_id]: 4773629
[tags]: 
Thanks but that does not work. I had tried all this before. I tried to assign the value directly in the callback but it doesn't work. Putting the toggleClass leads to it not working either anymore. My guess is that it has to do with $(this) not being correct anymore in the callback. If I assigned it directly to the element via its id, it does work $('#1').attr('title', data); but obviously that doesn't work with having more than one link to click. Let me try to explain. This does not work: $.get( "test1.php", { id: $(this).attr('id'), title: $(this).attr('title') }, function(data) { $(this).attr('title', data); }, This does work: $.get( "test1.php", { id: $(this).attr('id'), title: $(this).attr('title') }, function(data) { $('#1').attr('title', data); }, By the way: putting the $(this).closest('li').toggleClass('highlight'); inside the callback function produces a g.nodeName is undefined error in Firebug. So maybe to approach it differently: what would the best way be to be able to have the element's id available? I'm guessing it's some basic jQuery way ... after fiddling around with it for a bit I came to this which works - YAY $(document).ready(function() { $('li div.toggle a').click(function() { var elementId = '#'+$(this).attr('id'); $.get( "test1.php", { id: $(this).attr('id'), title: $(this).attr('title') }, function(data) { $(elementId).attr('title', data); }, "text"); $(this).closest('li').toggleClass('highlight'); return false; }); }); Nevertheless - thank you very much for your ideas. They led me into the right direction. And possibly there is a better or more elegant way of doing this. If so, I'd be very interested in it!
