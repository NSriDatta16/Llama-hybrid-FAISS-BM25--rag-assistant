[site]: stackoverflow
[post_id]: 1389716
[parent_id]: 1387657
[tags]: 
It seems bad to me as the state of the parent is it s children. So by having reference to child you can change parent s state and it breaks the encapsulation. Let`s think of a simple case when you need to implement drag and drop. It can be done in this way: Tell child to remove his him from his parent. Then tell child to add him to a new parent. And parents are not even know about that :-). Tell parent - I need your child. He will remove that child. Then tell to other parent: from now on this child is yours. The second way seems more reasonable to me, because if you need to reject some children (parent can t have some types of children, or need to do some actions when you are getting new children, like prepare a bedroom, or buy some toys), you ll be have to call all this from your child class. And this will require show all your parent s implementation for that. Sure it can be done via generic interface of parent, but I think it s much easier to delegate this responsibility to parent and provide child. Every parent will know what he should do to add this child.
