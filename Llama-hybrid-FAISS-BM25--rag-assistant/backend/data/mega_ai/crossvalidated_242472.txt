[site]: crossvalidated
[post_id]: 242472
[parent_id]: 
[tags]: 
How does a maze game / directed paths map to a Neural Network?

I am trying to understand how a maze game's possible paths and possible moves are mapped out in a Neural Network. Let's take this example here: http://cdn.intechopen.com/pdfs-wm/10916.pdf Agent can move UP, DOWN, LEFT, RIGHT to find an object - the end goal. Now the table in Fig 2 I do not understand. So the Neural Network will have open paths and the walls as input? And then the possible move at each join as output? A) So the MAZE is then build using a matrix of the layout in a table? B) If so, then the structure of the MAZE is presented in a matrix/table? C) If so, then this table or the state at that point and time? D) Let us make it simple that the maze is fixed and no other obstacles only the paths to travel. So each intersection of the presentation at junction as 0 and 1 in the Table/Matrix. Each possible move/path is either possible 1 or 0 not possible? E) If there is a wall, then is the value a ONE (1) as a YES, or is it a ZERO (as for a NO)? F) Can someone give me an example of a maze travel with a DAG to show how these represent each other? Example: at a crossing of a traffic light, four possible directions. Car can go three possible directions, turn left, turn right or go straight. G) Ok, if the above explanation is given, then if one extend that to say, if there is congestion in the front path (obstacle) go left or right to go around/enroute path to reach your destination. How will the table/matrix + DAG look like now? H) ok, then but if one has to wait for the robot light (RED is wait - time), green (no waiting)? then what? I) If this example can be extended to say I do have a rat travelling paths want to get the cheese but avoid the cat? So if the cat is coming from the right, then that path is - obstacle / danger - so then only paths to the left and straight are allowed.
