[site]: stackoverflow
[post_id]: 669607
[parent_id]: 669389
[tags]: 
This is a simple question, but the answer can be really really complicated. Les try to narrow down the scenario with some assumptions: The OS is Windows, you have a relatively large number of writes that are truly independent. You can skip the multi-threading by simply issuing the writes asynchronously. Issue them all at once - let the OS schedule the writes It doesn't matter if the writes are to the same file or to different files. Note, this is only true if the above assumption about the writes being independent is true. Worst case, this won' be any slower than a single plain old every day disk on a parallel ATA controller: it will be slow. Best case, the OS can schedule the writes very efficiency. This would be true in the case of a storage system with lots of spindles, or with a disk that supports NCQ. The key thing to remember here is that disk I/O (in general) isn't CPU bound, so going out of your way to use multi-core won't help you; it will just make life complex. Note, you can help things if you order the writes so they are sequential in a file (overall) or sequential on the disk by sorting them by their extent.
