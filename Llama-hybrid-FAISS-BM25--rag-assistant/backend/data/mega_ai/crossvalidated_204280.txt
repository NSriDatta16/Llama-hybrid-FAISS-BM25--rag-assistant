[site]: crossvalidated
[post_id]: 204280
[parent_id]: 204032
[tags]: 
You need to use the Fourier transform (and inverse transform) for real time series, i.e., rfft and irfft , respectively. This way you ensure that your surrogate is real. You can do this by replacing the respective lines of your code with the following: ts_fourier = numpy.fft.rfft(ts) random_phases = numpy.exp(numpy.random.uniform(0,numpy.pi,len(ts)/2+1)*1.0j) ts_fourier_new = ts_fourier*random_phases new_ts = numpy.fft.irfft(ts_fourier_new) (Alternatively, you can take the regular Fourier transform and shuffle the phases in an antisymmetric manner.) The remaining deviations originate from the finiteness of your time series: The identity of the autocorrelation functions is based on the fact that the original time series and the surrogate have per construction the same power spectrum, which in turn is linked to the autocorrelation function via the Wiener–Khinchin theorem . However the latter only holds in approximation for finite time series as it is actually about processes. This effect is somewhat alleviated if you look at time series with “actual” prominent frequency components and not just noise.
