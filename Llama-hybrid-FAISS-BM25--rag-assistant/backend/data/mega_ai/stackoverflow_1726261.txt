[site]: stackoverflow
[post_id]: 1726261
[parent_id]: 1725926
[tags]: 
Spring Integration is a little more lightweight and has less of a learning curve. However, it is quite a bit less flexible. I'd say that Mule is the most powerful and flexible of the open source options right now, but it comes with a learning curve. This article is a good intro to Spring Integration and the design patterns of EAI (Enterprise Application Integration) in general. I have used Mule in similar situations in the past. What I will say about deciding whether to use it is as follows: it could definitely be overkill, depending on how many scripts you are maintaining and how many people need to help maintain them over time be prepared to experience a conceptual learning curve - try lots of experiments! check out the book Enterprise Integration Patterns for a deeper understanding of how to use any ESB most intelligently once you've mastered the Mule, you will have a seriously flexible toolkit for handling almost any integration problem quickly and robustly So far, my experience with Mule has definitely been a net win. But it's always a tradeoff between: building your own, which you know will work but which may eventually grow in proportion, and which you will be the only one who can document and teach people about learning a new toolset, which may take time but which every future programmer on the project can do without having to rely on you I tend to enjoy the learning curve, and be good at wrestling through issues when the framework isn't "cooperating" (meaning I don't understand it completely yet). I'm also usually working on a project that should outlive my involvement on it. So getting Mule involved has really opened doors and made our code much more collectively maintainable. Other coders I know eschew frameworks altogether, insisting that it's more pragmatic not to use them. If you're in the latter camp you should definitely NOT get into Mule. Probably not Spring Integration, either! Hope this helps :-)
