[site]: stackoverflow
[post_id]: 1193013
[parent_id]: 
[tags]: 
SSL Client Cert Verification optimisation

We currently have a group of web-services exposing interfaces to a variety of different client types and roles. Background: Authentication is handled through SSL Client Certificate Verification. This is currently being done in web-service code (not by the HTTP server). We don't want to use any scheme less secure than this. This post is not talking about Authorisation, only Authentication. The web-services talk both SOAP and REST(JSON) and I'm definitely not interested in starting a discussion about the merits of either approach. All operations exposed via the web-services are stateless. My problem is that verifying the client certificate on each requests is very heavyweight, and easily dominates CPU time on the application server. I've already tried seperating the Authentication & Application portions onto different physical servers to reduce load, but that doesn't improve dispatch speed overall - the request still takes a constant time to authenticate, no matter where that is done. I'd like to try limiting the number of authentications by generating an HTTP cookie (with an associated server-side session) after successful client certificate verification, which when supplied by the client will cause client certificate verification to be skipped (though still talking over SSL). I'd also like to time-limit the sessions, and make the processes as transparent as possible from a client perspective. My questions: Is this still as secure? (and how can we optimise for security and pragmatism?) Are there free implementations of this scheme? (I'm aware of the SiteMinder product by CA) Given the above, should we continue to do Authentication in-application, or move to in-server ?
