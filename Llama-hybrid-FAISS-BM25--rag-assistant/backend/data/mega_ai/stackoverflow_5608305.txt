[site]: stackoverflow
[post_id]: 5608305
[parent_id]: 5607085
[tags]: 
I extrapolated on the question, to make a streaming implementation to allows you to escape a variety of characters. Streaming really takes the biscuit for large volumes[1], because you will get in heap fragmentation/performance hell otherwise. Also, this allows you to escape strings stored in just about any source, as the samples do show See it Live On Coliru #include #include #include #include #include template static _OI escapeSomeChars(const _II inIt, const _II endIt, _OI outIt) { for (_II it=inIt; it!=endIt; ++it) switch (*it) { case '\0': outIt++ = '\\'; outIt++ = '0'; break; case '\n': outIt++ = '\\'; outIt++ = 'n'; break; case '\\': case '"' : case '$' : case '/' : outIt++ = '\\'; default : outIt++ = *it; } return outIt; } static std::string escapeSomeChars(const std::string& input) { std::ostringstream os; escapeSomeChars(input.begin(), input.end(), std::ostream_iterator (os)); return os.str(); } namespace /*anon*/ { struct rawchar { // helper - see e.g. http://bytes.com/topic/c/answers/436124-copy-istream_iterator-question char _c; rawchar(char c=0) : _c(c) {} operator const char&() const { return _c; } friend std::istream& operator>>(std::istream& is, rawchar& out) { return is.get(out._c); } }; } int main() { static const char data[] = "\"I will \\$one day \\have \\all \\\\my slash\\es escaped, much \\like\\ in the source!\n\""; // use the overload for std::string std::cout (is), std::istream_iterator (), std::ostream_iterator (std::cout)); std::cout (std::cout)); std::cout chars(asstring.begin(), asstring.end()); asstring.clear(); escapeSomeChars(chars.begin(), chars.end(), std::back_inserter(asstring)); std::cout I chose a switch, because it will be optimized by the compiler. For dynamic sets of escapable characters, I'd prefer some kind of lookup (a vector with std::find would do, although for large sets a std::set with set::find would become the better choice). Hope this helps [1] see e.g. this beautiful bug I recently encountered: GParted: Simplified cleanup_cursor() implementation
