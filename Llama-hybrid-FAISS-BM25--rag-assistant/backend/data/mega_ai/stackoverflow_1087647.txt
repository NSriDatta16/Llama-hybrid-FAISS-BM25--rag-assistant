[site]: stackoverflow
[post_id]: 1087647
[parent_id]: 1087627
[tags]: 
Yes. In your project properties, there is a page that indicates the runtime. There is a drop down that lists all of the runtimes available. Choose the one that is appropriate for you. (For VS 2008: Right click on the project -> properties, Compile tab, Advanced Compiler Settings button -> Target framework) We do this right now. We would like to move to VS 2008, but we are doing it incrementally. So right now we have a VS 2008 solution, but all the projects still target .Net 2.0. Thus, when we compile and deploy, we don't need the .Net 3.5 stuff installed on our test boxes. UPDATE: To force a native program to link to specific versions of .dlls, you probably want to use something like this: #pragma message ("Explicit link to generate a manifest entry for MFC.") #if defined (_DEBUG) #pragma comment(linker, "\"/manifestdependency:type='win32' name='Microsoft.VC80.DebugMFC' version='8.0.50608.0' processorArchitecture='x86' publicKeyToken='1fc8b3b9a1e18e3b'\"") #else #pragma comment(linker, "\"/manifestdependency:type='win32' name='Microsoft.VC80.MFC' version='8.0.50608.0' processorArchitecture='x86' publicKeyToken='1fc8b3b9a1e18e3b'\"") #endif Except, that instead of MFC, you should find the correct values for the .Net .DLLs. It is reasonable to believe that you cannot have .Net 2.0 SP1 and .Net 2.0 on the same box. So getting this to work on that box is likely going to be really, really painful. It is probably better to spin up a new build VM that you can install the old, unpatched .Net framework on (if you can even get a hold of it anymore.) Otherwise you will need to copy all the build-time files over to your current box, and then make adjustments to the include and library paths based on your build type. Probably this is a much bigger headache than it's worth.
