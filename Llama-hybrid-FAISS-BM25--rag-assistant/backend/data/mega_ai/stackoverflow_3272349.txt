[site]: stackoverflow
[post_id]: 3272349
[parent_id]: 3272298
[tags]: 
Think of incoming requests or callbacks as events, that are enqueued and processed. That is exactly the same what is done in most of the GUI systems. The system can't know when a user will click a button or do some interaction. But when he does, the event will propagated to the event loop, which is basically a loop that checks for new events in the queue and process them. The advantage is, that you don't have to wait for results for yourself. Instead, you register callback functions that are executed when the event is triggered. This allows the framework to handle I/O stuff and you can easily rely on it's internal efficiency when dealing with long-taking actions instead of blocking processes by yourself. In short, everythings runs in parallel but your code. There will never be two fragments of callback functions running concurrently â€“ the event loop is a single thread. The processes that execute stuff externally and finally propagate events however can be distributed in multiple threads/processes.
