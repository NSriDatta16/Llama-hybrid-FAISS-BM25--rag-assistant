[site]: stackoverflow
[post_id]: 3746185
[parent_id]: 3746122
[tags]: 
A thing to remember when using JSLint is that is built on the opinion about what one person thinks is the "Good Parts". I think is a great tool but there are rules that I don't agree with. About the type attribute, you can find more about the opinion of the author here he says that the attribute is "required and non necessary", but if you validate your documents you clearly need it. With the use of the Array literal notation [] vs. the Array constructor, I agree, there are differences that can make the two syntaxes behave different, for example: [5]; // one-element array ["5"]; // one-element array new Array(5); // empty array but its length is initialized with 5 new Array("5"); // one-element array So, for consistency an brevity the literal notation is better. About the "Too many var statements", JavaScript has no block-scope, the scope is at function or global level, and all var statements are evaluated before the code execution -aka hoisting- and they are initialized with undefined , while the assignments are made at runtime. For example: var x = 0; if (true) { var x = 1; // useless var, x already declared } x; // 1 And the "hoisting" of variable declaration can be shown in this example: var x = 5; // global (function () { alert(x); // alerts `undefined`, x declared but unassigned in this scope alert(y); // ReferenceError, y is undeclared var x = 10; })(); As you can see x holds undefined because it is declared before the actual code execution, the var statements are hoisted to the top of their enclosing scope: var x = 5; // global (function () { var x; alert(x); // alerts `undefined`, x declared but unassigned alert(y); // ReferenceError, y is undeclared x = 10; // assignment is made })(); So that rule wants to actually make the code to resemble what will happen, all the var statements at first place. About the "Unexpected use of '++'", this is another rule that I don't quite like, the author thinks that "those contribute to bad code by encouraging excessive trickiness". When I use them in some expression, I try to extract the operator usage to an alone statement, for example: array[++id] = x; To: id+=1; array[id] = x; Which is more clearer, but anyway in the case of a for statement IMO it can't cause any confusion at all... About the last one "['PrettyId'] is better written in dot notation." , JSLint expects the usage of the bracket notation to be "dynamic", it expects to see an expression there, not a String literal that contains a valid identifier name, the bracket notation should be used only when you want to access a property with a name that clashes with a reserved word e.g.: data.function; // SyntaxError in ECMAScript 3 based implementations data["function"]; // Ok Or when a property contains characters that are not a valid identifier, e.g.: data.foo-bar; // it access the property `foo` minus a `bar` variable data["foo-bar"]; // Ok data.foo bar; // SyntaxError, unexpected `bar` identifier data["foo bar"]; // Ok
