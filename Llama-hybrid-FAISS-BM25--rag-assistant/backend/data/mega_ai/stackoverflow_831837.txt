[site]: stackoverflow
[post_id]: 831837
[parent_id]: 
[tags]: 
is it possible to use Take in LINQ when the query returns an anonymous type?

I'm trying to get the n-th element out of a list of anonymous types returned by a LINQ query where n is a random number from 0 to 100. Messed around with it a while now and I'm not getting anywhere. My code (with names changed to protect IP): var query = from Table1 t1 in theContext.Table1 join Table2 t2 in theContext.Table2 on ... where ... select new { partNum = t1.part_number, partSource = t2.part_source } int num = new Random().Next(0, 100); // here's where the code I've tried fails Can I somehow do a Take (100).ToList ()[num] to get a single anonymous type with partNum and partSource? I ended up solving this by explicitly defining a type, but it seemed like I was missing a more elegant solution here. All I want to do is return a Dictionary to the caller so I'd prefer not to have to define a type outside of this method. Update : ElementAt doesn't work for this. I tried adding: // get a random part from the parts list int num = new Random().Next(0, query.Count() - 1 ); var nthElement = query.ElementAt(num); And I got an exception: The query operator 'ElementAt' is not supported.
