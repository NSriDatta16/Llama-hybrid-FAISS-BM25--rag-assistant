[site]: stackoverflow
[post_id]: 4893027
[parent_id]: 
[tags]: 
Detecting a modified vs new record, and updating a modified record with ASP.NET MVC 2, EF v4, POCOs, and Repository pattern

I am using ASP.NET MVC 2, Entity Framework v4, the ADO.NET C# POCO Entity Generator, and the Repository pattern. Lots of buzzwords! The Setup: I have a repository, IPartiesRepository . I have a Party object and a *Party_Identification* object. Party being a generic term for a person or organization. On the SQL/physical model level, the Party table has a single primary key, PartyId. The Party_Identifications table has a composite key made up of three fields -- PartyId, IdentificationTypeCode, and IdentificationStartDate. I have a strongly typed (to Party ) view which lists Party information and associated identifications. A user can edit a party's identification; the edit links are generated via an ActionLink that looks like so: Identification Data : - The EditIdentification() method in the PartyController looks like: public ActionResult EditIdentification(int partyId, string idTypeCode, string startDate) { var party = partiesRepository.GetPartyById(partyId); var identification = party.Party_Identifications.Where(x => x.PartyId == partyId && x.IdentificationTypeCode == idTypeCode && x.PartyIdentificationStartDate == DateTime.Parse(startDate)).First(); return View("EditIdentification", identification); } The EditIdentification view allows the user to modify the identification record via a basic form: The Problem: I have another EditIdentification() method in the PartyController that handles the save. I am attempting to see if there we are updating an existing identification record, or creating a new one (I also have a Create() method in the PartyController that returns the EditIdentification view with a Party_Identification object as the model). I know there's a better way to do what I'm doing below (specifically, detecting a modified vs new record, and updating a modified record) -- how can I improve this? [HttpPost] public ActionResult EditIdentification(Party_Identification partyidentification) { TryUpdateModel(partyidentification); if (partyidentification.CreationDate == DateTime.Parse("01/01/0001")) { partyidentification.CreationDate = DateTime.Now; partyidentification.CreatedByName = User.Identity.Name.ToString(); partyidentification.ModificationDate = DateTime.Now; partyidentification.ModifiedByName = User.Identity.Name.ToString(); } // TODO: Validation goes here... if (ModelState.IsValid) { var party = partiesRepository.GetPartyById(partyidentification.PartyId) as Party; int partyCount = party.Party_Identifications .Where(x => x.PartyId == partyidentification.PartyId && x.IdentificationTypeCode == partyidentification.IdentificationTypeCode && x.PartyIdentificationStartDate == partyidentification.PartyIdentificationStartDate) .Count(); if (partyCount == 0) { party.Party_Identifications.Add(partyidentification); } else { var idtoupdate = party.Party_Identifications .Where(x => x.PartyId == partyidentification.PartyId && x.IdentificationTypeCode == partyidentification.IdentificationTypeCode && x.PartyIdentificationStartDate == partyidentification.PartyIdentificationStartDate) .First(); idtoupdate.IdentificationValue = partyidentification.IdentificationValue; idtoupdate.PartyIdentificationEndDate = partyidentification.PartyIdentificationEndDate; idtoupdate.ModificationDate = DateTime.Now; idtoupdate.ModifiedByName = User.Identity.Name.ToString(); } partiesRepository.SaveParty(party); return View("Edit", party); } else { return View("Edit", partyidentification); } }
