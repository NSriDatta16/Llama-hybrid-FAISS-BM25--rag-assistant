[site]: stackoverflow
[post_id]: 1938442
[parent_id]: 1938170
[tags]: 
Regarding assembler: Prefer C/C++ over assembler as much as possible. You'll get better productivity by writing as much as possible in C or C++. That includes being able to run some of your code on a PC, which can help developing the higher-level code (application-layer functions). On many embedded platforms, it's good to have someone on the project who is comfortable with a little assembler. Mostly to get start-up code and interrupts going nicely, and perhaps functions for interrupt enable/disable. That's not the same as knowing it really thoroughly--just a basic working knowledge will be sufficient. If you're porting an RTOS (e.g. ÂµC/OS-II ) to a new platform, then you'll have to know your assembler more. But hopefully your RTOS supports your platform well already. If you're pushing up against CPU performance limits, you probably need to know assembler more thoroughly. But hopefully you're not pushing performance limits much, because that can be a drag on a project's viability. If you're writing for a DSP , you probably need to know the DSP's assembler fairly thoroughly.
