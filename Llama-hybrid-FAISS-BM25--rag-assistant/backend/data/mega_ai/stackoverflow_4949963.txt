[site]: stackoverflow
[post_id]: 4949963
[parent_id]: 
[tags]: 
Disabling caching, cookies and everything else in a WebView

I have a webservice that I am trying to authenticate with in the background using a webview. When I initially send the request it will work appropriately (failure/success based on credentials), but after it seems like I am getting a cached response. Here is my webview setup code: WebView browser = new WebView(this); WebSettings settings = browser.getSettings(); settings.setJavaScriptEnabled(true); settings.setSavePassword(false); settings.setCacheMode(WebSettings.LOAD_NO_CACHE); settings.setAppCacheEnabled(false); browser.setWebChromeClient(new WebChromeClient() { public void onProgressChanged(WebView view, int progress) { Log.d("BROWSERPROGRESS", Integer.toString(progress)); } }); jsInterface = new AddAccountJSInterface(); browser.addJavascriptInterface(jsInterface, "ADDACCOUNTJSINTERFACE"); browser.setWebViewClient(new AddAccountClient(this)); So as you may see I have two additional classes controlling my webView: An object that provides an interface for javascript (AddAccountJSInterface) A WebViewClient Additionally I do have a WebChromeClient, but it's only there for debugging and I'm pretty sure that it won't interfere with anything. The JS interface simply provides an easy way of getting the body HTML for performing analysis, so I'm confident that isn't the issue either. The WebViewClient has the following code in it which does most of the "custom" work for routing based on various responses from the webservice. @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { if(url.contains(INSTALL_PREFIX)) { HashMap params = extractParameters(url); verificationComplete(params); return true; } return false; } @Override public void onPageFinished(WebView view, String url){ if(invalidShop(view)) { Toast.makeText(context, context.getString(R.string.no_find_shop), Toast.LENGTH_SHORT).show(); shopAddressField.requestFocus(); replaceUiElements(loadingBar, addAccountButton); } else if(url.contains(ADMIN_AUTH_LOGIN)) { if(invalidLogin(view)) { Toast.makeText(context, context.getString(R.string.invalid_login),Toast.LENGTH_SHORT).show(); emailField.requestFocus(); replaceUiElements(loadingBar, addAccountButton); } else { String email = emailField.getText().toString(); String password = passwordField.getText().toString(); String submitJS = String.format(FORM_SUBMISSION_JS, email, password); jsInterface.setInnerHTML(""); browser.loadUrl(submitJS); } } } In my activity I have 3 text fields that I need to fill followed by clicking a button to submit it. The activity then takes in the data from 3 text fields (shopAddressField, usernameField, passwordField) and then executes some javascript that populates some form data (which was loaded in the invisible webView) then clicks the submit button. It is the last part that is messing up, which appears to be caching the response from the server (perhaps using cookies?) and return that instead of asking the server if the data is correct or not. A bit of clarification: JSInterface is simply a Java object that allows me to execute javascript on my webview which is tied to a function within that object. In my case my JSInterface has one function which is setInnerHtml(String html). This is the javascript that is executed on the webview: javascript:window.ADDACOUNTJSINTERFACE.setInnerHTML(document.body.innerHTML) And this is the setInnerHtml function: public void setInnerHtml(String innerHtml) { this.innerHtml = innerHtml; } So when I actually execute jsInterface.setInnerHtml("") I'm just over-writing the HTML that was pulled in (to be sure I'm not getting my old data from there for some reason). As for my submitJS it is once again some Javascript that is executed on my webView as follows: // submitJS will be something like this once all the credentials have been set // Note: I know that the server will make jQuery available // Note: Much of the Java string formatting has been removed to help clarify // the code. String submitJS = "javascript:(function() { $('login-input').value='username'; $('password').value='password'; $('sign-in-form').up().submit(); })()" // I then simply get the webview to execute the javascript above webView.loadData(submitJS);
