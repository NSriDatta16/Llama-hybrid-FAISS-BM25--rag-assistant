[site]: stackoverflow
[post_id]: 1893835
[parent_id]: 
[tags]: 
Internal enum as a base class template parameter

pragma once #include "stdafx.h" #include "Token.h" //I would like this enum to be inside class Number enum Number_enm {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE}; class Number : public Token //and this template parameter to be Number::Number_enm { private: public: Number(const Number_enm& num) try: Token(num) { } catch(...) { cerr (num & 0xf)) //get number value from char { #ifdef DEBUG_ cout class Token { typedef T value_type; private: value_type my_data_; protected: /*Token() try: my_data_() { } catch(...) { cerr ::Token()."; return; }*/ Token(const value_type value) try: my_data_(value) { } catch(...) { cerr ::Token(const value_type&)."; return; } /*Token(const Token& value): my_data(value) { }*/ Token& operator=(const Token& right) { #ifdef DEBUG_ cout I wonder if it is possible to do this kind of construction?
