[site]: stackoverflow
[post_id]: 4882930
[parent_id]: 4882877
[tags]: 
Untested, but something like this should work: @user.entries.select('DAYOFWEEK(sent_at) as day, AVG(value) as average').group('1').all NOTE : When you use select to specify columns explicitly, the returned objects are read only . Rails can't reliably determine what columns can and can't be modified. In this case, you probably wouldn't try to modify the selected columns, but you can'd modify your sent_at or value columns through the resulting objects either. Check out the ActiveRecord Querying Guide for a breakdown of what's going on here in a fairly newb-friendly format. Oh, and if that query doesn't work, please post back so others that may stumble across this can see that (and I can possibly update). Since that won't work due to entries returning an array, we can try using join instead: User.where(:user_id => params[:id]).joins(:entries).select('...').group('1').all Again, I don't know if this will work. Usually you can specify where after joins , but I haven't seen select combined in there. A tricky bit here is that the select is probably going to eliminate returning any data about the user at all. It might make more sense just to eschew find_by_* methods in favor of writing a method in the Entry model that just calls your query with select_all ( docs ) and skips the association mapping.
