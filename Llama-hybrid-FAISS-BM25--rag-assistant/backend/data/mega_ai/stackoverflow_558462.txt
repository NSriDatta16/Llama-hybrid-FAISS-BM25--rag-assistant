[site]: stackoverflow
[post_id]: 558462
[parent_id]: 
[tags]: 
ADO EF - Errors Mapping Associations between Derived Types in TPH

Background I am writing a data access library using the ADO Entity Framework in Visual Studio 2008 SP1 using the .NET Framework 3.5 SP1. I am trying to create associations between two entities that are both derived from an abstract type. I am representing both entity inheritance hierarchies using Table Per Hierarchy (TPH) which means there are just two tables - one for each entity inheritance hierarchy. NOTE You can use Table Per Type (TPT) to avoid this problem, but it comes with it's own drawbacks. See here and here for more details when choosing between inheritance persistence models. Here is a screenshot of the Designer view of the Entity Model: And here is a screenshot of the database schema: Assumptions When you create associations in the ADO Entity Framework Designer between derived types modeled with TPH using Visual Studio 2008 SP1 and the .NET Framework 3.5 SP1 you are likely to receive the following an "Error 3034: Two entities with different keys are mapped to the same row. Ensure these two mapping fragments do no map two groups of entities with overlapping keys to the same group of rows." Based on what I have read online , in order to resolve this issue, you must add a Condition to the association on the Foreign Key like so: Here's a screenshot of this edit for the PersonPersonToPerson1 association: Constraints The base classes of each hierarchy (i.e. Node and Link) must be abstract. The navigation properties from the associations between two derived types must be distinguishable by link type (e.g. PersonToPerson and PersonToLocation). This means you cannot create the associations between the Link and Node abstract base classes. Problem: When I create the Entity Model as described above and add the Conditions to the AssociationMappings as described in the Assumptions above, I receive an "Error 3023" when I build/validate the model. Error 1 Error 3023: Problem in Mapping Fragments starting at lines 146, 153, 159, 186, 195, 204, 213: Column Link.Endpoint1 has no default value and is not nullable. A column value is required to store entity data. An Entity with Key (PK) will not round-trip when: ((PK is NOT in 'LinkSet' EntitySet OR PK does NOT play Role 'PersonToPerson' in AssociationSet 'PersonPersonToPerson1') AND (PK is in 'LinkSet' EntitySet OR PK plays Role 'PersonToPerson' in AssociationSet 'PersonPersonToPerson1' OR PK plays Role 'PersonToPerson' in AssociationSet 'PersonPersonToPerson')) C:\Documents and Settings\Demo\My Documents\Visual Studio 2008\Projects\GraphExample2.BusinessEntities\GraphExample2.BusinessEntities\GraphModel.edmx 147 15 GraphExample2.BusinessEntities The thing that the Entity Framework is getting hung up on in the above scenario is that there are two properties being mapped on to the same foreign keys. For example, the column and foreign key for Endpoint1 is mapped to the Person property in the PersonToLocation derived type and it's mapped to the Leader property in the PersonToPerson derived type. I don't understand why this is an issue. Since the Leader/Follower Properties are only in the PersonToPerson derived type - not any other derived type or base type - and the same is true of the Person/Location property, why isn't the TypeDiscriminator field sufficient for the EF to figure out which set a given row belongs in? To me it seems like, if you are dealing with an object where TypeDiscriminator = 1, you place Endpoint1 in Leader and Endpoint2 in Follower. Likewise, if you are dealing with an object where TypeDiscriminator = 2, you place Endpoint1 in Person and Endpoint2 in Location. Question: How do you resolve the Error 3023 to allow these associations to occur ? OR How do you create the type of associations in the ADO Entity Framework that I have described above? References: MSDN Forum - Error 3034: Problem in Mapping Fragments starting at lines ... Zeeshan Hirani's Blog - Contributions to Entity framework community Zeeshan Hirani's Entity Framework learning guide (this is an Excellent 514 page step-by-step guide to numerous concepts and gotchas with ADO EF. HIGHLY recommended!) Code SQL: USE [GraphExample2] GO /****** Object: Table [dbo].[Node] Script Date: 02/17/2009 14:36:13 ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO SET ANSI_PADDING ON GO CREATE TABLE [dbo].[Node]( [NodeID] [int] NOT NULL, [NodeTypeDiscriminator] [int] NOT NULL, [Name] [varchar](255) NOT NULL, [Description] [varchar](1023) NULL, CONSTRAINT [PK_Node] PRIMARY KEY CLUSTERED ( [NodeID] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] GO SET ANSI_PADDING OFF GO /****** Object: Table [dbo].[Link] Script Date: 02/17/2009 14:36:12 ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO SET ANSI_PADDING ON GO CREATE TABLE [dbo].[Link]( [LinkID] [int] NOT NULL, [LinkTypeDiscriminator] [int] NOT NULL, [Endpoint1] [int] NOT NULL, [Endpoint2] [int] NOT NULL, [Name] [varchar](255) NULL, [Description] [varchar](1023) NULL, CONSTRAINT [PK_Link] PRIMARY KEY CLUSTERED ( [LinkID] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ) ON [PRIMARY] GO SET ANSI_PADDING OFF GO /****** Object: ForeignKey [FK_Link_Node_Endpoint1] Script Date: 02/17/2009 14:36:12 ******/ ALTER TABLE [dbo].[Link] WITH CHECK ADD CONSTRAINT [FK_Link_Node_Endpoint1] FOREIGN KEY([Endpoint1]) REFERENCES [dbo].[Node] ([NodeID]) GO ALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Endpoint1] GO /****** Object: ForeignKey [FK_Link_Node_Endpoint2] Script Date: 02/17/2009 14:36:12 ******/ ALTER TABLE [dbo].[Link] WITH CHECK ADD CONSTRAINT [FK_Link_Node_Endpoint2] FOREIGN KEY([Endpoint2]) REFERENCES [dbo].[Node] ([NodeID]) GO ALTER TABLE [dbo].[Link] CHECK CONSTRAINT [FK_Link_Node_Endpoint2] GO EDMX:
