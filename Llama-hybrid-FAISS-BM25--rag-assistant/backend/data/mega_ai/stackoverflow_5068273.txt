[site]: stackoverflow
[post_id]: 5068273
[parent_id]: 5068093
[tags]: 
Abstract classes describe what a class is. You do not have to implement the actual functionality of the method calls, so don't feel like you have to implement everything about a bullet in your Bullet class. Also, interfaces are great for describing what you class is capable of. Abstract classes show what something is (Is-A) and interfaces describe what the class can do. (I don't know if this is just a class/interface exercise or if you are actually making a game. If it is just an exercise, you can skip to the next paragraph). For your SomeInterFace interface, how about something like IMoveable or IMobile? In here you can also look at mathematical vectors. The interface should not expose Speed, unless you want objects outside of the one implementing it to interact with Speed. Instead, it should be something along the lines of Move () and/or DetectCollision (). External interactions go in the interface--you're telling the world what you can do. Finally, what is IBulletBehavior and why should a sprite care if it is one? This comes back to describing what you class can do. A bullet is a sprite but implements IBulletBehavior (whatever that is). Do you want all sprites to implement IBulletBehavior? What happens when you want a rock or something to just sit in the players way? You will now have an object that doesn't implement the specified behavior.
