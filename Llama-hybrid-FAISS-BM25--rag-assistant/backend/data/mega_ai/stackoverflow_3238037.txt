[site]: stackoverflow
[post_id]: 3238037
[parent_id]: 3237852
[tags]: 
If I understand you correctly, you are after a moving average that is calculated on a stream of data. The following class I wrote provides some such statistics. moving average decaying average (reflects the average of the last few samples, based on the decay factor). moving variance decaying variance min and max. Hope it helps. /** * omry * Jul 2, 2006 * * Calculates: * 1. running average * 2. running standard deviation. * 3. minimum * 4. maximum */ public class Statistics { private double m_lastValue; private double m_average = 0; private double m_stdDevSqr = 0; private int m_n = 0; private double m_max = Double.NEGATIVE_INFINITY; private double m_min = Double.POSITIVE_INFINITY; private double m_total; // decay factor. private double m_d; private double m_decayingAverage; private double m_decayingStdDevSqr; public Statistics() { this(2); } public Statistics(float d) { m_d = d; } public void addValue(double value) { m_lastValue = value; m_total += value; // see http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance m_n++; double delta = value - m_average; m_average = m_average + delta / (float)m_n; double md = (1/m_d); if (m_n == 1) { m_decayingAverage = value; } m_decayingAverage = (md * m_decayingAverage + (1-md)*value); // This expression uses the new value of mean m_stdDevSqr = m_stdDevSqr + delta*(value - m_average); m_decayingStdDevSqr = m_decayingStdDevSqr + delta*(value - m_decayingAverage); m_max = Math.max(m_max, value); m_min = Math.min(m_min, value); } public double getAverage() { return round(m_average); } public double getDAverage() { return round(m_decayingAverage); } public double getMin() { return m_min; } public double getMax() { return m_max; } public double getVariance() { if (m_n > 1) { return round(Math.sqrt(m_stdDevSqr/(m_n - 1))); } else { return 0; } } public double getDVariance() { if (m_n > 1) { return round(Math.sqrt(m_decayingStdDevSqr/(m_n - 1))); } else { return 0; } } public int getN() { return m_n; } public double getLastValue() { return m_lastValue; } public void reset() { m_lastValue = 0; m_average = 0; m_stdDevSqr = 0; m_n = 0; m_max = Double.NEGATIVE_INFINITY; m_min = Double.POSITIVE_INFINITY; m_decayingAverage = 0; m_decayingStdDevSqr = 0; m_total = 0; } public double getTotal() { return round(m_total); } private double round(double d) { return Math.round((d * 100))/100.0; } }
