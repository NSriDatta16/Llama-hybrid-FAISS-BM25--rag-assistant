[site]: stackoverflow
[post_id]: 946770
[parent_id]: 946316
[tags]: 
TButton and TBitBtn do still continue to share a common OnClick event, as it is implemented all the way down at the TControl level to begin with, and always has been. TButton was merely promoting the protected TControl::OnClick event to published, which TBitBtn would then inherit. In D2009, TCustomButton, like other TCustom... classes, does not promote protected members from base classes to published. TButton and TBitBtn promote the protected TControl::OnClick event to published individually. But the event itself still exists at the TControl level. Since it is protected at the TControl level, you can use an accessor class to reach it, ie: class TCustomButtonAccess { public: __property OnClick; }; class CButtonPopupMenu { // Snip public: void Init( TCustomButton* SrcButton ) { ((TCustomButtonAccess*)SrcButton)->OnClick = OnButtonClick; } private: void __fastcall OnButtonClick( TObject* Sender ) { // Do some button click stuff } }; Or, for any general TControl pointer: class TControlAccess { public: __property OnClick; }; class CControlPopupMenu { // Snip public: void Init( TControl* SrcControl ) { ((TControlAccess*)SrcControl)->OnClick = OnControlClick; } private: void __fastcall OnControlClick( TObject* Sender ) { // Do some click stuff } }; A more elegant solution would be to use RTTI instead, which would also allow you to handle other types of objects, such as TSpeedButton, which have their own OnClick event, ie: #include class TControlAccess { public: __property OnClick; }; class CControlPopupMenu { // Snip public: void Init( TControl* SrcControl ) { TMethod m; m.Code = &OnControlClick; m.Data = this; SetMethodProp(SrcControl, "OnClick", m); } private: void __fastcall OnControlClick( TObject* Sender ) { // Do some click stuff } }; Or even: #include class CObjectPopupMenu { // Snip public: void Init( TObject* SrcObject ) { TMethod m; m.Code = &OnObjectClick; m.Data = this; SetMethodProp(SrcObject, "OnClick", m); } private: void __fastcall OnObjectClick( TObject* Sender ) { // Do some click stuff } };
