[site]: stackoverflow
[post_id]: 4409588
[parent_id]: 
[tags]: 
Lua: how to obtain client details after successful client authentication with LuaSec

I am using the default 'oneshot' example (see below) from LuaSec 0.4 to implement 2-way authentication. Authentication is successful, so apparently the Certificate Authority (CA) acknowledges that the peers are who they claim to be. But how can I see who the peers claim to be? E.g. how can I inspect the organization name of the peer's certificate? Because although the client can now trust that the server is known by the CA, the client does not know if the server is really the right peer. And the other way around: the server knows that the connect client is known by the CA. But many clients are known by the CA, so how can the server know which client is connected? -------- For the sake of completeness ------- server code: require("socket") require("ssl") local params = { mode = "server", protocol = "sslv3", key = "../certs/serverAkey.pem", certificate = "../certs/serverA.pem", cafile = "../certs/rootA.pem", verify = {"peer", "fail_if_no_peer_cert"}, options = {"all", "no_sslv2"}, } -- SSL context local ctx = assert(ssl.newcontext(params)) local server = socket.tcp() server:setoption('reuseaddr', true) assert( server:bind("127.0.0.1", 8888) ) server:listen() local peer = server:accept() -- SSL wrapper peer = assert( ssl.wrap(peer, ctx) ) assert( peer:dohandshake() ) local fd = peer:getfd() peer:send("oneshot test\n") peer:close() ------- client code: require("socket") require("ssl") local params = { mode = "client", protocol = "sslv3", key = "../certs/clientAkey.pem", certificate = "../certs/clientA.pem", cafile = "../certs/rootA.pem", verify = {"peer", "fail_if_no_peer_cert"}, options = {"all", "no_sslv2"}, } local peer = socket.tcp() peer:connect("127.0.0.1", 8888) -- SSL wrapper peer = assert( ssl.wrap(peer, params) ) assert(peer:dohandshake()) print(peer:receive("*l")) peer:close()
