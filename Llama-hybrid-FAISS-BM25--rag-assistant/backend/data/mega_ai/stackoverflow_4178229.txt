[site]: stackoverflow
[post_id]: 4178229
[parent_id]: 4178006
[tags]: 
I think I would write a DialogBuilder class that returns a JDialog. EDIT: Visual vs Programatic creation of Dialogs I'm used to generating Dialogs by writing code. before Java I used to code in Delphi in which Dialogs were created using a GUI - so initially I did find this annoying and even tedious. Nowadays I rather enjoy it. So yes, I would probably throw out (most of) the dialog code created by netbeans. Unless your dialogs are more complicated than your question suggests. Complexity Yes, there is a danger that you'll end up taking a lot of time to create quite complex code. However, if you are like me, you'll learn a lot doing it. One thing you'll learn is how to use various patterns to avoid that complexity. Finding an elegant way to solve those issues is something I find pretty satisfying - it's one of the aspects of programming I find most enjoyable. Parameters When you mention your concern about " if argA&& argB && !argC then display JCheckbox etc for 10-11 different jdialogs" - I can only suggest you try to approach the problem from a different direction. For example, you could pass the DialogBuilder a list of pairs of labels and JComboboxes. Or maybe you could extend JCombobox so that it has an additional field and a getter for it's label. e.g. DialogBuilder builder = new DialogFactory(); builder.add("Select X:", new Xcombo(...), true); // with checkbox builder.add("Select Y:", new Ycombo(...), false); // without ... builder.getDialog.setVisible(true); or builder.add("Select X:", new MyCombo(xList), false); builder.add("Select Y:", new MyCombo(yList), false); You can see (I hope) that the DialogBuilder.add(String, JComboBox, boolean) method wouldn't need dozens of complex if ... then ... else clauses. Just my $0.02 worth.
