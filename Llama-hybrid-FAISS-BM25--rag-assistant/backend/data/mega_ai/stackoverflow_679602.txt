[site]: stackoverflow
[post_id]: 679602
[parent_id]: 
[tags]: 
Fastest way to calculate the decimal length of an integer? (.NET)

I have some code that does a lot of comparisons of 64-bit integers, however it must take into account the length of the number, as if it was formatted as a string. I can't change the calling code, only the function. The easiest way (besides .ToString().Length) is: (int)Math.Truncate(Math.Log10(x)) + 1; However that performs rather poorly. Since my application only sends positive values, and the lengths are rather evenly distributed between 2 and 9 (with some bias towards 9), I precomputed the values and have if statements: static int getLen(long x) { if (x This lets the length be computed with an average of 4 compares. So, are there any other tricks I can use to make this function faster? Edit: This will be running as 32-bit code (Silverlight). Update: I took Norman's suggestion and changed the ifs around a bit to result in an average of only 3 compares. As per Sean's comment, I removed the Math.Truncate. Together, this boosted things about 10%. Thanks!
