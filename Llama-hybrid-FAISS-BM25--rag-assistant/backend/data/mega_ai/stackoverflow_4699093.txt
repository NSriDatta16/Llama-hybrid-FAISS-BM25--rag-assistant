[site]: stackoverflow
[post_id]: 4699093
[parent_id]: 4695751
[tags]: 
It's looking like you are going to overcomplicate things. I will try to save your time =) First of all let's start that there is two tipes of testing for the typical project (I am sure you know this, but it is better to mention). Integration tests and Unit tests . And typically (I will assume that you have a typicall application in order no to add "typically" to every sentence) you need both of them. Integration tests are going on real database and some of them on In-Memory one for better test performance. So you probably have mappings in your application and want to test them, it is better to do with integration tests on real DB, and if you are using Fluent Nhibernate (if you don't it is better to start using it) this will be a pice of cake . Then you probably have a kind of Repository or another data access layer (where you are using Linq) that you want to test too. And you probably want to have tests like: When I submit a query get-customer-by-name , my data access component should return customer with specified name. This is better to achieve using in-memory database, because this is cheaper. This will save you some time in the typical scenario. But if you have a lot of complex queries, then I would agree with Jos√© F. Romaniello , that it is better to use Enhanced Query Object and test it separately. You can put your attention on Sharp Arhitecture framework that is targeting a lot of issues when using Nhibernate and testing persistence layer.
