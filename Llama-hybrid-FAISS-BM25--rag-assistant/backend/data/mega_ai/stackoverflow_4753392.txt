[site]: stackoverflow
[post_id]: 4753392
[parent_id]: 4751885
[tags]: 
My understanding is that an instance of the above type could never be instantiated any attempt to do so would result in an infinite loop of instantiation/allocation (which I guess would cause a stack overflow?)â€”or, alternately, another way of looking at it might be that the definition itself just doesn't make sense; That's not the best way of characterizing the situation. A better way to look at it is that the size of every struct must be well-defined . An attempt to determine the size of T goes into an infinite loop, and therefore the size of T is not well-defined. Therefore, it's not a legal struct because every struct must have a well-defined size. It seems we are being lied to here There's no lie. An int is a struct that contains a field of type int. An int is of known size; it is by definition four bytes. Therefore it is a legal struct, because the size of all its fields is known. How does the System.Int32 type (for example) actually store a 32-bit integer value The type doesn't do anything. The type is just an abstract concept. The thing that does the storage is the CLR , and it does so by allocating four bytes of space on the heap, on the stack, or in registers. How else do you suppose a four-byte integer would be stored, if not in four bytes of memory? how does the System.Type object referenced with typeof(int) present itself as though this value is itself an everyday instance field typed as System.Int32? That's just an object, written in code like any other object. There's nothing special about it. You call methods on it, it returns more objects, just like every other object in the world. Why do you think there's something special about it?
