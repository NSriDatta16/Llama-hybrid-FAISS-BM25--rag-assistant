[site]: stackoverflow
[post_id]: 4962052
[parent_id]: 
[tags]: 
(all below was copied directly from CouchDB's current wiki ) Introduction Apache CouchDB is a scalable, fault-tolerant, and schema-free document-oriented database written in Erlang. It's used in large and small organizations for a variety of applications where a traditional SQL database isn't the best solution for the problem at hand. Among other features, it provides: A RESTful HTTP/JSON API accessible from many programming libraries and tools Futon, a browser based GUI and management tool Incremental and flexible replication with conflict management Incremental Map/Reduce queries written in any language (JavaScript support built-in) Excellent data integrity/reliability Native support for BLOBs (Binary Large Objects) Easy installation on many platforms, from servers to mobile devices A strong and active community Good documentation in the form of Books, Presentations, Blog Posts, Wikis, and more Because the data stored in CouchDB is a JSON document(s), the structure of the data, or document(s), can change dynamically. This feature greatly simplifies the maintenance and development of the database, especially over time when the data and its use evolve. Additionally, CouchDB doesn't rely on SQL JOINS to merge related data. This is often confusing for some users of traditional SQL databases, but is generally a non-issue once CouchDB users become familiar its powerful Map/Reduce framework. One of CouchDB's most powerful features is its replication framework. This replication framework provides a comprehensive set of features: Master → Slave replication Master ↔ Master replication Filtered Replication Incremental replication with bi-directional conflict detection/resolution These replication features can be used in combination to create powerful solutions to many problems in the IT industry, like reliability, and scalability. In addition to the fantastic replication features, CouchDB's reliability and scalability is further enhanced by being implemented in the Erlang programming language. Erlang has built-in support for concurrency, distribution, fault tolerance, and has been used for years to build reliable systems in the telecommunications industry. By design, the Erlang language and runtime are able to take advantage of newer hardware with multiple CPU cores. When you look at all of the great characteristics of Erlang, it becomes clear why CouchDB uses it for its foundation. What it is Not To better understand what CouchDB is, it may be helpful to understand a few things that CouchDB isn't. A relational database. These differences are articulated above in the Meet CouchDB section, and other portions of this Wiki. A replacement for all databases. When developing and designing a good information system you should select the best tool for the job . While CouchDB can be used in a wide variety of application types, including financial, you may find that a relational database, or other data store, is a better fit for your problem. If you are new to CouchDB, and aren't sure if it's a good fit for your data management problem, please ask others on the mailing list, and the #couchdb IRC channel for advice. An object-oriented database. While CouchDB stores JSON objects, it isn't meant to function as a seamless persistence layer for an OO programming language. Key Characteristics Let's review some of the basic elements of CouchDB. Documents A CouchDB document is a JSON object that consists of named fields. Field values may be strings, numbers, dates, or even ordered lists and associative maps. An example of a document would be a blog post: { "Subject": "I like Plankton" "Author": "Rusty" "PostedDate": "5/23/2006" "Tags": ["plankton", "baseball", "decisions"] "Body": "I decided today that I don't like baseball. I like plankton." } In the above example document, Subject is a field that contains a single string value "I like plankton". Tags is a field containing the list of values "plankton", "baseball", and "decisions". A CouchDB database is a flat collection of these documents. Each document is identified by a unique ID. Views To address this problem of adding structure back to semi-structured data, CouchDB integrates a view model using JavaScript for description. Views are the method of aggregating and reporting on the documents in a database, and are built on-demand to aggregate, join and report on database documents. Views are built dynamically and don’t affect the underlying document; you can have as many different view representations of the same data as you like. Schema-Free Unlike SQL databases which are designed to store and report on highly structured, interrelated data, CouchDB is designed to store and report on large amounts of semi-structured, document oriented data. CouchDB greatly simplifies the development of document oriented applications, which make up the bulk of collaborative web applications. In an SQL database, as needs evolve the schema and storage of the existing data must be updated. This often causes problems as new needs arise that simply weren't anticipated in the initial database designs, and makes distributed "upgrades" a problem for every host that needs to go through a schema update. With CouchDB, no schema is enforced, so new document types with new meaning can be safely added alongside the old. The view engine, using JavaScript, is designed to easily handle new document types and disparate but similar documents. Distributed CouchDB is a peer based distributed database system. Any number of CouchDB hosts (servers and offline-clients) can have independent "replica copies" of the same database, where applications have full database interactivity (query, add, edit, delete). When back online or on a schedule, database changes are replicated bi-directionally. CouchDB has built-in conflict detection and management and the replication process is incremental and fast, copying only documents and individual fields changed since the previous replication. Most applications require no special planning to take advantage of distributed updates and replication. Unlike cumbersome attempts to bolt distributed features on top of the same legacy models and databases, it is the result of careful ground-up design, engineering and integration. The document, view, security and replication models, the special purpose query language, the efficient and robust disk layout are all carefully integrated for a reliable and efficient system. Useful links Homepage for CouchDB: http://couchdb.apache.org/ Current Releases: http://wiki.apache.org/couchdb/CurrentReleases Documentation here: http://docs.couchdb.org/en/latest/ Source code: https://github.com/apache/couchdb Books Getting Started with CouchDB Extreme Scalability at Your Fingertips Scaling CouchDB Replication, Clustering, and Administration CouchDB: The Definitive Guide Beginning CouchDB Related tags : database document-oriented-db non-relational-database nosql couchdb-futon pouchdb
