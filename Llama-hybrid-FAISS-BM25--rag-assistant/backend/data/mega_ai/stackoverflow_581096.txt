[site]: stackoverflow
[post_id]: 581096
[parent_id]: 580439
[tags]: 
I would suggest that the best way of writing your own custom membership/authentication system is to actually use the built-in MembershipProvider class in .NET, and deriving your own custom class from that. You can always create your own Membership Provider by inheriting from the System.Web.Security.MembershipProvider (and Role and Profile classes, too!) class within the .NET framework, and provide your own specific implementation. This way, you get the benefit of using a solid and reliable "base framework" upon which to build your authentication and authorization system. By deriving your custom Membership Provider by the framework's own base class, you get to leverage many of the great features of ASP.NET's membership system that are built-in, such as declarative authorization in the web.config file and the built-in ASP.NET authentication tickets. I answered a very similar question here that details some of these benefits. I must admit, one thing I did find unusual by it's omission in the "standard" built-in membership providers in ASP.NET was the lack of a simple way of allowing users to register with a website but not to "validate" their account immediately, but rather send the user an email containing a "validation link" that they must click before being allowed access to the website. Whilst this is not a standard feature within ASP.NET MembershipProvider class, it is relatively easy to implement. There is a great series of articles by Scott Mitchell regarding ASP.NET's Membership, Role and Profile providers (including one on validating an account via email before allowing login) which can be found here: Examining ASP.NET 2.0's Membership, Roles, and Profile which should help if you derive your own custom provider from the ASP.NET providers.
