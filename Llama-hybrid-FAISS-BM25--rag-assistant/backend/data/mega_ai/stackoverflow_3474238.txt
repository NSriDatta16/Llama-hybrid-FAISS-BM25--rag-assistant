[site]: stackoverflow
[post_id]: 3474238
[parent_id]: 3474082
[tags]: 
1) Make sure you get a basic HTML version up first 2) Then transfer this to Ajax. This flow gets everyone on board and keeps logic organized. All of your logic is correct so I will just give you the code for the HTML version and once you get that up you can get the remote version going. controller: def index @start_date = Date.strptime(params[:start_date],"%d/%m/%Y") @end_date = Date.strptime(params[:end_date],"%d/%m/%Y") @stuffs = Stuff.find(:all, :conditions => ["created_at > ? and updated_at view :get) do %> Start Date | End Date "Getting stats..." %> routes.rb you need a line at the top like this: map.resources :stuffs Basically what this does is create specific routes. Now you can call stuffs_path and it will go to the index action. If you are not using REST the search_stuff_path could be :controller => :your_controller => :action => your_action. IF you are using REST you need to add this as a member to your routes.rb in config. If you need more info let me know. BTW - I used stuffs to be a generic term for your resource. I think what you want would be report so the controller, routes, and views would be reports_path and map.resources :reports respectively. So now that you got the HTML version going it's easy to get remote going. controller def index responds_to do |format| format.js render :partial => "remote_report" # you can use RJS or a partial. # If it's one place you want to update just use a partial. # Create a file _remote_report.html.erb as a partial. # Put this in the views folder of course end end In your view: :get, :update => "div_id_to_update") do %> your form methods here your submit tag here Those are the parts you need to change to make it remote based.
