[site]: stackoverflow
[post_id]: 5614803
[parent_id]: 5614715
[tags]: 
If you want to use this for unit testing consider to change your approach to unit testing. If you go down to every private method your tests are coupled very tight to the actual implementation. Common problems using this approach are Very fragile and hard to maintain tests Your tests are very likely to mirror the behavior and code of your application Essential behavior of your classes isn't obvious because of dozens of tests describing every detail Every time you have to refactor some code you will have to change a bunch of tests, too. This will create a huge barrier to refactoring because of the time and pain it takes to fix all breaking tests. You even risk creating undesired behavior because you have to change so many tests that the original behavior is changed. I would recommend writing tests testing the behavior of your classes. If you change the way this behavior is achieved you won't break tests at all and get the confirmation that your refactoring did not change the overall behavior. Your tests will be much clearer and specify the really important parts of your design. This helps when refactoring, or if some one (may be even you after a couple of months) has to get into the code again.
