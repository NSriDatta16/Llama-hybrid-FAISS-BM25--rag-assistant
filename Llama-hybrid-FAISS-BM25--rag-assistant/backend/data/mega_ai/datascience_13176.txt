[site]: datascience
[post_id]: 13176
[parent_id]: 13175
[tags]: 
My answer only applies to one niche, the database server market. If you're storing your weights in a SQL Server database, you can use Transparent Data Encryption (TDE). This will encrypt your whole database so that only authorized users can read its contents; it is also possible to encrypt individual columns to further restrict access, so that even authorized users can't read the contents of a table without first decrypting it. Here's a link to some documentation on how to use TDE. It's actually really easy to use, but as with anything, there are a few potential "gotchas" when setting it up. For a short list of some of those I encountered, see my column Misadventures in TDE: How to Restore an Encrypted SQL Server Database Completely Wrong . Normally you don't have to do any coding whatsoever in a front-end application (such as a GUI user access interface with spreadsheets, etc.) to use a TDE-enabled database; the user accessing the data just needs sufficient permissions. I know that .Net languages like VB and C# also have their own encryption commands you can leverage too if for some reason you needed to do encryption on the front-end too; I suspect other programming ecosystems like Java etc. have their own counterparts. I also fairly certain that SQL Server's competitors in the database server market, such as Oracle and MySQL, have their own versions of database encryption, but I'm not familiar with how they work. I firmly believe that in due time, a lot of neural net and other machine learning algorithms will end up running on database servers of this kind because of this and many other advantages. I'm pretty sure that Oracle etc. have free versions of their database akin to SQL Server's, which lets you store and operate on about 10 GB. If that's enough space for your neural nets, then you could just set them up on a dedicated server without having to pay for a database server license. Disclaimer: I'm not in any way connected with Microsoft or in a position to profit from it; I just know this one technology well. I use it to encrypt my own neural net weights, so I know from personal experience that this solution will work quite well. If you're merely storing the weights in files rather than a database you can probably make use of disk and file encryption software, such as TrueCrypt or EFS and BitLocker for Windows. I'm weak in networking so I can't comment on transport security across the Internet, although I suspect technologies like SSL etc. would do the job. I hope this helps.
