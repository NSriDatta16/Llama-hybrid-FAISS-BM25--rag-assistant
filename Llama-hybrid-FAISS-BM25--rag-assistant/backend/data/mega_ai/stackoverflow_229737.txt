[site]: stackoverflow
[post_id]: 229737
[parent_id]: 229571
[tags]: 
I too make web apps in my personal time and job so I can understand why you ask the above questions. While at work none of the above issues are discussed, I pay a lot of attention to these things in my personal work. I can't answer all your questions, but for the ones I can, I will say this: How would you monitor the solution? I am developing an ASP.NET web app, and so I'm using performance monitors, logging, tracing (only for dev though), health monitoring, and a custom Sql Server performance monitoring system which I'm writing (although before this gets rolled out, I will use AppManager by AdventNet). Which of these things do you think we should do in house and which should be out sourced? We will develop the core system our self's, of course. This is an excellent question as I have the same decision to make, all the time. I would outsource what doesn't lie in my skillset (so if I need to do 3d work, outsource it). Also, stick to the strengths of your team, concentrate on business functionality as this is what will please/draw the users (I say this from a commercial point of view for a home-user facing web app), and outsource the critical internal systems like backup, monitoring, logging, etc (I haven't outsourced this due to the cost/financial resources I have available, and I make stuff so I can learn - thus code it myself even though this is the long approach - but I enjoy it). Are there check lists for these kinds of things? Maybe ISO standards or some other way of seeing that we are on the right track by looking through an article/check list/academic paper/book? You say you are using Java/MySQL/Hibernate, but Microsoft have some excellent guides on web application security and generally building scalable and secure applications (both web and windows based). Look at Microsoft Patterns and Practises. Do you think hosting the system in a computer cloud is a good alternative? (i.e. as provided by Amazon, Google or others.) Yes. This is cheap, effective, and will take stress off your internal architecture (I'm thinking of how you can use CDNs and Amazon EC2 to store static files). I say static files, so you can store content which doesn't change often, and which can be cached. If you feel that the system is secure, as a technical person. How do you convince a non technical person that it's safe and secure? Ask them to cause a breach. How do we guarantee that each customer only will be able to access its own data? As the system will be able to access it's own database, it seems hard. A proper development process, involving lots of testing, is really all we have regarding user privileges. I am not sure I understand what this question is asking, but you can use login systems, membership/roles (this is ASP.NET only though), and stored procedures to ensure that a user can only ever see his or her own data and not anyone elses. I too would be interested in answers to the rest of the questions.
