[site]: stackoverflow
[post_id]: 251254
[parent_id]: 251209
[tags]: 
I perform domain validation in the middle tier with a rules engine, very similar to the one written about here . A friend's project uses an approach similar to what you're proposing in your latter example and the end result is unmaintainable (brittle, hard to implement generic validation UIs). The rules engine approach is maintainable because it localizes all the validation and persistence rules in a single well organized location AND has each rule as a fully fledged class - but exposes the validation on domain classes similar to what you have proposed. Some people like dynamically compiling so they store them in a database for a high level of post-deployment configuration; in my case I like them compile time checked so there are rule definitions with lambdas exposed on a static class. I know this isn't in line with what you want to do, but asking how I would do it and saying other approaches aren't simple enough would be like saying "how can you write reliable code, I want to keep it simple so unit tests are out of the question." To me treating each rule as its own class is good because its easier to maintain and document albeit more complex to implement.
