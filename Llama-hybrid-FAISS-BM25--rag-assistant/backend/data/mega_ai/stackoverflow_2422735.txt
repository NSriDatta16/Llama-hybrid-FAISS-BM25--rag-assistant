[site]: stackoverflow
[post_id]: 2422735
[parent_id]: 2422625
[tags]: 
What you didn't indicate is what kind of "analyses" you wanted to do. Most C++ analyses require that you have accurate symbol table data so that when you encounter a symbol foo you have some idea what it is. (You technically don't even know what + is without such a symbol table!) You also need generic type information; if you have an expression "a*b", what is the type of the result? Having "name and type" information is key to almost anything you want to do for analysis. If you insist on clang, then there are other answers here. I don't know it it provides for name and type resolution. If you need name and type resolution, then another solution would the DMS Software Reengineering Toolkit . DMS provides generic compiler like infrastructure for parsing, analyzing, transforming, and un-parsing (regenerating source code from the compiler data structures). DMS's industrial-strength C++ front end (it has many other language front ends, too) provides full name and type resolution according to the ANSI standard as well a GCC and MS VC++ dialects. Code transformations can be implemented via an abstract-syntax tree interface provided by DMS, or by pattern-directed program transformation rules written in the surface syntax of your target language (in this case, C++). Here's a simple transformation using the rule language: domain Cpp~GCC3; -- says we want patterns for C++ in the GCC3 dialect rule optimize_to_increment(lhs:left_hand_side):expression -> expression " \lhs = \lhs + 1 " -> " \lhs++" if no_side_effects(lhs). This implicitly operates on the ASTs built by DMS, to modify them. The conditional allows you to inquire about arbitrary properties of pattern variables (in this case, lhs ), including name and type constraints if you wish. DMS has been used many times for very sophisticated program analysis and transformation of C++ code. We build C++ test coverage tools by instrumenting C++ code in a rather obvious way using DMS. At the website, there's a bibligraphy with papers describing how DMS was used to restructure the architecture of a large product line of military aircraft mission software. This kind of activity literally pours C++ in one architectural shape into another by applying large numbers of pattern directed transforms such as the above. It is likely to be very easy to implement your instrumentation. And you don't have to wait for it to mature.
