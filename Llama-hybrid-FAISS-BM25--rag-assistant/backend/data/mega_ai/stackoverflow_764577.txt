[site]: stackoverflow
[post_id]: 764577
[parent_id]: 763184
[tags]: 
Why do you want to do this? Are you running into performance issues? Or do you want to prevent other connections from seeing data until you commit it to disk? Regarding syncing to disk, there is a tradeoff between database integrity and speed. Which you want depends on your situation. Use transactions. Advantages: High reliability and simple. Disadvantages: once you start a transaction, no one else can write to the database until you COMMIT or ROLLBACK . This is usually the best solution. If you have a lot of work to do at once, begin a transaction, write everything you need, then COMMIT . All your changes will be cached in RAM until you COMMIT , at which time the database will explicitly sync to disk. Use PRAGMA journal_mode=MEMORY and/or PRAGMA synchronous=OFF . Advantages: High speed and simple. Disadvantages: The database is no longer safe against power loss and program crashes. You can lose your entire database with these options . However, they avoid explicitly syncing to disk as often. Write your changes to an in-memory database and manually sync when you want. Advantages: High speed and reliable. Disadvantages: Complicated, and another program can write to the database without you knowing about it. By writing to an in-memory database, you never need to sync to disk until you want to. Other programs can write to the database file, and if you're not careful you can overwrite those changes. This option is probably too complicated to be worth it.
