[site]: stackoverflow
[post_id]: 3641892
[parent_id]: 
[tags]: 
Loading database at start up slows down the app

i m not sure how to describe this as i m new with all the developing and i m really looking forward to an answer from you guys. I know you can be very busy but please try to HELP me! Here it goes. I have an app that loads a very large database (although it only has 100 entries it contains HiRes images (100MB) ). At start up a tableview presents the rows -records (using only 3 attributes from the database). However it seems that the WHOLE database (including the images) is loaded at start up! IS THERE A WAY TO ONLY LOAD THE 3 attributes (something like "select") when the app starts and then when the user moves to didselectrowatindexpath load the rest of the record? Because i have NO IDEA where to look or what to do i would appreciate some coding help! here is the code i m using: #pragma mark - #pragma mark App support - (NSFetchedResultsController *)resetFetchedResultsController:(NSPredicate *)predicate cached:(BOOL)cached { NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; NSEntityDescription *entity = [NSEntityDescription entityForName:@"Records" inManagedObjectContext:managedObjectContext]; [fetchRequest setEntity:entity]; NSSortDescriptor *partDescriptor = [[NSSortDescriptor alloc] initWithKey:@"displayOrder" ascending:YES]; NSSortDescriptor *nameDescriptor = [[NSSortDescriptor alloc] initWithKey:@"name" ascending:YES]; NSArray *sortDescriptors = [[NSArray alloc] initWithObjects: partDescriptor, nameDescriptor, nil]; [fetchRequest setSortDescriptors:sortDescriptors]; if (predicate != nil) [fetchRequest setPredicate:predicate]; NSString *cacheName = nil; if (cached) cacheName = @"Root"; NSFetchedResultsController *aFetchedResultsController = [[[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:managedObjectContext sectionNameKeyPath:nil cacheName:cacheName] autorelease]; aFetchedResultsController.delegate = self; [fetchRequest release]; [partDescriptor release]; [nameDescriptor release]; [sortDescriptors release]; NSError *error = nil; if (![aFetchedResultsController performFetch:&error]) { // Handle error NSLog(@"Unresolved error %@, %@", error, [error userInfo]); exit(-1); // Fail } return aFetchedResultsController; } - (void)showRecords:(Records *)records animated:(BOOL)animated { . RecordsDetailViewController *detailViewController = [[RecordsDetailViewController alloc] initWithStyle:UITableViewStyleGrouped]; detailViewController.records = records; [self.navigationController pushViewController:detailViewController animated:animated]; [detailViewController release]; } #pragma mark - #pragma mark Table view methods - (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath { cell.backgroundColor = [UIColor lightGrayColor]; } - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { NSInteger count = [[fetchedResultsController sections] count]; if (count == 0) { count = 1; } return count; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { NSInteger numberOfRows = 0; if ([[fetchedResultsController sections] count] > 0) { id sectionInfo = [[fetchedResultsController sections] objectAtIndex:section]; numberOfRows = [sectionInfo numberOfObjects]; } return numberOfRows; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *RecordCellIdentifier = @"RecordCellIdentifier"; RecordTableViewCell *recordCell = (RecordTableViewCell *)[tableView dequeueReusableCellWithIdentifier:RecordCellIdentifier]; if (recordCell == nil) { recordCell = [[[RecordTableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:RecordCellIdentifier] autorelease]; recordCell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; } [self configureCell:recordCell atIndexPath:indexPath]; return recordCell; } - (void)configureCell:(RecordTableViewCell *)cell atIndexPath:(NSIndexPath *)indexPath { // Configure the cell Records *records = (Records *)[fetchedResultsController objectAtIndexPath:indexPath]; cell.records = records; } - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { if (self.searchDisplayController.isActive) [self.tableView reloadData]; Records *records = (Records *)[fetchedResultsController objectAtIndexPath:indexPath]; [self showRecords:records animated:YES]; } //this is from the RecordTableViewCell.m to show you the attributes i m using: #pragma mark - #pragma mark Record set accessor - (void)setRecord:(Record *)newRecord { if (newRecord != record) { [record release]; record = [newRecord retain]; } imageView.image = [UIImage imageNamed:@"icon.png"]; nameLabel.text = record.name; overviewLabel.text = record.overview; partLabel.text = record.part; } thanks again...
