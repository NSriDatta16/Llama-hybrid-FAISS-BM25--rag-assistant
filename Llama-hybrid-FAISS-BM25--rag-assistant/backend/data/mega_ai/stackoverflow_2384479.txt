[site]: stackoverflow
[post_id]: 2384479
[parent_id]: 971383
[tags]: 
With dynamic scope, many optimizations are impossible, because you cannot guarantee the constraints that make the optimization possible. This is especially important in dynamic languages that do not guarantee storage sizes or representations. For example a compiler for a dynamically typed language may be able to take a linked list of boxed objects and replace it with an array of unsigned 8 bit bytes, if it can prove that the elements of the list will always be integers between 0 and 255. This sort of thing is easy to prove with static scope when you use it properly, and can cause huge increase with both space and computational efficiency. It is also often easier to debug lexically scoped code, because dynamic variables are much harder to track down in debugging. There is kind of a spaghetti-code of where things may have been defined, similar with the problems caused by goto and overuse of global variables.
