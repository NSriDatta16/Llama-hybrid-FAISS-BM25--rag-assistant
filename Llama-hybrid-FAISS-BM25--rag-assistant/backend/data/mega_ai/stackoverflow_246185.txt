[site]: stackoverflow
[post_id]: 246185
[parent_id]: 
[tags]: 
How do you balance Framework/API Design and TDD

We are building a framework that will be used by other developers and for now we have been using a lot of TDD practices. We have interfaces everywhere and have well-written unit tests that mock the interfaces. However, we are now reaching the point where some of the properties/methods of the input classes need to be internal, and not visible to our framework users (for example object Id). The problem then is that we can't put those fields/methods on the interface as the interface does not describe accessibility. We could: Still use interfaces and upcast in the first line of the method, but that seems to defeat the purpose of interfaces. Use classes as input parameters - breaking the TDD rule that everything should be interfaces Provide another layer which does some translation between public interfaces and internal interfaces Is there an existing pattern/approach to deal with this? What do the TDD people say should be done?
