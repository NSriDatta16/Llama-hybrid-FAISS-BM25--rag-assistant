[site]: stackoverflow
[post_id]: 1919202
[parent_id]: 1919007
[tags]: 
Due to the way that Rails loads your modules, you cannot do this without modification. Rails includes the associated helper models into the ActionView::Base instance used to render a template. ActionController::Helpers#helper (used in the example above) adds more helper modules to the list of those to be included. The helper methods that are used in views are written as instance methods. Modules in Ruby do not provide any good ways of getting at instance methods without using a constructor. Which is one of the big things that separates modules from classes. To access your helpers from another controller with just OtherControllersHelper.method , you will need to redefine method as a class method. However, redefining those methods as class methods would make them inaccessible from your views. You could duplicate all instance methods in your helpers as class methods, but that's definitely not a better solution that adding helper :other_controllers . There are ways to define wrappers pragmatically, but again, it's not the best way to handle the situation. If you've got a lot of helpers that are likely to be used in multiple controllers/views maybe you're better off putting them somewhere else. Somewhere like app/helpers/application_helper.rb. Or another helper module that could be loaded only in the controllers that need it.
