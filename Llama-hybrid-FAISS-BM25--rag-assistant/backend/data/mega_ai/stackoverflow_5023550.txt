[site]: stackoverflow
[post_id]: 5023550
[parent_id]: 
[tags]: 
How To Implement DDD with C# .NET 4

As I'm typing this, I'm realizing that it's very hard to explain. My apologies if it's indiscernible. My end goal is to have someone with more experience look at how I'm structuring my solution and provide feedback on whether or not it is an acceptable setup. I currently manage several small support projects that are loosely related to one another. They are all over the board. I want to create a unified INTERNAL-WEB application to manage these projects. I've managed to group everything conceptually into three domains. SHIPPING, EXTERNAL-WEB, INTERNAL-WEB. From a business perspective, SHIPPING sends WIDGETs to CUSTOMERs which then connect to EXTERNAL-WEB. The problem is that SHIPPING's definition of WIDGET and CUSTOMER is different than the EXTERNAL-WEB definition, so I need to break these two apart. After some thinking, I've come to the conclusion that the best way to organize this in VS2010 is to create a solution and then nest multiple projects within the solution. I'm envisioning a layout like the following. SOLUTION ---SOLUTION.SHIPPING.Domain (Classes) ---SOLUTION.SHIPPING.Infrastructure (Classes) ---SOLUTION.EXTERNAL-WEB.Domain (Classes) ---SOLUTION.EXTERNAL-WEB.Infrastructure (Classes) ---SOLUTION.INTERNAL-WEB.Domain (Classes) ---SOLUTION.INTERNAL-WEB.Infrastructure (Classes) ---SOLUTION.WebUI (MVC3 Project) I'll have to add additional projects for context maps and anti-corruption layers to allow communication between domains, but this is the basic layout. Is this smart or is it stupid? Thanks, Greg
