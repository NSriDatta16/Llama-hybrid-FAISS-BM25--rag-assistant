[site]: stackoverflow
[post_id]: 5399263
[parent_id]: 5399131
[tags]: 
Without going to the extreme of writing your own XAML compiler, I think the best you can do is an attached property that sets the group of properties you're interested in based on some compact syntax you define. Yes, this means you've allocated storage for the compact representation, but as you say you could immediately clear it after applying. It would be a little unorthodox, but it would technically work. You could also try not declaring an attached property field at all so that the value is accessed via the get/set methods (haven't tried this, but I believe it works when the DP is private, so perhaps this will work). This way, you could actually have it readable too without going to the trouble of listening for changes to relevant properties. Of course, it means your property won't have change notification: public static string GetBounds(UIElement uiElement) { return Canvas.GetLeft(uiElement) + "," + ...; } public static void SetBounds(UIElement uiElement, string compact) { // parse and apply compact } I'm just putting the compact representation in a string above, but you'd probably want to use a specific type. Again, the above may not work - you may need the associated DependencyProperty instance. If I was on a Windows machine, I'd try it.
