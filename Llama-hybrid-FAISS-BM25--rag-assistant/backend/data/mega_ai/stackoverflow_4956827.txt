[site]: stackoverflow
[post_id]: 4956827
[parent_id]: 4929176
[tags]: 
event.currentTarget is not a node, it's the ADG itself. However, it's quite easy to get the information you want, since the ADG stores that data internally (as mx_internal ). I'm using the following code snippets (tested with Flex SDK 4.1) in a dragOver handler, but I guess it will work in a dragDrop handler too. protected function myGrid_dragDropHandler(event:DragEvent):void { // Get the dragged items. This could either be an Array, a Vector or NULL. var draggedItems:Object = getDraggedItems(event.dragSource); if (!draggedItems) return; // That's our ADG where the event handler is registered. var dropTarget:AdvancedDataGrid = AdvancedDataGrid(event.currentTarget); // Get the internal information about the dropTarget from the ADG. var dropData:Object = mx_internal::dropTarget._dropData; // In case the dataProvider is hierarchical, get the internal hierarchicalData aka rootModel. var hierarchicalData:IHierarchicalData = dropTarget.mx_internal::_rootModel; var targetParent:Object = null; // If it's a hierarchical data structure and the dropData could be retrieved // then get the parent node to which the draggedItems are going to be added. if (hierarchicalData && dropData) targetParent = dropData.parent; for each (var draggedItem:Object in draggedItems) { // do something with the draggedItem } } protected function getDraggedItems(dragSource:DragSource):Object { if (dragSource.hasFormat("treeDataGridItems")) return dragSource.dataForFormat("treeDataGridItems") as Array; if (dragSource.hasFormat("items")) return dragSource.dataForFormat("items") as Array; if (dragSource.hasFormat("itemsByIndex")) return dragSource.dataForFormat("itemsByIndex") as Vector. ; return null; }
