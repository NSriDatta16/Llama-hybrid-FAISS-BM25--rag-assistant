[site]: stackoverflow
[post_id]: 2323173
[parent_id]: 2322304
[tags]: 
Somewhere in our framework was a rogue method which was being invoked using reflection: /// /// Sets the expiratoin of the request and force no cache /// protected void SetCacheExpiration(HttpContext context) { //sets the cache to expire immediately context.Response.Cache.SetCacheability(HttpCacheability.NoCache); context.Response.Cache.SetSlidingExpiration(true); context.Response.Cache.SetExpires(DateTime.Now); context.Response.Cache.SetMaxAge(new TimeSpan(0, 0, 0)); context.Response.Cache.SetNoStore(); context.Response.Cache.SetAllowResponseInBrowserHistory(false); context.Response.Cache.SetValidUntilExpires(false); context.Response.Cache.SetRevalidation(HttpCacheRevalidation.AllCaches); } Thanks for your help, caching! It is interesting that the only browser that actually didn't cache the download (when opened) was IE6.
