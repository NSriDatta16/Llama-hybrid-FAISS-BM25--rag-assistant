[site]: stackoverflow
[post_id]: 987507
[parent_id]: 987421
[tags]: 
What you have in mind could, I believe, be done with subtle use of JOIN or nested SELECT , ORDER BY , LIMIT , etc, but, as you surmise, it would be "awfully contrived" and likely pretty slow. As you suspect, you would save yourself a lot of trouble at SELECT time if you added a column to the table, which, for answers, has the primary key of the question they're answering (that could be easily obtained at INSERT time, since it's the latest entry with user equal Alex). Then the retrieval would be easier! If you can alter your schema this way, but need help with the SQL, pls comment or edit your answer to indicate that and I'll be happy to follow up (similarly, I'd be happy to follow up if you're stuck with this schema and need the "awfully contrived" SQL -- I just don't know which of the two possibilities applies!-). Edit: since the schema's changed, the INSERT could be (using form :name to indicate parameters you should bind): INSERT IGNORE INTO andyasks (questions, date, user, answering) SELECT :text, :created_at, :from_user, IF(:from_user='Andy', NULL, aa.id) FROM andyasks AS aa WHERE user='Andy' ORDER BY date DESC LIMIT 1 i.e.: use INSERT INTO ... SELECT' to do a query-within-insertion, which picks the latest post by Andy. I'm assuming you do also have a primary key id` that's auto-increment, which is the normal arrangement of things. Later to get all answers to a given question, you only need to select rows whose answering attribute equals that question's id .
