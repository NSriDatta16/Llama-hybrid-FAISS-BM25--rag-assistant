[site]: stackoverflow
[post_id]: 4633961
[parent_id]: 4633797
[tags]: 
Composability: allows you to compose queries dynamically using different code paths without resorting to complicated and fragile SQL string concatenation Type Safety: The classes generated by LINQ to SQL or Entity Framework are strongly typed, and so type checks are enforced at compile time. Staying in the Object Oriented world: you program in an object oriented language, why not access data in an object oriented fashion? Navigation properties allow you to get all the orders of a customer without writing a single query: cust1.Orders . Readability: LINQ, using query comprehension or extension method syntax, is much more readable then embedding a mismatched DSL such as SQL into existing .NET code. Rapid Application Development (RAD) : With L2S/EF and LINQ, you can hit the ground running. You can get a database-connected application up and running in no-time. Abstraction: Using a single tool, LINQ, you can access various types of data, and even create a query across multiple domains: Various databases, objects, XML, 34 more... Database Generation: if you thought an O/R mapper only maps a database to objects, you thought wrong - it can work the other way too. EF can automatically create a database based on the classes you've created. That can be a reasonably good starting point, or even good enough for small systems.
