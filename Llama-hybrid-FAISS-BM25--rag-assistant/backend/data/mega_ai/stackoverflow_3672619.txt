[site]: stackoverflow
[post_id]: 3672619
[parent_id]: 3672243
[tags]: 
Here's a quick and dirty implementation slightly better implementation (now with the around method called hopefully in the right places), using decorators def hints(before=None, after=None, around=None): """A decorator that implements function hints to be run before, after or around another function, sort of like in the CLOS.""" # Make sure all of our hints are callable default = lambda *args, **kwargs: None before = before if callable(before) else default after = after if callable(after) else default around = around if callable(around) else default # The actual decorator function. The "real" function to be called will be # pased to this as `fn` def decorator(fn): # The decorated function. This is where the work is done. The before # and around functions are called, then the "real" function is called # and its results are stored, then the around and after functions are # called. def decorated(*args, **kwargs): around(*args, **kwargs) before(*args, **kwargs) result = fn(*args, **kwargs) after(*args, **kwargs) around(*args, **kwargs) return result return decorated return decorator # Shortcuts for defining just one kind of hint def before(hint): return hints(before=hint) def after(hint): return hints(after=hint) def around(hint): return hints(around=hint) # The actual functions to run before, after, around def beforefn(): print 'before' def afterfn(): print 'after' def aroundfn(): print 'around' # The function around which the other functions should run @before(beforefn) @after(afterfn) @around(aroundfn) def fn(): print 'Hello World!' # Or use the single @hints decorator @hints(before=beforefn, after=afterfn, around=aroundfn) def fn2(): print 'Goodbye World!' Calling fn() results in this: >>> fn() around before Hello World! after around >>> fn2() around before Goodbye World! after around The decorators in this case might be a little bit confusing, because there are two nested functions involved in each, rather than the one nested function seen in a lot of decorators. It might not be as elegant as the CLOS version (and I may be missing some of its functionality), but it seems to do what you want.
