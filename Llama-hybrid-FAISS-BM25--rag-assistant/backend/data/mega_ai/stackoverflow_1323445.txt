[site]: stackoverflow
[post_id]: 1323445
[parent_id]: 1323133
[tags]: 
You need something like a clone method or a copy constructor. public class Product { public int Id { get; set; } public string Name { get; set; } public int Quantity { get; set; } public Product() { this.Id = 0; this.Name = null; this.Quantity = 0; } public Product(Product product) { this.Id = product.id; this.Name = product.Name; this.Quantity = product.Quantity; } } IList myProducts = new List (); Product product1 = new Product() { Id = 0, Name = "Buzz Cola" }; Product product2 = new Product() { Id = 1, Name = "Choco Bites" }; Product product3 = new Product(product1); // Use copy-constructor. myProducts.Add(product1); myProducts.Add(product2); myProducts.Add(product3); myProducts[0].Quantity = 1; And now everything should be fine. You can use this together with your cloniung method to produce a large number of clones at once. Just to note, this code has still a very bad taste - you are creating different product instances with equal ids. I can just guess, but do you want to build something like a shopping cart with cart items having a quantity and a product? If yes, you should really think about splitting the product class into two classes. And think about the accessibility of your properties aganin. public class Product { public Int32 Id { get; private set; } public String Name { get; private set; } } public class ShoppingCartItem { public Product Product { get; private set; } public Int32 Quantity { get; set; } } public class ShoppingCart { public IList Items { get; private set; } } This solves your current problems because there is no longer a need for cloning products.
