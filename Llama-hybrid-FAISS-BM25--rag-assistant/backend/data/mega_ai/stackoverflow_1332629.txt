[site]: stackoverflow
[post_id]: 1332629
[parent_id]: 1332583
[tags]: 
I agree that the design of this sounds like it could benefit from concurrency. Take a look at the multiprocessing module . You may also want to look at the threading module , and compare speeds. It's difficult to tell exactly how many cores are necessary to gain a benefit from multiprocessing vs. threading and eight cores is well within the range where threading might be faster (yes, despite the GIL). From a design perspective, my biggest recommendation is to avoid interaction between processes entirely if possible. Have one central thread look for the event that triggers process creation (I'm guessing it's a subdirectory creation?) and then spawn a process to handle the subdirectory. From there on out, the spawned process should not interact with any other processes, ever. From your description it seems like this should be possible. Lastly, I'd like to add in a word of encouragement for moving to Python 3.0 . There is a lot of talk of staying with 2.x but 3.0 does make some real improvements, and as more and more people start moving to Python 3.0, it's going to be more difficult to get tools and support for 2.x.
