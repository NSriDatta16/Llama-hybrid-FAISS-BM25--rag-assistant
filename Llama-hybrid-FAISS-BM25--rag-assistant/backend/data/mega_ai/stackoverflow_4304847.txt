[site]: stackoverflow
[post_id]: 4304847
[parent_id]: 4304613
[tags]: 
It's quite difficult to understand your question, IMHO, but I will try. From what I understand, you're doing something like: string helloWorld = string.Empty; if (this.Session["myObject"] == null) { // The object was removed from the session or the session expired. helloWorld = this.CreateNewMyObject(); } else { // Session still exists. helloWorld = this.Session["myObject"].ToString(); // or // What if the session existed here... if (this.Session["myObject"] == null) { this.Session["myObject"] = this.CreateNewMyObject(); } // ... but expired just there? string helloWorld = this.Session["myObject"].ToString(); I thought that Session object is managed by the same thread as the page request, which would mean that it is safe to check if object exists, than use it without a try/catch. I were wrong: For Cache objects you have to be aware of the fact that youâ€™re dealing essentially with an object accessed across multiple threads Source: ASP.NET Cache and Session State Storage I were also wrong about not reading to carefully the answer by Robert Koritnik, which, in fact, clearly answers the question. In fact, you are warned about the fact that an object might be removed during page request. But since Session lifespan relies on page requests, it would mean that you must take in account the removal of session variables only if your request takes longer than the session timeout (see How is Session processed in the answer by Robert Koritnik). Of course, such situation is very rare. But if in your case, you are pretty sure that the page request can take longer than 20 minutes (default session timeout), than yes, you must take in account that an object may be removed after you've checked if it exists, but before you really use it. In this situation, you can obviously increment the session timeout, or use try/catch when accessing the session objects. But IMHO, if the page request takes dozens of minutes, you must consider other alternatives, as Windows services, to do the work.
