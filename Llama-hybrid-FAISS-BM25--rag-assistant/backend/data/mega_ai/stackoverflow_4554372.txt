[site]: stackoverflow
[post_id]: 4554372
[parent_id]: 4554313
[tags]: 
The conditional expression could contain any C operator except for the assignment operators,increment, and decrement operators. This says, you cannot write these, #if X = 4 //wrong #if X++ //this too wrong #if X-- //this too EDIT: I just read your comment on Diego Sevilla's post , Agreed but why something like this (ideone.com/ahXDA) is not allowed ? â€“ Philando Gullible This code actually equivalent to this which you write in the global scope, //global code int b=7; b++; //ill-formed! Which is not allowed in C (and C++). This however is allowed in C ONLY, //legal in C Only int b = 7; int b; //well-formed! Here the second definition is called tentative definition . C Standard says in $6.9.2/2, A declaration of an identifier for an object that has file scope without an initializer , and without a storage-class specifier or with the storage-class specifier static, constitutes a tentative definition .If a translation unit contains one or more tentative definitions for an identifier, and the translation unit contains no external definition for that identifier, then the behavior is exactly as if the translation unit contains a file scope declaration of that identifier, with the composite type as of the end of the translation unit, with an initializer equal to 0. Which again implies, the following is not allowed, //illegal in both C and C++ int b=7; int b=8; //error It's not a tentative definition anymore. It's redefinition, which is not allowed!
