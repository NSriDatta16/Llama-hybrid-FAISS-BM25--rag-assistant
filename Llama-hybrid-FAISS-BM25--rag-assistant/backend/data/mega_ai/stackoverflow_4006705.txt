[site]: stackoverflow
[post_id]: 4006705
[parent_id]: 
[tags]: 
Prolog - call a rule with fact

TL;DR: Need help calling a rule with a fact I´ve started out with Prolog, coming from C and got stuff working... until they evidently got broken. I´m writing a small car-paint program for myself as I´m learning this new language I'm trying to call a rule with a fact (is this possible?), what I want to do is use one fact "cars" and another fact "paint" to make one big list consisting of all the cars in all the different paints. I'm having trouble making the code work as I want...have a look I´ve got the facts: cars([ferrari, bmw, ford, jaguar]). paints([red, white, blue, yellow]). /*Now I wanted to loop through each car, eachtime printing out the different paint combinations of that car: */ start:- loop_cars(cars(C)). /*starts loop_cars with all the cars e.g [ferrari...]*/ /*but it false here, even if C = [ferrari...]*/ loop_cars([]). loop_cars([Ca|Rest]):- loop_paints(Ca,paints(P)), /*The car is sent off for a paint job,...*/ loop_cars(Rest). /*...(cont from above) same false here as before*/ loop_paints(_,[]). loop_paints(Ca,[Pa|Rest]):- /*This works*/ write([Ca,Pa]), /*Writes it like "[ferrari, white] [ferrari, blue] ..."*/ loop_paints(Ca,Rest). So I guess I need help solving two problems: How do i pass the contents of the facts cars and paints to the two loops? A "garage" to put all the combinations in. Garage being a big list consisting of small 2-items-lists (the car and paint).
