[site]: stackoverflow
[post_id]: 1072015
[parent_id]: 1071720
[tags]: 
For what you're describing, std::vector isn't a terribly good choice. This is an SQL equivalent to a table with no indexes. On top of that, filling one container with the contents of another container is possibly a reasonable performance optimization, but not very readable, and not quite idiomatic, either. There are a number of ways of solving this portably (IE, without relying on managed code .net). First choice is to choose a better container. If you don't need to have stable iteration, then you should use std::set or std::multi_set. these containers use a balanced search tree to store the values in order. This is equivalent to a simple SQL index of all columns. std::set numbers; for ( int i = -10; i Now you can iterate from first until end without wasting any extra effort, over the O(n log(n)) fill and O(log(n) ) seek. Iterating is O(1) for std::set::iterator If, for some reason you must use a vector, you can get more idiomatic C++ using std::find_if (see Max Lybbert's answer) bool isPositive(int n) { return n > 0; } std::vector numbers; for ( int i = -10; i ::const_iterator end = numbers.end(), iter = std::find_if(numbers.begin(), end, isPositive); // If you want something even more evocative of SQL without actually connecting to a database, you should look at Boost , particularly the boost::multi_index container and boost iterators.
