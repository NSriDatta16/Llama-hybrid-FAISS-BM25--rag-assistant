[site]: stackoverflow
[post_id]: 3008334
[parent_id]: 3008232
[tags]: 
Q1: It depends how efficiently you want to do your searches.. for now, since you don't store back references you have to first search in which branch is your player and then search which is the club that contains your branch. With good equals method for your Branch and Player class this is trivial: for (Team t : teamList) { if (t.branches.contains(player)) return true; } return false; But this won't be efficient since you'll have a O(n*m) complexity where n is the team size and m is the average branch size. If you want something more efficient I'd suggest you to store backreferences inside your classes, you can have your Player class with two attributes Branch currentBranch Team currentTeam and you can set them while you add the player to a branch/team. Otherwise you can keep a separate HashMap that maps every player to his branch/team. Less memory efficient but quite straightforward. Q2: to remove the Player from his branch/team you just have to know in which one he stays.. (using the answer to Q1), then before removing from players you just remove it from the corresponding branch/team: Branch b = findWhichBranch(player); Team t = findWhichTeam(player); b.remove(player); t.remove(player); players[index] = null; Of course if branch is implied by team you will just remove it from the branch, since there's no direct association between a player and a team.
