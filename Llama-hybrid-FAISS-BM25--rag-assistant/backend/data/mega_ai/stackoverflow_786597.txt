[site]: stackoverflow
[post_id]: 786597
[parent_id]: 786582
[tags]: 
Number of "pages" or "areas" that the users will have access to Problem : This can be fudged by separating parts into different pages or sections when it would make much more sense to consolidate them into a single "control center" interface. Number of classes Problem : This does not take into account the complexity (or simplicity) of some classes in comparison to others. You may have a single class which contains two properties and a method, while another class can be hardcore. Number of non-lookup tables Problem : This will not take into account the complexity of your software, only the data layer that it rests on top of. Some of the same problems associated with number of classes can also be applied here in terms of some tables being more complex then others. Lines of code Problem : This is a fairly standard metric, but it puts a lot more positive connotation on programs with lots of lines, instead of encouraging more efficient and elegant code. How many man hours it took to develop Problem : No two developers have the same skillsets and no two developers will likely take the exact same amount of time (or follow the same path) when it comes to creating a piece of software. So it may take a single developer the same amount of time it takes a team of 3 less skilled/experienced developers to bang out the same amount of code. Also, the entire "Mythical Man Month" can start to rear its head if you start applying more people to a problem than is really necessary. Overall I think the biggest problem with metrics is that they try and measure some quantifiable property of the software, when in reality software is about quality instead of quantity , and that is where metrics really fail.
