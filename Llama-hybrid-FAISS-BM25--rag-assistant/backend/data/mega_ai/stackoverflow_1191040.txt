[site]: stackoverflow
[post_id]: 1191040
[parent_id]: 1189370
[tags]: 
You can use the TagBuilder class to make HTML strings if you prefer it over String.Format() or string concatenation. I've also used the System.Xml.Linq classes for very complicated HTML. The general rule that i follow is: "If there's an if, write an HTML helper." I can't claim credit for that statement, but I don't remember where I heard it. This rule is going to cause an explosion of HTML helper extensions, so I organize my extensions with namespaces. I make an extension namespace that is shared amongst views that I add to the web.config, and then I make view-specific extension code files and namespaces that I use for each specific view. This makes it much easier to find where your extensions reside if you organize your code in a logical manner and you won't have a huge amount of unnecessary helpers cluttering up your HTML object where they aren't needed. Here's an example, using the default app name MvcApplication1. Added to web.config to include my shared helpers in all views: This is a simplified and contrived example of my view-specific helpers for Home/About.aspx. namespace MvcApplication1.Helpers.About { public static class AboutViewExtensions { public static string AboutViewHelper(this HtmlHelper Html) { var tb = new TagBuilder("b"); tb.SetInnerText("bold text"); return tb.ToString(TagRenderMode.Normal); } } } Here's the About.aspx view using the directive to bring in my namespace. About
