[site]: stackoverflow
[post_id]: 4650778
[parent_id]: 1319891
[tags]: 
A short Clojure version that has the advantage of being O(list length) regardless of your period: (defn moving-average [list period] (let [accums (let [acc (atom 0)] (map #(do (reset! acc (+ @acc %1 ))) (cons 0 list))) zeros (repeat (dec period) 0)] (concat zeros (map #(/ (- %1 %2) period) (drop period accums) accums)))) This exploits the fact that you can calculate the sum of a range of numbers by creating a cumulative sum of the sequence (e.g. [1 2 3 4 5] -> [0 1 3 6 10 15]) and then subtracting the two numbers with an offset equal to your period.
