[site]: stackoverflow
[post_id]: 3659916
[parent_id]: 3659773
[tags]: 
Do not walk the filesystem (!) and scan the Python source code of the backends! That's an ugly hack at the best of times, and even worse here because you don't need anything like it at all! Registering all the classes on import is perfectly OK. Store the backends in a class attribute instead of an instance attribute; that way, all Storage instances will look at the same set of backends: >>> class Storage(object): ... backends = set() ... ... def register(self, backend): ... self.backends.add(backend) ... Every backend can register itself by instantiating its own Storage , which has access to the class-level backends attribute: >>> foo = Storage() >>> foo.register("text") >>> bar = Storage() >>> bar.register("xml") You can read this attribute by instantiating another Storage , which will read the same variable: >>> baz = Storage() >>> baz.backends {'xml', 'text'} You could even store the backend instances in a class attribute of Connection , and register each backend upon instantiation: >>> class Connection(object,metaclass=abc.ABCMeta): ... @abc.abstractmethod ... def register(self, backend): ... pass ... ... backends = set() ... >>> class TextBackend(Connection): ... def register(self): ... super().backends.add(self) ... ... def __init__(self): ... self.register() ... >>> class XMLBackend(Connection): ... def register(self): ... super().backends.add(self) ... ... def __init__(self): ... self.register() ... >>> foo = TextBackend() >>> bar = XMLBackend() >>> Connection.backends { , \ }
