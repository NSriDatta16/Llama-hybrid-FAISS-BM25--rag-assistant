[site]: stackoverflow
[post_id]: 3966225
[parent_id]: 3966201
[tags]: 
For the second question List comprehensions are used for generating another list as output of iteration over other list or lists. Since you want to run foo a numer of times, it is more elegant and less confusing to use for .. in range(..) loop. If you are interested in collating the return value of foo, then you should use list comprehension else for loop is good. At least I would write it that way. See the example below: >>> [x for x in range(10)] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> def foo(): print 'foo' ... >>> >>> [foo() for x in range(10)] foo foo foo foo foo foo foo foo foo foo [None, None, None, None, None, None, None, None, None, None] >>> [Edit: As per request] The iter version that was provided by eumiro. >>> results = ( foo() for _ in xrange(10) ) >>> results at 0x10041f960> >>> list(results) foo foo foo foo foo foo foo foo foo foo [None, None, None, None, None, None, None, None, None, None] >>>
