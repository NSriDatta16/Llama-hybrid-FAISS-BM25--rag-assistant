[site]: stackoverflow
[post_id]: 1683790
[parent_id]: 1683706
[tags]: 
I refer you to the C# Language Specification v3.0, from which this quote has been extracted from the Enum section on page 29: "Each enum type has a corresponding integral type called the underlying type of the enum type. An enum type that does not explicitly declare an underlying type has an underlying type of int. An enum typeâ€™s storage format and range of possible values are determined by its underlying type. The set of values that an enum type can take on is not limited by its enum members. In particular, any value of the underlying type of an enum can be cast to the enum type and is a distinct valid value of that enum type." The .AreEqual method is really testing equivalence while the second tests identity. So, simply cast each one to its underlying type (in this case, int) and then do the comparison. public enum enumA { one, two } public enum enumB { one, two } [Test] public void PreTest() { Assert.AreEqual((int)enumA.one,(int)enumB.one); Assert.AreSame(enumA.one, enumB.one); }
