[site]: stackoverflow
[post_id]: 2165026
[parent_id]: 2163490
[tags]: 
In my experience, threading makes it very easy for your code to look logical and clean, when horrible synchronization issues are lurking, waiting for some events to occur in just the right sequence that the application blows up. Threading is a very useful tool - you need to think with threads if your application is going to be able to take full advantage of your CPU(s), and learning to work with threads is a step towards learning to leverage distributed processing (at least, I think so). My preference is to write applications using asynchronous callbacks, instead of blocking calls, and explicitly direct which thread I want to use for handling the callback. This has the following advantages: It makes the state variable interactions much more controllable, therefore predictable, which means the threading is more robust. If done right, it can take the best advantage of the number of processors your CPU has. It allows you to directly control the priority you want to give to certain functions - if this function is high-priority, you dispatch it to a high-priority thread, then when it completes, it sends the results back to the low priority caller via a continuation in the caller's thread. Or to another thread - no reason to limit that. It's often possible to port to non-threaded environments. Maybe not important for most, but sometimes important for me.
