[site]: stackoverflow
[post_id]: 1112767
[parent_id]: 1095355
[tags]: 
This is a very long standing bug that’s been around since the days of access 97, (about 4-5 versions of access). The solution here is to NEVER use the forms qualifier, simply place the following in your on action event, and you’ll be just fine =PopUpProcess() Note that you must precede it with=, and the suffix must have the brackets () Keep in mind that you can actually use behavior to your advantage. The function that runs is going to be from the form that currently has the focus on the screen. That means you can have different forms with the same name of the function, and whichever form has the focus, that function with that name will run from that forms code module. Even better, if one of the forms does not have that function as public in the forms code module, then the function in a standard code module is used. So you might have nine forms, that all use the standard one function in the main standard code module. However, the 10th form might need to run special code, so you simply place that function code in the form’s code module as public and it will run in place of the public on in the standard code module. This approach allows you to build a single custom menu bar that applies to many different forms, but those many forms will run different code on from that custom menu bar. This also encourages you to place the menu code in the form it belongs. So to solve your problem, simply don’t use a form’s qualifier, and use the above format. Note that you can pass Parameters from those functions also, for example =PopUpProcess(‘hello’) And then declare the function as: Public Function PopUpProcess(strParm as string) Keep in mind that the function and syntax and all of what I stated above also applies to when you use the on action in a ribbon for access 2007.
