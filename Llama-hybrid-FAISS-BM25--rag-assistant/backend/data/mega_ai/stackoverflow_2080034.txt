[site]: stackoverflow
[post_id]: 2080034
[parent_id]: 2079902
[tags]: 
The Gang Of Four "Design Patterns; Elements of Reusable Object-Oriented Software" book contains two entries, "Abstract Factory" (aka 'Virtual Constructor') and "Factory Method". I don't know about "Concrete Factory." I've heard the term, but never given it too much thought. Factory Method In "Factory Method" an object has a method which is responsible for the instantiation of another object. A common example would be the JavaScript document object and the creation of HtmlElement objects: var newDiv = document.createElement('div'); This isn't a great example though, as an important part of the Factory Method is polymorphism. If I could extend document to define another class which defines another createElement this would be prime Factory Method material. Abstract Factory An abstract factory is meant to "provide an interface for creating families of related or dependent objects without specifying concrete classes. The typical straight-out-of-the-book example is a Widget Factory; back in the day when the GoF was published, cross-platform GUI development was a bit of a hassle, so you could define an abstract widget factory class. That class could have methods createWindow , createButton , createScrollBar etc. In turn, several implementations would be defined to produce Swing widgets or AWT or whatever. Then, depending on configuration, the different class would be instantiated. Addendum - Concrete Factory I believe that a Concrete Factory is any non-abstract implementation of Abstract Factory or Factory method. So, when I write my own generalization of document which overrides createElement , the class I create is a Concrete Factory. Likewise, while WidgetFactory would be an Abstract Factory, SwingWidgetFactory would be a concrete factory.
