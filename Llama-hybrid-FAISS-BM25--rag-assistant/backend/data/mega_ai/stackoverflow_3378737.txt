[site]: stackoverflow
[post_id]: 3378737
[parent_id]: 3352275
[tags]: 
You need some way to keep track of which clients are in a lobby together. You can do this with a simple global array like so process.lobby[1] = Array(ClientASocket, ClientBSocket) or something similar (possibly with some additional data, like nicknames and such), where the ClientXSocket is the socket object of each client that connects. Now you can hook the lobby id (1 in this case) onto each client's socket object. A sort of session variable (without the hassle of session ids) if you will. // i just made a hashtable to put all the data in, // so that we don't clutter up the socket object too much. socket.sessionData['lobby'] = 1; What this allows you to do also, is add an event hook in the socket object, so that when the client disconnects, the socket can remove itself from the lobby array immediately, and message the remaining clients that this client has disconnected. // see link in paragraph above for removeByValue socket.on('close', function(err) { process.lobby[socket.sessionData['lobby']].removeByValue(socket); // then notify lobby that this client has disconnected. }); I've used socket in place of the net.Stream or request.connection or whatever the thing is. Remember in HTTP if you don't have keep-alive connections, this will make the TCP connection close, and so of course make the client unable to remain within a lobby. If you're using a plain TCP connection without HTTP on top (say within a Flash application or WebSockets), then you should be able to keep it open without having to worry about keep-alive. There are other ways to solve this problem than what I've shown here, but I hope I got you started at least. The key is keeping a persistent object for each client. Disclaimer: I'm not a Node.js expert (I haven't even gotten around to installing it yet) but I have been reading up on it and I'm very familiar with browser js, so I'm hoping this is helpful somehow.
