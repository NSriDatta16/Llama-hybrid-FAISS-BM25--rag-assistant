[site]: stackoverflow
[post_id]: 4546579
[parent_id]: 1590381
[tags]: 
I have an almost identical situation and I think there's a way to do this. My issue is finding whether a text bounding box intersects with a complex set of lines (maybe smoothened) drawn on a surface. This is currently a bottleneck and fast intersection handling would speed the sw by maybe 100x. Who knows. Anyways, thanks to ntd's mention of cairo_in_stroke I began to twist the issue around. Here's the thing. cairo_in_stroke itself only tells "whether the given point is inside the area that would be affected by a cairo_stroke() operation given the current path and stroking parameters" This is pretty useless. Unless we make the line width temporarily so wide that the path starts gaining area. set line width to half the height of the bounding box (let's call this X) test positions X,2X,... into the bounding box from both sides, until they meet in the center The tested area is not precisely the bounding box but an overlapping chain of circles approximating it. If you want to be on the safe side, adding line width will make sure the bounding box really is never touched. I will report if I got this method to actually do the trick (and how fast it became).
