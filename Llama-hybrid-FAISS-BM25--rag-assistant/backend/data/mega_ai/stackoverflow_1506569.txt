[site]: stackoverflow
[post_id]: 1506569
[parent_id]: 1506427
[tags]: 
I will admit that when recently writing units tests for C# I discovered that many of the tricks I knew for Java did not really apply (in my case it was testing internal classes). For example 1, if you can fake/mock the data retrieval handler you can get access to the callback through the fake. (Most other languages I know that use callbacks also tend not to make them private). For example 2 I would look into firing the event to test the handler. Example 3 is an example of the Template Pattern which does exist in other languages. I have seen two ways to do this: Test the entire class anyway (or at least relevant pieces of it). This particularly works in cases where the abstract base class comes with its own tests, or the overall class is not too complex. In Java I might do this if I were writing an extension of AbstractList, for example. This may also be the case if the template pattern was generated by refactoring. Extend the class again with extra hooks that allow calling the protected methods directly.
