[site]: stackoverflow
[post_id]: 105391
[parent_id]: 105307
[tags]: 
Maven would be a good fit for your project IMO. Maven is an all around build and deployment management tool. It's biggest strength is that it makes build scripts significantly eaiser to maintain than functionally comparable Ant files or shell scripts. There are a lot of advantages to using maven the biggest being it's preference of convention over configuration. This means that if you have your project laid out using the Maven directory structure there is almost no configuration required to get it building and running your JUnit tests. The other big win that Maven gives you is dependency management. You can declaratively define your project's dependencies in Maven's config file called the Project Object Model (POM) and Maven does the work of storing all the jars in a local directory structure that it maintains. In the case of publicly available artifacts the jars are automatically downloaded from the Maven central repository and in the case of internal or proprietary 3rd party jars you can install them into your repository with a single command. In addition to just organizing these artifacts and automatically setting up your build classpath to include all the necessary jars, maven will also manage dependency hierarchies. That means that if your project depends on jar A and A depends on jar B, jar B will automatically be bundled with your WAR even though you don't explicitly list it as a dependency in your build config. Also, I'll say from a professional development standpoint it makes sense to learn Maven since in my experience Maven has overtaken Ant as the de jure build tool of choice both in open source and proprietary Java projects. All this being said, if you have a build system that is fast and reliable for you, then it might not be worth the effort to convert over to Maven just for the sake of using the same tool everyone else is.
