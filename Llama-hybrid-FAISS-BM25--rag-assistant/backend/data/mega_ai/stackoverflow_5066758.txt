[site]: stackoverflow
[post_id]: 5066758
[parent_id]: 5066291
[tags]: 
Since there is no main-Method, you have to write one, or write a whole new class to call the class/method TiffConver.convertPDF . The question is, how you're going to use it. From the command line, you need no executable jar. From the Gui, maybe you want to pass a file to be converted by drag and drop? Then you should take the parameter(s) passed to main as Input-PDF-Names (if they end in .pdf) and pass the names iteratively to TiffConverter, for "a.pdf b.pdf" => TiffConver.convertPDF ("a.pdf", "a.tiff"); TiffConver.convertPDF ("b.pdf", "b.tiff"); TiffCoverter will silently overwrite existing tiffs, so check that before or change the code there - this is clearly bad habit, and look out for more such things - I didn't. /* * Remove target file if exists */ File f = new File(tif); if (f.exists()) { f.delete(); } Maybe you wan't to write a swing-wrapper, which let's you choose Files interactively to be converted. This would be a nice idee, if no filename is given. If the user passes "a.pdf xy.tiff" you could rename the converted file to xy, as additional feature. Without a main-class, however, a standalone jar would be magic. However, building a native executale is almost always a bad idea. You loose portability, you don't profit from security- and performance improvements to the JVM or fixed bugs. For multiple programs you need always an independend bugfix, which you might have to manage yourself, if you don't have a package-management as most linux distros have. after clearing some questions: public static void main (String [] args) { if (args.length == 1 && args[0].endsWith (".pdf")) { String target = args[0].replaceAll (".pdf$", ".tif"); convertPDF (args[0], target); } } This method you put into TiffConvert. It will allow you to convert a simple pdf-File, and generate a tif-File with the same basename but ending in .tif, silently overwriting an existing one of the same name. I guess you now need to know how to start it?
