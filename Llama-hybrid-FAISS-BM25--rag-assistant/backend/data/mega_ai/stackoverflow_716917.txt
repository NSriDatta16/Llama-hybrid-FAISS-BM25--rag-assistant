[site]: stackoverflow
[post_id]: 716917
[parent_id]: 716386
[tags]: 
Depending on what's happening elsewhere in your app, your instance might actually be getting copied. In this case, implement the copyWithZone method to ensure that the new copy gets the renderer as well. (Caveat, while I am a Python developer, and an Objective-C cocoa developer, I haven't used PyObjC myself, so I can't say for certain if you should be implementing copyWithZone or __copy__ ). In fact, shoving a copyWithZone method into the class with a print will allow you to tell if the method is being called and if that's the reason renderer appears to have vanished. Edit : Base on your feedback, I've pasted your code into a blank xcode python project (just substituting something else for gv.CoreRenderer, since I don't have that), and it works fine with some minor modifications. How are you instantiating your SceneView? In my case I: Created a blank xcode project using the Cocoa-Python template Created a new file called SceneView.py . I pasted in your code. Opened the MainMenu.xib file, and dragged an NSOpenGLView box onto the window. With the NSOpenGLView box selected, I went to the attributes inspector and changed the class of the box to SceneView Back in xcode, I added import SceneView in the imports in main.py so that the class would be available when the xib file is loaded I implemented an awakeFromNib method in SceneView.py to handle setting up self.renderer . Note that __init__ , and initWithFrame are not called for nib objects during your program execution... they are considered "serialized" into the nib file, and therefore already instantiated. I'm glossing over some details, but this is why awakeFromNib exists. Everything worked on run. The __dict__ had appropriate values in the drawRect_ call, and such. Here's the awakeFromNib function: def awakeFromNib(self): print "Awake from nib" self.renderer = gv.CoreRenderer() So, I'm guessing there are just some crossed wires somewhere in how your object is being instantiated and/or added to the view. Are you using Interface Builder for your object, or are you manually creating it and adding it to a view later? I'm curious to see that you are getting loggin outputs from initWithFrame, which is why I'm asking how you are creating the SceneView.
