[site]: stackoverflow
[post_id]: 4528588
[parent_id]: 4528568
[tags]: 
Not all virtual (linear) addresses must be mapped to anything. If the code accesses unmapped page, the page fault is risen. The physical page can be mapped to several virtual addresses simultaneously. In the 4 GB virtual memory there are 2 sections: 0x0... 0xbfffffff - is process virtual memory and 0xc0000000 .. 0xffffffff is a kernel virtual memory. How can the kernel map 896 MB from only 512 MB ? It maps up to 896 MB. So, if you have only 512, there will be only 512 MB mapped. If your physical memory is in 0x00000000 to 0x20000000, it will be mapped for direct kernel access to virtual addresses 0xC0000000 to 0xE0000000 (linear mapping). What about user mode processes in this situation? Phys memory for user processes will be mapped (not sequentially but rather random page-to-page mapping) to virtual addresses 0x0 .... 0xc0000000. This mapping will be the second mapping for pages from 0..896MB. The pages will be taken from free page lists. Where are user mode processes in phys RAM? Anywhere. Every article explains only the situation, when you've installed 4 GB of memory and the No. Every article explains how 4 Gb of virtual address space is mapped. The size of virtual memory is always 4 GB (for 32-bit machine without memory extensions like PAE/PSE/etc for x86) As stated in 8.1.3. Memory Zones of the book Linux Kernel Development by Robert Love (I use third edition), there are several zones of physical memory: ZONE_DMA - Contains page frames of memory below 16 MB ZONE_NORMAL - Contains page frames of memory at and above 16 MB and below 896 MB ZONE_HIGHMEM - Contains page frames of memory at and above 896 MB So, if you have 512 MB, your ZONE_HIGHMEM will be empty, and ZONE_NORMAL will have 496 MB of physical memory mapped. Also, take a look to 2.5.5.2. Final kernel Page Table when RAM size is less than 896 MB section of the book. It is about case, when you have less memory than 896 MB. Also, for ARM there is some description of virtual memory layout: http://www.mjmwired.net/kernel/Documentation/arm/memory.txt The line 63 PAGE_OFFSET high_memory-1 is the direct mapped part of memory
