[site]: stackoverflow
[post_id]: 1008941
[parent_id]: 1008740
[tags]: 
The general idea is to stick to ActiveRecord -generated queries as much as possible, and use SQL fragments only where necessary . SQL fragments are explicitly supported because the creators of ActiveRecord realised that SQL cannot be completely abstracted away. Using the the find method without SQL fragments is generally rewarded with better maintainability. Given your example, try: Book.find(:all, :conditions => ["created_at >= ? AND created_at :carts) The :inlude => :carts will do the join if you added has_many :carts to your Book model. As you can see, there does not have to be much SQL involved. Even the quoting and escaping of input can be left to Rails, while still using SQL literals to handle the >= and operators. Going a little bit further, you can make it even clearer: class Book { :created_at => start_date..end_date } } } named_scope :updated_before, lambda { |date| { :conditions => ["updated_at :carts) Update: the point of the named_scope s is, of course, to reuse the conditions. It's up to you to decide whether or not it makes sense to put a set of conditions in a named scope or not.
