[site]: stackoverflow
[post_id]: 4229112
[parent_id]: 4227967
[tags]: 
To justify your concerns: YES, working with the SoapClient can be frustrating. Mostly because of the documentation. Here's a piece of sample code for you that I got working for a project a while back, though. I ended up using this technique in a library for a payment gateway. I know this isn't exactly pretty with the dereferenced function call from a string name, but it does work. $method = "ACTION"; $wsdl = "WSDLFILE.wsdl"; $parameters = array ( 'location' => "http://url.com", 'local_cert' => "/full/path/to/CERTIFICATE.pem," 'passphrase' => "TEST-PASSWORD", 'use' => SOAP_ENCODED , 'connection_timeout' => 4, 'user_agent' => null ); $client = new SoapClient( $wsdl, $parameters ); $response = $client->{$method}( $data ); var_dump( $response ); To elaborate, after you have your wsdl and certificate set up (if required), then the SoapClient creates on the fly a function (the $method) corresponding to what's in the WSDL, ie: for an action such as "Capture()" or "Authorize()". The client then handles the XML send/parse. Whether you use SOAP_ENCODED or not, and how you pass the parameters really depends on what's on the other end. I've dealt with creating envelope XML manually, though, and I'd advise against it. As long as you get a good WSDL dump, which a .NET project will do automatically and shouldn't be a problem, it's a good way to avoid a maintenance nightmare if/when it gets changed/updated as opposed to having to go manually twiddle XML text.
