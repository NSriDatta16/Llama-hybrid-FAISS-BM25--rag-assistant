[site]: stackoverflow
[post_id]: 1171271
[parent_id]: 1165182
[tags]: 
I found smart solution of your problem, sadly it is only applicable if number of colors is power of 2. I'll show it in case of two colors: mask = 01010101 pom = ~(a^b & mask) # ^ means xor here, ~ negation a = a & pom b = b & pom avg = (a+b) >> 1 The trick of this method is — when you count average, LSB of sum (in case of two numbers) has no meaning, as it will be dropped in division (we're talking integers here, of course). In your problem, LSB of partial sums is at the same moment carry bit of sum of adjacent color. Provided, that LSB of every color sum will be 0 you can safely add those two integers — additions won't interfere with each other. Bit shift divides every color by two. This method can be used with 4 colors as well, but you have to implement finding out the carry flag of sum of numbers made of two last bits of every color. It is also possible to omit this part and just zero last two bits of every color — biggest mistake made with this omission is 1 for every component.
