[site]: stackoverflow
[post_id]: 5074152
[parent_id]: 5061693
[tags]: 
This is definitely a very interesting question, and I wish I had the time to put together some test code to see if the idea I'm about to outline would actually work. My hope is that this will at least point you in the right direction. UITableViewCell is a subclass of UIView, so I would create a subclass of UITableViewCell called something like DraggableTableViewCell so we can handle the touch events and then perform the following steps: Create an instance of DraggableTableViewCell and configure it to appear like the selected cell. Add the new cell as a subview of a view that is a common superview to both tables at the same location as the original cell. Update the data source for the source table view and remove the original cell from the table view using deleteRowsAtIndexPaths:withRowAnimation: Move the cell on the display by responding to touchesMoved:withEvent: When touchesEnded:withEvent: is received, verify the cell is somewhat close to the other table view and determine the index path where to insert the new cell Update the data source for the destination table view and call insertRowsAtIndexPaths:withRowAnimation: Remove your draggable cell from its superview with a nice animation. This entire process will need to be orchestrated by the view controller that controls the various table views on the screen.
