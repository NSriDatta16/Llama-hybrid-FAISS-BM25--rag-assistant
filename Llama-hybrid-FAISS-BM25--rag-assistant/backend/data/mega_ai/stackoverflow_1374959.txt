[site]: stackoverflow
[post_id]: 1374959
[parent_id]: 1374840
[tags]: 
In your game tiles example, my first instinct would be to create a vector , not a vector or a ptr_vector. Then use pointers to the tiles as you please, without worrying about ownership at all, provided that the objects which hold the pointers don't outlive the vector of tiles. You've said it's only destroyed when the game ends, so that shouldn't be difficult. Of course there may be reasons this is not possible, for instance because Tile is a polymorphic base class, and the tiles themselves are not all of the same class. But this is C++, not Java, and not every problem always needs dynamic polymorphism. But even if you do really need pointers, you can still make copies of those pointers without any ownership semantics, provided that the scope and storage duration of the objects pointed to is understood to be wider than the scope and duration of use of the pointer: int main() { vector v; // fill in v, perhaps with heap objects, perhaps with stack objects. runGame(v); } void runGame(const vector &v) { Tile *firsttile = v[0]; vector eventiles; eventiles.push_back(v[2]); eventiles.push_back(v[4]); // and so on. No need to worry about ownership, // just as long as I don't keep any pointers beyond return. // It's my caller's problem to track and free heap objects, if any. }
