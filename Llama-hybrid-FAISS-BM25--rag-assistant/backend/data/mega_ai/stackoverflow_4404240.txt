[site]: stackoverflow
[post_id]: 4404240
[parent_id]: 4398306
[tags]: 
One problem is that ordinary dictionaries can't be sorted because of the way they're implemented internally. Python 2.7 and 3.1 had a new class named OrderedDict added to their collections module as @kindall mentioned in his answer . While they can't be sorted exactly either, they do retain or remember the order in which keys and associated values were added to them, regardless of how it was done (including via the update() method). This means that you can achieve what you want by adding everything from the input dictionary to an OrderedDict output dictionary in the desired order. To do that, the code you had was on the right track in the sense of creating what you called the list_value_key list and sorting it. There's a slightly simpler and faster way to create the initial unsorted version of that list than what you were doing by using the built-in zip() function. Below is code illustrating how to do that: from collections import OrderedDict adict = {1:1, 2:2, 5:1, 10:2, 44:3, 67:2} # input dictionary # zip together and sort pairs by first item (value) value_keys_list = sorted(zip(adict.values(), adict.keys())) sorted_adict = OrderedDict() # value sorted output dictionary for pair in value_keys_list: sorted_adict[pair[1]] = pair[0] print sorted_adict # OrderedDict([(1, 1), (5, 1), (2, 2), (10, 2), (67, 2), (44, 3)]) The above can be rewritten as a fairly elegant one-liner: sorted_adict = OrderedDict((pair[1], pair[0]) for pair in sorted(zip(adict.values(), adict.keys())))
