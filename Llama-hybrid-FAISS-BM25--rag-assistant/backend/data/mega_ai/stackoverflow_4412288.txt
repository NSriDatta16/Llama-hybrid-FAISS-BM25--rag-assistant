[site]: stackoverflow
[post_id]: 4412288
[parent_id]: 891437
[tags]: 
An article on Tech Your Universe talks about the require vs require_once issue . In essense, when doing absolute paths require() is definitely faster than require_once() and include() is definitely faster than include_once() . Their exact claim when they replaced the once calls with the sans-once calls: First, strace revealed that there were 2848 syscalls to serve a page, down from 4782, (-40%). Next I went to ab for more testing, and found that the average page request time went down to 36.5, from 46.5ms (-22%), and the server was able to serve 27.1 requests per second, up from 21.4 (+%22) . According to comment 90017 by Konstantin Rozinov on the require_once page on php.net , the difference between require() and require_once() is tiny and only makes a difference on large web applications. I would personally like a definition of large, but I think we get the idea. The commentator also claims that "when using APC opcode caching, the speed difference between the two is completely irrelevant." Regarding the actual implementation of require and require_once: "This indicates that either the OS (Ubuntu Linux in my case), or Apache is "caching" or knows the results of the previous stat() calls, so it doesn't bother repeating them." Take that for what it is worth. My personal summation: If you are going to use require_once , try to use absolute paths. Be sure to use opcode caching of some sort.
