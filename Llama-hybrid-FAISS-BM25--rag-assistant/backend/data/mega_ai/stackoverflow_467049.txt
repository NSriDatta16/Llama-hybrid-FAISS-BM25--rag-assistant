[site]: stackoverflow
[post_id]: 467049
[parent_id]: 466365
[tags]: 
I think Paul Graham is missing the mark big time on this one. Using patterns isn't about picking up a book that lists them and applying some of them to your code. I would agree that would be a poor choice but that's not what patterns are about. Design patterns are simply a way of recognizing "Hey, I recognize that this is similar to another problem I've solved before" and learning to create a good abstraction of the solution so it is applicable in appropriate situations. In fact, odds are, if you've programmed anything of any reasonable size, you've used commonly known design patterns and just didn't know there was a name for it. For example, I was using the "factory" pattern for a long time before I had any clue it was a "factory." Knowing what it's called officially just prevents me from reinventing the wheel again. Sure some well known patterns are a bit crappy; singleton is definitely suspect. But that one was a clear cut case of a overly clever solution looking for a problem to solve and not doing it very well. But that's why you can find a lot of literature both for and against itâ€”because people recognize it may not be a good solution. But patterns as a whole are a very good thing, if anything they encourage abstraction.
