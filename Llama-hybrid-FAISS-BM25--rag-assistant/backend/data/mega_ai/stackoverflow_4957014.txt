[site]: stackoverflow
[post_id]: 4957014
[parent_id]: 4956608
[tags]: 
I see two problems on your client, which may cause problems: You are using a BufferedReader to read the first line, and then access the plain underlying InputStream from the socket with is.read(fileData); First, the BufferedReader (and it's InputStreamReader) may read more than only the first line on readLine() - the rest is buffered for later retrieval, but you don't read anything more. So you may be missing the start of your file. Second, you have only one main read for your socket-InputStream, which may or may not fill the whole array, since you don't check the result of this method call. Thus the end of the file may be consisting of zero-bytes instead of the real data (and certainly there will be as much zero bytes as you missed for the first problem). You should instead read (and then maybe instantly write to the file) in a loop, checking (and adding) the results of the read call. Edit: For reading only into the array: int read = 0; while(read There is a readFully() method in DataInputStream which does just this, I think. If you have bigger files, you would not want it completely in one array, but read and write alternately (using a smaller array as a buffer): InputStream is = ...; int len = ...; OutputStream out = ...; int read = 0; byte[] buf = new byte[8000]; while(read I can only speculate why it works with doc - did you really compare the output files? Maybe your Word documents are smaller then your zip file, and thus the second problem did not really apply, since all the file could be read in one step. The same (second) problem actually applies to your server for reading the file, too. You may think about using a DataInputStream (and DataOutputStream at the server side) - it allows reading Strings too, without needing a Writer (and additional Buffering).
