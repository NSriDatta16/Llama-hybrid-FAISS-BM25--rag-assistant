rom the premise A {\displaystyle A} by doing an extra implication introduction step, and conversely any proof of B → C {\displaystyle B\to C} from the premise A {\displaystyle A} can be converted into a proof of C {\displaystyle C} from the premise A ⊗ B {\displaystyle A\otimes B} by doing an extra implication elimination step. Left-continuity of the t-norm is the necessary and sufficient condition for this relationship between a t-norm conjunction and its residual implication to hold. Truth functions of further propositional connectives can be defined by means of the t-norm and its residuum, for instance the residual negation ¬ x = ( x ⇒ 0 ) . {\displaystyle \neg x=(x{\mathbin {\Rightarrow }}0).} In this way, the left-continuous t-norm, its residuum, and the truth functions of additional propositional connectives (see the section Standard semantics below) determine the truth values of complex propositional formulae in [0, 1]. Formulae that always evaluate to 1 are then called tautologies with respect to the given left-continuous t-norm ∗ , {\displaystyle *,} or ∗ - {\displaystyle *{\mbox{-}}} tautologies. The set of all ∗ - {\displaystyle *{\mbox{-}}} tautologies is called the logic of the t-norm ∗ , {\displaystyle *,} since these formulae represent the laws of fuzzy logic (determined by the t-norm) that hold (to degree 1) regardless of the truth degrees of atomic formulae. Some formulae are tautologies with respect to all left-continuous t-norms: they represent general laws of propositional fuzzy logic that are independent of the choice of a particular left-continuous t-norm. These formulae form the logic MTL, which can thus be characterized as the logic of left-continuous t-norms. Syntax Language The language of the propositional logic MTL consists of countably many propositional variables and the following primitive logical connectives: Implication → {\displaystyle \rightarrow } (binary) Strong conjunction ⊗ {\displaystyle \otimes } (binary). The sign & is a more traditional notation for strong conjunction in the literature on fuzzy logic, while the notation ⊗ {\displaystyle \otimes } follows the tradition of substructural logics. Weak conjunction ∧ {\displaystyle \wedge } (binary), also called lattice conjunction (as it is always realized by the lattice operation of meet in algebraic semantics). Unlike in BL and stronger fuzzy logics, weak conjunction is not definable in MTL and has to be included among the primitive connectives. Bottom ⊥ {\displaystyle \bot } (nullary — a propositional constant; 0 {\displaystyle 0} or 0 ¯ {\displaystyle {\overline {0}}} are common alternative tokens and zero a common alternative name for the propositional constant (as the constants bottom and zero of substructural logics coincide in MTL). The following are the most common defined logical connectives: Negation ¬ {\displaystyle \neg } (unary), defined as ¬ A ≡ A → ⊥ {\displaystyle \neg A\equiv A\rightarrow \bot } Equivalence ↔ {\displaystyle \leftrightarrow } (binary), defined as A ↔ B ≡ ( A → B ) ∧ ( B → A ) {\displaystyle A\leftrightarrow B\equiv (A\rightarrow B)\wedge (B\rightarrow A)} In MTL, the definition is equivalent to ( A → B ) ⊗ ( B → A ) . {\displaystyle (A\rightarrow B)\otimes (B\rightarrow A).} (Weak) disjunction ∨ {\displaystyle \vee } (binary), also called lattice disjunction (as it is always realized by the lattice operation of join in algebraic semantics), defined as A ∨ B ≡ ( ( A → B ) → B ) ∧ ( ( B → A ) → A ) {\displaystyle A\vee B\equiv ((A\rightarrow B)\rightarrow B)\wedge ((B\rightarrow A)\rightarrow A)} Top ⊤ {\displaystyle \top } (nullary), also called one and denoted by 1 {\displaystyle 1} or 1 ¯ {\displaystyle {\overline {1}}} (as the constants top and zero of substructural logics coincide in MTL), defined as ⊤ ≡ ⊥ → ⊥ {\displaystyle \top \equiv \bot \rightarrow \bot } Well-formed formulae of MTL are defined as usual in propositional logics. In order to save parentheses, it is common to use the following order o