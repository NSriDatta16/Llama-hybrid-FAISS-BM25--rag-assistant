[site]: stackoverflow
[post_id]: 4919812
[parent_id]: 4919181
[tags]: 
Barış: Your question is very general, but here's my answer/guidance: I don't know about game engines, but for embedded and real time applications, The general goals of an allocation algorithm are: 1- Bounded execution time: You have to know in advance the worst case allocation time so you can plan your real time tasks accordingly. 2- Fast execution: Well, the faster the better, obviously 3- Always allocate: Especially for real-time, security critical applications, all requests must be satisfied. If you request some memory space and get a null pointer: trouble! 4- Reduce fragmentation: Although this depends on the algorithm used, generally, less fragmented allocations provide better performance, due to a number of reasons, including caching effects. In most critical systems, you are not allowed to dynamically allocate any memory to begin with. You analyze your requirements and determine your maximum memory use and allocate a large chunk of memory as soon as your application starts. If you can't, then the application does not even start, if it does start, no new memory blocks are allocated during execution. If speed is a concern, I'd recommend following a similar approach. You can implement a memory pool which manages your memory. The pool could initialize a "sufficient" block of memory in the start of your application and serve your memory requests from this block. If you require more memory, the pool can do another -probably large- allocation (in anticipation of more memory requests), and your application can start using this newly allocated memory. There are various memory pooling schemes around as well, and managing these pools is another whole topic. As for some examples: VxWorks RTOS used to employ a first-fit allocation algorithm where the algorithm analyzed a linked list to find a big enough free block. In VxWorks 6, they're using a best-fit algorithm, where the free space is kept in a tree and allocations traverse the tree for a big enough free block. There's a white paper titled Memory Allocation in VxWorks 6.0 , by Zoltan Laszlo, which you can find by Googling, that has more detail. Going back to your question about speed/fragmentation: It really depends on your application. Things to consider are: Are you going to make lots of very small allocations, or relatively larger ones? Will the allocations come in bursts, or spread equally throughout the application? What is the lifetime of the allocations? If you're asking this question because you're going to implement your own allocator, you should probably design it in such a way that you can change the underlying allocation/deallocation algorithm, because if the speed/fragmentation is really that critical in your application, you're going to want to experiment with different allocators. If I were to recommend something without knowing any of your requirements, I'd start with TLSF, since it has good overall characteristics.
