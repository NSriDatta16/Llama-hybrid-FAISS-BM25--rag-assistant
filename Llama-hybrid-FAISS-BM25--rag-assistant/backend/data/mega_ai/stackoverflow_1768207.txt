[site]: stackoverflow
[post_id]: 1768207
[parent_id]: 1768192
[tags]: 
Lots of languages will do this just fine, including Java. You're familiar with that so my advice is stick to it with one caveat: depending on your requirements I would seriously suggest examining the possibility of making it a Web app instead. Desktop database apps are somewhat... old-fashioned. More to the point they'll create a bunch of headaches for you such as installation, Swing is annoying and tedious, etc. As for what database, barring requirements you haven't specified, anything will do so pick something free like MySQL. So for a desktop Java app I would: Put the database on a remote server; Put an application server or Web container on that same server; Create a Webapp on the app server for handling RPC; Pick a method of RPC, be it Web services or whatever, and use Spring to implement it; Create a desktop Java app in Swing and distribute it to clients from the app server via Webstart (JNLP). If it's a Web app: Put the database and appserver or Web container on one server; Pick a Java Web framework and create a bunch of Web pages that do what you want. In all cases, have it be the same app but just act differently on the user type. This is much better than maintaining three different apps. Also if you do a Web app, you might want to consider using PHP as it's a fast and proven way of knocking up Web pages and probably sufficient for the kind of internal application that you're doing.
