[site]: datascience
[post_id]: 49642
[parent_id]: 49641
[tags]: 
You can actually do the string-spitting and indexing on the columns themselves - no need to extract the column and do list comprehensions. Below I take whatever is before the first comma and put it in a column called food_group and then the first field after the same column and put it in a new column called sub_cat -egory: df["food_group"] = df.name.str.split(",").str[0] df["sub_cat"] = df.name.str.split(",").str[1] Here is example output for some Yogurt data: id name food_group sub_cat 44 4082 Yoghurt, Plain, Organic, 3% Fat Yoghurt Plain 45 4083 Yoghurt, Plain, Pirkka Reducol, 2.5% Fat, Low-... Yoghurt Plain 46 4084 Yoghurt, Turkish/Greek, 10% Fat Yoghurt Turkish/Greek 47 4085 Yoghurt, Turkish/Greek, 10% Fat, Lactose-Free Yoghurt Turkish/Greek 48 4086 Yoghurt Sauce Yoghurt Sauce NaN Notice that any fields that are empty are filled with NaN . This will happen, when your name column only contains a single field (i.e. no commas). EDIT Here is the top of my dataframe, after the operation above: In [13]: df.head(10) Out[13]: id name food_group sub_cat 0 0 4-Grain Flakes 4-Grain Flakes NaN 1 1 4-Grain Flakes, Gluten Free 4-Grain Flakes Gluten Free 2 2 4-Grain Flakes, Riihikosken Vehnämylly 4-Grain Flakes Riihikosken Vehnämylly 3 3 Almond Almond NaN 4 4 Almond Drink, Sweetened, Alrpo Almond Drink Sweetened 5 5 Almond Drink, Unsweetened, Alrpo Almond Drink Unsweetened 6 6 Amaranth Flakes Amaranth Flakes NaN 7 7 Anchovy Anchovy NaN 8 8 Apple, Average, With Skin Apple Average 9 9 Apple, Domestic, Without Skin Apple Domestic EDIT In order to replace a row with another string, given a desired string is in that row, you can perform the following: for keyword in keywords: df["new_col"] = df.name.apply(lambda x: keyword if keyword in x else x) where keywords could be a list like this: keywords = ["Yogurt", "chicken", "Drink"] It still requires manually defining a list of keywords andlooping over them. You could also make this insensitive to the case of the word, but doing everything in e.g. lower-case: lower_keywords = ["yogurt", "chicken", "drink"] for keyword in lower_keywords: df["new_col"] = df.name.apply(lambda x: keyword if keyword in x.tolower() else x) You could continue to make a multi-index from these two new columns, but is might not be necessary - it depends on what you want to do afterwards with the data.
