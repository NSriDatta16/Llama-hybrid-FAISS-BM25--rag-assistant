[site]: stackoverflow
[post_id]: 1738602
[parent_id]: 
[tags]: 
Editing a big imported file on a second page

This is mostly theoretical question, since I actually can implement it in any way, but it confuses me a bit. So, suppose I present a user with a page to select an Excel file, which is then uploaded to the server. Server code parses the file, and presents the user with another page with many options. The user can select and deselect some of them, edit names, and then click OK - after which the server has to process only the selected options. The question may be: is it better to store parsed file in Session? is it better to push parsed data to client's page and then receive it back? Here's example: public class Data { public string Name { get; set; } // shown to user, can be changed public bool Selected { get; set; } // this is in ViewModel but anyway public string[] InternalData { get; set; } // not shown to user } // 1st option is to receive data via POST public ActionResult ImportConfirmed(IList postitems) { // 2nd option is to receive only user changes via POST var items = Session["items"] as IList ; items = items.Where(postitems of same name selected); items.ForEach(set name to postitems name); } Obviously option #2 has less side effects, since it does not have global state. But in option #1 we don't push loads of useless-to-user data to the client. And this can be a lot. Of course this problem is not new, and as always, the answer is: it depends. I have to admit, I don't have any exact question in mind. I can't even tell why I don't like the Session solution which takes only couple of additional lines of code. The reason I ask is that I've read about Weblocks concept and was very impressed. So, I tried to invent something similar in ASP.NET MVC and failed to. Thus, I wonder, is there any elegant way to deal with such situations? By elegant I mean something that doesn't show it uses Session, easy to use, handles expirations (cleans up the Session if user does not press the final "Save" button), etc. Something like: var data = parse(filestream); var confirmationPostData = ShowView("Confirm", data); items = items.Where(confirmationPostData of same name selected); items.ForEach(set name to confirmationPostData name); Here ShowView actually sends GET, wait for user's POST, and returns. Kind of. I do not insist, I just show the way that impressed me (in Weblocks - if I actually did understand it correctly). Does everyone just use Session in such cases? Or is there a better way (except learning LISP which I already started to investigate if I can cope with)? Maybe, async actions in MVC v2 do it? UPDATE: storing in DB/temp files, it works. I do sometimes store in DB. However this needs a way to expire the data since user may just abandon it (as simple as closing the browser). What I'm asking for: is there a proven and elegant way to solve it - not about how to do it. An abstraction built on top of serialization not tied to particular DB/file implementation, something like this.
