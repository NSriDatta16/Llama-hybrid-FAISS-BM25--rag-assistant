[site]: stackoverflow
[post_id]: 5464759
[parent_id]: 5464397
[tags]: 
The GNU Project has a decent summary of their philosophy : In most cases, following published standards is convenient for users—it means that their programs or scripts will work more portably. ... But we do not follow either of these specifications rigidly, and there are specific points on which we decided not to follow them, so as to make the GNU system better for users. For instance, Standard C says that nearly all extensions to C are prohibited. How silly! GCC implements many extensions, some of which were later adopted as part of the standard. If you want these constructs to give an error message as "required" by the standard, you must specify --pedantic , which was implemented only so that we can say "GCC is a 100% implementation of the standard," not because there is any reason to actually use it. POSIX.2 specifies that df and du must output sizes by default in units of 512 bytes. What users want is units of 1k, so that is what we do by default. If you want the ridiculous behavior "required" by POSIX, you must set the environment variable POSIXLY_CORRECT (which was originally going to be named POSIX_ME_HARDER ). ... In particular, don’t reject a new feature, or remove an old one, merely because a standard says it is "forbidden" or "deprecated." Sometimes, GCC has removed extensions when they caused confusion like this one. I believe this extension existed to allow old code with an incorrect main declaration to compile, not necessarily to encourage people writing void main() . Similar to the extension that allowed pre-POSIX function declarations. Besides, while int main(int argc, const char** argv) is the C-approved declaration for main , the C++ standard also sanctions int main() , and POSIX sanctions int main(int argc, const char** argv, const char** envp) . There may well be other declarations that I haven't run into yet.
