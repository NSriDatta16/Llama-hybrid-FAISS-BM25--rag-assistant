[site]: stackoverflow
[post_id]: 2709883
[parent_id]: 2709869
[tags]: 
If it is global code (the code is not part of any function), then you are creating a property on the global object with the two snippets, since this in global code points to the global object. The difference in this case is that when the var statement is used, that property cannot be deleted, for example: var foo = 'bar'; delete foo; // false typeof foo; // "string" this.bar = 'baz'; delete bar; // true typeof bar; "undefined" ( Note: The above snippet will behave differently in the Firebug console, since it runs code with eval , and the code executed in the Eval Code execution context permits the deletion of identifiers created with var , try it here ) If the code is part of a function you should know that the this keyword has nothing to do with the function scope, is a reserved word that is set implicitly, depending how a function is called, for example: 1 - When a function is called as a method (the function is invoked as member of an object): obj.method(); // 'this' inside method will refer to obj 2 - A normal function call: myFunction(); // 'this' inside the function will refer to the Global object // or (function () {})(); 3 - When the new operator is used: var obj = new Constructor(); // 'this' will refer to a newly created object. And you can even set the this value explicitly, using the call and apply methods, for example: function test () { alert(this); } test.call("hello!"); //alerts hello! You should know also that JavaScript has function scope only, and variables declared with the var statement will be reachable only within the same function or any inner functions defined below. Edit: Looking the code you posted to the @David's answer , let me comment: var test1 = 'test'; // two globals, with the difference I talk this.test2 = 'test'; // about in the beginning of this answer //... function test4(){ var test5 = 'test in function with var'; // You can't access the test5 variable outside the function because is locally scoped, and it exists only withing the scope of that function. Edit: In response to your comment For declaring variables I encourage you to always use var , it's what is made for. The concept of the this value, will get useful when you start working with constructor functions , objects and methods.
