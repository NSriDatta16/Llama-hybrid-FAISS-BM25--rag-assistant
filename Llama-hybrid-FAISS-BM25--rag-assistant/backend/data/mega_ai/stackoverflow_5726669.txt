[site]: stackoverflow
[post_id]: 5726669
[parent_id]: 5726519
[tags]: 
Wary or not, External Storage still may be the only way to go. Without root access on the device, you can't really get at anything "Internal" unless you're going to be okay with reading within an application on the device. The docs provide pretty solid guidelines for where to create external files, and if you are using API Level 8 or higher, there are a couple of extra functions that can be used. I'm sure you know this page, but here it is anyway: http://developer.android.com/guide/topics/data/data-storage.html#filesExternal If you're in need of any file io example code... I think I could dig some up... EDIT - I would start by following the guidelines in the above docs to first confirm the state of the storage. I unfortunately don't have any experience with appending a file in Java, so someone else would definitely be more qualified to answer. This doesn't cover appending, but I have a backup routine in one of my personal apps that looks something like this. File backupPath = Environment.getExternalStorageDirectory(); backupPath = new File(backupPath.getPath() + "/Android/data/com.maximusdev.bankrecord/files"); if(!backupPath.exists()){ backupPath.mkdirs(); } FileOutputStream fos; try { fos = new FileOutputStream(backupPath.getPath() + "/recordsbackup.txt"); if(okaytowrite){ for(int i = 0; i Once I'm ready to write, I'm pulling a custom object (entry) out of an ArrayAdapter (adapter) and converting field valuse to strings and using getBytes() to pass to the FileOutputStream write function. I've done some research and there are quite a few other options for file writing in Java/Android... the FileWriter Class for instance, so it bears further research.
