[site]: stackoverflow
[post_id]: 1446485
[parent_id]: 1445860
[tags]: 
Well, I do this but more explicitly than what your describing. I put together a set of interfaces and classes to support this some time ago. They are used like the following: readonly ObjectSerializer _serializer; public MyForm() { _serializer = new ObjectSerializer(this, "Top", "Left", "Height", "Width", "_splitter.SplitterDistance"); _serializer.ContinueOnError = true; } private void Form_Load(object sender, EventArgs e) { _serializer.Deserialize(new CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage()); } void Form_Closing(object sender, FormClosingEventArgs e) { _serializer.Serialize(new CSharpTest.Net.Serialization.StorageClasses.UserSettingStorage()); } The library being used "CSharpTest.Net.Library.dll" is found at: http://code.google.com/p/csharptest-net
