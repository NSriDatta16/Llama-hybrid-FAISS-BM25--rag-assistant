[site]: stackoverflow
[post_id]: 4570998
[parent_id]: 
[tags]: 
How to iterate over all subsets of a set of numbers that sum to around 0

Now, I haven't applied myself to functional programming for, oh, nearly 20 years, when we didn't get much further than writing factorials and fibs, so I'm really appealing to the community for some help in finding a solution. My problem is this: "Given a group of trade objects, I want to find all the combinations of trades that net to zero +/- some tolerance." My starter for ten is: let NettedOutTrades trades tolerance = ... Let's assume my starting point is a previously constructed array of tuples (trade, value). What I want back is an array (or list, whatever) of arrays of trades that net out. Thus: let result = NettedOutTrades [| (t1, -10); (t2, 6); (t3, 6); (t4; 5) |] 1 would result in: [| [| t1; t2; t4 |] [| t1; t3; t4 |] |] I'm thinking that this could be achieved with a tail recursive construct, using two accumulators - one for the results and one for the sum of trade values. But how to put it all together...? I'm sure I could knock out something procedural using c#, but it just doesn't feel like the right tool for the job - I'm convinced there's going to be an elegant, concise, efficient solution using the functional paradigm...I'm just not well practiced enough to identify it at present!
