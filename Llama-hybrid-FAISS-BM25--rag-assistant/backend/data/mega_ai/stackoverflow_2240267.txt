[site]: stackoverflow
[post_id]: 2240267
[parent_id]: 2240231
[tags]: 
Hash collisions will primarily affect performance - not correctness. So long as Equals() behaves correctly. Dictionary uses the hash code as a way to organize items into separate "buckets". If too many items share the same hash code, you can run into performance problems. However, as long as Equals() can correctly distinguish between instances, you should get correct results. Where hash codes can result in problems is with mutable objects . If your Thingy class allows Foo or Bar to change for an item in the dictionary, you may then fail to find it in a subsequent access attempt. This is because the hash code produced now differs from the one used to store the value in the dictionary.
