[site]: stackoverflow
[post_id]: 3657286
[parent_id]: 3656906
[tags]: 
It depends on what you are asking about, but the answer is probably no. The reason is that all the current computer languages that are Turing Complete are, well, Turing complete. This means that any of these languages can be simulated by any of the others in this group. Then any programming language can have a compiler or interpreter that can run on our current computers (approximation). These architecturally do have the concept of code and data. So, if you think that functional programming and imperative ('traditional') programming are the same because underneath they run on a computer, then there are no other options. Code and data translate into functions and data structures (variables). They do allow variations: Immutability is the main factor for functional programming. The difference between code and data can be blurred. For example homoiconicity means that a function can be used as data structure. See the Lisp languages. Related to this is self-modifying code . On the other hand, how to express the program may be also written a bit differently. Using function composition as a basis may lead you in the direction of concatenative programming, though dataflow programming (including many graphical languages) and functional programming also similarly support it. The last group of ways to express a language are those modelled as an optimisation or search process over a data structure: Logic Programming like Prolog . Evolutionary Computation outputs the program in a standard programming language. But presumably a descriptive language can be written that can be "executed" to find the resulting program and execute it. This can also be used for many machine learning methods. This is all somewhat academic. My advice is that try to identify what you mean by different . Likely, functional programming is different enough for your purposes. Edit : I have just noticed your use of the expression "manipulate them using conditionals and other constructs". Control flow constructs need not be different constructs to code and data. For example, a conditional if can be expressed as a filter or a loop can be expressed as a map . Given higher order functions and lazy evaluation you can do without an explicit if or for , using only functions and data structures. That doesn't mean you actually lost the ability to do that. You might be interested in Haskell if you want to see something like that. Also, see the other answers for languages that look different, such as graphical languages and esortic languages, while still using the functions applied to data structures with control structs approach.
