[site]: crossvalidated
[post_id]: 585080
[parent_id]: 
[tags]: 
How can I model or estimate the probability of a given network connection in a bipartite graph of relationships that may or may not exist?

I have a large set of network data, with many groups. Within each group, there are some criteria for creating "candidate" relationships between entities. Below I have an example of 8 groups, each with a class of "left" objects, with categorical labels A, B, and C, and with a class of "right" objects, with categorical labels X, Y, and Z. Despite the multiple connections seen below, there can either be 0 or 1 "absolute" relationships pointing to or from any given object. That is, the sum of the probabilities of incoming or outgoing arrows can be anywhere from 0% to 100%. e.g., in Group 1 , the sums of the probabilities of A to X and B to X must be between 0 and 1, and the sum of the probabilities of B to X and B to Y must be between 0 and 1. Similarly, it's also possible for there to be isolated nodes that do not have any connections, as seen in Group 3, with the A node and the second Y node. In those cases, we can be certain that the sum of incoming and outgoing probabilities is 0. I would like to establish probabilistic weights for each possible connection, such that All of the incoming and outgoing probabilities fit the constraints above The marginal probabilities for both incoming and outgoing connections between different categories are consistent across all groups. For (2), singletons can be used to help estimate the probability of no matches existing for an existing category. The presence of multiple objects in the absence of a relationship does not indicate that a specific pairing is less likely. For example, in Group 6, even though objects of categories C and Z exist without a pair, doesn't mean when there is a relationship with either one of those, it is less likely that they are paired up with each other. My initial thought is the following procedure: Create a "NULL" node for each type of object, NULL_left or NULL_right . These 2 categories are separate from each other, and cannot be joined together NULL_left->NULL_right , and add a corresponding NULL_left object to each right object, and a NULL_right object to each left object. For each "right" object, evenly divide the inward weights. For each "left" object, rescale the weights so that they add to 1. Repeat 2-3 until convergence. For each "right" category, calculate the marginal probability of receiving an incoming connection from each "left" category, e.g., for X, P(NULL_left->X|X) , P(A->X|X) , etc. For each "left" category, calculate the marginal probability of sending an outgoing connection to each "right" category, e.g., for A, P(A->NULL_right|A) , P(A->X|A) , etc. Scale connections of incoming connections to each of the "right" class of objects according to the weights/probabilities from (5). Scale connections of outgoing connections from each of the "left" class of objects according to the weights/probabilities from (6). Repeat 7-8 until convergence. Repeat 5-9 until convergence/desired number of loops. I haven't tried implementing the above yet, but I have a few concerns: I might be over-weighting the "NULL" categories by forcing their creation for every object. Maybe this can be resolved by down-weighting them at different steps? e.g., if there was just an A-(nothing) in Group 1 and A-X in Group 2, then the probability of A->X connections goes down to 0. The result of the above might not have a more-or-less consistent convergent solution. I may need to add some extra "smoothing" or other Bayesian priors to category pairings in general (e.g., a count of 1/2 to each theoretically possible pair). I'm not sure how computationally feasible this would be for an extremely large (>10,000) number of categories on either side, even if the probabilities were very sparse (e.g., each category usually matches to 1 to 20 others). If anyone has any feedback on the above or any ideas how to solve this problem, it would be quite helpful.
