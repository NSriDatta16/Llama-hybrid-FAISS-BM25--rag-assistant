[site]: stackoverflow
[post_id]: 5541082
[parent_id]: 
[tags]: 
Nightmare Expression Tree with over-constrained class

I inadvertently let my students overconstrain a shared class used to solve the following problem. I realized it might be a problem denizens of this site might enjoy. The first team/function, getNodes, takes a string representing a prefix expression using signed integers and the four operations +, -, *, and / and produces the corresponding null terminated linked list of tokens, using the class Node, with tokens linked through the "right" pointer. The second team/function, getTree, takes a similar string, passes it to getNodes, and relinks the resultant nodes to be an expression tree. The third team/function, evaluate, takes a similar string, passes it to getTree, and evaluates the resultant expression tree to form an answer. The over-constrained exptree.h follows. The problem has to be solved by writing just the three functions defined above, no additional functions. #ifndef EXPTREE_H_ #define EXPTREE_H_ using namespace std; enum Ops{ADD, SUB, MUL, DIV, NUM}; class Node { private: int num; Ops op; Node *left, *right; public: friend Node *getNodes(string d); friend Node *getTree(string d); friend int evaluate (string); }; int evaluate(string d); Node *getNodes(string d); Node *getTree(string d); #endif The only libraries that can be used are these #include #include #include #include "exptree.h" For those of you worried about my students, I will be pointing out today how just a couple of more well placed functions would allow this problem to be easily solved. I know the expression tree can code rational numbers and not just integers. I'll be pointing that out today as well. Here is the driver program I gave them based on their specs. #include #include #include "exptree.h" using namespace std; void test(string s, int target) { int result = evaluate(s); if (result == target) cout Can you write the three functions in as elegant a fashion as possible to solve this nightmarish problem?
