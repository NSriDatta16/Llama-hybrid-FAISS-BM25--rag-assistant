[site]: stackoverflow
[post_id]: 4166108
[parent_id]: 
[tags]: 
Stopping a function to run more than once in a period of time

I have this MouseEvent function that I have totally no idea why it fired twice. Is there a way I can disable the function in a period of time? I tried disabling the button, but seems like it directly called the function and does not trigger from the button. Addition info:When I add in more object to the array, the function fired more time The Class the handles the button package classes { import flash.display.MovieClip; import flash.events.Event; import flash.events.MouseEvent; import flash.geom.Rectangle; import classes.playVideo; import classes.playList; import classes.viewType; public class controlMenu extends MovieClip { private var playV:playVideo=new playVideo(); private var list:playList=new playList(); private var viewT:viewType = new viewType(); private static var con:controls = new controls(); private static var _buttonStatus:Boolean; public function controlMenu() { } //------------------------------------------------------------- public function loadControlMenu():void { this.addEventListener(Event.ADDED_TO_STAGE,add2Stage); } private function add2Stage(e:Event):void { if (stage.numChildren == 1) { con.x=(stage.stageWidth-230)/2; con.y=stage.stageHeight-(con.height+9); addChild(con); playButtonStatus(); con.soundBtn.addEventListener(MouseEvent.MOUSE_OVER, soundOver); con.soundBtn.addEventListener(MouseEvent.MOUSE_OUT, soundOut); con.soundBtn.addEventListener(MouseEvent.MOUSE_DOWN, soundDown); stage.addEventListener(MouseEvent.MOUSE_UP, soundUp); con.prev.addEventListener(MouseEvent.CLICK,prevClick); con.next.addEventListener(MouseEvent.CLICK,nextClick); } } private function playClick(e:MouseEvent):void { if (e.currentTarget.currentFrameLabel == "play" && playV.currentVideoStatus == "play") { e.currentTarget.gotoAndStop("pause"); playV.pauseStatus(); } else if (e.currentTarget.currentFrameLabel=="pause" && playV.currentVideoStatus == "pause") { e.currentTarget.gotoAndStop("play"); playV.playStatus(); } else if (e.currentTarget.currentFrameLabel == "play"&& playV.currentVideoStatus == "end") { playV.newVideo = "video/video" + list.currentIndex + ".flv"; } } private function playOver(e:MouseEvent):void { e.currentTarget.btn.gotoAndStop("over"); } private function playOut(e:MouseEvent):void { e.currentTarget.btn.gotoAndStop("out"); } //------------------------------------------------------------- private function soundOver(e:MouseEvent):void { e.currentTarget.gotoAndStop("over"); } private function soundOut(e:MouseEvent):void { if (e.buttonDown == false) { e.currentTarget.gotoAndStop("out"); } } private function soundDown(e:MouseEvent):void { var volumeBound:Rectangle = new Rectangle(-93,35,80,0); e.currentTarget.startDrag(false, volumeBound); stage.addEventListener(MouseEvent.MOUSE_MOVE,soundAdjust); } private function soundUp(e:MouseEvent):void { con.soundBtn.stopDrag(); con.soundBtn.gotoAndStop("out"); stage.removeEventListener(MouseEvent.MOUSE_MOVE,soundAdjust); } private function soundAdjust(e:MouseEvent):void { playV.adjustSound = ((con.soundBtn.x+93)*100)/80; } public function set adjustSoundBtnPos(a:Number):void { var newPos:Number = ((80*a)/100); con.soundBtn.x = newPos - 93; } private function prevClick(e:MouseEvent):void { if (viewT.viewIn == "stream" && list.currentIndex > 1) { var goBack = list.currentIndex - 1; list.currentIndex = goBack; playV.newVideo = "video/video" + goBack + ".flv"; list.currentVideoLink = goBack; } } private function nextClick(e:MouseEvent):void { if (viewT.viewIn == "stream" && list.currentIndex The Class that cause the extra loop on mouseevent function package classes { import flash.media.Video; import flash.display.MovieClip; import flash.net.NetConnection; import flash.net.NetStream; import flash.events.AsyncErrorEvent; import flash.events.TimerEvent; import flash.events.Event; import flash.utils.Timer; import flash.text.TextField; import flash.text.TextFormat; import flash.media.SoundTransform; import flash.media.SoundMixer; import flash.net.URLLoader; import flash.net.URLRequest; import classes.Playing; import classes.progressBar; import classes.controlMenu; import classes.viewType; import classes.downloadVideo; import classes.playList; import classes.playVideo; public class playVideo extends MovieClip { private var Play:Playing = new Playing(); private var progressB:progressBar = new progressBar(); private var conM:controlMenu; private var viewT:viewType=new viewType(); private var downloadV:downloadVideo; private var list:playList; private var vBox:MovieClip = new MovieClip(); private var nc:NetConnection; private static var ns:NetStream; private const buffer:Number = 2; private static var videoURL:String; private static var vid:Video = new Video(); private static var meta:Object = new Object(); private var durationSecs:Number; private var durationMins:Number; private var durSecsDisplay:String; private var durMinsDisplay:String; private static var videoDuration:String; private static var t:Timer = new Timer(100); private static var videoSound:SoundTransform = new SoundTransform(); private var arial:Arial = new Arial(); private static var durationTxt:TextField=new TextField(); private var durationTxtF:TextFormat=new TextFormat(); private var scrubForward:Boolean; private static var currentStatus; private static var nsArray:Array= new Array(); private var dummyArray:Array = new Array(); //-------------------------------------------------------------------------- private var videoLoader:URLLoader; public function playVideo() { } public function set newVideo(v:String):void { currentStatus = "play"; videoURL = v; if (viewT.viewIn == "stream") { addVideo(); } else if (viewT.viewIn=="download") { for (var i:uint=0; i 1 && ns!=null) { ns.soundTransform = videoSound; } } } public function set adjustSound(s:Number):void { videoSound.volume = s / 100; ns.soundTransform = videoSound; } //-------------------------------------------------------------------------- private function durationText():void { durationTxtF = new TextFormat(); durationTxtF.size = 12; durationTxtF.leftMargin = 5; durationTxtF.font = arial.fontName; durationTxt.defaultTextFormat = durationTxtF; durationTxt.selectable = false; durationTxt.textColor = 0x999999; durationTxt.width = 50; durationTxt.height = 22; durationTxt.x = 476; durationTxt.y = 477; durationTxt.text = "00:00"; addChild(durationTxt); } //-------------------------------------------------------------------------- public function get Duration():String { return videoDuration; } public function playStatus():void { conM=new controlMenu(); if (conM.currentStatus == "play") { ns.resume(); updateProgress(); } if (currentStatus == "pause") { currentStatus = "play"; t.start(); } } public function pauseStatus():void { ns.pause(); t.stop(); trace("pause"); if (currentStatus == "play") { currentStatus = "pause"; } } public function get currentVideoStatus():String { return currentStatus; } public function restartVideo():void { ns.resume(); } //-------------------------------------------------------------------------- public function updateProgress():void { ns.seek((progressB.currentProgress / 668) *meta.duration); } public function get nsBytesTotal():Number { return ns.bytesTotal; } public function get nsBytesLoaded():Number { return ns.bytesLoaded; } public function get getVideoURL():String { return videoURL; } } }
