[site]: stackoverflow
[post_id]: 1468530
[parent_id]: 1468434
[tags]: 
A simple solution is to re-evaluate if Tires should be an inner class. If you make it a normal class you can simply use internal and public to differentiate between what clients and what Car can access. If there is an unrelated reason why Tires should be an inner class, expose only a read-only version: Expose a copy like CMP suggests (doesn't need to be a different class, although it's indeed better to, so you can throw exceptions). I like this suggestion the least, because it's inelegant to have a class that looks like you can mutate it while actually you can't. Make the whole class immutable like Danny suggests, which is effective and neat, but makes it less convenient to deal with (needing to overwrite the old instance in Car with a new one every time you want to change something.) Expose the class only through a read-only interface like Asaph suggests. I like this best because it allows Car complete control while limiting public access without any inconvenience or copying.
