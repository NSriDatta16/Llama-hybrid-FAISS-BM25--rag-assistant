[site]: stackoverflow
[post_id]: 2347550
[parent_id]: 2346071
[tags]: 
I think you need to learn more about lexer rules within ANTLR, lexer rules start with uppercase letter and generate tokens for the stream the parser will look at. Lexer fragment rules will not generate a token for the stream but will help other lexer rules generate tokens, look at lexer rules WORDS and LETTER (LETTER is not a token but does help WORDS create a token). Now, when a text literal is put into a parser rule (rule name will start with a lowercase letter) that text literal is also a valid token that the lexer will identify and pass (at least when you use ANTLR - I have not used any other tools similar to ANTLR to answer for them). The next thing I was noticing is that your 's' and 'pronoun' rules appear to be the same thing. I commented out the 's' rule and put everything into the 'pronoun' rule And then the last thing is to learn how to put actions into the grammer, you have some in the 's' rule setting the return value. I made the pronoun rule return a string value so that if you wanted the actions in your 'sentence' rule you would easily be able to accomplish your "-i pronoun" comment/answer. Now since I do not know what your exact results are, I played with your grammer and made some slight modifications and reorganized (moving what I thought were parser rules to the top with keep all lexer rules at the bottom) and put in some actions that I think will show you what you need. Also, there could be several different ways to accomplish this and I don't think my solution is perfect for any of your possible wanted results, but here is a grammer I was able to get working in ANTLRWorks: grammar pfinder; options { language = Java; } sentence : ((words | pronoun) SPACE)* ((words | pronoun) ('.' | '?')) ; words : WORDS {System.out.println($text);}; pronoun returns [String value] : sfirst {$value = $sfirst.value; System.out.println($sfirst.text + '(' + $sfirst.value + ')');} | ssecond {$value = $ssecond.value; System.out.println($ssecond.text + '(' + $ssecond.value + ')');} | sthird {$value = $sthird.value; System.out.println($sthird.text + '(' + $sthird.value + ')');} | pfirst {$value = $pfirst.value; System.out.println($pfirst.text + '(' + $pfirst.value + ')');} | psecond {$value = $psecond.value; System.out.println($psecond.text + '(' + $psecond.value + ')');} | pthird{$value = $pthird.value; System.out.println($pthird.text + '(' + $pthird.value + ')');}; //s returns [String value] // : exp=sfirst {$value = "s1";} // | exp=ssecond {$value = "s2";} // | exp=sthird {$value = "s3";} // | exp=pfirst {$value = "p1";} // | exp=psecond {$value = "p2";} // | exp=pthird {$value = "p3";} // ; sfirst returns [String value] : ('i' | 'me' | 'my' | 'mine') {$value = "s1";}; ssecond returns [String value] : ('you' | 'your'| 'yours'| 'yourself') {$value = "s2";}; sthird returns [String value] : ('he' | 'she' | 'it' | 'his' | 'hers' | 'its' | 'him' | 'her' | 'himself' | 'herself') {$value = "s3";}; pfirst returns [String value] : ('we' | 'us' | 'our' | 'ours') {$value = "p1";}; psecond returns [String value] : ('yourselves') {$value = "p2";}; pthird returns [String value] : ('they'| 'them'| 'their'| 'theirs' | 'themselves') {$value = "p3";}; WORDS : LETTER*;// {$channel=HIDDEN;}; SPACE : (' ')?; fragment LETTER : ('a'..'z' | 'A'..'Z'); I think the end result is this grammer will show you how to accomplish what you are trying to do and will require modification no matter what that end result is. Good luck. I think you only have to change one line in your test class, parser.pronoun(); to: parser.sentence(); You might want to change a few other things in the grammer as well: SPACE : ' '; sentence: (words | pronoun) (SPACE (words | pronoun))* ('.' | '?'); // then you might want to put a rule between sentence and words/pronoun.
