[site]: stackoverflow
[post_id]: 2941940
[parent_id]: 2941900
[tags]: 
Terminology From the official Sun glossary: deprecation : Refers to a class, interface, constructor, method or field that is no longer recommended, and may cease to exist in a future version. From the how-and-when to deprecate guide: You may have heard the term, "self-deprecating humor," or humor that minimizes the speaker's importance. A deprecated class or method is like that. It is no longer important. It is so unimportant, in fact, that you should no longer use it, since it has been superseded and may cease to exist in the future. The @Deprecated annotation went a step further and warn of danger: A program element annotated @Deprecated is one that programmers are discouraged from using, typically because it is dangerous , or because a better alternative exists. References java.sun.com Glossary Language guide/How and When to Deprecate APIs Annotation Type Deprecated API Right or wrong? The question of whether it's right or wrong to use deprecated methods will have to be examined on individual basis. Here are ALL the quotes where the word "deprecated" appears in Effective Java 2nd Edition : Item 7: Avoid finalizers : The only methods that claim to guarantee finalization are System.runFinalizersOnExit and its evil twin Runtime.runFinalizersOnExit . These methods are fatally flawed and have been deprecated. Item 66: Synchronize access to shared mutable data : The libraries provide the Thread.stop method, but this method was deprecated long ago because it's inherently unsafe -- its use can result in data corruption. Item 70: Document thread safety : The System.runFinalizersOnExit method is thread-hostile and has been deprecated. Item 73: Avoid thread groups : They allow you to apply certain Thread primitives to a bunch of threads at once. Several of these primitives have been deprecated, and the remainder are infrequently used. [...] thread groups are obsolete. So at least with all of the above methods, it's clearly wrong to use them, at least according to Josh Bloch. With other methods, you'd have to consider the issues individually, and understand WHY they were deprecated, but generally speaking, when the decision to deprecate is justified, it will tend to lean toward wrong than right to continue using them. Related questions Difference between a Deprecated and Legacy API?
