[site]: crossvalidated
[post_id]: 214403
[parent_id]: 212730
[tags]: 
If you have performance measures per individual class (and individual models in your case), you could report those along/instead of reporting the prediction performance over all classes. For example, you could report the ROC curve, the AUC, EER, etc. for each class individually, and this does not necessarily depend on having underlying individual models. The first two mentioned metrics have the advantage of capturing the model power without employing a concrete threshold yet, and with the latter, the threshold is still automatically determined. Reporting the FRR and FAR per individual class (using a specifically chosen threshold) would be an option too. In case you have too many classes in your data to report performance on class level you could instead report meta-statistics about those performances like mean, standard deviation, quantiles of AUC, EER, etc. An example would be boxplots showing AUC, EER, etc. for all classes - even a boxplot over FAR and FRR might make sense in some cases. While not giving details about which classes are predicted well or badly, this still captures the variation of performance across classes. Most ML tools already provide the functionality for computation of such statistics alongside evaluation, so you don't necessarily need to do this on your own. Here's a small example using SVMs with 3 class classification and statistics on individual class basis in R with the caret package: library(caret) library(plyr) library(pROC) # example problem, 3 class classification model The overall confusion matrix already gives some insights to class confusion (you might want to use the relative representation instead): # confusion accross partitions and repeats conf ROC curves can be calculated for individual classes (in this example only if the predictions been preserved during cross validation): # compute ROC for each individual class rocs # compute some statistics per class statistics Calculation numeric statistics could be done by class as well: .id auc eer 1 setosa 1.0000000 1.0000000 2 versicolor 0.9839534 0.9291429 3 virginica 0.9852129 0.9338571 ... Finally, meta-statistics of those metrics over all classes could be calculated and displayed (in case there are too many classes to be reported individually): # compute some meta-statistics in case there are too many classes print(summary(statistics)) boxplot(statistics[-1]) I hope this in fact addresses your questions. BTW: if you struggle getting good results with certain individual models due to having few positive but many negative samples in the associated training set you could consider adding sample/error weights during model training, or utilizing e.g. up/-downsampling.
