[site]: crossvalidated
[post_id]: 488882
[parent_id]: 273486
[tags]: 
The above two functions including the consecutive assignment statements that are too complex. I think that the recursion is more elegant and powerful. In addition, it is much easier to be understood. from tensorflow.keras.layers import Input, Conv2D, MaxPool2D, Dropout, GlobalAveragePooling2D from tensorflow.keras.models import Model def nin(input_shape): # Define Network in Network model input = Input(shape=input_shape) x = Conv2D(filters=192, kernel_size=(5,5), activation='relu')(input) x = Conv2D(filters=160, kernel_size=(1,1), activation='relu')(x) x = Conv2D(filters=96, kernel_size=(1,1), activation='relu')(x) x = MaxPool2D(2, strides=2, padding='same')(x) x = Dropout(0.5)(x) x = Conv2D(filters=192, kernel_size=(5,5), activation='relu')(x) x = Conv2D(filters=192, kernel_size=(1,1), activation='relu')(x) x = Conv2D(filters=192, kernel_size=(1,1), activation='relu')(x) x = MaxPool2D(2, strides=2, padding='same')(x) x = Dropout(0.5)(x) x = Conv2D(filters=192, kernel_size=(3,3), activation='relu')(x) x = Conv2D(filters=192, kernel_size=(1,1), activation='relu')(x) x = Conv2D(filters=10, kernel_size=(1,1), activation='relu')(x) output = GlobalAveragePooling2D()(x) model = Model(input, output) return model if __name__ == '__main__': model = nin(input_shape=(28,28,1)) model.summary()
