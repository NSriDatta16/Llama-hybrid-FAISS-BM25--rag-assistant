[site]: stackoverflow
[post_id]: 4709828
[parent_id]: 
[tags]: 
Given a number X, estimate where in an ordered list of primes that number may fall

Given a pre-calculated ordered list of primes, and a supplied number X, I want to estimate roughly where X would fall in the list of primes, and start searching at that point. So, I have calculated and stored a list of primes from 1..2^32-1, in a binary file. I've got methods in a program that runs against that file to give me the nth prime, a random prime, how many primes exist, etc. But in order to add a function to this program to tell me where a supplied number is prime, I am having trouble coming up with a way to estimate where to begin searching. Doing it the na√Øve O(n) method quickly becomes infeasible, even for numbers I've tried the Prime Number Theorem's (x/ln x), and done research in some other areas, but haven't quite found the right distribution, and I'm afraid my number theory isn't up to par. I'm looking for something like, e.g. 1 2 3 4 5 6 .. 100 .. 500 .. 1000 .. 5000 .. 10000 2 3 5 7 11 13 .. 541 .. 3571 .. 7919 .. 48611 .. 104729 So, lookup(13) would give me a number near, but P.S. I realize this is a stupid method for several reasons: a) I could store it in a different way and have O(1) lookups; b) I could compress the storage substantially; c) for such small numbers, I could do a prime test on the given number at runtime, skip the lookup table entirely, and it would be faster. I'm not interested in solutions for these issues ; I genuinely want to know if there is a proven method of estimating where in a sorted list of primes a given number may fall . Hence, this is more a mathematical/number-theory question than an implementation question. P.P.S. It's not homework. P.P.P.S. I did a pretty thorough search on StackOverflow, but may have missed a direct answer to this. Thank you.
