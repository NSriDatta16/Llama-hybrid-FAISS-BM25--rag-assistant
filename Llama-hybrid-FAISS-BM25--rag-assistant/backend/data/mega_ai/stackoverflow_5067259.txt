[site]: stackoverflow
[post_id]: 5067259
[parent_id]: 5001479
[tags]: 
There is a little known feature of DUnit that supports running tests from a dll. You basically create a dunit exe project that has no tests of its own, rather it loads tests from dlls. Each dll needs to export a single function: library MyTests; uses TestFramework{, add your test units}; function Test: ITest; begin result := RegisteredTests; end; exports Test; end; Then you just add test cases to the dll as normal. The tests are automatically registered in each unit's initialization section. IMHO its a pity this isn't promoted as the standard way of working with DUnit. Most unit testing frameworks for other languages are organized this way. They provide a single test runner executable which dynamically loads test cases from any number of loadable modules. In addition to letting you break up your tests for easier organization it also allows you to run the same tests under multiple scenarios. Perhaps you want to run your tests using different compiler options for your debug and release builds (or even different versions of the compiler) so you are more confident that the code behaves consistently. You can build multiple dlls from the same source and run them in the same session.
