[site]: stackoverflow
[post_id]: 3802414
[parent_id]: 3802193
[tags]: 
THE OBVIOUS getters and setters for protected members makes as much sense as for public... derived classes are just another form of client code, and encapsulating implementation details from them can still be useful. I'm not saying always do it, just to weight pros and cons along the normal lines. getters and setters for private members is rarely a net benefit, though: it does provide the same kind of encapsulation benefits single place for breakpoints/logging of get/set + invariant checks during dev (if used consistently) virtual potential etc... but only to the presumably relatively small implementation of the same struct/class. In enterprise environments, and for public/protected member data, those benefits can be substantial enough to justify get/set methods: a logging function may end up having millions of lines of code depedent on it, and hundreds or thousands of libraries and apps for which a change to a header may trigger recompilation. Generally a single class implementation shouldn't be more than a few hundred (or at worst thousand) lines - not big or complex enough to justify encapsulating internal private data like this... it could be said to constitute a "code smell". THE NOT-SO OBVIOUS get/set methods can very occasionally be more readable than direct variable access (though more often less readable) get/set methods may be able to provide a more uniform and convenient interface for code-generated member or friend methods (whether from macros or external tools/scripts) less work required to transition between being a member or friend to a freestanding helper function should that become possible implementation may be rendered more understandable (and hence maintainable) to people who're normally only users of the class (as more operations are expressed via, or in the style of, the public interface) It's a bit out of scope for the question, but it's worth noting that classes should generally provide action-oriented commands, event-triggered callbacks etc. rather than encouraging a get/set usage pattern.
