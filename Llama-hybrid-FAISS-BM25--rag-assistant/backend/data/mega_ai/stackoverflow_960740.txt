[site]: stackoverflow
[post_id]: 960740
[parent_id]: 960560
[tags]: 
There's a bit of a misnomer in your question. You compile against *.h files and, disregarding inlines, you link against *.c files. If you go back to basics you can say that: the ".h" file is your interface to the library, i.e. what you have to compile against, and the matching *.c file is the implementation of what you intend the function to do. So, as an example: a file add_integers.h just declares the function, say addInts(), that takes two integers and returns an integer that is the sum of the two, and a file add_integers.c(pp) provides the implementation of the function addInts() that uses an algorithm that taking two integers, adds them together, and returns the results. The implementor of the addInts() function is free to make modifications to the software that implements the addInts() function. Providing the interface to the addInts() function isn't modified at all (i.e. addInts.h isn't modified at all), then a new shared library containing the modified implementation of the addInts function is free to be distributed without people having to recompile against the new addInts library release. Wow! Why does reading this explanation sound like Danny Kaye and " The Vessel with the Pessel "? You might like to have a look at Bertrand Meyer's work with Eiffel and " Design by Contract ".
