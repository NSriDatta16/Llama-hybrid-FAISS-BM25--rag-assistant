[site]: stackoverflow
[post_id]: 3600280
[parent_id]: 3600231
[tags]: 
For making the new books unique: Create a wrapper class around Book and declare it's equals / hashCode methods based on the enclosed book object: public class Wrapper{ private final Book book; public Wrapper(final Book book){ assert book != null; this.book = book; } public Book getBook(){ return this.book; } @Override public boolean equals(final Object other){ return other instanceof Wrapper ? Arrays.equals( this.getBookInfo(), ((Wrapper) other).getBookInfo() ) : false; } @Override public int hashCode(){ return Arrays.hashCode(this.getBookInfo()); } private String[] getBookInfo(){ return new String[] { this.book.getAuthor(), this.book.getTitle(), this.book.getIsbn() }; } } EDIT: Optimized equals and hashCode and fixed a bug in hashCode. Now use a set to remove duplicates: Set wrappers = new HashSet (); for(Book book: newBooks){ wrappers.add(new Wrapper(book); } newBooks.clear(); for(Wrapper wrapper: wrappers){ newBooks.add(wrapper.getBook()); } (But of course the TreeSet answer with the custom comparator is more elegant because you can use the Book class itself) EDIT: (removed reference to apache commons because my improved equals / hashCode methods are better)
