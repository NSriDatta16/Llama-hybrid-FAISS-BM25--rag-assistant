[site]: stackoverflow
[post_id]: 690348
[parent_id]: 
[tags]: 
Java Profiling: Private Property Getter has Large Base Time

I'm using TPTP to profile some slow running Java code an I came across something interesting. One of my private property getters has a large Base Time value in the Execution Time Analysis results. To be fair, this property is called many many times, but I never would have guessed a property like this would take very long: public class MyClass{ private int m_myValue; public int GetMyValue(){ return m_myValue; } } Ok so there's obviously more stuff in the class, but as you can see there is nothing else happening when the getter is called (just return an int). Some numbers for you: About 30% of the Calls of the run are on the getter (I'm working to reduce this) About 25% of the base time of the run is spent in this getter Average base time is 0.000175s For comparison, I have another method in a different class that uses this getter: private boolean FasterMethod(MyClass instance, int value){ return instance.GetMyValue() > m_localInt - value; } Which has a much lower average base time of 0.000018s (one order of magnitude lower). What's the deal here? I assume there is something that I don't understand or something I'm missing: Does returning a local primitive really take longer than returning a calculated value? Should I look at metric other than Base Time? Are these results misleading and I need to consider some other profiling tool? Edit 1: Based on some suggestions below, I marked the method as final and re-ran the test, but I got the same results. Edit 2: I installed a demo version of YourKit to re-run my performance tests, and the YourKit results look much closer to what I was expecting. I will continue to test YourKit and report back what I find. Edit 3: Changing to YourKit seems to have resolved my issue. I was able to use YourKit to determine the actual slow points in my code. There are some excellent comments and posts below (upvoted appropriately), but I'm accepting the first person to suggest YourKit as "correct." (I am not affiliated with YourKit in any way / YMMV)
