[site]: stackoverflow
[post_id]: 757065
[parent_id]: 756984
[tags]: 
There are two obvious answers: VC# can never run without the .NET framework. Native C++ can. That may be necessary in some areas (others have mentioned device drivers, but more common examples might simply be clients where the .NET framework is not installed. Perhaps you're distributing an application and you know not all of your customers are willing to install .NET, so your sales would go up if you made an app that just worked without the dependency on .NET. Or perhaps you're working on some mobile device where the couple of megabytes taken up by the .NET CF can not be justified. Or shell extensions where using .NET can cause nasty problem for the user. And VC# can never use C++ language features. Native C++ can. (Managed C++ can too, of course, but that's a different issue). There are, believe it or not, things that can be done more conveniently or elegantly in C++. And they're only accessible if you're programming in C++. System calls are no problem, however. p/invoke lets you do those from C#, almost as easily as you could from C++.
