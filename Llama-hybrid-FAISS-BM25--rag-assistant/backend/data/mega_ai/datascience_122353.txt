[site]: datascience
[post_id]: 122353
[parent_id]: 
[tags]: 
Tandem Neural Network, input shape error

I am training a tandem setup, which includes a reverse network and a forward network. The flow of data is: $Y \to$ reverse network $\to X \to$ forward network $\to Y'$ The loss function will be the sum of all $(Y-Y')^2$ , see custom_loss . The forward network is pre-trained, and it is pretty good at predicting $Y'$ from $X$ . The training was done elsewhere, and the good forward network is just loaded into the code. Now that I am training the reverse network using the tandem structure, there is some issues regarding how to connect the layers to run the training properly. The code I have is the following: forward_loaded = tf.keras.models.load_model("M70_H5_saved.h5") forward_loaded.trainable = False def build_model_reverse1(): # Reverse model -------------------------------------------- input_layer = Input(shape=(len(train_reverse.columns),)) #layer 1 ---------------------------------------------- first_dense = Dense(units='16', activation='relu')(input_layer) #layer 2 ---------------------------------------------- second_dense = Dense(units='16', activation='relu')(first_dense) Dx_output = Dense(units='1', name='Dx_output')(second_dense) Dy_output = Dense(units='1', name='Dy_output')(second_dense) #forward model -------------------------------------------------- #responce_out = forward_try.predict([Dx_output, Dy_output]) # Define the model with the input layer and a list of output layers model = Model(inputs=input_layer, outputs=[Dx_output, Dy_output]) return model reverse_01= build_model_reverse1() optimizer = tf.keras.optimizers.Adam(learning_rate=0.001) reverse_01.compile(optimizer=optimizer, loss={'Dx_output': 'mse', 'Dy_output': 'mse'}) # Train the model for 5 epochs history_reverse_01 = reverse_01.fit(norm_train_X_rev, train_Y_reverse, epochs=5, validation_data=(norm_test_X_rev, test_Y_reverse)) The error I'm getting is: Epoch 1/100 Epoch 1/5 52/63 [=======================>......] - ETA: 0s - loss: 1101795.6250 - Dx_output_loss: 542089.3125 - Dy_output_loss: 559706.6250 --------------------------------------------------------------------------- ValueError Traceback (most recent call last) in () 1 # Train the model for 100 epochs ----> 2 history_reverse_01 = reverse_01.fit(norm_train_X_rev, train_Y_reverse, epochs=5, validation_data=(norm_test_X_rev, test_Y_reverse)) 3 4 #visualy compare with forward model training call 5 #history_70 = forward_70.fit(norm_train_X_forw, train_Y_forward, epochs=100, batch_size=10, validation_data=(norm_test_X_forw, test_Y_forward)) 1 frames /usr/local/lib/python3.10/dist-packages/keras/engine/training.py in tf__test_function(iterator) 13 try: 14 do_return = True ---> 15 retval_ = ag__.converted_call(ag__.ld(step_function), (ag__.ld(self), ag__.ld(iterator)), None, fscope) 16 except: 17 do_return = False ValueError: in user code: File "/usr/local/lib/python3.10/dist-packages/keras/engine/training.py", line 1852, in test_function * return step_function(self, iterator) File "/usr/local/lib/python3.10/dist-packages/keras/engine/training.py", line 1836, in step_function ** outputs = model.distribute_strategy.run(run_step, args=(data,)) File "/usr/local/lib/python3.10/dist-packages/keras/engine/training.py", line 1824, in run_step ** outputs = model.test_step(data) File "/usr/local/lib/python3.10/dist-packages/keras/engine/training.py", line 1788, in test_step y_pred = self(x, training=False) File "/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py", line 70, in error_handler raise e.with_traceback(filtered_tb) from None File "/usr/local/lib/python3.10/dist-packages/keras/engine/input_spec.py", line 298, in assert_input_compatibility raise ValueError( ValueError: Input 0 of layer "model_6" is incompatible with the layer: expected shape=(None, 4), found shape=(None, 2) Note that: norm_train_X_rev.shape = (2000,4) norm_test_X_rev.shape = (500,4) len(train_reverse.columns) = 4 and the train_Y_reverse and test_Y_reverse are both tuples Iam not sure why there is a shape error when it expect a shape of shape=(None, 4), but I am inputting norm_train_X_rev, which should have the right shape (?) Any comments, solutions and suggestions are greatly appreciated!
