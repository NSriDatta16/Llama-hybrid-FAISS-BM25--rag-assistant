[site]: stackoverflow
[post_id]: 1519700
[parent_id]: 1514761
[tags]: 
Skipping bytes in a compressed resource file inside a jar is not really going to be optimal either and the implementation of InputStream you get as a result of calling Class.getResourceAsInputStream() may be fragmented if you plan on running your application on several devices. EDIT after additional info in comment: It could be that the best way to do this is actually to store the (question, answer) data in 1000 different classes. It's going to feel very weird as a solution but the class loader should only load the 10 classes you actually use, you can generate the 1000 source files with a simple J2SE program and you can load 10 random classes based on an integer inside their name using java.lang.Class.forName() . If the jar file doesn't become too big to use, you're basically relying on the indexing of its zip file format for the class loader performances...
