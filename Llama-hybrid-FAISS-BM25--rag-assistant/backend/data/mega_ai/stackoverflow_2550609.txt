[site]: stackoverflow
[post_id]: 2550609
[parent_id]: 2550535
[tags]: 
Try to use MVVM (Model-View-ViewModel) pattern. You need Model: class Person { public string Name { get; set; } } View is your window or UserControl. ViewModel can be something like that: class PersonViewModel : INotifyPropertyChanged { private Person Model; public PersonViewModel(Person model) { this.Model = model; } public string Name { get { return Model.Name; } set { Model.Name = value; OnPropertyChanged("Name"); } } public event PropertyChangedEventHandler PropertyChanged; private void OnPropertyChanged(string propertyName) { var e = new PropertyChangedEventArgs(propertyName); PropertyChangedEventHandler changed = PropertyChanged; if (changed != null) changed(this, e); } } Then you need to specify DataContext for your window: View.DataContext = new PersonViewModel(somePerson); And then define bindings in XAML: MVVM makes code very elegant and easy. You can also try PRISM or Caliburn ( http://caliburn.codeplex.com/ ) frameworks but they are more complex.
