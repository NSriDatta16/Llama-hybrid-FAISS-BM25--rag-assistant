[site]: stackoverflow
[post_id]: 2539882
[parent_id]: 2538802
[tags]: 
It is, indeed, very much a subjective question. I can totally conceive that in 2010, Perl or PHP (and even Python or Ruby) could equally serve you for such a project. The difference is not going to come from the language itself as much as the tools, best practices and community. Among these languages, I am most familiar with Perl, so let me try to offer an answer from that perspective, regarding your needs. Text and XML parsing: Perl has very robust support for text parsing of even very long files (as long as you don't slurp ), and allows powerful, clear and easy regex programming . It has clear built-in Unicode support and standard trans-encoding tools (the Encode module), which is very handy when it comes to user interfaces. It also has a direct binding for libxml2 in the form of a standard, fast and well-maintained module: XML::LibXML . Relational DB Support: In addition to the standard database interface ( DBI ) which allows direct SQL queries to a number of DBMSes, there are a number of frameworks to make DB-to-Webdoc management easier while still powerful. The most famous probably being Catalyst . HTML Document presentation: Mason is my favorite web application delivery engine. The integration with Perl is so elegant, yet it does not sacrifice templating patterns or language features. Heavy load handling: There are as many solutions as there are load problems to solve. Perl offers bindings for memcached : Cache::Memcached (written in Perl) and Cache::Memcached::Fast (written in C). Balance that out with your personal preferences regarding syntax and general language philosophy, and you could very much join the Enlightened Perl community quite soon :)
