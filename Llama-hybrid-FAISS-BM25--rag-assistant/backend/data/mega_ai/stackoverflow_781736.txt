[site]: stackoverflow
[post_id]: 781736
[parent_id]: 
[tags]: 
How do I make this ASP.NET MVC Route for a twitter-style URL work?

trying to map the following style of route: http://site.com/username in the same way that you can do http://www.twitter.com/user My initial solution was to have these routes: //site.com/rathboma - maps to user details for rathboma routes.MapRoute("Users", "{id}", new { controller = "Users", action = "Details" }); routes.MapRoute( "Default", // Route name "{controller}/{action}/{id}", // URL with parameters new { controller = "Home", action = "Index", id = "oneday" } // Parameter defaults ); And that was working fine, until I tried to do the following in my 'Links' controller: public ActionResult Details(string id) { int newId; if (!int.TryParse(id, out newId)) return RedirectToAction("Index"); WebLink results = Service.GetWebLink(newId, 5); if (results == null) return RedirectToAction("Index"); return View(results); } These RedirectToAction methods try and return the browser to http://site.com/Users (I do have a users controller) instead of directing to http://site.com/Links/index Why is this is happening? How should I be organizing my routes to make this work properly? I'm happy sacrificing http://site.com/links and moving to http://site.com/links/index if I have to. But how would I enforce that? Thanks to all for any help EDIT: I know what's causing this, it's trying to redirect to http://site.com/links (the index page), but links is being picked up as a username and redirecting to /users/details, when it can't find the user 'links' it tries to redirect to the UsersController Index action which maps to /users, and the cycle continues ('users' is not a user it can find so redirects infinately). So I guess My sub-question is: how to I make mvc always use /links/index instead of just using /links for the index page?
