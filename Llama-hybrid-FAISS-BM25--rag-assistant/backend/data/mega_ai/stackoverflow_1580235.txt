[site]: stackoverflow
[post_id]: 1580235
[parent_id]: 1580079
[tags]: 
Implicit writes to the database are probably a bad idea. That should be an explicit, controlled operation. Your pattern is a little weird to me, but I think this how you'd want to do it class UserStorage { const ACTION_INSERT = 'INSERT'; const ACTION_UPDATE = 'UDPATE'; public function addUser(User $user) { $this->saveUser($user, self::ACTION_INSERT); } public function updateUser(User $user) { $this->saveUser($user, self::ACTION_UPDATE); } protected function saveUser(User $user, $action) { switch ($action) { case self::ACTION_INSERT: // INSERT query break; case self::ACTION_UPDATE: // UPDATE query break; default: throw new Exception('Unsupported action'); } } } class User { public function setName($name) { // whatever } } $userStorage = new UserStorage(); $user = new User(); $userStorage->addUser($user); $user->setName('Peter'); try { $userStorage->updateUser($user); } catch (Exception $e) { echo "There was an error saving this user: " . $e->getMessage(); } But Personally I'm not crazy about this class design. There are some well-established patterns for this that are less confusing, such as ActiveRecord .
