[site]: stackoverflow
[post_id]: 3090429
[parent_id]: 3090333
[tags]: 
The C language itself doesn't mandate the use of a stack at all - it defines behaviour rather than implementation. However, in the common case, the program stack is used to store several things: Objects declared with auto storage duration (ie. ordinary, non- static local variables); Function parameters; The return address (the location in the code where execution should resume after a return; or the end of the current function is reached); Memory allocated with the non-standard alloca() function; Temporary values required by the compiler, such as the saved contents of registers, housekeeping information for alloca() , the size of variable-length arrays and intermediate values used in calculations. This is not an exhaustive list - other, more exotic things like Trampolines are also sometimes stored on the stack. In general, it is a temporary storage area for working items that will not be needed after the current function returns to its caller. A "backtrace" in a debugger shows some (but not all) of the contents of the stack.
