[site]: stackoverflow
[post_id]: 2606344
[parent_id]: 2605026
[tags]: 
If you insist on getting away from stored/procedural why not switch to nested sets from your materialized paths approach? Otherwise, do the two queries from the application side (or use stored procedure as suggested by astander). Good links for hierarchies in SQL here EDIT: It seems that you are storing information about the state of the tree control in the database. Assuming that this is really justified and that you need to store the visibility in the database you might investigate the following scenarios (these are ideas, not immediate solutions): open a cursor/recordset/whatever-row-based-approach-is-called-in-your-framework and pass that to the tree control so that the number of updates and fetches from the database are related to the actions on the tree (making branches visible, updating visibility, hiding branches, etc). In this case (depending on the framework) you don't have to preselect the proper elements (nor issue select statement every time user closes or opens a branch). update the visibility in the database for all children. it seems that you are updating visibility only on a node that is expanded/collapsed (if you need to preserve visibility of collapsed branches and leafs then you might have two fields; this is not elegant, but I would test this option, too) investigate nested sets again; with nested sets required queries might become faster. Also it becomes a bit easier to write SQL (here's SQL that returns nodes that have all parents visible, assuming visibility is tinyint(1); BIT_AND will do aggregate AND on all the parents in a single query) SELECT node.name AS name FROM t1 AS node, t1 AS parent WHERE node.visibility = 1 AND node.lft BETWEEN parent.lft AND parent.rgt GROUP BY node.name HAVING BIT_AND(parent.visibility) = 1 ORDER BY node.lft (this is tested, I took example from here , and added visibility) Also, when you test and benchmark each solution do not forget to benchmark all the operations (selecting visible branches, opening hidden branches, marking node invisible, etc..).
