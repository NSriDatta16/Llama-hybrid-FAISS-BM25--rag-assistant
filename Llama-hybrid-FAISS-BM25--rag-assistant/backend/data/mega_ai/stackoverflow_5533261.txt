[site]: stackoverflow
[post_id]: 5533261
[parent_id]: 5533243
[tags]: 
Typically, you'll have the audio encoded in some format. For simplicity, let's assume it's Wave format. One way of doing things would be to encapsulate chunks of the audio (Say, 50 ms chunks) for sending over the network. However, you can't blindly send data over the network and expect it to work. On your computer, data may be organized one way (little or big endian), and it could be organized in the opposite way on the other computer. In that case, the client will get data that he interprets as being completely different than what you intended. So, you'll need to properly serialize it somehow. Once you properly serialize the data though (or not, if both computers use the same endianess!), you can just send() it and rcev() it, then just pass it off to a decoder to deal with. I'd love to offer more information, but that's about the extent of my knowledge on the subject. It really depends on what exactly you're doing, so it's hard to give any more information without some more specifics as to what you're doing (with regards to audio format, for one). Some more information: http://en.wikipedia.org/wiki/Serialization http://en.wikipedia.org/wiki/Endianness Edit: As pointed out in the comments of this answer, you should probably not worry about serialization at all if you're using a standard format. Just pass it over the network in chunks that are usable by your decoder (Send a frame at a time, for example) then decode those individual frames (or possibly multiple frames) on the client side.
