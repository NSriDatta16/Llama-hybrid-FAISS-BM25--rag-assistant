[site]: stackoverflow
[post_id]: 1298936
[parent_id]: 1298863
[tags]: 
This is a very broad field, but ... If you're doing matrix arithmetic, consider looking into off-the-shelf libraries for this. They are probably faster and some support multithreading, which will give you a performance boost on multiprocessor machines. Profiling, as pierr suggests. This will tell you where your program is actually spending its time. Knowing this lets you focus your attention on the bits that actually need tuning. Cache line and word alignment plus optimising chunks to fit into processor caches. These are viewed as more germane to C programming as it's easier to control this sort of thing with C. However, the same issues can cause problems with FORTRAN programs for much the same reasons. The cache miss penalty on a modern CPU is very large and optimising for cache usage can make an order-of-magnitude difference in some cases. If you identify this as an issue you may want to re-write the core computation in C to give you more fine-grained control over the data structures. If you are REALLY CPU bound you may get some mileage from techniques like GPU programming.
