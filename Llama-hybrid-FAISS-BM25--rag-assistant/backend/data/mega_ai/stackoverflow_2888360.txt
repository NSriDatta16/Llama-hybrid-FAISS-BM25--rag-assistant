[site]: stackoverflow
[post_id]: 2888360
[parent_id]: 2888176
[tags]: 
If what you mean by "script" is the code in your Picture.aspx, I should point out that C# is not a scripting language, so it is technically not a script. You can use the Caching API provided by ASP.NET. I assume you alread have a method which contains something like this. Here is how you can use the Caching API: string fileName = ... // The name of your file byte[] bytes = null; if (HttpContext.Current.Cache[fileName] != null) { bytes = (byte[])HttpContext.Current.Cache[fileName]; } else { bytes = ... // Retrieve your image's bytes HttpContext.Current.Cache[fileName] = bytes; // Set the cache } // Send it to the client Response.BinaryWrite(bytes); Response.Flush(); Note that the keys you use in the cache must be unique to each cached item, so it might not be enough to just use the name of the file for this purpose. EDIT: If you want to enable caching the content on the client side, use the following: Response.Cache.SetCacheability(HttpCacheability.Public); You can experiment with the different HttpCacheability values. With this, you can specify how and where the content should be cached. (Eg. on the server, on proxies, and on the client) This will make ASP.NET to send the client the caching rules with the appropriate HTTP headers. This will not guarantee that the client will actually cache it (it depends on browser settings, for example), but it will tell the browser "You should cache this!" The best practice would be to use caching on both the client and the server side. EDIT 2: The problem with your code is the SetExpires(DateTime.Now.AddTicks(600)) . 600 ticks is only a fraction of a second... (1 second = 10000000 ticks) Basically, the content gets cached but expires the moment it gets to the browser. Try these: context.Response.Cache.SetExpires(DateTime.Now.AddMinutes(5)); context.Response.Cache.SetMaxAge(TimeSpan.FromMinutes(5)); (The TimeSpan.FromMinutes is also more readable than new TimeSpan(...) .)
