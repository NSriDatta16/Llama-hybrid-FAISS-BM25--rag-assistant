ution to the frame problem, of representing and reasoning about the way in which actions and other events change the state of some world. There are many variants of the event calculus. But the core axiom of one of the simplest and most useful variants can be expressed as a single, domain-independent axiom: h o l d s A t ( F , T 2 ) ← {\displaystyle {\mathit {holdsAt}}(F,T2)\leftarrow } [ h a p p e n s A t ( E 1 , T 1 ) ∧ i n i t i a t e s ( E 1 , F , T 1 ) ∧ ( T 1 < T 2 ) ∧ {\displaystyle [{\mathit {happensAt}}(E1,T1)\wedge {\mathit {initiates}}(E1,F,T1)\wedge (T1<T2)\wedge } ¬ ∃ E 2 , T [ h a p p e n s A t ( E 2 , T ) ∧ t e r m i n a t e s ( E 2 , F , T ) ∧ ( T 1 ≤ T < T 2 ) ] {\displaystyle \neg \exists E2,T[{\mathit {happensAt}}(E2,T)\wedge {\mathit {terminates}}(E2,F,T)\wedge (T1\leq T<T2)]} The axiom states that a fluent F {\displaystyle F} holds at a time T 2 {\displaystyle T2} if an event E 1 {\displaystyle E1} happens at a time T 1 {\displaystyle T1} and E 1 {\displaystyle E1} initiates F {\displaystyle F} at T 1 {\displaystyle T1} and T 1 {\displaystyle T1} is before T 2 {\displaystyle T2} and it is not the case that there exists an event E 2 {\displaystyle E2} and a time T {\displaystyle T} such that E 2 {\displaystyle E2} happens at T {\displaystyle T} and E 2 {\displaystyle E2} terminates F {\displaystyle F} at T {\displaystyle T} and T 1 {\displaystyle T1} is before or at the same time as T {\displaystyle T} and T {\displaystyle T} is before T 2 {\displaystyle T2} . The event calculus solves the frame problem by interpreting this axiom in a non-monotonic logic, such as first-order logic with circumscription or, as a logic program, in Horn clause logic with negation as failure. In fact, circumscription is one of the several semantics that can be given to negation as failure, and it is closely related to the completion semantics for logic programs (which interprets if as if and only if). The core event calculus axiom defines the h o l d s A t {\displaystyle holdsAt} predicate in terms of the h a p p e n s A t {\displaystyle happensAt} , i n i t i a t e s {\displaystyle initiates} , t e r m i n a t e s {\displaystyle terminates} , < {\displaystyle <} and ≤ {\displaystyle \leq } predicates. To apply the event calculus to a particular problem, these other predicates also need to be defined. The event calculus is compatible with different definitions of the temporal predicates < {\displaystyle <} and ≤ {\displaystyle \leq } . In most applications, times are represented discretely, by the natural numbers, or continuously, by non-negative real numbers. However, times can also be partially ordered. Domain-dependent axioms To apply the event calculus in a particular problem domain, it is necessary to define the i n i t i a t e s {\displaystyle initiates} and t e r m i n a t e s {\displaystyle terminates} predicates for that domain. For example, in the blocks world domain, an event m o v e ( O b j e c t , P l a c e ) {\displaystyle move(Object,Place)} of moving an object onto a place initiates the fluent o n ( O b j e c t , P l a c e ) {\displaystyle on(Object,Place)} , which expresses that the object is on the place and terminates the fluent o n ( O b j e c t , P l a c e 1 ) {\displaystyle on(Object,Place1)} , which expresses that the object is on a different place: i n i t i a t e s ( m o v e ( O b j e c t , P l a c e ) , o n ( O b j e c t , P l a c e ) , T i m e ) . {\displaystyle {\mathit {initiates}}(move(Object,Place),on(Object,Place),Time).} t e r m i n a t e s ( m o v e ( O b j e c t , P l a c e ) , o n ( O b j e c t , P l a c e 1 ) , T i m e ) ← d i f f e r e n t ( P l a c e 1 , P l a c e ) . {\displaystyle {\mathit {terminates}}(move(Object,Place),on(Object,Place1),Time)\leftarrow different(Place1,Place).} If we want to represent the fact that a F l u e n t {\displaystyle Fluent} holds in an initial state, say at time 1, then with the simple core axiom above we need an event, say i n i t i a l i s e ( F l u e n t )