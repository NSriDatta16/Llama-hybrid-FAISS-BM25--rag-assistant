[site]: stackoverflow
[post_id]: 3472456
[parent_id]: 3472370
[tags]: 
Dynamic code replacement like you're suggesting might work in some cases, but it's a scary road to go down-- fragile, one wrong step and you're busted, and it quickly becomes a maintenance nightmare. As a commenter said, your cleaner bet is to just wrap the native window.alert and then do the right thing when the string you care about comes through, per the answer here: JavaScript: Overriding alert() (Insert standard comment here about how you should get your server side people on the same page/team as you on this so you don't need to hack around your own page.) UPDATE: You're not asking about alert, you're asking about this problem generally. Yes, you could what others are suggesting. But if you have the original code for the function, why not just replace it entirely? If the function you want is a global function called foo() , you can run JS that does: window.foo = function() { // The stuff I know is there (A) ... // Some new stuff I want to change (B) ... // More stuff I know is there (C) } Which will throw away the original and replace it with your version. This would work reasonably well, although "monkey patching" the stuff in the page definitely comes with some maintenance headaches. I will definitely note here that if you can't do this for some reason and thus insist on doing textual code replacement in the middle of existing functions , you're abusing the language/environment for the purposes of maintainable anything, and you are truly screwed in multiple ways.
