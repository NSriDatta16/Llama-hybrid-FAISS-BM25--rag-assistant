[site]: stackoverflow
[post_id]: 3865329
[parent_id]: 3865310
[tags]: 
A simple answer is you can't . The LINQ to SQL translator recognizes only some of the standard .NET methods and there is no way you could add others. If you need something like that, you'll need to create expression tree explicitly (to be used as the body of the lambda expression). A direct way of doing that is to use methods of the Expression class, but it can be simplfied a lot. Perhaps the best option is to use the LINQKit project . It makes it possible to call other lambda expressions (not quite method, but close). It provides an AsExpandable extension method that allows you to write: Expression > customFunction = ... var data = new MyDataContext(); var query = from c in data.Purchases.AsExpandable() where customFunction.Compile()(c) select c.Name; The customFunction is a lambda function compiled as an expression tree and you can use it inside a query. The AsExpandable extension replaces the use with the body of the function, so LINQ to SQL translator can handle this. You can read more about how this works in my blog post . Other alternative that is in more details discussed by others is to implement the functionality as an SQL user defined function. Then you can drag the function to your data context and call the function from the query. The translator will simply insert a call to your SQL function.
