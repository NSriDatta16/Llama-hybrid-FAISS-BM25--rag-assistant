[site]: stackoverflow
[post_id]: 5474389
[parent_id]: 5473764
[tags]: 
If you have control over both the client and the server you don't really have to generate the client with wsimport . I currently do it as follows: One project defines the API for the web service. The API consists of the interface and all classes of the "transfer objects". Another project implements the service. You can now distribute the API to the client who can now use the service and may leverage all your additional business methods. Assuming ServiceInterface is your service interface a client might look like this: Service s = Service.create( new URL("http://example.com/your_service?wsdl"), new QName("http://example.com/your_namespace", "YourServiceName")); ServiceInterface yourService = s.getPort( new QName("http://example.com/your_namespace", "YourPortName"), ServiceInterface.class); And just like that you have a service client. That way you can use all your methods (1), you have full control over your packages (3) and you don't have any wrapper classes lying around as they are all generated at runtime (4). I think (2) is solved by this as well. Your question is quite large so if I fail to address a point sufficiently, leave a comment and I try to get into more detail.
