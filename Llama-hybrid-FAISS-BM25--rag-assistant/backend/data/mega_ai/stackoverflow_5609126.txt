[site]: stackoverflow
[post_id]: 5609126
[parent_id]: 5607116
[tags]: 
If you can use XElement: XElement xml = XElement.Load(file); XElement storage = xml.Element("storage"); XElement save = storage.Elements("Save").FirstOrDefault(e => ((string)e.Attribute("Name")) == nameWeWant); if(null != save) { // do something with it } Personally I like classes that have properties that convert to and from the XElement to hide that detail from the main program. IE say the Save class takes an XElement node in the constructor, saves it internally globally, and the properties read/write to it. Example class: public class MyClass { XElement self; public MyClass(XElement self) { this.self = self; } public string Name { get { return (string)(self.Attribute("Name") ?? "some default value/null"); } set { XAttribute x = source.Attribute("Name"); if(null == x) source.Add(new XAttribute("Name", value)); else x.ReplaceWith(new XAttribute("Name", value)); } } } Then you can change the search to something like: XElement save = storage.Elements("Save") .FirstOrDefault(e => new MyClass(e).Name == NameWeWant);
