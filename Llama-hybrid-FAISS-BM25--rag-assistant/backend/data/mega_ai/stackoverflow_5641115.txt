[site]: stackoverflow
[post_id]: 5641115
[parent_id]: 
[tags]: 
Effective Unit Test Coverage (and what should actually be tested?)

I see there's been several questions based off this topic, but I have some specific examples that I'm struggling with. I hope someone can help me here, as I'm new to test driven development and unit testing in general. (I'm not sure if it matters but I am using C# with .NET framework 4.0 and using Microsoft's built in testing framework) First off, is it worth testing very simple blocks of code? For example, for one of my classes I have a Fill method which accepts 10 parameters, and sets the values for 10 properties in the class based off of those parameters. The fill code really is just a series of value setting statements. I've read that a good unit test is supposed to only assert one thing, but it seems to me in order to check that all those values have been set correctly I would have to assert 10 things. So either I can not test it at all, trusting that the code is simple enough, or write 10 different unit tests to check each property. Are any of these correct? Second example. I have a block of code that makes several calls to a class's private methods and finally calls a web service to fire off an email to a user. I understand that I should inject a mock web service for the email service so that I'm not testing multiple classes, but how should I test that all those private methods and that email call have been made? Third example is similar to the last. My class structure looks something likes: Controller --- depends on ---> IWidget(some business object) && IDataProvider DataProvider(Implements IDataProvider) --- depends on ---> WebService WebService --- directly makes calls ---> Database Right now I have unit tests for the controller (injecting mock Widgets and DataProviders). So that's all good. I also have unit tests for Widget with no problems. The trouble comes down to the DataProvider and the WebService. The WebService in this particular instance does nothing but passes through the requests of the dataprovider and passes back the data (due to physical architecture restraints). I have trouble unit testing the DataProvider because I'm not sure how to go about injecting a mock web service. I'm also unsure if unit testing the DataProvider is worth while, because I'd wind up having to code in a lot of mocked up datasets just to test values. Similarly I'm unsure how to go about unit testing the web service because in this instance the WebService's main function depends on the database. Once again, is this worth testing? What if the WebService did more besides just serve as a pass through but was still dependent on the database? I'd greatly appreciate any advice that anyone can offer in this regard. Thanks very much.
