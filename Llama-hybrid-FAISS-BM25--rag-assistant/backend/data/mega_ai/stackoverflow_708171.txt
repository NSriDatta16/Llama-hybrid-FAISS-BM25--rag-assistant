[site]: stackoverflow
[post_id]: 708171
[parent_id]: 705598
[tags]: 
I have written both and would say that other things being equal (complexity of language or instruction set), it is way easier to write an emulator, especially if you are trying to write an interesting emulator or compiler. The reason is that with an emulator you are trying to simulate a low-level thing with another, similar low-level thing. It's not too bad. With a compiler, you may be trying to implement very high-level ideas (e.g., objects, first-class functions, managed memory, string scanning) with very low level tools (machine words and machine instructions). This task is just a lot harder. Of course, for gangs of fun, you can write an emulator that works by dynamic binary translation , which is the compilation of machine code for the emulated architecture into the machine code for the native architecture. This way you get to have all the fun of both---and yo produce really fast emulators like QEMU or the late lamented Digital FX!32.
