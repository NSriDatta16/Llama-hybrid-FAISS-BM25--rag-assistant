[site]: datascience
[post_id]: 44956
[parent_id]: 44928
[tags]: 
If you want to use a simple neural network which takes in a 50x2 matrix you can do this y flattening your matrix to a 100x1 vector. This will make no difference in the way that the neurons are processed. Each neuron will take all the inputs and make a decision on its weight accordingly. If you want some neighborhood feature selection then you can use a convolutional neural network like model = Sequential() model.add(Conv2D(32, kernel_size=(2, 2), activation='relu', input_shape=input_shape, padding='same')) model.add(Conv2D(64, (2, 2), activation='relu', padding='same')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dense(1, activation='softmax')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) This will do a feature mixing within a 2x2 window across your matrix which will thus mix your two values before feeding them to the deeper part of the network. Doing this is also a good idea as it serves as a means to reduce the complexity of your model which may lead to better results.
