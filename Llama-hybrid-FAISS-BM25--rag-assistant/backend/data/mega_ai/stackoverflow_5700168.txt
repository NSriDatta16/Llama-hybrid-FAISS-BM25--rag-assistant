[site]: stackoverflow
[post_id]: 5700168
[parent_id]: 5699959
[tags]: 
Throw an exception to provide more information (type of exception, message, etc.) for proper handling and to signify that: your code is being used inappropriately / illegally i.e. against contractual constraints that cannot be enforced during compile time an alternative to the primary flow has occurred i.e. you expected an operation to succeed but it failed, like obtaining a resource or connection I would actually discourage returning "log objects" (i.e. returning an exception object rather than throwing one) as this results in unnecessary mashes of if statements to check the result AND handle a potential error all your methods would have to return of a "log object" (or have an out param) or else you cannot "bubble up" the error/exception for scoped handling, resulting in further limitations loses the helpfulness of try/catch/ finally hurts readability of scope (operation attempt vs error handling vs clean up) If you want to return "log objects", you should really use boolean returns with methods that makes sense (i.e. FindCity ) or methods with an out boolean parameter (i.e. TryFindCity ). This way, you don't need to specify flags, but just use the methods whose boolean return allows you to determine the would-be flag value. EDIT Per OP's comment, if there is a giant method with numerous possible validation errors, then the giant method should be refactored to call smaller methods that each throw the appropriate exception. The giant method can then simply re-throw each exception or just allow each exception to bubble up if it shouldn't be the one handling it. If there are validation dependencies that prevent "proper separation", then simply throw a single ValidationException with the proper argument(s). An example of what this class could be is below: public class ValidationException : Exception { private readonly object _Field; public object Field { get { return _Field; } } public ValidationException(string message) : base(message) { } public ValidationException(string message, object field) : this(message) { _Field = field; } } Then you can just throw one exception explaining the validation error.
