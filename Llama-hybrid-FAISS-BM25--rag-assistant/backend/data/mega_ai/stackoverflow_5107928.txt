[site]: stackoverflow
[post_id]: 5107928
[parent_id]: 3077933
[tags]: 
I really wanted to like it too, and went quite far with an implementation in a new project, until I gave up under the weight of small niggling issues I had with it. I would love for Microsoft to resurrect Spec#. I know code contracts was written as a library to be available across languages, but even just the speed of static analysis cries out for compiler support. This guy raises some of the same points: http://earthli.com/news/view_article.php?id=2183 Anyway, there was no one problem that was a deal-breaker, but an accumulation of irritations: Static analysis is very slow. You can set it to run in the background, but then it's very easy to ignore. Static analysis isn't great, for example: It only handles simple control flow It won't assume that readonly fields are invariant Collections are not handled by the static checker (only runtime) No delegate contracts Doesn't work well with Resharper unless you actively suppress resharper warnings one way or another Resharper is optimistic. It will assume a method parameter is not null, until you give it a hint that it might be - like Contract.Assume(thing != null) Can generate a lot of warnings and suggestions, sometimes stemming from an ambiguous source. The moment any team member lets their attention slip, the number of warnings would become overwhelming for everybody The need to specify abstract contract classes for interfaces is pain. Runtime contracts use IL rewriting, which apparently doesn't play well with other rewriting solutions like PostSharp (I think . As a result of IL rewriting, edit-and-continue can't be used Contracts stick very tightly to liskov substitution principle: Subtypes can never relax pre-conditions. I mean, good in principle, but I imagine it would be a pain when working with over-contracted 3rd party code.
