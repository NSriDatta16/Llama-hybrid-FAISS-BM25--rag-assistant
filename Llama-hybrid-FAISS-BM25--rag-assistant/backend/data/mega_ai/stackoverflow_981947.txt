[site]: stackoverflow
[post_id]: 981947
[parent_id]: 981830
[tags]: 
I believe that the correct answer to this question is that the compiler does not (normally) optimize boolean evaluations, simply due to logical short circuiting, for instance: if (GetFlagA() || GetFlagB()) { ...do something } The order of that if evaluation can really matter if calling GetFlagA modifies something that GetFlagB relies on (granted this is REALLY bad code practice, but that's a different topic for a different thread.) The problem here is logical short circuiting, if GetFlagA runs and returns true, GetFlagB will never run, as seen here the outcome of GetFlagB is inconsequential to the evaluation of the statement. A | B | = F | F | F F | T | T T | F | T true regardless of B's return val. T | T | T true regardless of B's return val. So in summary, asking if you can optimize by using Demorgan's or anything really is just like the rest of computer science and software engineering. "It depends." if you're using non-functional evaluation, it can probably be optimized. Honestly tho you're talking a few operations on an insanely fast platform, you'd be better off spending your time writing documentation. I hope this helps.
