[site]: stackoverflow
[post_id]: 1054720
[parent_id]: 
[tags]: 
At what stage do you add logging & tracing in OO?

I'm interested at what stage in your development do add logging and/or tracing to your applications? I'm working with a .Net stack and log4net (via commons.logging). Generally taking a TDD approach to development although admittedly not 100%, sometimes Im know to spike out without test coverage. My application all sit server-side, e.g. web services, windows service that consume messages off a bus, asp.net mvc business admin apps. etc.. I found myself decorating methods in my applicatiosn services with descriptive logger.INFO "Getting cakes from repository" . some work .. "Got 5 cakes from repository. ", and then an unhandled expcetion handler for the app doamin to logger.FATAL for unexpected excpetions that bubble up. However I usually end up going back and applying these near the end of development rather than at the start of development and I might have a dozen or two only. I find I rarely decorate any lower level classes such as implementation of ICakeRepository with logger stuff as it seems pointless. For tracing, which switched on via config, I'm thinking of intercepting method calls and instance creation using the IOC framework, and this should take care of on-site troublehsooting rather than heavy trace population.
