[site]: stackoverflow
[post_id]: 5255046
[parent_id]: 5254863
[tags]: 
Provided your target window is following the standard method to update its caption, you can add a hook to catch the precise moment when the caption has changed. To do this, you will need to add a windows message return hook with SetWindowsHookEx , passing it a CallWndRetProc handler from your code to receive notices upon completion of windows messages by the target window's message handler. SetWindowsHookEx() @ MSDN CallWndRetProc @ MSDN The windows message you need to trap is WM_SETTEXT , which is sent to trigger the change in the default text/caption for a window. WM_SETTEXT @ MSDN If you would like to test this in isolation, WM_SETTEXT is an implicit message sent upon calling SetWindowText to change the window text/caption. SetWindowText() @ MSDN Also, you might also be able to get rid of your cbt hook, as WM_ACTIVATE , WM_MOUSEACTIVATE , and WM_SETFOCUS can be trapped with the same hook used to trap WM_SETTEXT . These messages cover various levels of activation activity and type for windows. WM_ACTIVATE @ MSDN WM_MOUSEACTIVATE @ MSDN WM_SETFOCUS @ MSDN Last, if the target window is a window you create and control in your own process, you could simply intercept those windows messages instead of using hooks. If it is impossible to use your available frameworks to intercept those messages, SetClassLongPtr is also another alternative, which may be used to implement a subclass for that type of window to allow you to intercept window messages. If you use this method, you would delegate all calls to the original windows message handler, and only act during a return from the original procedure upon receiving a message of interest. SetClassLongPtr() @ MSDN WindowProc @ MSDN
