[site]: stackoverflow
[post_id]: 1924092
[parent_id]: 
[tags]: 
Using Scala Actors to create sth like a Pipeline

I am struggling with the following problem for a week by now and need some advice. def query(title: String): List[Search] // query("Terminator") => ["Terminator I", "Terminator II", "Terminator 1984", etc...] def searchIMDB(s: Search): List[SearchResult] def searchTMDB(s: Search): List[SearchResult] def filterRedundantSearchResults(sr: SearchResult): Option[SearchResult] def fetchIMDB(sr: SearchResult): List[MetaInfo] def fetchTMDB(sr: SearchResult): List[MetaInfo] def consolidate(infos: List[MetaInfo]): List[List[MetaInfo]] I want to construct a Pipeline like: query("Terminator") -> [askIMDB, askTMDB, ...] -> filterRedundantSearchResults (already-searched-state per query) -> [fetchIMDB, fetchTMDB, ...] -> consolidate (collected-meta-infos-state per query) => List[ TerminatorI-List[MetaInfo], TerminatorII-List[MetaInfo], ...] So far, I have implemented every Pipeline-Segment as an Actor. I need to create dedicated actor-instances for every Query, as some of those actors like filterXXX and consolidate need to maintain state per query. Functions like askIMDB produce multiple results which I want to process concurrently (each to a seperate actor). So I have not found any way to pre-construct the whole graph of actors before executing the query() and neither an elegant way to modify it at runtime. My first try was a chain of actors and passing sth like Transaction-IDs in the messages, so each Actor had a Map[TransactionID->State] but this felt rather ugly. The second try was to create a sort-of-Pipeline abstracting the digraph of actors into one flow but I failed so far. This is my first post, sorry if I forgot something or the question is to general/pseudo-coded. Any advice very much appreciated. Thanks!
