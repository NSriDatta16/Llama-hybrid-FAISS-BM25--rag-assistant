[site]: stackoverflow
[post_id]: 4268457
[parent_id]: 
[tags]: 
Future.get() gets interrupted always with an InterruptedException

I have a WEIRD problem with Future.get() in Java. It returns always with an InterruptedException, however the weird thing is that the cause of the Exception is null, so I cant tell who interrupted me.. It gets even worse because I check before calling get(), and the job Future has to do is already done. Here is the code responsible for the output below. f is the Future , and the callable returns a HashMap where Agent is not really relevant. Sorry if there are too many printlines, I'm just trying to give as mush info as I can. The call method from callable is for now a simple System.out.println("Hola soy agente") that as you will see, gets printed, meaning that the callable didn't cause the exception either Here is the code: try { System.out.println(f.isDone()); //true System.out.println(f.isCancelled()); //false System.out.println(f.toString()); //FutureTask newModdedAgents.putAll(f.get()); }catch(InterruptedException e) { System.out.println(f.isDone()); //true System.out.println(f.isCancelled()); //false System.err.println(e); //It is an interruptedException System.err.println(e.getCause()); //???? null? e.printStackTrace(); } And the output Hola soy agente true false java.util.concurrent.FutureTask@1c4c94e5 true false java.lang.InterruptedException null java.lang.InterruptedException at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1302) at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:248) at java.util.concurrent.FutureTask.get(FutureTask.java:111) at com.pf.simulator.Simulation.simulateStep(Simulation.java:217) at com.pf.gui.ButtonPanel.doWork(ButtonPanel.java:141) at com.pf.gui.ButtonPanel$1$1.construct(ButtonPanel.java:198) at com.pf.gui.SwingWorker$2.run(SwingWorker.java:117) at java.lang.Thread.run(Thread.java:636) In case you want to see where I sumbit the callable to the threadpool... then this would be the code for it for(Callable > c : agentCallables) { Future > future = pool.submit(c); agentFutureSet.add(future); } and afterwards I iterate over this Set with for(Future > f : agentFutureSet) try { //Here goes the code at the beginning
