[site]: stackoverflow
[post_id]: 2671313
[parent_id]: 2671189
[tags]: 
For a simple HTTP service that takes commands via GET (you should actually consider using POST...) I would use straight ASP MVC, not a true 'web service'. WCF wants to guide you down the path of SOAP and your clients will curse you forever. RESTful WCF is also an alternative, but it still seem overkill imho. As for authentication, you have two viable authentication schemes: Windows Integrated security, which will work only if client is inside intranet or connected with a VPN or DirectAccess solution HTTP Digest, which is poorly supported by the ASP authentication modes (only support authenticating against a Active Directory forest user base). With Windows authentication you don't do anything on the server side code, simply mark the the web.config . 'Windows' authentication is understood by most user agents. Is trivial to program clients of your service to use Windows authentication too, simple set the request's Credentials to the current user DefaultCredentials . With Digest authentication the server will challenge the user agent to authenticate, but the ASP validation unfortunately, as I said, only works for validating a trusted NT domain. The client though does not need to be in the intranet (there is no NTLM SSPI exchange between client and server). Programming a client is faily easy, in .Net simply set the requet Credentials to a properly initialized CredentialsCache : CredentialCache myCache = new CredentialCache(); myCache.Add(new Uri("http://www.contoso.com/"),"Digest", new NetworkCredential(UserName,SecurelyStoredPassword,Domain)); ... request.PreAuthenticate = true; request.Credentials = myCache; It is important to reuse the cache between requests, otherwise the client will do two round-trips with each call. In theory you can also have a third authentication path: full duplex SSL. But the 'trivial' problem of client certificate deployment makes this alternative a dead end for anybody short of a fully pre-installed enterprise PKI.
