[site]: stackoverflow
[post_id]: 3768675
[parent_id]: 
[tags]: 
Add-Type PowerShell 2.0 can't find method

I've made a c# class that I'm trying to run in PowerShell with add-Type. I have a few of my own assemblies referenced and some from .net4. I'm using my own PowerShell host because the assemblies I'm referencing are made on the .net4 framework and the PowerShell Console doesn't support that yet. Here is a sample of the script that i'm trying to run: $Source = @" using System; using System.Collections; using System.Collections.Generic; using System.Globalization; using System.IO; using System.Linq; using MyOwn.Components.Utilities; using MyOwn.Components; using MyOwn.Entities; public class ComponentSubtypeMustMatchTemplate { public static Guid ProblemId { get { return new Guid("{527DF518-6E91-44e1-B1E4-98E0599CB6B2}"); } } public static ProblemCollection Validate() { SoftwareStructureEntityContainer softwareEntityStructure = new SoftwareStructureEntityContainer(); if (softwareEntityStructure == null) { throw new ArgumentNullException("softwareStructure"); } ProblemCollection problems = new ProblemCollection(); foreach (var productDependency in softwareEntityStructure.ProductDependencies) {...... return problems; } } "@ $refs = @("d:\Projects\MyOwn\bin\MyOwn.Components.dll", "d:\Projects\MyOwn\bin\MyOwn.Entities.dll", "d:\Projects\MyOwn\bin\MyOwn.OperationalManagement.dll", "c:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Core.dll", "c:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Data.Entity.dll", "c:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Data.dll") Add-Type -ReferencedAssemblies $refs -TypeDefinition $Source $MyProblemCollection = new-Object ComponentSubtypeMustMatchTemplate $MyProblemCollection.Validate() Now when i run this I get this error: {"Method invocation failed because [ComponentSubtypeMustMatchTemplate] doesn't contain a method named 'Validate'."} Ive also tried the last bit in different ways (found many different examples on how to do this) but they all seem to give the same error. I really have no idea how to get this working, and i can't seem to find any example's on something similar. On a second note(for when i get this fixed) I was wondering if it was possible to be able to just load the .cs file instead of putting the c# code in the script. would be a better read and more maintainable. Ive tried to see if I can see the methods with Get-Member -static like this: $MyProblemCollection = New-Object ComponentSubtypeMustMatchTemplate $MyProblemCollection | Get-Member -Static And it does see the method there: TypeName: ComponentSubtypeMustMatchTemplate Name MemberType Definition ---- ---------- ---------- Equals Method static bool Equals(System.Object objA, System.Obje... ReferenceEquals Method static bool ReferenceEquals(System.Object objA, Sy... Validate Method static MyOwn.ComponentSubtypeMustMatchTemplate... So why doesn't it work!? @Philip in my script it doesn't really matter if its static or non static cause it will always just be run once and the results will be used my program. But strange thing is it does seem to work if i use the static syntax (except for that i get no results at all) and if i use the non-static syntax i'll get the same error. I also tried the script in an other PowerShell console i found on the interwebs, and there i get an entirely different error : PS C:\temp. ps1 The following exception occurred while retrieving member "Validate": "Could not load file or assembly 'MyOwn.Entit ies, Version=1.0.0.0, Culture=neutral, PublicKeyToken=fc80acb30cba5fab' or one of its dependencies. The system cannot find the file specified." At D:\Projects\temp.ps1:145 char:30 + $MyProblemCollection.Validate hmm nvm, it spontaneously worked! strange BUT i'm happy! =)
