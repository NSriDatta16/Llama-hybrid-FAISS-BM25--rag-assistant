[site]: stackoverflow
[post_id]: 3038778
[parent_id]: 3038770
[tags]: 
Here's what I've come up with - it works but I'd be interested to see if there are better alternatives: using System.Collections.Generic; using System.IO; using System.IO.IsolatedStorage; using System.Linq; public static class IsolatedStorageFileExtensions { /// /// Recursively gets a list of all files in isolated storage /// /// Based on /// /// public static List GetAllFilePaths(this IsolatedStorageFile isolatedStorageFile) { // Store results in the file results list List result = new List (); // Store a stack of our directories Stack stack = new Stack (); // Add initial directory string initialDirectory = "*"; stack.Push(initialDirectory); // Continue while there are directories to process while (stack.Count > 0) { // Get top directory string dir = stack.Pop(); string directoryPath; if (dir == "*") { directoryPath = "*"; } else { directoryPath = dir + @"\*"; } // Add all files at this directory to the result List var filesInCurrentDirectory = isolatedStorageFile.GetFileNames(directoryPath).ToList (); List filesInCurrentDirectoryWithFolderName = new List (); // Prefix the filename with the directory name foreach (string file in filesInCurrentDirectory) { filesInCurrentDirectoryWithFolderName.Add(Path.Combine(dir, file)); } result.AddRange(filesInCurrentDirectoryWithFolderName); // Add all directories at this directory foreach (string directoryName in isolatedStorageFile.GetDirectoryNames(directoryPath)) { stack.Push(directoryName); } } return result; } }
