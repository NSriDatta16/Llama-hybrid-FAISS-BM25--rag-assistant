[site]: datascience
[post_id]: 44508
[parent_id]: 
[tags]: 
Having trouble getting TensorFlow to do something trivial

I have a vector x and want to compute a vector y such that y[j] = x[j]**2 using a neural network specified by TensorFlow, below. It doesn't work so well, the error is high. Am I doing something wrong? Any help will be appreciated. The way it works is it first generates data in Xtrain, Ytrain, Xtest, and Ytest and then creates placeholder variables to get TensorFlow going. Then it specifies three hidden layers and one output layer. Then it trains, and Ypred, the prediction for Ytest, is created using a feed dictionary. import numpy as np import tensorflow as tf n = 10 k = 1000 n_hidden = 10 learning_rate = .01 training_epochs = 100000 Xtrain = [] Ytrain = [] Xtest = [] Ytest = [] for i in range(0,k,1): X = np.random.randn(1,n)[0] Xtrain += [X] Ytrain += [Xtrain[-1]**2] X = np.random.randn(1,n)[0] Xtest += [X] Ytest += [Xtest[-1]**2] x = tf.placeholder(tf.float64,shape = (k,n)) y = tf.placeholder(tf.float64,shape = (k,n)) W1 = tf.Variable(tf.random_normal((n,n_hidden),dtype = tf.float64)) b1 = tf.Variable(tf.random_normal((n_hidden,),dtype = tf.float64)) x_hidden1 = tf.nn.sigmoid(tf.matmul(x,W1) + b1) W2 = tf.Variable(tf.random_normal((n,n_hidden),dtype = tf.float64)) b2 = tf.Variable(tf.random_normal((n_hidden,),dtype = tf.float64)) x_hidden2 = tf.nn.sigmoid(tf.matmul(x_hidden1,W2) + b2) W3 = tf.Variable(tf.random_normal((n,n_hidden),dtype = tf.float64)) b3 = tf.Variable(tf.random_normal((n_hidden,),dtype = tf.float64)) x_hidden3 = tf.nn.sigmoid(tf.matmul(x_hidden1,W3) + b3) W4 = tf.Variable(tf.random_normal((n,n_hidden),dtype = tf.float64)) b4 = tf.Variable(tf.random_normal((n_hidden,),dtype = tf.float64)) y_pred = tf.matmul(x_hidden3,W4) + b4 penalty = tf.reduce_sum(tf.abs((y - y_pred))) train_op = tf.train.AdamOptimizer(learning_rate).minimize(penalty) model = tf.global_variables_initializer() with tf.Session() as sess: sess.run(model) for i in range(0,training_epochs): sess.run(train_op,{x: Xtrain,y: Ytrain}) Ypred = y_pred.eval(feed_dict = {x: Xtest})
