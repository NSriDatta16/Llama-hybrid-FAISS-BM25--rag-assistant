[site]: crossvalidated
[post_id]: 155751
[parent_id]: 127542
[tags]: 
If you want an open source black-box solution try looking at Weka , a java library of ML algorithms. This guy has also used Covolutional Layers in Weka and you could edit his classification code to suit a time series classification task. As for coding your own... I am working on the same problem using the python library, theano (I will edit this post with a link to my code if I crack it sometime soon). Here is a comprehensive list of all the papers I will be using to help me from a good hour of searching the web: Time Series Prediction and Neural Networks Convolutional Networks for Images, Speech and Time Series Deep neural networks for time series prediction with applications in ultra-short-term wind forecasting Convolutional Networks for Stock Trading Statistical Arbitrage Stock Trading using Time Delay Neural Networks Time Series Classification Using Multi-Channels Deep Convolutional Neural Networks Neural Networks for Time Series Prediction Applying Neural Networks for Concept Drift Detection in Financial Markets Encoding Time Series as Images for Visual Inspection and Classification Using Tiled Convolutional Neural Networks Time Series Prediction Using Convolution Sum Discrete Process Neural Network Long-term Recurrent Convolutional Networks for Visual Recognition and Description Exploring Convolutional Neural Network Structures and Optimization Techniques for Speech Recognition As a starting point, you could edit the code found here to classify against a different number of categories, or edit it from classification to regression - I did this by removing the final softmax layer and making just one output node. I trained it on slices of a function like y=sin(x) as a test.
