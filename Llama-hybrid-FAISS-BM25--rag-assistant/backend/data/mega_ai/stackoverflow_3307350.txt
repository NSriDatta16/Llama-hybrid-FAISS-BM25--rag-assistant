[site]: stackoverflow
[post_id]: 3307350
[parent_id]: 3307234
[tags]: 
Getting specific to your code. I would do it this way. Base class Vehicle extended by specific classes for Car and Truck. Class Station with methods void Station::AddVehicleToPlaceNumberN(const Vehicle& vehicle, int placeNumber) Vehicle* Station::GetMutableVehiclePointer() Reasons behind the design/class organization. 1. Use inheritance only when there is a need of different implementations. If different implementations of an inherited method do the same thing (like in case of AddVehicleToPlaceNumberN) then there is no need for separating the implementations. 2. Use of generic method name always helps in simplifying the code. The methods can be overloaded (passed with different number and type of parameters) to get a specific thing done.
