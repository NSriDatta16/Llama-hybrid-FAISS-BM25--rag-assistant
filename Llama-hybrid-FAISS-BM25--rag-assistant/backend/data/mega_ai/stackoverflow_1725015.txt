[site]: stackoverflow
[post_id]: 1725015
[parent_id]: 1724785
[tags]: 
I've seen some helpful answers here. My twopennyworth: A stack is an implementation decision so not part of C. CPUs have stack instructions built in, which makes for efficient stack use. Calling a subroutine starts a stack frame which holds the calling parameters and subroutine's local variables. These can now be addressed as small offsets from a Stack Pointer register on the CPU. Similarly, nested calls build more stack on the stack, allowing good management of variable and parameter scope. Garbage collection is simplified. Just returning from the routine/function puts the previous frame address into the Stack Pointer and the unwanted stack frame effectively disappears. Heaps are great for dynamic data storage, but each variable must be referenced by its own pointer and its creation and destruction (garbage collection) has more overhead.
