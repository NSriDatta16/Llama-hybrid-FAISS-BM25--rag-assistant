[site]: stackoverflow
[post_id]: 3094080
[parent_id]: 3093923
[tags]: 
If your core program is written in Ruby, I don't see why you would want your scripts to be written in anything but Ruby—except maybe for sandboxing (see below). Would I have to write an entire package that will evaluate the user code and its syntax (as implement an own version of JavaScript) from scratch? No. There are many packages you can incorporate into your program. If your program were written in C, or even if it provided a C interface, your decision would be easy: the programming language Lua is designed to be embedded into C programs with very little effort. I have done it at least a couple of dozen times. How would I implement security to give the scripting language only to the classes that are allowed to be manipulated (for example, an attribute that marks the class as 'manipulable')? You do this by setting up the collection of names that is visible to scripts—as a programming-language guy, I would say you control the environment (a technical term for talking about access to names). In the case of Lua, for example, you would hand each user's script an environment that allows the user to name exactly the functionality you want the user to have, and no more. If the script can't name it, it can't be used. This job is generally called sandboxing . (As in, "put the user in a sandbox and don't let them out.") Sandboxing via control of the namespace is usual in other languages besides Lua. I have always wondered how Enterprise applications did this trick (and Game engines too...) I don't know how to summarize this trick briefly enough for an SO answer. But the general idea is: The scripting language has a bytecode interpreter There is a carefully designed protocol for calling between scripts and C For a deeper view, read Roberto's book Programming in Lua ; an earlier edition is free online.
