[site]: stackoverflow
[post_id]: 5164043
[parent_id]: 5163920
[tags]: 
You could just wrap the repeated stuff in a lambda, that would make the differences instantly obvious and you'd avoid repeating yourself: draw_it = lambda { |str, offset| x = pdf.bounds.left + postcard_width - in2pt(2.75) y = pdf.bounds.top - in2pt(2.25) - offset pdf.draw_text(str, :at =>[ x, y ], :size => 14) } #... draw_it.call(contact.first_name + " " + contact.last_name, 0) draw_it.call(contact.address.street1, 20) draw_it.call(contact.address.city + ", " + contact.address.state, 40) draw_it.call(contact.address.zip, 60) Then one more simple step to do away with the offset parameter: offset = 0 draw_it = lambda { |str| x = pdf.bounds.left + postcard_width - in2pt(2.75) y = pdf.bounds.top - in2pt(2.25) - offset offset += 20 pdf.draw_text(str, :at =>[ x, y ], :size => 14) } #... draw_it.call(contact.first_name + " " + contact.last_name) draw_it.call(contact.address.street1) draw_it.call(contact.address.city + ", " + contact.address.state) draw_it.call(contact.address.zip) You could also make this a full blown method but then you'd have to properly track and reset the value of @offset and you'd end up with dragging a mostly useless instance variable ( @offset ) around; a simple closure probably makes more sense for a case like this.
