[site]: stackoverflow
[post_id]: 3345414
[parent_id]: 3345124
[tags]: 
There are probably many arguments you might hear for it but pragmatically there is only one, testability . A ViewModel delivers little unless you build a unit test for it, which in turn implies that you would need to create the ViewModel in such a way that you can unit test it, using techniques such as dependency injection, IoC, blah, blah, etc, etc. The result is that unit tests can cover a larger part of your applications code than you could achieve had you kept the UI code more integrated. I'm not necessarily recommending it, to do it properly takes considerable design effort and forethought. Hence the costs in building such an approach are quite high, however, the savings of the increased quality may well offset those costs.
