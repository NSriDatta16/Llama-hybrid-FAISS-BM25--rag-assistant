[site]: stackoverflow
[post_id]: 2034974
[parent_id]: 2034221
[tags]: 
I'd recommend using Haskell with parsing combinators . To bone up on parsing combinators, don't use the Wikipedia article ; it's very theoretical and will likely confuse you. Instead use the paper by Graham Hutton , which is excellent. Interpreters and compilers are the "killer app" for the ML/Haskell family of languages, and I think you'll be amazed at how quickly you can build something interesting. For getting started I recommend you read Phil Wadler's paper The Essence of Functional Programming , which contains a number of sample interpreters organized using monads. I think the example interpreters are well organized and easy to follow, although the explanation of monads in that paper may make your head hurt. There's also a very nice blog entry that goes through a single example in much more detail; it describes a Lisp interpreter written in Haskell. That writeup also contains a few comparisons between Haskell and Java, which may give you a feel for why many compiler writers prefer a functional language over an OO language for writing compilers and interpreters. Have fun!!!!
