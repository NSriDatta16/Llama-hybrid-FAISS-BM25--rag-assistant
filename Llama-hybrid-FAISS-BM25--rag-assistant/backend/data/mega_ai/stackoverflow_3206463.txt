[site]: stackoverflow
[post_id]: 3206463
[parent_id]: 3114656
[tags]: 
I've updated superforms.py to work w/1.2, and attached it to the ticket you linked to: http://code.djangoproject.com/attachment/ticket/3706/superform.2.py There's a project I'm working on that could benefit from this, so I figured I'd spend the time and help you out as well. Keep in mind that I just got this to work w/1.2, and didn't really try to clean up the internals. Now that I have test cases proving the API, I can go back and clean that up later. If you're using it with ModelForms and you'd like the save() functionality you'll have to override the method on your SuperForm class. I currently have it locally in my "common" repository w/~90% code coverage that covers multiple SubForms, mixed SubForms & declared forms, and ModelForms. I've included the test cases below (beware it uses my TestCaseBase class, but this should give you the gist of the API). Let me know if you have questions, or any areas I missed. from django_common.forms.superform import SuperForm, SubForm from django_common.test import TestCaseBase from django import forms class WhenSuperFormsIsUsedWithOnlySubForms(TestCaseBase): def get_superform_with_forms(self, post_data=None): class AddressForm(forms.Form): street = forms.CharField(max_length=255) city = forms.CharField(max_length=255) class BusinessLocationForm(forms.Form): phone_num = forms.CharField(max_length=255) class TestSuperForm(SuperForm): address = SubForm(AddressForm) business_location = SubForm(BusinessLocationForm) return TestSuperForm(data=post_data) def should_not_be_valid_with_no_data(self): tsf = self.get_superform_with_forms() self.assert_false(tsf.is_valid()) def should_have_two_sub_forms(self): tsf = self.get_superform_with_forms() self.assert_equal(len(tsf.base_subforms), 2) self.assert_equal(len(tsf.forms), 2) def should_display_as_ul(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.as_ul(), ' Phone num: \n Street: \n City: ') def should_display_as_table(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.as_table(), ' Phone num: \n Street: \n City: ') def should_display_as_p(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.as_p(), ' Phone num: \n Street: \n City: ') def should_display_as_table_with_unicode(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.__unicode__(), tsf.as_table()) def should_be_valid_if_good_data(self): data = { 'business_location-phone_num' : '8055551234', 'address-street' : '1234 Street Dr.', 'address-city' : 'Santa Barbara', } tsf = self.get_superform_with_forms(data) self.assert_true(tsf.is_valid()) self.assert_equal(tsf.cleaned_data['business_location']['phone_num'], '8055551234') self.assert_equal(tsf.cleaned_data['address']['street'], '1234 Street Dr.') self.assert_equal(tsf.cleaned_data['address']['city'], 'Santa Barbara') def should_be_invalid_if_missing_data(self): data = { 'business_location-phone_num' : '8055551234', 'address-street' : '1234 Street Dr.', } tsf = self.get_superform_with_forms(data) self.assert_false(tsf.is_valid()) self.assert_false(tsf.errors['business_location']) self.assert_true(tsf.errors['address']) self.assert_equal(tsf.errors['address']['city'], ['This field is required.']) def should_be_invalid_if_invalid_data(self): data = { 'business_location-phone_num' : '8055551234', 'address-street' : '1234 Street Dr.', 'address-city' : '', } tsf = self.get_superform_with_forms(data) self.assert_false(tsf.is_valid()) class WhenSuperformsIsUsedWithSubFormsAndDeclaredFields(TestCaseBase): """Some basic sanity checks that working with fields combined with SubForms works.""" def get_superform_with_forms(self, post_data=None): class AddressForm(forms.Form): street = forms.CharField(max_length=255) class TestSuperForm(SuperForm): name = forms.CharField(max_length=255) address = SubForm(AddressForm) return TestSuperForm(data=post_data) def should_not_be_valid_with_no_data(self): tsf = self.get_superform_with_forms() self.assert_false(tsf.is_valid()) def should_have_two_forms_and_a_single_subform(self): tsf = self.get_superform_with_forms() self.assert_equal(len(tsf.base_subforms), 1) self.assert_equal(len(tsf.forms), 2) def should_print_as_table(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.as_table(), ' Name: \n Street: ') def should_validate_when_fields_exist(self): data = { 'name': 'Sam', 'address-street': 'Some Street', } tsf = self.get_superform_with_forms(data) self.assert_true(tsf.is_valid()) self.assert_equal(tsf.cleaned_data['name'], 'Sam') self.assert_equal(tsf.cleaned_data['address']['street'], 'Some Street') def should_not_validate_with_invalid_data(self): data = { 'name': '', 'address-street': 'Some Street', } tsf = self.get_superform_with_forms(data) self.assert_false(tsf.is_valid()) self.assert_equal(tsf.errors['name'], ['This field is required.']) class WhenSuperformsIsUsedWithModelForms(TestCaseBase): def get_superform_with_forms(self, post_data=None): from django.db import models class Address(models.Model): city = models.CharField(max_length=255) class AddressForm(forms.ModelForm): class Meta: model = Address class TestSuperForm(SuperForm): address = SubForm(AddressForm) return TestSuperForm(data=post_data) def should_not_be_valid_with_no_data(self): tsf = self.get_superform_with_forms() self.assert_false(tsf.is_valid()) def should_have_two_forms_and_a_single_subform(self): tsf = self.get_superform_with_forms() self.assert_equal(len(tsf.base_subforms), 1) self.assert_equal(len(tsf.forms), 1) def should_print_as_table(self): tsf = self.get_superform_with_forms() self.assert_equal(tsf.as_table(), ' City: ') def should_validate_when_fields_exist(self): data = { 'address-city': 'Some City', } tsf = self.get_superform_with_forms(data) self.assert_true(tsf.is_valid()) self.assert_equal(tsf.cleaned_data['address']['city'], 'Some City') def should_not_validate_with_invalid_data(self): data = { 'address-city': '', } tsf = self.get_superform_with_forms(data) self.assert_false(tsf.is_valid()) self.assert_equal(tsf.errors['address']['city'], ['This field is required.']) Enjoy!
