[site]: stackoverflow
[post_id]: 5332061
[parent_id]: 
[tags]: 
How to eager load child entities using repository pattern

I have an entity named Tour which can have many Agents . I am able to add agents, but I cannot remove them. // _repo is injected.... var tour = _repo.GetById(tourId); tour.AddAgent(new Agent(tour.TourId)); When I attempt to call the Tour.RemoveAgent() method nothing is actually removed. I set a breakpoint inside the Tour.RemoveAgent() method I see that the _agents property has a count of 0 . tour.RemoveAgent(agentId); // This doesn't work because _agents is empty Do I have to do something special for EF to populate the _agents property when I retrieve the Tour from my repository? UPDATE: PROBLEM SOLVED (thanks to Paul's answer) I decided to just create a Repository unique to each aggregate, that way it is easy to define exactly what needs to be included using the Include() function. This is an example where I inherit from the GenericRepository class (which is also included at the bottom of this question). public class TourRepository : GenericRepository { public TourRepository(IDatabaseFactory databaseFactory) : base (databaseFactory) { } public override Tour GetById(Guid id) { return dataContext.Tours .Include(x => x.Agents) .Single(x => x.TourId == id); } } Tour Class public partial class Tour { public Guid TourId { get; private set; } protected virtual List _agents { get; set; } public Tour() { TourId = Guid.NewGuid(); _agents = new List (); } public void AddAgent(Agent agent) { _agents.Add(agent); } public void RemoveAgent(Guid agentId) { _agents.RemoveAll(a => a.AgentId == agentId); } } Agent Class public partial class Agent { public Guid AgentId { get; private set; } public Guid TourId { get; private set; } public Tour Tour { get; private set; } public Agent(Guid tourId) { TourId = tourId; AgentId = Guid.NewGuid(); } } OnModelCreating protected override void OnModelCreating(ModelBuilder modelBuilder) { // AGENTS ============================ modelBuilder.Entity () .HasKey(x => x.AgentId) .Property(p => p.AgentId); modelBuilder.Entity () .HasRequired(p => p.Tour) .WithMany(t => t.Agents); // TOURS ============================= modelBuilder.Entity () .HasKey(x => x.TourId) .Property(x => x.TourId); } Repository Class public class GenericRepository : IRepository where T : class { private MyContext dataContext; private readonly IDbSet dbset; public GenericRepository(IDatabaseFactory databaseFactory) { DatabaseFactory = databaseFactory; dbset = DataContext.Set (); } protected IDatabaseFactory DatabaseFactory { get; private set; } protected MyContext DataContext { get { return dataContext ?? (dataContext = DatabaseFactory.Get()); } } // ... stuff removed for brevity ... public T GetById(Guid id) { return dbset.Find(id); } }
