[site]: stackoverflow
[post_id]: 3112276
[parent_id]: 1479452
[tags]: 
Sorry to drag up an old thread, but I use private events with impunity in one of my projects, and personally, I find it's a good way of solving a design issue: Here's the abbreviated code: public class MyClass { private event EventHandler _myEvent; public ExternalObject { get; set; } public event EventHandler MyEvent { add { if (_myEvent.GetInvocationList().Length == 0 && value != null) ExternalObject.ExternalEvent += HandleEvent; _myEvent+= value; } remove { _myEvent-= value; if (_myEvent.GetInvocationList().Length == 0) ExternalObject.ExternalEvent -= HandleEvent; } } private void HandleEvent(object sender, EventArgs e) { _myEvent.Raise(this, EventArgs.Empty); // raises the event. } } Basically, MyEvent is only ever raised in the event handler of ExternalObject.ExternalEvent , so if there's no handlers for MyEvent then I don't need to attach a handler to the external event, speeding up the code slightly by saving a stack frame.
