[site]: stackoverflow
[post_id]: 1015953
[parent_id]: 
[tags]: 
Counting non-null columns in a rather strange way

I have a table which has 32 columns in an Oracle table. Two of these columns are identity columns the rest are values I would like to get the average of all the value columns, which is complicated by the null (identity) columns. Below is the pseudocode for what I am trying to achieve: SELECT ((nvl(val0, 0) + nvl(val1, 0) + ... nvl(valn, 0)) / nonZero_Column_Count_In_This_Row) Such that: nonZero_Column_Count_In_This_Row = (ifNullThenZeroElse1(val0) + ifNullThenZeroElse1(val1) ... ifNullThenZeroElse(valn)) The difficulty here is of course in getting 1 for any non-null column. It seems I need a function similar to NVL, but with an else clause. Something that will return 0 if the value is null, but 1 if not, rather than the value itself. How should I go about about getting the value for the denominator? PS: I feel I must explain some motivation behind this design. Ideally this table would have been organized as the identity columns and one value per row with some identifier for the row itself. This would have made it more normalized and the solution to this problem would have been pretty simple. The reasons for it not to be done like this are throughput, and saving space. This is a huge DB where we insert 10 million values per minute into. Making each of these values one row would mean 10M rows per minute, which is definitely not attainable. Packing 30 of them into a single row reduces the number of rows inserted to something we can do with a single DB, and the overhead data amount (the identity data) much less.
