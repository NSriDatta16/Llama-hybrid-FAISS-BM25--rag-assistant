[site]: stackoverflow
[post_id]: 4745449
[parent_id]: 4087766
[tags]: 
Not all that interested in the bounty, but I'll take it if it's still on the table. This is VERY similar to some code I'm using at $DAYJOB, and so this isn't theory, it's what I use in production code, but modified to protect the guilty. I haven't tried compiling the modified code, so be warned that I may have made some errors in changing names and such, but the principles involved here have all been tested and work. First, you need a Value Holder Qualifier. Use @Nonbinding to keep WELD from matching ONLY to qualifiers with identical values, since we want all values of this particular qualifier to match a single injection point. By keeping the qualifier and value in the same annotation, you can't just "forget" one of them by accident. (KISS principle) @Qualifier @Retention(RUNTIME) @Target({METHOD, FIELD, PARAMETER, TYPE}) public @interface ConfigValue { // Excludes this value from being considered for injection point matching @Nonbinding // Avoid specifying a default value, since it can encourage programmer error. // We WANT a value every time. String value(); } Next, you need a producer method which knows how to get the Map. You should probably have a Named bean which holds the producer method, so you can either explicitly initialize the value by using getters/setters, or else have the bean initialize it for you. We must specify a blank value for the qualifier on the producer method to avoid compile time errors, but it's never used in practice. @Named public class ConfigProducer { //@Inject // Initialize this parameter somehow Map configurationMap; @PostConstructor public void doInit() { // TODO: Get the configuration map here if it needs explicit initialization } // In general, I would discourage using this method, since it can be difficult to control exactly the order in which beans initialize at runtime. public void setConfigurationMap(Map configurationMap) { this.configurationMap = configurationMap; } @Produces @ConfigValue("") @Dependent public String configValueProducer(InjectionPoint ip) { // We know this annotation WILL be present as WELD won't call us otherwise, so no null checking is required. ConfigValue configValue = ip.getAnnotated().getAnnotation(ConfigValue.class); // This could potentially return a null, so the function is annotated @Dependent to avoid a WELD error. return configurationMap.get(configValue.value()); } } Usage is simple: @Inject @ConfigValue("some.map.key.here") String someConfigValue;
