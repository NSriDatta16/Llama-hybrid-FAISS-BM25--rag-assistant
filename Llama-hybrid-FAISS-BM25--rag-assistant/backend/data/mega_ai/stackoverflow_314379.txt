[site]: stackoverflow
[post_id]: 314379
[parent_id]: 298962
[tags]: 
For most projects, we use LINQ to SQL entities as our business objects. The LINQ to SQL designer allows you to control the accessibility of the classes and properties that it generates, so you can restrict access to anything that would allow the consumer to violate the business rules and provide suitable public alternatives (that respect the business rules) in partial classes. There's even an article on implementing your business logic this way on the MSDN. This saves you from writing a lot of tedious boilerplate code and you can even make your entities serialisable if you want to return them from a web service. Whether or not you create a separate layer for the business logic really depends on the size of your project (with larger projects typically having greater variation between the business logic and data access layers). I believe LINQ to Entities attempts to provide a one-stop solution to this conundrum by maintaining two separate models (a conceptual schema for your business logic and a storage schema for your data access).
