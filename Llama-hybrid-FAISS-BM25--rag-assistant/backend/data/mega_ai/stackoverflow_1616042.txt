[site]: stackoverflow
[post_id]: 1616042
[parent_id]: 1613921
[tags]: 
Simon's answer might be better overall in the end, I'm just telling you how to do it without changing what you've got. From the docs : from_item can be one of: ... function_name ( [ argument [, ...] ] ) [ AS ] alias [ ( column_alias [, ...] | column_definition [, ...] ) ] function_name ( [ argument [, ...] ] ) AS ( column_definition [, ...] ) In other words, later it says: If the function has been defined as returning the record data type, then an alias or the key word AS must be present, followed by a column definition list in the form ( column_name data_type [, ... ] ). The column definition list must match the actual number and types of columns returned by the function. I think the alias thing is only an option if you've predefined a type somewhere (like if you're mimicing the output of a predefined table, or have actually used CREATE TYPE...don't quote me on that, though.) So, I think you would need something like: SELECT * FROM reports.get_agent_activity_breakdown('percentage', NULL, NULL) AS (agent_id integer, portal_user_id integer, total something, ...) The problem for you lies in the ... . You'll need to know before you execute the query the names and types of all the columns--so you'll end up selecting on public.activity twice.
