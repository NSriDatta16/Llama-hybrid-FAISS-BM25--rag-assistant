[site]: stackoverflow
[post_id]: 1296164
[parent_id]: 1239858
[tags]: 
I've implemented something akin to this by using a SQLite database table via the System.Data.Sqlite ( http://sqlite.phxsoftware.com/ ) wrapper. You can store it on disk or as an in-memory database. You can choose whether or not to have unique keys and let the database engine handle the indexing for you. You can even have multiple values per key. As you write to the table, check to see if you're at the 100-record limit, and if so then delete before inserting. SQLite supports an "insert or replace" command if you want to preserve unique keys. Perhaps this isn't as elegant as a custom IDictionary derivation, but it works, it's flexible, and it's readily shared across threads.
