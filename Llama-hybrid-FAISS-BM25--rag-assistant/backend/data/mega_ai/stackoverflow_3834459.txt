[site]: stackoverflow
[post_id]: 3834459
[parent_id]: 3766065
[tags]: 
Update: Reading my initial analysis once again increases my impression that some of the required components are missing (e.g. a dedicated ProjectFactory ) and/or wired up incorrectly - from the MSDN documentation of the ProvideProjectFactoryAttribute Class : ProvideProjectFactoryAttribute declares that a package provides a project factory. And further: If a VSPackage declares that it provides a project factory, it should create the factory and offer it to Visual Studio in the Initialize method of the Package-derived class. You package is declaring to provide PythonProjectFactory , but (likely) doesn't offer it to VS, rather it is offered by the IronPython package. In turn you are providing arguments within the ProvideProjectFactory attribute list which PythonProjectFactory won't know about when asked for by VS. Consequently you should at least provide a dedicated ProjectFactory yourself as per the walkthrough, wire up the classes accordingly and see how this turns out regarding the issues outlined below. Initial analysis: There appear to be several issues here at first sight - have you followed any tutorial on how to do this? In case, please note that some of those easily discoverable via search engines are outdated still. Either way I'd try working through and/or comparing your result with Walkthrough: Part 1 - Creating a Basic Project System from the MSDN documentation for VS 2010; please note that even this one is claimed to be outdated a bit according to the Community Content section on the bottom of the page. Here is what I'd look into myself given the code you present, comparing with the walkthrough on the fly for more insights: You realized already that the duplicate fragment starting with the GUID above PythonProjectFactory doesn't make sense - this is essentially trying to register two packages at once, which, even if allowed at all syntactically (which I doubt), can't possibly work like so due to both being registered with the same GUID [cross checking with the sample file in section Examining the Template Registration confirms this suspicion, as expected there is only one such fragment]. Please note that the GUID in question is the one identifying PythonProjectFactory (as per the respective source code), see below for more on this. [Guid(PythonConstants.ProjectFactoryGuid)] public class PythonProjectFactory : ProjectFactory { Given .pkgdef is a generated file the next question is where this duplication/violation stems from. When two generated artifacts end up with the same GUID the respective definition in the sources is most likely messed up somehow, usually due to copy&paste duplication. Consequently you should verify whether {5cd7435c-7461-459f-80bc-c0c79e9d462f} is defined and referenced as intended, though here might be one or two other causes as well for this, see below. A Package class needs to be identified by a GUID and the VS wizard generates some already in Guids.cs and references it accordingly on the class definition, however, the following is missing in your fragment [cross checking with the sample fragment in section To register the project template confirms this omission as well]: [Guid(GuidList.guidMyPackagePkgString)] public sealed class MyPackage : Package Likewise it appears incorrect to derive MyPackage from PythonProjectPackage but reference PythonProjectFactory still rather than providing MyFactory as well (including a dedicated GUID), because the latter tells Visual Studio the location of your project template folder [see section Creating a Skeletal Project Factory ]: While it might well be possible to simply reuse all functionality from the base class PythonProjectFactory , inheriting is likely required simply because the factory must have a dedicated GUID too (as outlined in the walkthrough) in order to properly wire up the attribute specified data. Likely unrelated, but still suspicious is that your two code blocks don't relate , as the Package class definition specifies Django Project Files (*.myproj);*.myproj , yet the result shows My Project Files (*.myproj);*.myproj . Have you by chance mixed this from different builds or is this really a result of a clean one? Good luck!
