[site]: stackoverflow
[post_id]: 823155
[parent_id]: 214500
[tags]: 
Neither is better: they serve different needs. Query syntax comes into its own when you want to leverage multiple range variables . This happens in three situations: When using the let keyword When you have multiple generators ( from clauses) When doing joins Here's an example (from the LINQPad samples): string[] fullNames = { "Anne Williams", "John Fred Smith", "Sue Green" }; var query = from fullName in fullNames from name in fullName.Split() orderby fullName, name select name + " came from " + fullName; Now compare this to the same thing in method syntax: var query = fullNames .SelectMany (fName => fName.Split().Select (name => new { name, fName } )) .OrderBy (x => x.fName) .ThenBy (x => x.name) .Select (x => x.name + " came from " + x.fName); Method syntax, on the other hand, exposes the full gamut of query operators and is more concise with simple queries. You can get the best of both worlds by mixing query and method syntax. This is often done in LINQ to SQL queries: var query = from c in db.Customers let totalSpend = c.Purchases.Sum (p => p.Price) // Method syntax here where totalSpend > 1000 from p in c.Purchases select new { p.Description, totalSpend, c.Address.State };
