[site]: stackoverflow
[post_id]: 1584706
[parent_id]: 1584669
[tags]: 
Linq-to-SQL will allow you to drag'n'drop your database tables into your project in Visual Studio, and create exactly the kind of strongly-typed model you're looking for. It has limitations - it doesn't do many-to-many associations (or rather, it does, but your association table will end up as a rather odd but necessary part of your model), and the visual designer isn't particularly friendly when it comes to reflecting changes to the underlying database. That said, it's lightweight, it's simple, it creates partial classes so you can add your own logic and methods without breaking the autogenerated model, and it works. NHibernate's greatest strength is that it doesn't require a 1:1 correspondence between your database schema and your domain model - it'll map one class to many tables, multiple columns to separate entities, and so on. This is extremely useful, but it obviously comes at a cost in terms of complexity, and it sounds like you can live without that extra complexity for now.
