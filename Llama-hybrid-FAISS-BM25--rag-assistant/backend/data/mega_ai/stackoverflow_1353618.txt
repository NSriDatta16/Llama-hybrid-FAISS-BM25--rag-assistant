[site]: stackoverflow
[post_id]: 1353618
[parent_id]: 1353513
[tags]: 
Judging by your question, and the comments you've left, I'd say your problem is not possible to solve. Let me explain. You say that you need a unique hash from your combination, so let's make that rule #1: 1: Need a unique number to represent a combination of an arbitrary number of digits/numbers Ok, then in a comment you've said that since you're using quite a few numbers, storing them as a string or whatnot as a key to the hashtable is not feasible, due to memory constraints. So let's rewrite that into another rule: 2: Cannot use the actual data that were used to produce the hash as they are no longer in memory Basically, you're trying to take a large number, and store that into a much smaller number range, and still have uniqueness. Sorry, but you can't do that. Typical hashing algorithms produce relatively unique hash values, so unless you're willing to accept collisions, in the sense that a new combination might be flagged as "already seen" even though it hasn't, then you're out of luck. If you were to try a bit-field, where each combination has a bit, which is 0 if it hasn't been seen, you still need large amounts of memory. For the permutation in n=20 that you left in a comment, you have 20! (2,432,902,008,176,640,000) combinations, which if you tried to simply store each combination as a 1-bit in a bit-field, would require 276,589TB of storage. You're going to have to limit your scope of what you're trying to do.
