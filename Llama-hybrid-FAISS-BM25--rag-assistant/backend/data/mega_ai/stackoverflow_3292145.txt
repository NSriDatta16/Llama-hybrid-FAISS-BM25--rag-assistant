[site]: stackoverflow
[post_id]: 3292145
[parent_id]: 
[tags]: 
C++ Template Specialization Compilation

I'm going to outline my problem in detail to explain what I'm trying to achieve, the question is in the last paragraph if you wish to ignore the details of my problem. I have a problem with a class design in which I wish to pass a value of any type into push() and pop() functions which will convert the value passed into a string representation that will be appended to a string inside the class, effectively creating a stream of data. The reverse will occur for pop() , taking the stream and converting several bytes at the front of the stream back into a specified type. Making push() and pop() templates tied with stringstream is an obvious solution. However, I wish to use this functionality inside a DLL in which I can change the way the string is stored (encryption or compression, for example) without recompilation of clients. A template of type T would need to be recompiled if the algorithm changes. My next idea was to just use functions such as pushByte() , pushInt() , popByte() , popInt() etc. This would allow me to change the implementation without recompilation of clients, since they rely only on a static interface. This would be fine. However, it isn't so flexible. If a value was changed from a byte to a short, for example, all instances of pushByte() corresponding to that value would need to be changed to pushShort() , similarly for popByte() to popShort() . Overloading pop() and push() to combat this would cause conflictions in types (causing explicit casting, which would end up causing the same problem anyway). With the above ideas, I could create a working class. However, I wondered how specialized templates are compiled. If I created push () and push () , it would be a type specific overload, and the change from byte to short would automatically switch the template used, which would be ideal. Now, my question is, if I used specialized templates only to simulate this kind of overloading (without a template of type T ), would all specializations compile into my DLL allowing me to dispatch a new implementation without client recompilation? Or are specialized templates selected or dropped in the same way as a template of type T at client compilation time?
