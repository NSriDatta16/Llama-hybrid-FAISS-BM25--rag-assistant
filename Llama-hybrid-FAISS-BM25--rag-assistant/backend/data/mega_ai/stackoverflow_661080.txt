[site]: stackoverflow
[post_id]: 661080
[parent_id]: 660349
[tags]: 
A simple yet elegant solution - you assign the numbers 1 through 9 to your board in the following way: 8 1 6 3 5 7 4 9 2 This square has the unique characteristic that every row, column, and diagonal sums to 15, and there is no way to get a sum of 15 from three cells unless they share a row, column or diagonal. For each player you keep two boolean arrays: boolean squarePairs[PAIRSMAXSUM+1]; boolean chosenSquares[NUMSQUARES+1]; where PAIRSMAXSUM = 9+8 and NUMSQUARES = 9 You can then easily check a winning move by a call to this function: boolean hasWon(int squareIndex) { return squarePairs[WINNINGSUM - squareIndex]; } where WINNINGSUM is 15. And if that function returns false, you update the boolean arrays by calling this function: void update(int squareIndex) { for (int i = 1; i Simple as that!
