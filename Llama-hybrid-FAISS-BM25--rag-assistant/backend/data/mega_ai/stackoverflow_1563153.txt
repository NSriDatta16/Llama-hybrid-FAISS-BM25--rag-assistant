[site]: stackoverflow
[post_id]: 1563153
[parent_id]: 1562992
[tags]: 
What you describe about "holding the number(s) provided in the va_list" is the way to approach this. The va_list maintains pointers to temporary memory on the stack (so-called "automatic storage" in the C standard). After the function with variable args has returned, this automatic storage is gone and the contents are no longer usable. Because of this, you cannot simply keep a copy of the va_list itself -- the memory it references will contain unpredictable content. In the example you give, you will need to store two integers that are re-used when re-creating that message. Depending on how many different format strings you have to deal with, your approach might vary. For a completely general type of approach, you will need to: Write a " cache_arguments() " function which creates a dynamic-memory buffer of the values found in variable arguments. This cache_arguments() would use the printf() -style format string, along with the va_start , va_arg , va_end macros. You will need to retrieve the types according to the printf() type-specifiers, because sizeof(double) != sizeof(int) . Store the arguments in your memory cache with the same alignment and padding expected by va_arg() on your platform. (Read your varargs.h file.) Get your calls to vsnprintf() working with this cached memory buffer instead of a pointer created by va_start() . The above items are all possible on most platforms, including Linux and Windows. An item you may wish to consider about translation is the word-order concern. What is written in English as: Player Sam has scored 20 points. Could in some (human) languages only be written fluently with a word order analagous to: 20 points have been scored by Player Sam. For this reason, the Win32 FormatMessage() API uses a printf() -like format string, with the functional difference that parameters are numbered, as in: Player %1 has scored %2!d! points. %2!d! points have been scored by player %1. (The string type is assumed for each argument, so %1 is equivalent to %1!s! ) Of course you may not be using the Win32 API, but the functionality of altering the word order of the formatted arguments is what I am attempting to introduce as a concept. You may want to implement this in your software, also.
