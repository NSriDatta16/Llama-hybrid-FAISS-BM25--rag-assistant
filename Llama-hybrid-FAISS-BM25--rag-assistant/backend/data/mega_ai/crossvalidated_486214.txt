[site]: crossvalidated
[post_id]: 486214
[parent_id]: 390337
[tags]: 
In the case of negative values, you can use the PowerTransformer(method='yeo-johnson') method from sklearn. It is capable of handling positive and negative values, also values of zero. The skewness (measure of normality) of the data should decrease substantially. As with any transform, you should use fit and transform on your training data, then use transform only on the test and validation dataset. pt.fit(X_train) ## Fit the PT on training data X_train = pt.transform(X_train) ## Then apply on all data X_test = pt.transform(X_test) X_val = pt.transform(X_val) Example showing skewness of data decreases using PowerTransformer: from sklearn.preprocessing import PowerTransformer ... # find numeric features in your dataset to transform numeric_feats = X.dtypes[X.dtypes != "object"].index # calculate skew of all numeric features skewed_feats = X[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False) # convert to dataframe for easier processing skewness = pd.DataFrame({'Skew' :skewed_feats}) # print performance before transform print("Pre: There are {} skewed numerical features to Box Cox transform".format(skewness.shape[0])) print("Pre", abs(skewness.Skew).mean()) # transform data pt = PowerTransformer(method='yeo-johnson').fit(X) X = pd.DataFrame(pt.transform(X), index=X.index, columns=X.columns) numeric_feats = X.dtypes[X.dtypes != "object"].index skewed_feats = X[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False) skewness = pd.DataFrame({'Skew' :skewed_feats}) # print performance after transform print("Post: There are {} skewed numerical features to Box Cox transform".format(skewness.shape[0])) print("Post", abs(skewness.Skew).mean()) Example results: Pre: There are 17 skewed numerical features to Box Cox transform Pre 3.514581911418132 Post: There are 8 skewed numerical features to Box Cox transform Post 1.977383868458546 This method was also designed to handle heteroscedastic data, which is data that has a non-uniform variance across x/y values. Example: Reference: PowerTransformer from sklearn
