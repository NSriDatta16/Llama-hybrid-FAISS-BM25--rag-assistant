[site]: stackoverflow
[post_id]: 2472944
[parent_id]: 
[tags]: 
Good C++ array class for dealing with large arrays of data in a fast and memory efficient way?

Following on from a previous question relating to heap usage restrictions , I'm looking for a good standard C++ class for dealing with big arrays of data in a way that is both memory efficient and speed efficient. I had been allocating the array using a single malloc/HealAlloc but after multiple trys using various calls, keep falling foul of heap fragmentation. So the conclusion I've come to, other than porting to 64 bit, is to use a mechanism that allows me to have a large array spanning multiple smaller memory fragments. I don't want an alloc per element as that is very memory inefficient, so the plan is to write a class that overrides the [] operator and select an appropriate element based on the index. Is there already a decent class out there to do this, or am I better off rolling my own? From my understanding, and some googling , a 32 bit Windows process should theoretically be able address up to 2GB. Now assuming I've 2GB installed, and various other processes and services are hogging about 400MB, how much usable memory do you think my program can reasonably expect to get from the heap? I'm currently using various flavours of Visual C++. Edit As per Poita's post, I've tried a std::deque , using the following test on VS2008; #include using namespace std; struct V { double data[11]; }; struct T { long data[8]; }; void dequeTest() { deque VQ; deque TQ; V defV; T defT; VQ.resize(4000000,defV); TQ.resize(8000000,defT); } The total memory for the above data comes out at 608MB, were I to use straight malloc or HeapAlloc, and takes Time to write my own big array class, I reckon. Second Edit: Allocating smaller amounts yielded 1.875GB immediately using the following; #define TenMB 1024*1024*10 void SmallerAllocs() { size_t Total = 0; LPVOID p[200]; for (int i = 0; i Final edit I have decided to accept Poita's post and the various comments following it, not because I'll be using the deque class directly, but more for the array as a deck of cards notion in the comments that followed. This should be straightforward to implement with O(1) random element access, based on a fixed number of elements per block, which is what i need. Thanks to all for the feedback!
