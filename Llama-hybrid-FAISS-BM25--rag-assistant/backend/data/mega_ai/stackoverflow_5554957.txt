[site]: stackoverflow
[post_id]: 5554957
[parent_id]: 5554136
[tags]: 
If this isn't a learning project than I would highly recommend you look at using something that is already built for this: EntLib Validation Block Fluent Validation Anything built on top of the System.ComponentModel.DataAnnotations If however you are doing this as a simple learning project , than you have 2 basic approaches you could take: Reflection based Delegate based Of the two, delegate based is going to be much simpler to implement, but less flexible. I have implemented this pattern several times and the concept is simple. Here is about the most basic concept you can get. public interface IRuleDefinition { String PropertyName { get; } String Message { get; } } public class ValidationRule : IRuleDefinition { public String PropertyName { get; private set; } public String Message { get; private set; } private Func _isValidDelegate; public ValidationRule(Func isValidDelegate, String propertyName, String message) { PropertyName = propertyName; Message = message; _isValidDelegate = isValidDelegate; } public Boolean IsValid(T objToValidate) { return _isValidDelegate(objToValidate); } } public class Validator { private List > _validationRules = new List >(); public void AddRule(Func isValidDelegate, String propertyName = null, String message = null) { _validationRules.Add(new ValidationRule (isValidDelegate, propertyName, message)); } public Boolean IsValid(T objToValidate) { return _validationRules.Any(vr => vr.IsValid(objToValidate)); } public IEnumerable GetViolations(T objToValidate) { return _validationRules .Where(vr => !vr.IsValid(objToValidate)) .Cast (); } } You can use it in code like this: var myObj = new MyObject{ Name = "Josh", Age = 29 }; var myObjValidator = new Validator (); myObjValidator.AddRule( obj => !String.IsNullOrWhitespace(obj.Name), "Name", "Name is required!"); myObjValidator.AddRule( obj => obj.Age obj.Name == "Logan" && obj.Age Now, this was all from memory, so there may be some are probably coding/compiler errors in all this, but hopefully you get the general idea. Again, if this isn't a learning project, then don't reinvent the wheel unless you are planning to learn more about wheels :)
