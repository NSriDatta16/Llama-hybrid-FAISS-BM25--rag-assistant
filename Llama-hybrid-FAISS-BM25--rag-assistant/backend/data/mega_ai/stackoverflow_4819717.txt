[site]: stackoverflow
[post_id]: 4819717
[parent_id]: 4818392
[tags]: 
As Joe Kington suggested, the dateutil module is useful for this. In particular, it can tell you the difference between two dates in terms of years, months and days. (Doing the calculation yourself would involve taking account of leap years, etc. Much better to use a well-tested module than to reinvent this wheel.) This problem is amenable to classes. Let's make a Person class to keep track of a person's name, gender, and publication date: class Person(object): def __init__(self,lastname,firstname,gender=None,year=None,month=None,day=None): self.lastname=lastname self.firstname=firstname self.ymd=VagueDate(year,month,day) self.gender=gender The publication dates have potentially missing data, so let's make a special class to handle missing date data: class VagueDate(object): def __init__(self,year=None,month=None,day=None): self.year=year self.month=month self.day=day def __sub__(self,other): d1=self.asdate() d2=other.asdate() rd=relativedelta.relativedelta(d1,d2) years=rd.years months=rd.months if self.month and other.month else None days=rd.days if self.day and other.day else None return VagueDateDelta(years,months,days) The datetime module defines datetime.datetime objects, and uses datetime.timedelta objects to represent differences between two datetime.datetime objects. Analogously, let's define a VagueDateDelta to represent the difference between two VagueDate s: class VagueDateDelta(object): def __init__(self,years=None,months=None,days=None): self.years=years self.months=months self.days=days def __str__(self): if self.days is not None and self.months is not None: return '{s.years} years, {s.months} months, {s.days} days'.format(s=self) elif self.months is not None: return '{s.years} years, {s.months} months'.format(s=self) else: return '{s.years} years'.format(s=self) Now that we've built ourselves some handy tools, it's not hard to solve the problem. The first step is to parse the list of strings and convert them into Person objects: def parse_person(text): data=map(str.strip,text.split(',')) lastname=data[0] firstname=data[1] gender=data[-1] ymd=map(int,data[2:-1]) return Person(lastname,firstname,gender,*ymd) johns=map(parse_person,L1) peeps=map(parse_person,L2) Next we reorganize peeps into a dict of family members: family=collections.defaultdict(list) for person in peeps: family[person.lastname].append(person) Finally, you just loop through the johns and and the family members of each john , compare publication dates, and report the results. The full script might look something like this: import datetime as dt import dateutil.relativedelta as relativedelta import pprint import collections class VagueDateDelta(object): def __init__(self,years=None,months=None,days=None): self.years=years self.months=months self.days=days def __str__(self): if self.days is not None and self.months is not None: return '{s.years} years, {s.months} months, {s.days} days'.format(s=self) elif self.months is not None: return '{s.years} years, {s.months} months'.format(s=self) else: return '{s.years} years'.format(s=self) class VagueDate(object): def __init__(self,year=None,month=None,day=None): self.year=year self.month=month self.day=day def __sub__(self,other): d1=self.asdate() d2=other.asdate() rd=relativedelta.relativedelta(d1,d2) years=rd.years months=rd.months if self.month and other.month else None days=rd.days if self.day and other.day else None return VagueDateDelta(years,months,days) def asdate(self): # You've got to make some kind of arbitrary decision when comparing # vague dates. Here I make the arbitrary decision that missing info # will be treated like 1s for the purpose of calculating differences. return dt.date(self.year,self.month or 1,self.day or 1) def __str__(self): if self.day is not None and self.month is not None: return '{s.year}, {s.month}, {s.day}'.format(s=self) elif self.month is not None: return '{s.year}, {s.month}'.format(s=self) else: return '{s.year}'.format(s=self) class Person(object): def __init__(self,lastname,firstname,gender=None,year=None,month=None,day=None): self.lastname=lastname self.firstname=firstname self.ymd=VagueDate(year,month,day) self.gender=gender def age_diff(self,other): return self.ymd-other.ymd def __str__(self): fmt='{s.lastname}, {s.firstname} ({s.gender}) ({d.year},{d.month},{d.day})' return fmt.format(s=self,d=self.ymd) __repr__=__str__ def __lt__(self,other): d1=self.ymd.asdate() d2=other.ymd.asdate() return d1 yields [Smith, John (Male) (2008,12,10), Bates, John (Male) (2006,1,None), Johnson, John (Male) (2009,1,28), James, John (Male) (2008,3,None)] [Smith, Joy (Female) (2008,12,10), Smith, Kevin (Male) (2008,12,10), Smith, Matt (Male) (2008,12,10), Smith, Carol (Female) (2000,12,11), Smith, Sue (Female) (2000,12,11), Johnson, Alex (Male) (2008,3,None), Johnson, Emma (Female) (2008,3,None), James, Peter (Male) (2008,3,None), James, Chelsea (Female) (2008,3,None)] Smith, John Published in 2008, 12, 10, Male Smith, Joy Published 0 years, 0 months, 0 days after John, Female Smith, Kevin Published 0 years, 0 months, 0 days after John, Male Smith, Matt Published 0 years, 0 months, 0 days after John, Male Smith, Carol Published 7 years, 11 months, 29 days before John, Female Smith, Sue Published 7 years, 11 months, 29 days before John, Female Bates, John Published in 2006, 1, Male Johnson, John Published in 2009, 1, 28, Male Johnson, Alex Published 0 years, 10 months before John, Male Johnson, Emma Published 0 years, 10 months before John, Female James, John Published in 2008, 3, Male James, Peter Published 0 years, 0 months after John, Male James, Chelsea Published 0 years, 0 months after John, Female
