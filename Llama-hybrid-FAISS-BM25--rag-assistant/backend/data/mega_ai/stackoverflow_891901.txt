[site]: stackoverflow
[post_id]: 891901
[parent_id]: 885058
[tags]: 
Well, yes and no. If I understand correctly, you have written tests, and wrote production code that makes the tests pass - i.e. the simplest thing that works. Now you are in the refactoring phase. You want to extract code from one class and put it in a class of its own, probably to keep up with the Single Responsibility Principle (or SRP). You may make the refactoring without adding tests, since your tests are there precisely to allow you to refactor without fear. Remember - refactor means changing the code, without modifying the functionality. However, it is quite likely that refactoring the code will break your tests. This is most likely caused by fragile tests that test behavior, rather than state - i.e. you mocked the the methods you ported out. On the other hand, if your tests are primarily state-driven (i.e. you assert results, and ignore implementation), then your new service component (the block of code you extracted to a new class) will not be tested. If you use some form of code coverage testing tool, you'll find out. If that is the case, you may wish to test that it works. Might , because 100% Code Coverage is neither desirable nor feasible. If possible, I'd try to add the tests for that service. In the end, it may very well boil down to a judgment call.
