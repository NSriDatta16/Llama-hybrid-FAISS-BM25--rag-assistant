[site]: stackoverflow
[post_id]: 308002
[parent_id]: 307955
[tags]: 
Use the opportunity to show them you know how to treat a client. Start a conversation on what is important, how do they want it delivered, what is the timeline, would they want a documentation and so on. If they don't want to give you any particular problem to solve, try to write a program related to the domain of their main product. Or at least stick with some of the technologies they use. Be sure that whatever you deliver to them is complete enough and contains source code and deployment package. Make sure you have good enough documentation, so that a technical person is able to build your program successfully with at most two three simple steps. Make the deployment package simple enough, so that a non-technical person could quickly run your program. It doesn't have to be MSI, a batch file that copies all the files would suffice, as long as it's a single command. Make sure your code is well organized and commented. Avoid writing obscure code hacks and unnecesasry optimizations. Find a set of good coding guidelines (SO has several threads on that topic) and stick with them. Avoind the Commando Pattern. :-) Use design patterns you feel comfortable with. Use interfaces, inheritance, abstractions and the proper architecture layers where appropriate. On other words, write the code so that a programmer with a lower skill than your would be able to undestand and maintain it. Using external code in your program would be ok, as long as you make sure they are aware of that. Be clear where any code came from and what license it was published under. As a side note, add a license to your code that prohibits republishing or reuse for commercial purposes. All that above sounds a bit too complicated, but that's what professional developers do - they don't just write code, they deliver a product.
