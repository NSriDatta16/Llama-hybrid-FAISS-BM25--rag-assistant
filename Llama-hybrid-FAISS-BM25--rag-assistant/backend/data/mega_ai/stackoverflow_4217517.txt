[site]: stackoverflow
[post_id]: 4217517
[parent_id]: 
[tags]: 
FOP: how to specify image src relative path?

This is my first question here, i hope i'm doing it right. Sorry for my bad English in advance :) I am using JSF 2.0 (Eclipse IDE) and i'm trying to generate some PDF files using Apache FOP 1.0. I was able to make simple PDF files using instructions on Apache Fop site , but i can't insert any image from my application folder. My folder structure is like this: In my application WebContent i have (among else) pdf_transform/xslt/transformFile.xsl, and pdf_transform/xslt/logo.jpg In transformFile.xsl i have but when i clik 'showPDF' button in my servlet, i get PDF file without image (everything else is there), and this messages in console: SEVERE: The Source that was returned from URI resolution didn't contain an InputStream for URI: logo.jpg Nov 18, 2010 5:16:49 PM org.apache.fop.events.LoggingEventListener processEvent SEVERE: Image not found. URI: logo.jpg. (No context info available) I tried to use 'logo.jpg' instead of url('logo.jpg'), putting image on various places inside WebContent folder and using different navigation("./logo.jpg") but it didnt work. It works fine if i set absolute path (for example "d:/fop/images/logo.jpg") but i need resurces whitin my application. While searching, i found that this is related to fopFactory.setURIResolver() and/or userAgent.setBaseURL(). Tried something with that, but didnt succeed. I am new to both JSF and FOP, and this image situation has been bothering me quite a while. Can someone help me with this, or at least direct me to some tutorial on "how to configure FOP for relative path use"? EDIT: I don't want any absolute paths and app should work independently of its location on computer (to be publishable). My search tells me it has something to do with configuring FOP, but i don't know how to do it :) Thanks in advance. P.S. This is method which is called to display PDF: public void printExchangeRateList(ActionEvent event) { BufferedOutputStream output = null; FacesContext facesContext = FacesContext.getCurrentInstance(); ExternalContext externalContext = facesContext.getExternalContext(); HttpServletResponse response = (HttpServletResponse) externalContext.getResponse(); String path = externalContext.getRealPath("/"); try { response.reset(); response.setHeader("Content-Type", "application/pdf"); output = new BufferedOutputStream(response.getOutputStream(), 10240); File xsltfile = new File(path+"/pdf_transform/xslt/transformFile.xsl"); FopFactory fopFactory = FopFactory.newInstance(); FOUserAgent foUserAgent = fopFactory.newFOUserAgent(); try { Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, output); TransformerFactory transformerFactory = TransformerFactory.newInstance(); Transformer transformer = transformerFactory.newTransformer(new StreamSource(xsltfile)); Source src = new DOMSource(makeXML()); // my method Result res = new SAXResult(fop.getDefaultHandler()); transformer.transform(src, res); } finally { if (output != null) output.close(); /*try { out.close(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }*/ } } catch (Exception e) { // TODO Auto-generated catch block } facesContext.responseComplete(); }
