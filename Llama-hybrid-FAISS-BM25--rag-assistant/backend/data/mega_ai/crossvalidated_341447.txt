[site]: crossvalidated
[post_id]: 341447
[parent_id]: 288669
[tags]: 
Surprisingly the algorithm isn't very complicated and the explanation on the pcl website is actually almost all there is to it. There's however some subtleties that don't appear in the above link, so here is a break down for more details. Set k, an integer, representing the number of closest points around point $P_i$ (parameter setMeanK in pcl::StatisticalOutlierRemoval ). Set a standard deviation multiplier $\alpha$ (parameter setStddevMulThresh ) For every point $P_i$ in the 3D point cloud. Find the location of the $k$ nearest neighbors to point $P_i$ (their indexes in the cloud) Compute the average distance $d_i$ from point $P_i$ to its $k$ nearest neighbors. Compute the mean $\mu_d$ of the distances $d_i$ Compute the standard deviation $\sigma_d$ of the distances $d_i$ Compute the threshold $T = \mu_d + \alpha \cdot \sigma_d$ Eliminate points in the cloud for which the average distance to its $k$ neighbours is at a distance $d > T$ The implementation therefore requires two passes over the whole set of points in the cloud: First pass to compute the mean and standard deviation of the distances from each points in the cloud to their $k$ nearest neighbours Second pass to eliminate all the points in the cloud which mean distance (computed in the first pass) is higher than the threshold defined above. $Notes$: 1) While the algorithm will in effect eliminate points which distance to its $k$ nearest neighbors follows any statistical distribution, its parameters $\mu$ and $ \sigma$ are only meaningful for a normal (Gaussian) distribution. 2) the algorithm assumes the capability to obtain the k nearest neighbors of any given point in the point cloud.
