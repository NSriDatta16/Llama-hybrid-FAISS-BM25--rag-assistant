[site]: stackoverflow
[post_id]: 3930125
[parent_id]: 3929793
[tags]: 
Not aware of any packaged solution, but something not very flexible is fairly simple to do assuming you can do two passes over the file: (the following is partially Perlish pseudocode example) Assumption: data may contain spaces and is NOT quoted ala CSV if there's a space - if this is not the case, just use Text::CSV(_XS) . Assumption: no tabs used for formatting. The logic defines a "column separator" to be any consecutive set of vertical rows populated 100% with spaces. If by accident every row has a space which is part of the data at offset M characters, the logic will consider offset M to be a column separator, since it can't know any better. The ONLY way it can know better is if you require column separation to be at least X spaces where X>1 - see the second code fragment for that. Sample code: my $INFER_FROM_N_LINES = 10; # Infer columns from this # of lines # 0 means from entire file my $lines_scanned = 0; my @non_spaces=[]; # First pass - find which character columns in the file have all spaces and which don't my $fh = open(...) or die; while ( ) { last if $INFER_FROM_N_LINES && $lines_scanned++ == $INFER_FROM_N_LINES; chomp; my $line = $_; my @chars = split(//, $line); for (my $i = 0; $i start column $state = "c"; push @starts, $i; } else { # meaning $state eq "c" && !$non_spaces[$i] => end column $state = " "; push @ends, $i-1; } } if ($state eq "c") { # Last char is NOT a space - produce the last column end push @ends, $#non_spaces; } # Now split lines my $fh = open(...) or die; my @rows = (); while ( ) { my @columns = (); push @rows, \@columns; chomp; my $line = $_; for (my $col_num = 0; $col_num Now, if you require column separation to be at least X spaces where X>1 , it's also doable but the parser of column locations needs to be a bit more complex : # Find columns, defined as consecutive "non-spaces" slices separated by at least 3 spaces. my $min_col_separator_is_X_spaces = 3; my @starts, @ends; # Index at which columns start and end my $state = "S"; # inside a separator NEXT_CHAR: for (my $i = 0; $i
