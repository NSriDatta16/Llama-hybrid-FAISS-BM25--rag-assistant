[site]: stackoverflow
[post_id]: 1338667
[parent_id]: 1338590
[tags]: 
That script has really serious issues with style and organization -- for example, if somebody imports it they have to somehow divine the fact that they have to set thescript.foo to an instance of Some_Object before calling some_function ... yeurgh!-) It's unfortunate that you're having to learn Python from a badly written script, but I'm not sure I understand your question. Variable scope in Python is locals (including arguments), nonlocals (i.e., locals of surrounding functions, for nested functions), globals, builtins. Is what you want to stop access to globals? some_function.func_globals is read-only, but you could make a new function with empty globals: import new f=new.function(some_function.func_code, {}) now calling f() will given an exception NameError: global name 'foo' is not defined . You could set this back in the module with the name some_function , or even do it systematically via a decorator, e.g.: def noglobal(f): return new.function(f.func_code, {}) ... @noglobal def some_function(): ... this will guarantee the exception happens whenever some_function is called. I'm not clear on what benefit you expect to derive from that, though. Maybe you can clarify...?
