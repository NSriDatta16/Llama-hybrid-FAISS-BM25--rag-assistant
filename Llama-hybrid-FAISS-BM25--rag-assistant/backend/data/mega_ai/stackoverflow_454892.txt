[site]: stackoverflow
[post_id]: 454892
[parent_id]: 454870
[tags]: 
(I'm specifically interested in solution load times & build times - does fewer solutions mean better performance?) Here is related topic by Patrick Smacchia describing benefits of having small number of assemblies (thereafter small number of projects). He talks exactly about how number of assemblies can affect build time and other factors. I encourage you to read Patrick blog. He has a lot of articles about code componentization. Advices on partitioning code through .NET assemblies Lessons learned from the NUnit code base Hints on how to componentized existing code. From my personal experience it's a pain to have a solution with a few dozens of projects. IMO having more than 10 projects will lead to noticeable maintenance problems and affect your productivity.
