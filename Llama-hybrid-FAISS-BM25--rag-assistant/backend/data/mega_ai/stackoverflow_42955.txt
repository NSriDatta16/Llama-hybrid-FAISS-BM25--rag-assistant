[site]: stackoverflow
[post_id]: 42955
[parent_id]: 42934
[tags]: 
I think the reason is that people are used to statically typed languages that have very limited and inexpressive type systems. These are languages like Java, C++, Pascal, etc. Instead of going in the direction of more expressive type systems and better type inference, (as in Haskell, for example, and even SQL to some extent), some people like to just keep all the "type" information in their head (and in their tests) and do away with static typechecking altogether. What this buys you in the end is unclear. There are many misconceived notions about typechecking, the ones I most commonly come across are these two. Fallacy: Dynamic languages are less verbose. The misconception is that type information equals type annotation. This is totally untrue. We all know that type annotation is annoying. The machine should be able to figure that stuff out. And in fact, it does in modern compilers. Here is a statically typed QuickSort in two lines of Haskell (from haskell.org ): qsort [] = [] qsort (x:xs) = qsort (filter ( = x) xs) And here is a dynamically typed QuickSort in LISP (from swisspig.net ): (defun quicksort (lis) (if (null lis) nil (let* ((x (car lis)) (r (cdr lis)) (fn (lambda (a) ( The Haskell example falsifies the hypothesis statically typed, therefore verbose . The LISP example falsifies the hypothesis verbose, therefore statically typed . There is no implication in either direction between typing and verbosity. You can safely put that out of your mind. Fallacy: Statically typed languages have to be compiled, not interpreted. Again, not true. Many statically typed languages have interpreters. There's the Scala interpreter, The GHCi and Hugs interpreters for Haskell, and of course SQL has been both statically typed and interpreted for longer than I've been alive. You know, maybe the dynamic crowd just wants freedom to not have to think as carefully about what they're doing. The software might not be correct or robust, but maybe it doesn't have to be. Personally, I think that those who would give up type safety to purchase a little temporary liberty, deserve neither liberty nor type safety.
