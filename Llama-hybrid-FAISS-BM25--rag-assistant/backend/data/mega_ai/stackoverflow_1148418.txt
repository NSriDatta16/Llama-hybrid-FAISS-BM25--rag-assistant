[site]: stackoverflow
[post_id]: 1148418
[parent_id]: 1148314
[tags]: 
Perhaps you begin by recognizing explicitly that part of your job is to help develop the junior devs. If you're not the boss, management should sign off on this. Management needs to recognize that your choices are to develop them now or clean up after them later, and you need management's backing for the time this will take. Code reviews and pair programming are fine ideas. They are especially good because they are not "just for junior people"â€“I do both with one of my close colleagues; together we are nearly 100 years old and have more than 70 years of programming experience :-) But there's a larger problem here: the programming methodology that enables you to be most effective (YAGNI + refactor) is not effective for your junior partners. My experience is that it takes people years to learn the benefits of YAGNI, so if you expect them just to learn your way of doing things, you are setting yourself up for disappointment. I would encourage you to identify some methodology that you think is going to be useful with your junior partners. The particular methodology probably doesn't matter (heresy!); I've had success with composite/structured design, object-based design, algebraic specification (!), and extreme programming. But Do pick something that has a name and some literature devoted to it, that your juniors can take pride in learning, and that is a skill they can carry to future projects. In order to show that it is tasty, you may need to eat the dog food yourself. Pick something you can live with and be productive in. Observe your juniors carefully and teach them a decision procedure they can use to identify when they should ask you for guidance. Good luck!
