[site]: stackoverflow
[post_id]: 3604453
[parent_id]: 
[tags]: 
An alternative to hardcoding Html in C#?

I'm finding myself hardcoding html into C#. It's usually on a data-driven pages. The content of the page and url change but the physical page does not change. As it stands now, I have snippets of hardcoded HTML sprinkled throughout the UI. It's usually navigation html, but not always. In most cases there is logic wrapped around the html. An exampled would selecting the current tab. It feels dirty - there must be a more elegant solution. Maybe using the settings file? Database? The database seems a little overkill and add a couple layers of abstraction that does not have value, at least in my application. Update I've provided two sample methods. The application is written on the ASP.NET MVC 2 framework. Example one: /// /// Gets the album sub navigation. /// /// public string GetAlbumSubNavigation() { StringBuilder builder = new StringBuilder(); IDictionary links = new Dictionary { {"all", @" All "}, {"bytags", @" Tags "}, {"bysearching", @" Search "} }; builder.AppendLine(@" "); foreach (KeyValuePair keyValuePair in links) { string youarehere = (string.Equals(PartialViewName, keyValuePair.Key, StringComparison.InvariantCultureIgnoreCase) ? "class=\"youarehere\"" : string.Empty); builder.AppendLine(string.Format(keyValuePair.Value, Authorization.Owner.Username, Album.AlbumId, youarehere)); } builder.AppendLine(@" "); return builder.ToString(); } Example two: /// /// Gets the photo detail links. /// /// The media. /// if set to true [is authenticated]. /// public static string GetPhotoDetailLinks(Media media, bool isAuthenticated) { IUserUrlService userUrlService = GetUserUrlService(); ITagService tagService = DependencyInjection.Resolve (); const string perminateLinkFormat = @" permalink "; string perminateLink = string.Format(perminateLinkFormat, userUrlService.UserUrl(media.Owner.Username, "photos/show/" + media.MediaId), media.Title); string html = @" "; html += (isAuthenticated ? @" edit " : string.Empty); html += @" "; html += "{2}"; html += @" {3} {5} comments ({4}) "; string tags = string.Empty; if (!string.IsNullOrEmpty(media.Tags)) { const string tagFormat = @" tags: {0} "; string renderedTags = tagService.HyperlinkTheTags(media.Tags, media.Owner.Username); tags = string.Format(tagFormat, renderedTags); } string date = GetDate(media); string content = string.Format(html, userUrlService.UserRoot(media.Owner.Username), HttpUtility.HtmlEncode(media.MediaId.ToString()), date, tags, media.CommentCount, perminateLink); return content; }
