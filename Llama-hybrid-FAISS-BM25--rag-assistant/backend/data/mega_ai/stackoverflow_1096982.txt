[site]: stackoverflow
[post_id]: 1096982
[parent_id]: 362488
[tags]: 
You can't design against an unknown (future), and as other people have said, trying to build a flexible design can easily lead to overengineering, so I think that the best pragmatic approach is think in terms of avoiding things that you know will make it harder for you to maintain your code in future. Every time that you make a design decision, just ask yourself whether you are making it harder to change things in future, and if so, what you are going to do to limit the problem. Obvious things that will always cause problems: Scattered configuration information - you need to be able to check and change this stuff easily Untested code - you need tests to make changes with confidence Mingling of storage and output concerns with the core logic - you will switch database instances and output formats, if only for testing Complex architecture - you need to have a clear mental model of the system Arrangements that require manual intervention or updates to keep them running
