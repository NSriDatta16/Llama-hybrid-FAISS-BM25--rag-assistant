[site]: stackoverflow
[post_id]: 803697
[parent_id]: 803673
[tags]: 
EDIT: My answer presumes the singleton you are creating is somewhat complex and has a multi-step creation process. If it's just static data, go with a global like others have suggested. A singleton in C will be very weird . . . I've never seen an example of "object oriented C" that looked particularly elegant. If possible, consider using C++. C++ allows you to pick and choose which features you want to use, and many people just use it as a "better C". Below is a pretty typical pattern for lock-free one-time initialization. The InterlockCompareExchangePtr atomically swaps in the new value if the previous is null. This protects if multiple threads try to create the singleton at the same time, only one will win. The others will delete their newly created object. MyObj* g_singleton; // MyObj is some struct. MyObj* GetMyObj() { MyObj* singleton; if (g_singleton == NULL) { singleton = CreateNewObj(); // Only swap if the existing value is null. If not on Windows, // use whatever compare and swap your platform provides. if (InterlockCompareExchangePtr(&g_singleton, singleton, NULL) != NULL) { DeleteObj(singleton); } } return g_singleton; } DoSomethingWithSingleton(GetMyObj());
