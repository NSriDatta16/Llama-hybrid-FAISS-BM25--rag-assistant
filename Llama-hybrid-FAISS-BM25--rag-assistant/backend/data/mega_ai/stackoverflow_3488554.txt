[site]: stackoverflow
[post_id]: 3488554
[parent_id]: 2212230
[tags]: 
This is the closest answer I found which would apply to any NoSQL database. It's on a 2007 blog post from Adam Wiggins of Heroku.com: The old example of using a database transaction to wrap the transfer of money from one bank account to another is total bull. The correct solution is to store a list of ledger events (transfers between accounts) and show the current balance as a sum of the ledger. If youâ€™re programming in a functional language (or thinking that way), this is obvious. From: http://adam.heroku.com/past/2007/12/17/a_world_without_sql/ (His website is great for ideas on scalability.) I interpreted the above paragraph as: Create a database for member accounts. Create a messaging queue. Nickname it "ledger". Add in background workers to fulfill each request in the queue. More info. on queues/background workers: http://adam.heroku.com/past/2009/4/14/building_a_queuebacked_feed_reader_part_1/ The client (aka member or customer) follows these steps to take out money: Submit a request to take out money. Request is sent to server. Server places it in a queue. The message is: "Take out $5,000." Client is shown: "Please wait as request is being fulfilled..." Client machines polls server every 2 seconds asking, "Has the request been fulfilled?" On server, background workers are fulfilling previous requests from other members in first-in/first-out fashion. Eventually, they get to your client's request to take out money. Once request has been fulfilled, client is given a message with their new balance. You can use Heroku.com to create a small mock-up quickly if you are comfortable with Node.js or Ruby/Rack. The general idea seems pretty easy and much better than using transactions baked into the database that make it super-hard to scale. Disclaimer: I haven't implemented this in any way yet. I read about these things for curiosity even though I have no practical need for them. Yes, @gbn is right that a RDBMS with transactions would probably be sufficient for the needs of Timmy and me. Nevertheless, it would be fun to see how far you can take NoSQL databases with open-source tools and a how-to website called, " A Tornado of Razorblades ".
