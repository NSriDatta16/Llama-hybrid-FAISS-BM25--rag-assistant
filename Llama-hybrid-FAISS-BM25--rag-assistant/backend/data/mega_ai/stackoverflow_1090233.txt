[site]: stackoverflow
[post_id]: 1090233
[parent_id]: 1090147
[tags]: 
When you use an automatic property like this, the default value for the property type is the value, unless you initialize it elsewhere, like in the constructor: public class Person { public string Name { get; set; } public Person() { Name = string.Empty; } } However, if your automatic property has a public setter (as shown above), then you're still open to someone else setting Name to null , which may cause you some problems. I can see two solutions, depending on your context. First, change your automatic property to a private setter: public class Person { public string Name { get; private set; } public Person() { Name = string.Empty; } } This prevents anyone else from changing the property at all. If this isn't convenient, you could use a full property instead, and leverage the ?? ( null-coalescing ) operator to prevent nulls: public class Person { public string Name { get { return mName; } set { mName = value ?? string.empty; } } public Person() { Name = string.Empty; } private string mName; }
