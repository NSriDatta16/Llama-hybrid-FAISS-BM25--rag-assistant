[site]: stackoverflow
[post_id]: 2535482
[parent_id]: 2535464
[tags]: 
As far as layout goes, I would recommend using a ViewStack . You would only have to add each child once, and then just cycle through the indices of the stack itself. You could combine this with a Timer , re-starting it every time the stack index is changed. Count down and when the timer completes, increment the selected child index of the ViewStack. When you hit the last child, reset the index to 0, or do something different. EDIT : here's a sample file I put together. It's not very interesting visually, since each child is simply a VBox with a bold label indicating its index in the ViewStack. If you wanted to see more visual differences in the children, you could have a different background color for each, and then you'd see a different background every time the ViewStack changes its state. The app I put together is in Flex, so it embeds this class in the main MXML file, which has a button to invoke the "startTimer()" function. I'm not sure how you would leverage this CS4, but hopefully you can take it from here :) package { import flash.events.TimerEvent; import flash.utils.*; import mx.containers.Box; import mx.containers.VBox; import mx.containers.ViewStack; import mx.controls.Label; public class StackExample extends Box { private var stack:ViewStack; private var timer:Timer; public function StackExample() { super(); stack = new ViewStack(); stack.percentHeight = 100; stack.percentWidth = 100; //Add some sample children so we can watch //the ViewStack increment. The numbering here //is arbitrary for(var i:int=0; i }
