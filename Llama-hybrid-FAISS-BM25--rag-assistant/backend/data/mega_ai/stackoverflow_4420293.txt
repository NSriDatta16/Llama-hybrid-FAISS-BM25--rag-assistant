[site]: stackoverflow
[post_id]: 4420293
[parent_id]: 4418450
[tags]: 
This book introduction , page 3: Given a set of n points in a d-dimensional space, the kd-tree is constructed recursively as follows. First, one finds a median of the values of the ith coordinates of the points (initially, i = 1). That is, a value M is computed, so that at least 50% of the points have their ith coordinate greater-or-equal to M, while at least 50% of the points have their ith coordinate smaller than or equal to M. The value of x is stored, and the set P is partitioned into PL and PR , where PL contains only the points with their ith coordinate smaller than or equal to M, and |PR | = |PL |Â±1. The process is then repeated recursively on both PL and PR , with i replaced by i + 1 (or 1, if i = d). When the set of points at a node has size 1, the recursion stops. The following paragraphs discuss its use in solving nearest neighbor. Or, here is the original 1975 paper by Jon Bentley . EDIT: I should add that SciPy has a kdtree implementation: scipy.spatial another Stack Overflow question
