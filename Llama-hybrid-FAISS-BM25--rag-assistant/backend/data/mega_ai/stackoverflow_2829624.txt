[site]: stackoverflow
[post_id]: 2829624
[parent_id]: 
[tags]: 
C# generics based object to object mapper question

I have the need for an object to object mapper in my application. I've tried out a few, but haven't been able to find anything that fits my needs, so I'm writing my own. Currently I have an interface like below: public interface IMapper { T Map(R obj); } I then implement an AccountMapper that maps a Customer to an Account as: public class AccountMapper : IMapper { Account Map(Customer obj) { // mapping code } } This works fine so far, however I have several source entities that map to the same destination entity. For instance I have a Payment and an Invoice that both map to BillHistory. For the above to support this, I need to make two separate mappers (ie. BillHistoryPaymentMapper and BillHistoryInvoiceMapper), which is fine. However, I'd love to be able to implement it slightly differently like below. Only problem is I don't know if it's possible and if so, I don't know the correct syntax. public interface IMapper { T Map (R obj); } public class BillHistoryMapper : IMapper { public BillHistory Map (Invoice obj) { // mapping code } public BillHistory Map (Payment obj) { // mapping code } } While the first implementation works fine, the second would be slightly more elegant. Is this possible and if so what would the correct syntax look like? edit------- I hate when people do this, but of course I forgot to mention one little detail. We have an abstract class between the mapper and the interface to implement some common logic across all of the mappers. So my mapper signature is actually: public class BillHistoryMapper : Mapper { } where Mapper contains: public abstract class Mapper : IMapper { public IList Map(IList objList) { return objList.ToList ().ConvertAll (new Converter (Map)); } }
