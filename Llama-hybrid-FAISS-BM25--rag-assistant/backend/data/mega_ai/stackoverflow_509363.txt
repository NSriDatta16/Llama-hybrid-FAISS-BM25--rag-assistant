[site]: stackoverflow
[post_id]: 509363
[parent_id]: 509283
[tags]: 
Perhaps there is some elegance to having self-testing code, but I tend to side with the same philosophy as you -- that code separation trumps some notion of abstract beauty. When you design a class, you can fundamentally break it into three parts: What the class does (eg, the class' definition) How it does it (the implementation) How you use it (documentation and/or test cases) I see test cases as serving the purpose of documentation, as well as part of a safety net in a test suite. When a new programmer is looking at your code, possibly long after you've stopped working on it, the documentation is seldom the most effective way of communicating how the class should be used. It can answer questions about how the code behaves in specific situations, providing a general overview of the class and it's methods, and so on, but the test cases provide a concrete example of how the class would be used in real code . So for that reason, I would tend to say that they should remain outside of the class itself, since this re-enforces this degree of separation.
