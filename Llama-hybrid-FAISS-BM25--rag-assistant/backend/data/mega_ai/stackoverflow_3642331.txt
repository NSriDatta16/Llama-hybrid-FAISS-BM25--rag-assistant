[site]: stackoverflow
[post_id]: 3642331
[parent_id]: 
[tags]: 
Can OptionParser skip unknown options, to be processed later in a Ruby program?

Is there any way to kick off OptionParser several times in one Ruby program, each with different sets of options? For example: $ myscript.rb --subsys1opt a --subsys2opt b Here, myscript.rb would use subsys1 and subsys2, delegating their options handling logic to them, possibly in a sequence where 'a' is processed first, followed by 'b' in separate OptionParser object; each time picking options only relevant for that context. A final phase could check that there is nothing unknown left after each part processed theirs. The use cases are: In a loosely coupled front-end program, where various components have different arguments, I don't want 'main' to know about everything, just to delegate sets of arguments/options to each part. Embedding some larger system like RSpec into my application, and I'd to simply pass a command-line through their options without my wrapper knowing those. I'd be OK with some delimiter option as well, like -- or --vmargs in some Java apps. There are lots of real world examples for similar things in the Unix world (startx/X, git plumbing and porcelain), where one layer handles some options but propagates the rest to the lower layer. Out of the box, this doesn't seem to work. Each OptionParse.parse! call will do exhaustive processing, failing on anything it doesn't know about. I guess I'd happy to skip unknown options. Any hints, perhaps alternative approaches are welcome.
