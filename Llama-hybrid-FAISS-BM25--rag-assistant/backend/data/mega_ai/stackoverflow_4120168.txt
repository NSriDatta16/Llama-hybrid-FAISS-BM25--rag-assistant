[site]: stackoverflow
[post_id]: 4120168
[parent_id]: 
[tags]: 
Any problem with this Mysql Helper class?

I have this function in my database class. It accepts 3 parameters: The query the server to execute it on which is identified by name that is stored in a config an array of arguments that is quoted into the sql query example call: $toplist = MyDbClass->q('SELECT * FROM movies WHERE score > ?','slaveserver1',array(100)); here comes the code... /* * @param the sql query. may be pure sql or having ? as placeholders for variables that are passed in the 3rd param, not enquoted * @param name of the link (slave or master server or other arbitrary database) * @param optional array of vars that will be filled in where the ? signs in the query are */ public function q($sql,$name,$vars=false) { // lets see if the link to the server with name $name has already been initialised, if not lets do it if(!isset($this->links[$name])) { $this->initialize($name); } // if variables have been passed, lets fill them into the query if($vars !== false) { // first real scape them all according to the correct link for($i=0;$i links[$name]); } // now escape all actual % signs so they are not used as placeholders vor vsprintf $sql = str_replace('%','%%', $sql); // no add '' quotes arround every placeholder and fill in $sql = str_replace('?','\'%\'', $sql); $sql = vsprintf($sql,$args); } // now execute the parsed query on the correct server return mysql_query($sql,$this->links[$name]) or die(mysql_error($this->links[$name])); } Now my questions are: are there any problem with my code? espacially: are there any cases where putting '' quotes around arguments in a query can make it not working? is there some elegant way to prevent my function from ending up with double quoted stuff like where score > ''100 '' in my queries (if i already put qutoes in the input query...). what you think of the function? good way to do this?
