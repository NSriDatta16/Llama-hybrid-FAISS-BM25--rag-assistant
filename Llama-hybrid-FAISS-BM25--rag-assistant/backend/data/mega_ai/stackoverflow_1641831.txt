[site]: stackoverflow
[post_id]: 1641831
[parent_id]: 822014
[tags]: 
So what are the reasons to choose classical OOP style inheritance over prototypal inheritance? Actually, I believe that some frameworks are "sort of" combining approaches. Take for example the Parasitic Combination Inheritance pattern. This is what YAHOO.lang.extend is doing. It uses prototypal inheritance and a helper function to inherit prototypes and constructor stealing. Wow, that sounds complex...well yes it is - here's my implementation and test for example: // Prototypal Inheritance Object.prototype.inherit = function(p) { NewObj = function(){}; NewObj.prototype = p; return new NewObj(); }; // Paraphrasing of Nicholas Zakas's Prototype Inheritance helper function inheritPrototype(subType, superType) { var prototype = Object.inherit(superType.prototype); prototype.constructor = subType; subType.prototype = prototype; }; function SubType(name, age) { Parent.call(this, name); this.age = age; }; inheritPrototype(SubType, Parent); SubType.prototype.getAge = function() { return this.age; }; I have a test for this code: describe 'Parisitic Combination Inheritance' it 'should use inheritPrototype (to call parent constructor once) and still work as expected' sub = new SubType("Nicholas Zakas", 29) sub.toString().should.match /.*Nicholas Zakas/ sub.getAge().should.eql 29 charlie = new SubType("Charlie Brown", 69) charlie.arr.should.eql([1,2,3]) charlie.arr.push(999) charlie.arr.should.eql([1,2,3,999]) sub.arr.should.eql([1,2,3]) sub.should.be_an_instance_of SubType charlie.should.be_an_instance_of SubType (sub instanceof SubType).should.eql true (sub instanceof Parent).should.eql true end end And of course, if you're paying attention to my literals you see: Nicholas Zakas, the guy I got this from ;) The big wins for this one: instanceof works (big deal some say and I kind of agree); instances don't share state on reference types like arrays (a biggie!); parent constructor only called once (a biggie!). BTW, I have examples of most of the popular inheritance patterns here: My TDD JS Examples
