[site]: stackoverflow
[post_id]: 4460834
[parent_id]: 
[tags]: 
Wrapping an existing database with Entity Framework

A product we work with contain a very messy database (it is not our product) No primary keys defined No foreign keys All fields allow null without null having any special meaning 400 tables We often need to write applications that read or write data from the database. I would like to create a layer on top of the database that make it a bit easier to use in our applications. Ultimately I would like to have a layer that can: Replace null values with default for type ("", 0 etc) when reading Add navigation Use LINQ Export an OData interface Be used in Reporting Services (not very important) All of this must be done without changing anything in the database, i.e. no views, SP etc. I have done some experiments with Linq2Sql which seem to work pretty well. With sqlmetal and some regex magic I create entities which looks like: [Column(Name="Quantity", CanBeNull = true, DbType="Int")] private int? _Quantity; ... [Column(Storage = "_Quantity", DbType = "Int")] public int Quantity { get { return _Quantity ?? 0; } set { _Quantity = value; } } and then I manually add needed navigation properties. Unfortunately it seems like investing in linq2sql is a bad thing to do now. If I want OData I need to go with entity framework. The problem is that entity framework will not work at all if the tables don't have a primary key (and all fields allow null so the designer just show error messages in model) Any ideas on how to do this? I understand that it will not be automatic and am willing to invest some time in developing tools and manually edit some things. The database schema is stable and changes only include new columns and tables (i.e. no deletes, name changes or type changes)
