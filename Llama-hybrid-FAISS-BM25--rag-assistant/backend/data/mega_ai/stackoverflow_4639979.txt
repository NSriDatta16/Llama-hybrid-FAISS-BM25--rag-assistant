[site]: stackoverflow
[post_id]: 4639979
[parent_id]: 4639718
[tags]: 
You can use a "modified" quicksort to find it. It runs in O(n^2) but should be fairly fast on average. What you do is every time you choose a pivot, you check how many elements were less than the pivot and how many were greater. If there are same elements less and greater than the pivot, the pivot is the median. If not, you can recurse only to the portion where the element is contained. Worst case scenario, you will be performing a complete sorting though. Example: Array with 7 elements, we are looking for the 4-th smallest element. 5 3 8 6 7 1 9 Suppose quicksort chooses 3 as pivot, than you'll get: 1 3 5 8 6 7 9 Now, you want the 2nd smallest in the subarray [5, 8, 6, 7, 9]. Keep going until the pivot is the k-th smallest you are searching in the current iteration. I think this solution is pretty good for an interview question although you should mention that there is an O(n) deterministic solution.
