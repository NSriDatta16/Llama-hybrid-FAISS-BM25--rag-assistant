[site]: stackoverflow
[post_id]: 4855993
[parent_id]: 
[tags]: 
updating and creating from different places in ruby on rail 3

I bet others have had this problem, but I have not seen a good solution. In a rails app you might want to do stuff with one model from different places. Say, you have a Projects page where you list all the projects and have a form for making new ones. This form also serves as a update form if the (:id) is present. Lets say you also have a customers show page where you also list all the projects for a spesific customer. Here you also want to edit and create projects( for this customer) When the controller gets this it will send the user to the page spesified in the respond_to block. But, sometimes you want to go back to the projects page and other times you want the customer show page. When submiting with ajax. For the projects page you fill it with javascript and ERB, that does not necessarry fit the customers show page. Is there an elegant way to handle this without a ton of if statements? Edit I have been experimenting a bit on a testapp with two scaffolds projecs and todos. I don't think this is elegant. To many if statements and not very DRY. How can I make this better? here's the code projects/show Name: @project.id.to_s, :todo_id => todo.id.to_s)%> | todos/_form project_make_todo_path( @project)) do |f| %> prohibited this todo from being saved: project_update_todo_path( @project, @todo)) do |f| %> prohibited this todo from being saved: parts of the projects_controller.rb def project_make_todo @project = Project.find(params[:id]) @todo = @project.todos.build(params[:todo]) respond_to do |format| if @todo.save format.html { redirect_to( @project, :notice => 'Todo was successfully created.') } format.xml { render :xml => @project, :status => :created, :location => @project } else format.html { render :action => "new" } format.xml { render :xml => @project.errors, :status => :unprocessable_entity } end end end def project_update_todo @todo = Todo.find(params[:todo_id]) @project = Project.find(params[:id]) respond_to do |format| if @todo.update_attributes(params[:todo]) format.html { redirect_to(@project, :notice => 'Todo was successfully updated.') } format.xml { head :ok } else format.html { render :action => "edit" } format.xml { render :xml => @project.errors, :status => :unprocessable_entity } end end end parts of the routes.rb match 'projects/:id/project_todo' => 'projects#project_make_todo', :as => :project_make_todo match 'projects/:id/:todo_id/project_todo' => 'projects#project_update_todo', :as => :project_update_todo
