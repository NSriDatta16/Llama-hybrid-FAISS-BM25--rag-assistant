[site]: stackoverflow
[post_id]: 4091796
[parent_id]: 4091735
[tags]: 
For a good general reference on .NET data access, see http://www.csharp-station.com/Tutorials/AdoDotNet/Lesson01.aspx or http://www.startvbdotnet.com/ado/default.aspx A more specific answer to your example problem: The rudimentary C# syntax, filtering out potentially malicious data, to prevent SQL Injection is: System.Data.SqlClient.SqlConnection cn = new System.Data.SqlClient.SqlConnection("SomeConnectionString") System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(); cmd.CommandText = "Insert Into tblExample (fldExample) Values (@fldExample)"; // Use a parameterized query to avoid SQL Injection cmd.Connection = cn; cmd.Parameters.AddWithValue("@fldExample", txtData.Text); // Set the value of the parameter to the value of the textbox. // Use a try... catch...finally block to ensure the connection is closed properly try { cn.Open(); cmd.ExecuteNonQuery(); lblStatus.Text = "Item Inserted"; } catch(Exception ex) { lblStatus.Text = ex.ToString(); } finally { cn.Close(); // will happen whether the try is successful or errors out, ensuring your connection is closed properly. } PLEASE pay close attention to how to avoid SQL Injection. This is very important, and it's something that newer developers often miss, because they, like you, are worrying about the basic syntax and getting the update to work. You CAN build your SQL statement without parameterized queries, but it's best to learn it right immediately. Here's an article on Parameterized queries. http://www.aspnet101.com/2007/03/parameterized-queries-in-asp-net/ And an article from OWASP on SQL Injection so you can see why I say it's important. (Actually, you should become familiar with the OWASP site and ALL of the OWASP Top 10, but this article is relevant to your question.) http://www.owasp.org/index.php/SQL_Injection AND for a list of how to build connection strings, for SQL Server AND other DB's, my favorite reference is http://www.carlprothman.net/Default.aspx?tabid=81
