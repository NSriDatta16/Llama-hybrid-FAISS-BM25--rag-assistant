[site]: crossvalidated
[post_id]: 104977
[parent_id]: 
[tags]: 
Consequences of modeling a non-stationary process using ARMA?

I understand we should use ARIMA for modelling a non-stationary time series. Also, everything I read says ARMA should only be used for stationary time series. What I'm trying to understand is, what happens in practice when misclassifying a model, and assuming d = 0 for a time series that's non-stationary? For example: controlData control data looks like this: [1] 0.0000000 0.1240838 -1.4544087 -3.1943094 -5.6205257 [6] -8.5636126 -10.1573548 -9.2822666 -10.0174493 -11.0105225 [11] -11.4726127 -13.8827001 -16.6040541 -19.1966633 -22.0543414 [16] -24.8542959 -25.2883155 -23.6519271 -21.8270981 -21.4351267 [21] -22.6155812 -21.9189036 -20.2064343 -18.2516852 -15.5822178 [26] -13.2248230 -13.4220158 -13.8823855 -14.6122867 -16.4143756 [31] -16.8726071 -15.8499558 -14.0805114 -11.4016515 -9.3330560 [36] -7.5676563 -6.3691600 -6.8471371 -7.5982880 -8.9692152 [41] -10.6733419 -11.6865440 -12.2503202 -13.5314306 -13.4654890 Assuming I didn't know the data was ARIMA(1,1,1) , I might have a look at pacf(controlData) . Then I use Dickey-Fuller to see if the data is non-stationary: require('tseries') adf.test(controlData) # Augmented Dickey-Fuller Test # # data: controlData # Dickey-Fuller = -2.4133, Lag order = 3, p-value = 0.4099 # alternative hypothesis: stationary adf.test(controlData, k = 1) # Augmented Dickey-Fuller Test # #data: controlData # Dickey-Fuller = -3.1469, Lag order = 1, p-value = 0.1188 # alternative hypothesis: stationary So, I might assume the data is ARIMA(2,0,*) Then use auto.arima(controlData) to try to get a best fit? require('forecast') naiveFit So, even though the past and future data is ARIMA(1,1,1), I might be tempted to classify it as ARIMA(2,0,1). tsdata(auto.arima(controlData)) looks good too. Here is what an informed modeler would find: informedFit 1) Why are these information criterion better than the model selected by auto.arima(controlData) ? Now, I just graphically compare the real data, and the 2 models: plot(controlData) lines(fitted(naiveFit), col = "red") lines(fitted(informedFit), col = "blue") 2) Playing devil's advocate, what kind of consequences would I pay by using an ARIMA(2, 0, 1) as a model? What are the risks of this error? 3) I'm mostly concerned about any implications for multi-period forward predictions. I assume they would be less accurate? I'm just looking for some proof. 4) Would you suggest an alternative method for model selection? Are there any problems with my reasoning as an "uninformed" modeler? I'm really curious what are the other consequences of this kind of misclassification. I've been looking for some sources and just couldn't find anything. All the literature I could find only touches on this subject, instead just stating the data should be stationary before performing ARMA, and if it's non-stationary, then it needs to be differenced d times. Thanks!
