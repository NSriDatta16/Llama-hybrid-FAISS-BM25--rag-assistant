[site]: stackoverflow
[post_id]: 5399845
[parent_id]: 5399608
[tags]: 
Some notes. The "assign pid if have not already" block is tragic. You're grabbing the entire contents of the table, and then row-by-row checking to see if you found the right one. The code blindly assumes that the row count is going to match the id column when picking what the next pid should be. The proper thing to do (for MySQL) would be using an auto-increment column so that you don't need to worry about that mess. Your DELETE FROM query contains an SQL Injection vulnerability . If pid is not the string 'false' , it will never be validated. Someone can destroy the entire positioner table. How do you protect against it? Well... You're using addslashes . This isn't a code smell , it's a code stench . addslashes has never, ever at any time in the entire history of computing been the correct thing to use*. I think you're looking for a real database escaping mechanism. Because you're using the atrocious "mysql" interface, you want mysql_real_escape_string . lla1 and lla2 ? Those are the best and most descriptive names for columns you could come up with? I'm going to assume those are latitude/longitude pairs. Once again, you have SQL injection in that SELECT . And in that INSERT , you are possibly blindly trusting $rangerS . SQL Injection ahoy! And in the UPDATE . I'd also like to rant briefly about string 'true' and string 'false' , but those are coming from bad Javascript. Consider having them submitted as 1 and 0 instead. Also, please, please consider using a modern Javascript library like jQuery instead of rolling your own Ajax bits. It will save you time and stress. I think the core problem here is actually the initial pid check. I'm going to bet that you're always getting a new or incorrect pid back from the table, because the id is unlikely to perfectly match the row count. Then you're doing a blind no-error-check INSERT with the "new" pid , but if your indexes are designed properly, this will fail with a duplicate key error. Therefore, no updates. But this is just speculation. Other than the vulnerabilities here, I'm not sure I completely understand what's happening, and I'm not spotting anything obviously incorrect. There's another possible problem here. I'm going to assume that pid means player ID from the context. Your code is blindly trusting that the request is coming from the player that owns that pid , but anyone can just make a request here with any valid pid and make moves for people as a result. I'm not sure you intended that. * Okay, maybe someone found addslashes useful once or twice...
