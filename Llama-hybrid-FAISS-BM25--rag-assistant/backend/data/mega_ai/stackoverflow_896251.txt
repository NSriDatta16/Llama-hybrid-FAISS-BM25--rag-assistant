[site]: stackoverflow
[post_id]: 896251
[parent_id]: 887505
[tags]: 
I've been struggling with this same type of scenario and eventually came to realize that the underlying problem is that the MVC default model binder does not seem to work on EntitySet fields, only List fields. I did however find a simple workaround that seems acceptable. In my case, I have a Company entity that has one to many relationship to Contacts (my Linq-to-Sql EntitySet). Since it seems that when I change my code from EntitySet to List , the MVC default model binder starts working as expected (even though the LTS isn't now), I figured I would provide an alternate, "aliased" property to MVC that is of type List , and sure enough, this seems to work. In my Company entity class: // This is what LINQ-to-SQL will use: private EntitySet _Contacts = new EntitySet (); [Association(Storage="_Contacts", OtherKey="CompanyID", ThisKey="ID")] public EntitySet Contacts { get { return _Contacts; } set { _Contacts.Assign(value); } } // This is what MVC default model binder (and my View) will use: public List MvcContacts { get { return _Contacts.ToList (); } set { _Contacts.AddRange(value); } } So now, in my View, I have the following: First Name* Last Name* Seems to work like a charm! Best of luck! -Mike
