[site]: stackoverflow
[post_id]: 4906543
[parent_id]: 4905705
[tags]: 
To elaborate on how the GUI requirements posted by Cody Gray will make it hard for a non-trivial Qt app to be accepted, consider some of the Mac-specific features that will have to be implemented or at least checked for correctness for the case of a simple text editor: correct keyboard shortcuts, including the emacs keybindings that are standard for Cocoa text controls proper menu structure, including: preferences in the application menu, not the edit or tools menu access to the special characters tool from the edit menu "Open Recent" submenu of the file menu, with a clear menu entry, as opposed to the recent files list embedded in the file menu on Windows a proper Window menu, including the "bring all to front" item a help menu with an integrated search box the ability for the application to stay open after all windows/documents have been closed proper dock icon behaviour, including the window list in the context menu the window title bar file icon, which can be dragged and dropped on to other apps, or right-clicked to get a menu of the directories in the path of the file, so that you can open the enclosing folder in the Finder As you go down this list, the probability that the feature can be easily implemented with a cross-platform toolkit decreases. All of these features have been omitted by at least one Qt Mac app in my experience. Some of these features could probably only be easily added to Qt by using non-public APIs. However, most of these features are free or almost trivial to implement in a Cocoa project, so they are almost ubiquitous in native apps, and Apple would be right to reject your app for screwing them up. If your app is non-trivial and isn't a fullscreen OpenGL game, then you are probably better off writing a native GUI with a cross-platform back-end. The alternative is code that is full of #ifdef s but still never quite gets the job done right.
