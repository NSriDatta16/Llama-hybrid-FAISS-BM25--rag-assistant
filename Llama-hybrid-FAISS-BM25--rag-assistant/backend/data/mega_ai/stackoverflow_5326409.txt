[site]: stackoverflow
[post_id]: 5326409
[parent_id]: 5290336
[tags]: 
Here is the JSFiddle Demo . In Google Maps API V3 it's pretty simple to track the lat and lng of a draggable marker. Let's start with the following HTML and CSS as our base. Nothing yet... #map_canvas{ width: 400px; height: 300px; } #current{ padding-top: 25px; } Here is our initial JavaScript initializing the google map. We create a marker that we want to drag and set it's draggable property to true. Of course keep in mind it should be attached to an onload event of your window for it to be loaded, but i'll skip to the code: var map = new google.maps.Map(document.getElementById('map_canvas'), { zoom: 1, center: new google.maps.LatLng(35.137879, -82.836914), mapTypeId: google.maps.MapTypeId.ROADMAP }); var myMarker = new google.maps.Marker({ position: new google.maps.LatLng(47.651968, 9.478485), draggable: true }); Here we attach two events dragstart to track the start of dragging and dragend to drack when the marker stop getting dragged, and the way we attach it is to use google.maps.event.addListener . What we are doing here is setting the div current 's content when marker is getting dragged and then set the marker's lat and lng when drag stops. Google mouse event has a property name 'latlng' that returns 'google.maps.LatLng' object when the event triggers. So, what we are doing here is basically using the identifier for this listener that gets returned by the google.maps.event.addListener and get the property latLng to extract the dragend's current position. Once we get that Lat Lng when the drag stops we'll display within your current div: google.maps.event.addListener(myMarker, 'dragend', function(evt){ document.getElementById('current').innerHTML = ' Marker dropped: Current Lat: ' + evt.latLng.lat().toFixed(3) + ' Current Lng: ' + evt.latLng.lng().toFixed(3) + ' '; }); google.maps.event.addListener(myMarker, 'dragstart', function(evt){ document.getElementById('current').innerHTML = ' Currently dragging marker... '; }); Lastly, we'll center our marker and display it on the map: map.setCenter(myMarker.position); myMarker.setMap(map); Let me know if you have any questions regarding my answer.
