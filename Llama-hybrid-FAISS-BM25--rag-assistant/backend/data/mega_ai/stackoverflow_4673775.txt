[site]: stackoverflow
[post_id]: 4673775
[parent_id]: 1457305
[tags]: 
These conditions must be satisfied to not get error 150 re ALTER TABLE ADD FOREIGN KEY : The Parent table must exist before you define a foreign key to reference it. You must define the tables in the right order: Parent table first, then the Child table. If both tables references each other, you must create one table without FK constraints, then create the second table, then add the FK constraint to the first table with ALTER TABLE . The two tables must both support foreign key constraints, i.e. ENGINE=InnoDB . Other storage engines silently ignore foreign key definitions, so they return no error or warning, but the FK constraint is not saved. The referenced columns in the Parent table must be the left-most columns of a key. Best if the key in the Parent is PRIMARY KEY or UNIQUE KEY . The FK definition must reference the PK column(s) in the same order as the PK definition. For example, if the FK REFERENCES Parent(a,b,c) then the Parent's PK must not be defined on columns in order (a,c,b) . The PK column(s) in the Parent table must be the same data type as the FK column(s) in the Child table. For example, if a PK column in the Parent table is UNSIGNED , be sure to define UNSIGNED for the corresponding column in the Child table field. Exception: length of strings may be different. For example, VARCHAR(10) can reference VARCHAR(20) or vice versa. Any string-type FK column(s) must have the same character set and collation as the corresponding PK column(s). If there is data already in the Child table, every value in the FK column(s) must match a value in the Parent table PK column(s). Check this with a query like: SELECT COUNT(*) FROM Child LEFT OUTER JOIN Parent ON Child.FK = Parent.PK WHERE Parent.PK IS NULL; This must return zero (0) unmatched values. Obviously, this query is an generic example; you must substitute your table names and column names. Neither the Parent table nor the Child table can be a TEMPORARY table. Neither the Parent table nor the Child table can be a PARTITIONED table. If you declare a FK with the ON DELETE SET NULL option, then the FK column(s) must be nullable. If you declare a constraint name for a foreign key, the constraint name must be unique in the whole schema, not only in the table in which the constraint is defined. Two tables may not have their own constraint with the same name. If there are any other FK's in other tables pointing at the same field you are attempting to create the new FK for, and they are malformed (i.e. different collation), they will need to be made consistent first. This may be a result of past changes where SET FOREIGN_KEY_CHECKS = 0; was utilized with an inconsistent relationship defined by mistake. See @andrewdotn's answer below for instructions on how to identify these problem FK's.
