[site]: stackoverflow
[post_id]: 4283692
[parent_id]: 4283624
[tags]: 
For insert and update methods, I'd create a repository , with CRUD methods (e.g. ICustomerRepository ) I don't see the immediate benefit of the ICustomer interface I would use the approach where validation is outside the business entity; e.g. in dedicated validation classes, or in a configuration file like spring.net validation . Overall, I think it is a good idea to have a single responsibility per class - e.g. business state Customer , persistent storage NHibernateCustomerRepository : ICustomerRepository and validation CustomerValidator . An example for the repository: interface ICustomerRepository { // Get by id Customer Get(int id); void Delete(Customer customer); IList GetAll(); // creates a new instance in datastore // returns the persistent identifier int Save(Customer customer); // updates if customer exists, // creates if not // returns persistent identifier int SaveOrUpdate(Customer customer); // updates customer void Update(Customer customer); // specific queries IList GetAllWithinFiscalYear(DateTime year); // ... } As you can see, the first methods of this interface will be similar for most business entities and could be abstracted into: interface IRepository { // Get by id TEntity Get(TId id); void Delete(TEntity entity); IList GetAll(); // creates a new instance in datastore // returns the persistent identifier TId Save(TEntity entity); // updates if customer exists, // creates if not // returns persistent identiefier TId SaveOrUpdate(TEntity entity); // updates customer void Update(TEntity entity); } interface ICustomerRepository : IRepository { // specific queries IList GetAllWithinFiscalYear(DateTime year); }
