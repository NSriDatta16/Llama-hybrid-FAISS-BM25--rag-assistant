[site]: stackoverflow
[post_id]: 2171211
[parent_id]: 2165903
[tags]: 
Your fundamental workflow seems sane to me. I'm sure there are other approaches. Just a series of bullet points to answer your question: FFmpeg is a video encoding leader ; Arguably 'the' leader. You should not worry about it itself being a problem, but more about how you are using it, your parameters, etc. Your above script's FFmpeg parameters are pure default. You may get better, more efficient performance if you try out different parameters. There are many. You should to spend some time tuning the FFmpeg parameters. Video encoding is inherently very CPU intensive. If you are going to have any sort of volume, then you are going to have plan for it. That means running some tests, recording some metrics, and making projections. It also means paying close attention to your hardware. E.g.: The new Intel Core i7 CPU absolutely rocks at video encoding-- multiple times faster than an MHz*core-count equivalent Core 2. You should be able to kick off the FFMpeg jobs at as lower priority processes than your web server, etc. This will keep your server snappy even when pegged at 100% utilization. If you really are going to handle volume traffic, then I would strongly suggestion moving the FFmpeg work to auxiliary, dedicated encoding servers. Depending on your traffic, you may even need an encoding farm. In summary, it seems to me your questions are more ' system architecture' and 'encoder parameter tuning' related. There is only one other fundamentally different approach I can think of that would dramatically reduce your server side encoding load, and that would be to handle everything on the client side. But somehow I think you've already discounted that approach.
