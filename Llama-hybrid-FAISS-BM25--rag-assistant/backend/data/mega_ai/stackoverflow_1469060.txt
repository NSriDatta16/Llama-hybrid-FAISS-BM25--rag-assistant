[site]: stackoverflow
[post_id]: 1469060
[parent_id]: 540967
[tags]: 
By default, members of a structure or union are aligned on their natural boundaries; one byte for a char, two bytes for a short, four bytes for an integer etc. If n is present, it must be a power of 2 specifying the strictest natural alignment for any structure or union member. For example, #pragma pack(2) aligns int, long, long long, float, double, long double, and pointers on two byte boundaries instead of their natural alignment boundaries. If n is the same or greater than the strictest alignment on your platform, (four on x86, eight on SPARC v8, and 16 on SPARC v9), the directive has the effect of natural alignment. I'm not sure if the x86 architecture supports 8-byte alignment even though they support a 64-bit environment. After all, 4-byte alignment on a 64-bit platform wouldn't harm anything. You can also use: #pragma align 8 (variable) to tell the compiler how you want a global or static variable aligned.
