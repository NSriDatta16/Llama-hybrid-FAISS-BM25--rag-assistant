[site]: stackoverflow
[post_id]: 4979168
[parent_id]: 4978487
[tags]: 
The java.util package contains data structures to organize data of any kind. It deals basically with abstract data structures (like List , Set , Map ) which are defined via their methods and behavior (e.g. a Set does contain no elements twice, a List maintains order and allows duplicates, etc.). You as a developer are free to choose which implementation of these data structures are best suited for the kind of data you deal with ( HashSet vs. TreeSet / LinkedList vs. ArrayList / etc. ). For example for Sets and Maps you may choose between hash-based implementations and tree-based implementations, which may or may not be suited for what you want to do (in most cases a hash-based implementation will be the best choice, while sometimes, when order is important, a tree may be better suited for your needs - See also HashSet vs TreeSet (here at Stackoverflow) ). If you are thinking of a Tree as a special kind of Graph (which it is), then you’re interested in specific properties which apply to graphs, not to collections in general (which, essentially, are lists, and are in turn used to implement things like graphs). As mentioned in this thread, if you’re interested in modeling Graphs, there are plenty of choices for Graph libraries. Personally I can recommend JGraphT . I don’t know why there is no graph library within the JDK (and I don’t know whether that’s a good thing to ask?), but I guess Sun decided to leave this to developers, since most applications that require graphs also require very unique implementations.
