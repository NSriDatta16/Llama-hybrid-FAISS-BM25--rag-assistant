[site]: stackoverflow
[post_id]: 4225877
[parent_id]: 
[tags]: 
The type Enum is not generic; it cannot be parameterized with arguments

The type Enum is not generic; it cannot be parameterized with arguments I've this error in the following code .. package ayanoo.utility; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; import java.util.Vector; import org.apache.http.HttpEntity; import org.apache.http.HttpResponse; import org.apache.http.NameValuePair; import org.apache.http.client.ClientProtocolException; import org.apache.http.client.HttpClient; import org.apache.http.client.entity.UrlEncodedFormEntity; import org.apache.http.client.methods.HttpPost; import org.apache.http.client.methods.HttpUriRequest; import org.apache.http.impl.client.DefaultHttpClient; import org.apache.http.message.BasicNameValuePair; import org.apache.http.protocol.HTTP; import android.util.Log; public class RestClient { public enum RequestMethod { GET, POST } private Vector params; private String url; private int responseCode; private String message; private String response; public String getResponse() { return response; } public String getErrorMessage() { return message; } public int getResponseCode() { return responseCode; } public RestClient(String url) { this.url = url; params = new Vector (); } public void AddParam(String name, String value) { params.add(new BasicNameValuePair(name, value)); } public void Execute(RequestMethod method) throws IOException { switch(method) { case GET: { //add parameters String combinedParams = ""; if(!params.isEmpty()){ combinedParams += "/"; for(NameValuePair p : params) { //String paramString = p.getName() + "=" + p.getValue(); String paramString = p.getValue(); if(combinedParams.length() > 1) { combinedParams += "&" + paramString; } else { combinedParams += paramString; } } } Log.d("URL See:",url + combinedParams); URL urlObject = new URL(url + combinedParams); //URL urlObject = new URL("http://www.aydeena.com/Services/Search.svc/JSON/SearchByText/1"); executeRequest(urlObject); break; } case POST: { HttpPost request = new HttpPost(url); //add headers if(!params.isEmpty()){ request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8)); } executeRequest(request, url); break; } } } private void executeRequest(URL urlObject) throws IOException{ HttpURLConnection con = null; con = (HttpURLConnection) urlObject.openConnection(); con.setReadTimeout(10000 /* milliseconds */); con.setConnectTimeout(15000 /* milliseconds */); con.setRequestMethod("GET"); //con.addRequestProperty("Referer", // "http://www.pragprog.com/titles/eband/hello-android"); con.setDoInput(true); // Start the query con.connect(); response = convertStreamToString(con.getInputStream()); Log.d("Response:", response); } private void executeRequest(HttpUriRequest request, String url) { HttpClient client = new DefaultHttpClient(); Log.d("Test URL:", url); HttpResponse httpResponse; try { httpResponse = client.execute(request); responseCode = httpResponse.getStatusLine().getStatusCode(); message = httpResponse.getStatusLine().getReasonPhrase(); HttpEntity entity = httpResponse.getEntity(); if (entity != null) { InputStream instream = entity.getContent(); response = convertStreamToString(instream); // Closing the input stream will trigger connection release instream.close(); } } catch (ClientProtocolException e) { client.getConnectionManager().shutdown(); e.printStackTrace(); } catch (IOException e) { client.getConnectionManager().shutdown(); e.printStackTrace(); } } private static String convertStreamToString(InputStream is) { BufferedReader reader = new BufferedReader(new InputStreamReader(is)); StringBuilder sb = new StringBuilder(); String line = null; try { while ((line = reader.readLine()) != null) { sb.append(line + "\n"); } } catch (IOException e) { e.printStackTrace(); } finally { try { is.close(); } catch (IOException e) { e.printStackTrace(); } } return sb.toString(); } } what's the problem ??? !
