[site]: crossvalidated
[post_id]: 536350
[parent_id]: 
[tags]: 
How to define a neural network that maps real-valued 2D matrix to binary 2D matrix?

I'm doing some tests with matrix to matrix neural networks. In my setting, I'm trying to develop a neural network that can map a real-valued matrix to a binary matrix. The input matrix is a random distribution of real numbers. The output matrix indicates, for each line, which is the smallest value of the input matrix. That is, if in the input matrix, the column j has the smallest value for the line x, the cell in of the output matrix would have the value 1, and for all other columns, the line x would have the value 0. Bellow I will provide an example of a 3X3 input and output matrix. Input: [[0.5,0.6,0.2], [0.1,0.5,0.9], [0.5,0.4,0.6]] Output: [[0,0,1], [1,0,0], [0,1,0]] This is a trivial problem that can be easily solved by a simple and straightforward algorithm. But I'm interested in trying to solve this by neural networks, for gaining insights about how to work with 2D matrices as inputs and outputs. I've developed a scrip (bellow) for generating random datasets and for building and training a neural network. But the achieved accuracy is very low. I think that I'm using the wrong activation function for the last layer of the network, and the wrong loss function for the training. Which would be the best choices for activation and loss functions in this context? Notice that I'm interested in taking a 2D matrix as the input of my neural network model and having as output a 2D matrix. The idea is not to deal with rows separately. I would like to do something similar to what is done in image-to-image neural networks, but with matrices that are representing non-visual information. My script: import os from tensorflow import keras import numpy as np import random from keras.callbacks import EarlyStopping from sklearn.model_selection import train_test_split import matplotlib.pyplot as plt def randomMatrix(matrixSize,maxValue): matrix = [] for i in range(matrixSize): line = [] for j in range(matrixSize): value = (random.random()*maxValue) line.append(value) matrix.append(line) return np.array(matrix) def generatesOutputFromInput(matrix): output = [] rows, cols = matrix.shape for i in range(rows): line = [] minVal = matrix[i,0] for j in range(cols): value = matrix[i,j] if value ```
