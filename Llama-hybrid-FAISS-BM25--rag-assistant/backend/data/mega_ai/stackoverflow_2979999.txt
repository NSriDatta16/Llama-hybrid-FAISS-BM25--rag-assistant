[site]: stackoverflow
[post_id]: 2979999
[parent_id]: 2978138
[tags]: 
The more I think on't the more the Smalltalk model of operation seems more relevant. Indeed the OP may not have reached far enough by using the term "database" to describe a thing which should have no need for naming. A running Python interpreter has a pile of objects that live in memory. Their inter-relationships can be arbitrarily complex, but namespaces and the "tags" that objects are bound to are very flexible. And as pickle can explicitly serialize arbitrary structures for persistence, it doesn't seem that much of a reach to consider each Python interpreter living in that object space. Why should that object space evaporate with the interpreter's close? Semantically, this could be viewed as an extension of the anydbm tied dictionaries. And since most every thing in Python is dictionary-like, the mechanism is almost already there. I think this may be the generic model that Alex Martelli was proposing above, it might be nice to say something like: class Book: def __init__(self, attributes): self.attributes = attributes def __getattr__(....): pass $ python >>> import book >>> my_stuff.library = {'garp': Book({'author': 'John Irving', 'title': 'The World According to Garp', 'isbn': '0-525-23770-4', 'location': 'kitchen table', 'bookmark': 'page 127'}), ... } >>> exit [sometime next week] $ python >>> import my_stuff >>> print my_stuff.library['garp'].location 'kitchen table' # or even >>> for book in my_stuff.library where book.location.contains('kitchen'): print book.title I don't know that you'd call the resultant language Python, but it seems like it is not that hard to implement and makes backing store equivalent to active store. There is a natural tension between the inherent structure imposed - and sometimes desired - by RDBMs and the rather free-form navel-gazing put here, but NoSQLy databases are already approaching the content addressable memory model and probably better approximates how our minds keep track of things. Contrariwise, you wouldn't want to keep all the corporate purchase orders such a storage system, but perhaps you might.
