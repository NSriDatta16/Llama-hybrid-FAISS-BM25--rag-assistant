[site]: stackoverflow
[post_id]: 3316663
[parent_id]: 3316402
[tags]: 
One good use case for 'Optional parameters' in conjunction with 'Named Parameters' in C# 4.0 is that it presents us with an elegant alternative to method overloading where you overload method based on the number of parameters. For example say you want a method foo to be be called/used like so, foo() , foo(1) , foo(1,2) , foo(1,2, "hello") . With method overloading you would implement the solution like this, ///Base foo method public void DoFoo(int a, long b, string c) { //Do something } /// Foo with 2 params only public void DoFoo(int a, long b) { /// .... DoFoo(a, b, "Hello"); } public void DoFoo(int a) { ///.... DoFoo(a, 23, "Hello"); } ..... With optional parameters in C# 4.0 you would implement the use case like the following, public void DoFoo(int a = 10, long b = 23, string c = "Hello") Then you could use the method like so - Note the use of named parameter - DoFoo(c:"Hello There, John Doe") This call takes parameter a value as 10 and parameter b as 23. Another variant of this call - notice you don't need to set the parameter values in the order as they appear in the method signature, the named parameter makes the value explicit. DoFoo(c:"hello again", a:100) Another benefit of using named parameter is that it greatly enhances readability and thus code maintenance of optional parameter methods. Note how one method pretty much makes redundant having to define 3 or more methods in method overloading. This I have found is a good use case for using optional parameter in conjunction with named parameters.
