[site]: stackoverflow
[post_id]: 2869399
[parent_id]: 2869222
[tags]: 
Yes, I think you're heading down the right track with interfaces over abstract classes. Any concrete Zombie you might want to make could possess any combination of the Walking, Running or Teleporting features you care to implement. I think modern programming theory discourages inheritance as much as possible, because it inhibits reusability and flexibility in the long-run. Rather, use interfaces and composition to achieve flexibility without 'tight coupling'. One methodology to re-use code without inheritance, you could apply the 'Favour composition over inheritance' paradigm. I like to think Josh Bloch's 'Effective Java' (2nd edition) can be taken as "current thinking" ... http://books.google.com/books?id=ZZOiqZQIbRMC&pg=RA1-PA71&lpg=RA1-PA71&dq=%22Bloch%22+%22Effective+java:+programming+language+guide%22+&hl=de&sig=RxlDlRBWUvNAzsAFzqOcftrYI5E#v=onepage&q&f=false So, you could implement all your behaviours as independent classes, and then give each zombie implementation its own combination of behaviours, through implementation & composition.. Hope that makes sense & helps ...
