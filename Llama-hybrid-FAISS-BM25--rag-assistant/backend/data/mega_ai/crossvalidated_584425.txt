[site]: crossvalidated
[post_id]: 584425
[parent_id]: 310870
[tags]: 
This is an old question, but in case someone ends up here looking for the answer: By default, survival::coxph demeans any non-binary covariates (and any offsets, regardless of their measurement level), to make any baseline cumulative hazard/survivor estimates from survival::survfit more stable. ( survival::basehaz is a wrapper for survival::survfit .) By contrast, Stata's stcox does not demean its covariates. Demeaning doesn't affect the coefficient estimates. That's why R's and Stata's Cox model output still matches, provided you use the same tie correction method. Stata's default ( breslow ) is not R's default ( efron ). For more on coxph 's demeaning behavior, see the second paragraph under the "Details" section of coxph 's help file ( survival 3.3-1 ). See also the nocenter option in that help file, which affects only covariates, not offsets. MWE Stata // (picking female as offset, arbitrarily) * not demeaned webuse catheter, clear stcox age, offset(female) efron predict double H0, basec // WON'T MATCH R * demeaned foreach x of varlist age female{ sum `x' if(e(sample)==1) gen double `x'_dem = `x' - `r(mean)' } stcox age_dem, offset(female_dem) efron predict double H0_dem, basec // WILL MATCH R * print the quantities bysort _t: gen flag = _n==1 list _t H0* if(flag==1), noobs ** (INSERTED THE OUTPUT) +-----------------------------+ | _t H0 H0_dem | |-----------------------------| | 2 .00442489 .01208141 | | 4 .00442489 .01208141 | | 5 .00442489 .01208141 | | 6 .00442489 .01208141 | | 7 .01390727 .03797142 | |-----------------------------| | 8 .0236089 .06446007 | | 9 .02865578 .07823973 | | 12 .03885037 .1060743 | | 13 .04399411 .1201184 | | 15 .05477359 .14954993 | |-----------------------------| | 16 .06027266 .16456422 | | 17 .06591772 .17997709 | | 22 .07160917 .19551662 | | 23 .07746653 .21150915 | | 24 .08345176 .22785078 | |-----------------------------| | 25 .08967049 .24482998 | | 26 .09606417 .26228683 | | 27 .10261635 .28017644 | | 28 .1093372 .29852657 | | 30 .13734608 .37500003 | |-----------------------------| | 33 .14474793 .39520951 | | 34 .15235003 .41596575 | | 38 .16017444 .43732899 | | 39 .16821064 .45927044 | | 40 .1764812 .4818518 | |-----------------------------| | 43 .18484174 .50467883 | | 46 .18484174 .50467883 | | 53 .19374013 .52897436 | | 54 .19374013 .52897436 | | 58 .20328969 .55504782 | |-----------------------------| | 63 .21320181 .58211117 | | 66 .22325786 .6095675 | | 70 .22325786 .6095675 | | 78 .23413436 .63926391 | | 96 .24547173 .67021867 | |-----------------------------| | 108 .24547173 .67021867 | | 113 .24547173 .67021867 | | 114 .25838971 .70548901 | | 119 .27192819 .74245352 | | 130 .28606182 .78104298 | |-----------------------------| | 132 .30099395 .82181262 | | 141 .31659951 .86442093 | | 149 .31659951 .86442093 | | 152 .35238347 .96212294 | | 154 .37160181 1.0145953 | |-----------------------------| | 156 .39134013 1.0684874 | | 159 .39134013 1.0684874 | | 177 .41406096 1.1305228 | | 185 .43900652 1.1986324 | | 190 .46665975 1.2741348 | |-----------------------------| | 196 .49734176 1.3579068 | | 201 .53249754 1.4538937 | | 245 .5731822 1.5649762 | | 292 .61953858 1.6915444 | | 318 .67502001 1.843027 | |-----------------------------| | 402 .74292041 2.0284174 | | 447 .83017281 2.2666452 | | 511 .95265565 2.6010637 | | 536 1.1827563 3.2293142 | | 562 1.9349645 5.2830905 | +-----------------------------+ R library(survival) # 3.3-1 library(broom) # 1.0.0 # Load data cath $estimate cumhaz # Print print(as.data.frame(sf.mod.df[,c("time","estimate")]), digits=7, row.names=FALSE) ## (INSERTED THE OUTPUT) time estimate 2 0.01208141 4 0.01208141 5 0.01208141 6 0.01208141 7 0.03797142 8 0.06446007 9 0.07823973 12 0.10607430 13 0.12011840 15 0.14954993 16 0.16456422 17 0.17997709 22 0.19551662 23 0.21150915 24 0.22785078 25 0.24482998 26 0.26228683 27 0.28017644 28 0.29852657 30 0.37500003 33 0.39520951 34 0.41596575 38 0.43732899 39 0.45927044 40 0.48185180 43 0.50467883 46 0.50467883 53 0.52897436 54 0.52897436 58 0.55504782 63 0.58211117 66 0.60956750 70 0.60956750 78 0.63926391 96 0.67021867 108 0.67021867 113 0.67021867 114 0.70548901 119 0.74245352 130 0.78104298 132 0.82181262 141 0.86442093 149 0.86442093 152 0.96212294 154 1.01459533 156 1.06848744 159 1.06848744 177 1.13052280 185 1.19863239 190 1.27413483 196 1.35790683 201 1.45389369 245 1.56497621 292 1.69154439 318 1.84302697 402 2.02841741 447 2.26664521 511 2.60106372 536 3.22931416 562 5.28309054
