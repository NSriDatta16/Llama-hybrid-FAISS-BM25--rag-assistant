[site]: stackoverflow
[post_id]: 5428416
[parent_id]: 5428360
[tags]: 
I am asking what exactly is going on in the memory? Local variables are being allocated on the stack. Constants, including the literal strings, are being allocated in the text or data sections of the executable. Isn't the pointer variable 's' a local variable? Yes or where is the pointer variable stored in the memory? The local s is in a register or on the stack. Also where is the text constant "Hello, World" stored in memory? In either the .text or the .data section. It's constant, but legacy code would sometimes modify them, so it depends on compiler options. You need to distinguish between the reference and the object to understand it all. (isn't this considered to be local variable which isn't accesible after function returns)? Well, s is local but the string itself will be needed every time the function is called, and the local frame won't even exist until that happens, so the constant itself is most likely stored in the .text section. It may be stored in .data, depending on compiler options and how much the current compiler release cares about compiling legacy code. The literal inside the expression is something completely different from the variable it is being assigned to. Basically what kind of variables / data are consider to be in "local" scope of the functions (ceases to be accessible after function returns)? The ones that are lexically scoped as auto variables, i.e., declared inside functions without the static storage class. The word accessible is unfortunately a bit imprecise. With static storage class the object could be referenced if its address was leaked out of the function.
