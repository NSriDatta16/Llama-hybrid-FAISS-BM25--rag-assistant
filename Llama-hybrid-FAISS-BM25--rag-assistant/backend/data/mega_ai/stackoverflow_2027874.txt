[site]: stackoverflow
[post_id]: 2027874
[parent_id]: 2002406
[tags]: 
As said, it depends on the data but also on your current bottleneck. If your application is running on a server that is already short on IO resources, you might prefer in any case a network-type storage. Security issues are more related to setup and good practices than to the technology which is used. If you write files, you need to make sure they are not downloadable. If you use a database, you need to take care of SQL injection and so on... I'd just like to stress out that you are not restricted to files and relational Databases. You can also use memcached to store data in memory (ideal for cache for instance). NOSQL databases like Redis are also an option. Database (ie MySQL): pros: searchable, can handle complex and structured data, can be hosted on a different sever, persistent cons: slow typical usage: business data storage Files: pros: very easy to setup, quite fast, persistent cons: not suitable to handle very complex data, not searchable, will consume server host IO resources, not that fast typical usage: log files, template cache files NOSQL (ie Redis): pros: fast, can be setup on a remote host, persistent cons: not easily searchable, not suitable for strongly structured data typical usage: performance hacks (search) Memory: pros: The fastest one!, can be setup on a remote host cons: same as NOSQL + not persistent typical usage: object caching
