[site]: stackoverflow
[post_id]: 5145109
[parent_id]: 
[tags]: 
ThreadPoolExecutor on java doc

at http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ThreadPoolExecutor.html you can read the description of parameters to constructor. Specifically in the "Core and maximum pool sizes" paragraph, it's written: If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. ... By setting maximumPoolSize to an essentially unbounded value such as Integer.MAX_VALUE, you allow the pool to accommodate an arbitrary number of concurrent tasks. Now I can't understand what "only if the queue is full" in the first part stands for... Will ThreadPoolExecutor wait until queue is full or it will simply create a new worker? An suppose now that we have more tasks that aren't asynchronous between them: using a ThreadPoolExecutor could cause a deadlock? Supposing that my first 10 tasks are producer and that CorePoolSize is 10, then succeeding consumer tasks will go to queue and won't run until the queue is full? If so this behavior may cause deadlock because first 10 producers could go on wait, suspending all 10 threads of the Core. When the queue is full? I'm not sure I understood well the documentation, because Executors.newCachedThreadPool() seems to create a new Worker until maxPoolSize is reached and THEN it sends task to queue. I'm a little confused. Thank you
