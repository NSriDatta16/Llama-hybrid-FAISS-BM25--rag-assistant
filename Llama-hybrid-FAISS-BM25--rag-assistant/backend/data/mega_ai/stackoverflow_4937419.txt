[site]: stackoverflow
[post_id]: 4937419
[parent_id]: 4935308
[tags]: 
Idea #1 One answer immediately springs to mind: Change iText. Specifically, Font.getCalculatedBaseFont , line 644. String fontName = BaseFont.HELVETICA; Actually, I don't think that will work unless you also change the way fonts are created... Line 712 cfont = BaseFont.createFont(fontName, encoding, false); Unless a font is one of the "Base 14", you have to provide a path to the font's file rather than a simple font name. Another option: XSLT Transform the input such that you add a font definition to the style of any node that contains text. Finally: register a fontProvider You can sit on top of FontFactoryImp and simply map blank strings to your font of choice. class DefaultFontProvider extends FontFactoryImp { private String default; public DefaultFontProvider(String def) { default = def; } // I believe this is the correct override, but there are quite a few others. public Font getFont(String fontname, String encoding, boolean embedded, float size, int style, BaseColor color, boolean cached) { if (fontName == null || fontName.size() == 0) { fontName = default; } return super.getFont(fontName, encoding, embedded, size, style, color, cached); } } Map providers = new HashMap This strikes me as the most Technically Sound idea. It's written for the freshly released 5.0.6 version of iText. Previous versions set the font provider via setInterfaceProps() instead. "Providers" is more of a name change than anything else at this point. I suspect that will no longer be the case in 5.1. PS: FontFactoryImp has two public members you might be interested in as well: defaultEncoding and defaultEmbedding . You should be able to tweak the defaultEncoding to something more Polish-friendly. I recommend "Identity-H" (aka BaseFont.IDENTITY_H ), but that does force all your fonts to be embedded subsets, thus ignoring defaultEmbedding , and making your files a bit larger than if the fonts weren't embedded at all. Two possible problems: Explicitly requesting "Helvetica". To be sure, I suggest stuffing System.out.println(("Requested font: " + fontName); into the beginning of your getFont function. This will let you see all the font calls, and make sure you have all your fonts replaced correctly. If that's the case, you can just test for it and replace it with _default . Your fontFactory might not be finding anything for "Arial Bold" and so falls back to the default (Helvetica again). I think you need to call dfp.registerDirectories() . That'll ferret out all the fonts on several different OS's, and let you reference them all by font name rather than by path (which is what a FontFactoryImp is supposed to do in the first place).
