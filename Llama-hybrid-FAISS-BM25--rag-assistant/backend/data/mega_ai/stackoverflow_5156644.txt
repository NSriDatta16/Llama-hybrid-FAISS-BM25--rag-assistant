[site]: stackoverflow
[post_id]: 5156644
[parent_id]: 5156084
[tags]: 
I find its easier to deal with pagination by abstracting the concern away from the query. Here is the source for the solution I use. This will make your code much more straight-forward and transform all the paging logic into a single, simple call to ToPagedList(int index, int pageSize) . I'm not 100% sure, but I believe I originally ganked this source from Rob Conery's Kona project (his blog is at http://blog.wekeroad.com/ ). The Helper Class public static class Pagination { public static PagedList ToPagedList (this IEnumerable source, int index) { return new PagedList (source.AsQueryable(), index, 10); } public static PagedList ToPagedList (this IEnumerable source, int index, int pageSize) { return new PagedList (source.AsQueryable(), index, pageSize); } public static PagedList ToPagedList (this IQueryable source, int index, int pageSize) { return new PagedList (source, index, pageSize); } public static PagedList ToPagedList (this IQueryable source, int index) { return new PagedList (source, index, 10); } } The Interfaces public interface IPagedList : IList , IPagedList { } public interface IPagedList { int TotalCount { get; set; } int TotalPages { get; set; } int PageIndex { get; set; } int PageSize { get; set; } bool IsPreviousPage { get; } bool IsNextPage { get; } } The PagedList Implementation public class PagedList : List , IPagedList { public PagedList(IQueryable source, int index, int pageSize) { int total = source.Count(); this.TotalCount = total; this.TotalPages = total/pageSize; if (total%pageSize > 0) TotalPages++; this.PageSize = pageSize; this.PageIndex = index; this.AddRange(source.Skip(index*pageSize).Take(pageSize).ToList()); } public PagedList(IEnumerable source, int total, int index, int pageSize) { this.TotalCount = total; this.TotalPages = total/pageSize; if (total%pageSize > 0) TotalPages++; this.PageSize = pageSize; this.PageIndex = index; this.AddRange(source); } #region IPagedList Members public int TotalPages { get; set; } public int TotalCount { get; set; } public int PageIndex { get; set; } public int PageSize { get; set; } public bool IsPreviousPage { get { return (PageIndex > 0); } } public bool IsNextPage { get { return (PageIndex*PageSize)
