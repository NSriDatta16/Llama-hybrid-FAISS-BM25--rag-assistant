[site]: stackoverflow
[post_id]: 962040
[parent_id]: 962033
[tags]: 
See this article on alistapart.com . (Ed: The article has been updated since originally linked) self is being used to maintain a reference to the original this even as the context is changing. It's a technique often used in event handlers (especially in closures). Edit: Note that using self is now discouraged as window.self exists and has the potential to cause errors if you are not careful. What you call the variable doesn't particularly matter. var that = this; is fine, but there's nothing magic about the name. Functions declared inside a context (e.g. callbacks, closures) will have access to the variables/function declared in the same scope or above. For example, a simple event callback: function MyConstructor(options) { let that = this; this.someprop = options.someprop || 'defaultprop'; document.addEventListener('click', (event) => { alert(that.someprop); }); } new MyConstructor({ someprop: "Hello World" });
