[site]: stackoverflow
[post_id]: 566503
[parent_id]: 566422
[tags]: 
I believe you are asking of how would you implement a string object. For performance reasons, you would want to keep the memory allocated for the characters in the string as a single block. This would speed up the operations performed on all the elements - case change, copy, length calculation, indexof and so on. It will also make it easier to implement operations that work on the start or the end of the string - trim, substring and so on. There are certain operations where a data structure like linked list would make it easier to implement, like insert or delete of a character/substring. However, given the ratio of the memory overhead to maintain such data structure to the average string length, the cost outweighs any potential gains. Whether a string should be immutable or not is dictated by two considerations: do you give direct access to the memory storage or if all operations are encapsulated in a class? is your memory allocation managed by the runtime or you have to manage it yourself? The traditional C++ approach is to give direct access to the underlying memory to the code that uses the string object. This makes a lot of sense, since the memory is allocated and managed by the client code anyway, so giving direct access to it offers the best performance. The drawback is that any operation that changes the length of the string usually leads to reallocating the memory. There are smart string classes that impelemnt their own memory manager in order to deal with this problem, like the ATL's CString. The C# approach is to encapsulate the underlying memory in the object and make the string immutable. This allows for the memory to be managed by the CLR and the objects are garbage collected by the same rules that apply to any other object. There's a small perf penalty because of that, but the benefits of the simplified usage and the ability to offer stable implementation of fairly complex operations outweigh the cost to the perf. Plus, there's the accompanying StringBuilder class that offers the some of the advantages of direct access to the memory by prealocating bigger buffer and mutating the instance in it until it's finalized to a String instance.
