[site]: stackoverflow
[post_id]: 3560539
[parent_id]: 3555862
[tags]: 
The mappings look correct and it would have been interesting to show the code where you actually try to persist the ServiceProvider instance. In particular, I would pay a special attention on the various bidirectional associations to make sure you set "the link on both sides" correctly before to persist. You might actually want to create link management methods for this, for example in ServiceProvider : @Entity public class ServiceProvider implements Serializable{ private Long id; private Set businessLocations = new HashSet (); @Id @GeneratedValue public Long getId() { return id; } public void setId(Long id) { this.id = id; } @OneToMany(mappedBy="serviceProvider", targetEntity=BusinessLocation.class, cascade=CascadeType.ALL, fetch=FetchType.EAGER) public Set getBusinessLocations() { return businessLocations; } public void setBusinessLocations(Set businessLocations) { this.businessLocations = businessLocations; } public void addToBusinessLocations(BusinessLocation businessLocation) { this.getBusinessLocations().add(businessLocation); businessLocation.setServiceProvider(this); } public void removeFromBusinessLocations(BusinessLocation businessLocation) { this.getBusinessLocations().remove(businessLocation); businessLocation.setServiceProvider(null); } } Same thing in State . Not setting both sides of the links correctly might be the cause of the problem.
