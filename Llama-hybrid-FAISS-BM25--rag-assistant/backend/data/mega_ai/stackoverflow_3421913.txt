[site]: stackoverflow
[post_id]: 3421913
[parent_id]: 3398701
[tags]: 
After a lot of testing, I still wasn't able to solve the issue with ManagedInstallerClass. What I got instead is a workaround of the problem. So, instead of calling: ManagedInstallerClass.InstallHelper(arguments.ToArray()); now I call callInstallUtil(arguments.ToArray()); the function is defined: public static string InstallUtilPath = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory(); private bool callInstallUtil(string[] installUtilArguments) { Process proc = new Process(); proc.StartInfo.FileName = Path.Combine(InstallUtilPath, "installutil.exe"); proc.StartInfo.Arguments = String.Join(" ", installUtilArguments); proc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden; proc.StartInfo.RedirectStandardOutput = true; proc.StartInfo.UseShellExecute = false; proc.Start(); string outputResult = proc.StandardOutput.ReadToEnd(); proc.WaitForExit(); // ---check result--- if (proc.ExitCode != 0) { Errors.Add(String.Format("InstallUtil error -- code {0}", proc.ExitCode)); return false; } return true; } Multiple calls of this function for different services yield no errors, so I guess this works for me :) - it's not as elegant as the ManagedInstallerClass call, but it gets the job done.
