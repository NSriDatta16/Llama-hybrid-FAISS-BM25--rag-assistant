[site]: stackoverflow
[post_id]: 1050563
[parent_id]: 1050189
[tags]: 
In my view, the data-context hides squarely behind a repository interface - allowing us to swap the implementation if we like (LINQ-to-SQL / EF / NHibernate / LLBLGen / etc). As such, the specifics of the data-context(s) are largely an implementation detail. As long as it passes the unit tests ;-p Huge is rarely a good idea; tiny is rarely useful... I tend to break the sytem down into related chunks (normally related to different repository interfaces), and think of it at that level. I have some other thoughts here: Pragmatic LINQ - although I'd happily defer to any wisdom from Frans etc.
