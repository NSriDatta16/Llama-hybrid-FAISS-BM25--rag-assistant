[site]: stackoverflow
[post_id]: 2749629
[parent_id]: 2746098
[tags]: 
Local variables declared within a block are scoped to that block. So, is it the "best practice" to have the try statement wrapping all portions of the code that are going to access variables initialized in it? In general, you should try to minimize the scope of your variables to make them as narrow as possible. This is covered in Effective Java and Code Complete , among others. This sort of code is a recipe for NullPointerExceptions : FileReader in = null; try { in = new FileReader(filename); } catch(IOException e) { //handle error, but now what? } // Code that needs "in", but what if it is null // because of a FileNotFoundException? // This code is junk. Virtually all local variable declarations should include an assignment. FileReader in = new FileReader(filename); If you follow this rule of thumb, you'll end up with better code. // .. lots more code If you have giant try/catch statements, it sounds like your methods are too big. This is a code organization issue rather than something to do with try/catch specifically. public static void main(String[] args) { if (args.length As an aside: Note that Java arrays start at index 0 , not 1 The FileReader is convenient while learning, but should generally be avoided due to encoding issues; this is unlikely to be a problem until the code leaves your machine
