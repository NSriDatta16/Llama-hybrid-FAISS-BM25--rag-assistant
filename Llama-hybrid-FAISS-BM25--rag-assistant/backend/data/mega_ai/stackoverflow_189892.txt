[site]: stackoverflow
[post_id]: 189892
[parent_id]: 
[tags]: 
Best practices for handling variable size arrays in c / c++?

If I have an array of a fixed size depending on how it is defined and used, I typically use one of two ways to reference it. Array type 1: Since it is a fixed size based on a define, I just use that define in all my loops referencing it. #define MAXPLAYERS 4 int playerscores[MAXPLAYERS]; for(i=0;i Array type 2: Since this array can grow as items are added to it, I use the sizeof to count the number of entries in it. The size would be converted to a constant by the compiler so there shouldn't be any runtime penalty to doing it this way. typedef struct { fields.... }MYSTRUCT_DEF; MYSTRUCT_DEF mystruct[]={ {entry 1}, {entry 2}, {entry 3...n} }; for(i=0;i Is there a more elegant solution to handling processing of arrays without going past the end or stopping too early. Thoughts? Comments?
