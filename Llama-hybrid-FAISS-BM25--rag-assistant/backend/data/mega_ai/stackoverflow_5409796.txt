[site]: stackoverflow
[post_id]: 5409796
[parent_id]: 
[tags]: 
Is it a test smell to mix in real implementation and mocks?

I have a consumer class responsible for consuming a string and deciding what to do with it. It can either parse and insert the parse data in a database or notify an administrator. Below is my implementation. public void Consume(string email) { if(_emailValidator.IsLocate(email)) { var parsedLocate = _parser.Parse(email); // Insert locate in database } else if(_emailValidator.IsGoodNightCall(email)) { // Notify email notifying them that a locate email requires attention. _notifier.Notify(); } } Below is my unit test. // Arrange var validator = new EmailValidator(); var parser = new Mock (); var notifier = new Mock (); var consumer = new LocateConsumer(validator, parser.Object, notifier.Object); var email = EmailLiterals.Locate; // Act consumer.Consume(email); // Assert parser.Verify(x => x.Parse(email), Times.Once()); Is it code smell to mix mocks and real implementation in unit tests? Also, how do always having to test whether method abc() always ran once? It doesn't seem right that once I add a new unit test every time I add a function inside my if block. Seems like if I continue adding to my Consume method I'm create a trap. Thank you.
