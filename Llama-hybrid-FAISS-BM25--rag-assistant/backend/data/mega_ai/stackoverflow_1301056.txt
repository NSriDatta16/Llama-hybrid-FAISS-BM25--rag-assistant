[site]: stackoverflow
[post_id]: 1301056
[parent_id]: 
[tags]: 
Looking for the most elegant code dispatcher

I think the problem is pretty common. You have some input string, and have to call a function depending on the content of the string. Something like a switch() for strings. Think of command line options. Currently I am using: using std::string; void Myclass::dispatch(string cmd, string args) { if (cmd == "foo") cmd_foo(args); else if (cmd == "bar") cmd_bar(args); else if ... ... else cmd_default(args); } void Myclass::cmd_foo(string args) { ... } void Myclass::cmd_bar(string args) { ... } and in the header class Myclass { void cmd_bar(string args); void cmd_foo(string args); } So every foo and bar I have to repeat four (4!) times. I know I can feed the function pointers and strings to an static array before and do the dispatching in a loop, saving some if...else lines. But is there some macro trickery (or preprocessor abuse, depending on the POV), which makes is possible to somehow define the function and at the same time have it update the array automagically? So I would have to write it only twice, or possibly once if used inline? I am looking for a solution in C or C++.
