[site]: crossvalidated
[post_id]: 46406
[parent_id]: 46334
[tags]: 
Generally I find more than two or three lines on a single facet of a plot starts to be hard to read (although I still do it all the time). So this is an interesting example of what to do when you have something that conceptually could be a 100 facet plot. One possible way is to draw all 100 facets but instead of trying to get them all on the page at once, looking at them one at a time in an animation. We've actually used this technique at my work - we originally made the animation showing 60 different line plots as background for an event (the launch of a new data series), then found that doing so we actually picked up some features of the data that hadn't been visible in faceted plots with 15 or 30 facets per page. So here is an alternative way of presenting the raw data, before you start removing the user and typical time effects as recommended by @whuber. This is presented just as an additional alternative to his presentation of the raw data - I fully recommend that you then proceed with analysis along lines such as those he suggests. One way of getting around this problem is to produce the 100 (or 240 in @whuber's example) time series plots separately and knit them together into an animation. The code below will produce 240 separate images of this sort and then you can use free movie making software to turn that into a movie. Unfortunately the only way I could do this and keep acceptable quality was a 9MB file, but if you don't need to send it across the internet that may not be a problem and anyway I'm sure there's ways around that with a bit more animation savvy. The animation package in R could be useful here (lets you do it all in a call from R) but I've kept it simple for this illustration. I have made the animation such that it draws each line in heavy black then leaves a pale semi-transparent green shadow behind so the eye gets a gradual picture of the accumulating data. There are both risks and opportunities in this - the order that the lines are added will leave a different impression, so you should consider making it meaningful in some way. Here are some of the stills from the movie, which uses the same data that @whuber generated: # ---------------------------- Data generation - by @whuber ----------------------------# n.users 1){apply(observed[1:i,], 1, function(a) {lines(a, col=rgb(0,100,0,50,maxColorValue=255))})} lines(observed[i,], col="black", lwd=2) abline(v = i.break, col="Gray") # Mark the last period before a change text(1,60,i) dev.off() } ## # Then proceed to further analysis eg as set out by @whuber
