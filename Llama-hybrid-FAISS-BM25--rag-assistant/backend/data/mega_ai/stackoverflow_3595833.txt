[site]: stackoverflow
[post_id]: 3595833
[parent_id]: 3585736
[tags]: 
It's not your code, I believe your result. In our own experiments, we found that retrieval and (especially) storage are very expensive operations in terms of CPU quota. We noted that: Indexes are expensive. If you're writing more than reading, be stingy with your indexes. Make sure you know about the indexed=False attribute on model properties, and pay close attention to what gets auto-generated into index.yaml. If you're reading more than you're writing, then lots of multi-indexes may make sense. Use memcache where you can. Use entity groups, if they make sense. The app engine API gives you tools that improve efficiency. They matter a lot. If you're writing 100 rows, using a single bulk put() vs. 100 individual put() calls will greatly reduce CPU use. If your app is going to frequently perform large reads as you've described, you may wish to choose a different solution (e.g., a VPS like Slicehost or Linode) or a different data model. Each app will have different needs, WRT disk, cpu, memory, etc, so I leave the back-of-the-envelope calculations as an exercise for the reader. HTH!
