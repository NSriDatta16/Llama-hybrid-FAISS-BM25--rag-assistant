[site]: stackoverflow
[post_id]: 4416395
[parent_id]: 4416335
[tags]: 
The simplest way would be to use NSAppleScript NSAppleScript *script = [[NSAppleScript alloc] initWithSource:@"tell application \"Adium\" to go away with message \"Zoned in for Maths.\"" ]; For a more powerful way of accessing scripting, use Scripting Bridge . Scripting Bridge requires at least the 10.5 SDK. You first need to prepare your app. Use the sdef and sdp command line utilities to generating header files for the applications you wish to control (see " Preparing to Code " for details). Add the generated header to your project. Add the ScriptingBridge framework to your project. After that, you can use Objective-C calls to control the other application. After that, you can use Objective-C to send scripting commands to the application. AdiumApplication *adium = [SBApplication applicationWithBundleIdentifier:@"com.adiumX.adiumX"]; for (AdiumAccount* acct in [adium accounts]) { [acct goAwayWithMessage:(AdiumRichText *)@"Zoned in for Maths."]; } Status messages are Adium's rich text type (which is NSTextStorage under the hood), but it's convertable from plain text, so passing an NSString rather than a true AdiumRichText should work fine. There are a few hoops to jump through. For example, you can't create scripting objects in the target application by using its ObjC classes directly; you must use classForScriptingClass: to get the class, which you can then use to create objects as normal (i.e. alloc and init , initWithProperties &c.). // creating an AdiumContactGroup NSDictionary *props = [NSDictionary dictionaryWithObjectsAndKeys: @"mathies",@"name", nil ]; AdiumContactGroup *mathies= [[[[adium classForScriptingClass:@"contact group"] alloc] initWithProperties:props] autorelease]; if (mathies) { [[adium contactGroups] addObject:mathies]; } Note that other languages (such as Python and Ruby) also have Scripting bindings.
