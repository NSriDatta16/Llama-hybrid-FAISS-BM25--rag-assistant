[site]: stackoverflow
[post_id]: 3241750
[parent_id]: 3241561
[tags]: 
80M rows is not big. You just need to learn how to design and query data of that size. Which might include normalization, denormalization, clustering, indexing but very often the tradeoffs are deeper that they seem. Adding indexes can actually hurt performance even for reading , for instance, if the optimizer is not good enough or decides upon the wrong statistics. I suggest you read Refactoring SQL Applications because it approaches the problem not from a "DB tuner" but from a developer's point of view. The book is by the author of The Art of SQL and compares Oracle, SQL Server and MySQL under many scenarios. It's pragmatic and comes with some useful graphs. I would stay away from MySQL unless forced to. Postgres 9.0 rocks according to several definitions of "rock" but I would still use 8.4 in production for a few months. And if you want people to help you with this table, provide as many details as possible: schema, indexes, data distribution, pattern of usage, etc.
