[site]: stackoverflow
[post_id]: 1451043
[parent_id]: 1451009
[tags]: 
Quoting myself for an explanation of the first example: JavaScript's scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function. After the loop terminates, the function-level variable i has the value 5, and that's what the inner function 'sees'. In the second example, for each iteration step the outer function literal will evaluate to a new function object with its own scope and local variable num , whose value is set to the current value of i . As num is never modified, it will stay constant over the lifetime of the closure: The next iteration step doesn't overwrite the old value as the function objects are independant. Keep in mind that this approach is rather inefficient as two new function objects have to be created for each link. This is unnecessary, as they can easily be shared if you use the DOM node for information storage: function linkListener() { alert(this.i); } function addLinks () { for(var i = 0; i
