[site]: stackoverflow
[post_id]: 4082460
[parent_id]: 
[tags]: 
WPF: NodeChanged event not firing

I have a WPF app that binds a DataGrid to an XML document using XmlDataProvider. Everything works fine except that I'm trying to "save"/write to XML file on NodeChanged event, instead of having a button or other user-triggered mechanism. Unfortunately, NodeChanged handler that I created is not being picked up. Would appreciate any help to figure out why it's not fired. XAML: Code-behind: namespace WpfApplication1 { public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); string appPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase); MyData.Source = new Uri(appPath + "/Data.xml"); } private void SaveButton_Click(object sender, RoutedEventArgs e) { string source = MyData.Source.LocalPath; MyData.Document.Save(source); } private void Grid_Loaded(object sender, RoutedEventArgs e) { MyData.Document.NodeChanged += new XmlNodeChangedEventHandler(Document_NodeChanged); } void Document_NodeChanged(object sender, XmlNodeChangedEventArgs e) { MessageBox.Show("Node changed"); } } } XML data file: To reproduce, you can just paste the above into a new WPF app, name XML data file Data.xml, place it into bin/Debug of the project, and add it to the project as "existing item". UPDATE Thanks Robert for pointing out the issue! Here's an even more interesting situation. If you just add a LayoutUpdated event handler to the MainWindow to my sample code as below, you will get very weird behavior in that NodeChanged event will actually be fired if a totally unrelated MessageBox is displayed: public partial class MainWindow : Window { private bool event_activated = false; public MainWindow() { InitializeComponent(); string appPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase); MyData.Source = new Uri(appPath + "/Data.xml"); } private void SaveButton_Click(object sender, RoutedEventArgs e) { string source = MyData.Source.LocalPath; MyData.Document.Save(source); } private void Grid_Loaded(object sender, RoutedEventArgs e) { MyData.Document.NodeChanged += new XmlNodeChangedEventHandler(Document_NodeChanged); } private void Document_NodeChanged(object sender, XmlNodeChangedEventArgs e) { MessageBox.Show("Node changed"); } private void Window_LayoutUpdated(object sender, EventArgs e) { if (!event_activated) { event_activated = true; MessageBox.Show("LayoutUpdated"); //
