[site]: stackoverflow
[post_id]: 1067336
[parent_id]: 1066763
[tags]: 
In Objective-C, method names are properly called "selectors", and can be composed of one or more parts. If the method accepts one or more parameters, each part of the selector is of the form: selectorFragmentName:(ParameterType)parameterName For example, you will see method declarations like this one from NSColor: + (NSColor*) colorWithDeviceRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha; In this case, the method (selector) name is colorWithDeviceRed:green:blue:alpha: — the rest signifies the scope (- for instance method, + for class), return type (NSColor* here), and the type and name for each parameter. CRITICAL! Unlike most other languages, you cannot overload methods in Objective-C — this means you can't have two methods with the same selector but different number of parameters and/or order of types. For example, you can't have these two methods: - (id) initWithObjects:(NSArray*)anArray; - (id) initWithObjects:(NSSet*)aSet; Since the selector name for both is initWithObjects: Objective-C does not distinguish between the two. Selector names are translated into unique integers for extremely fast lookup, which is beneficial in the dynamic runtime, but a letdown for people that expect method overloading. The most common case for overloading in languages like Java is constructors, which is a non-issue in Objective-C because of the alloc/init pattern. For other methods, choosing unique names avoids the problem. From a style standpoint, since the parameters are interspersed in the method selector, Objective-C programmers (and Xcode) will often align the parts of long selectors at the colon for readability, both for the declaration/definition: + (NSColor*) colorWithDeviceRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha; and invocation: NSColor* myColor = [NSColor colorWithDeviceRed:0.5 green:0.6 blue:0.7 alpha:0.9]; The whitespace is irrelevant to the compiler. If it makes it easier for you to read and understand, definitely use it.
