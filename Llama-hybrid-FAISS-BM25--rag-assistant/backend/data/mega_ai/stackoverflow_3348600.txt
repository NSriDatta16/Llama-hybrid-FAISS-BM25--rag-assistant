[site]: stackoverflow
[post_id]: 3348600
[parent_id]: 3348089
[tags]: 
My company has been doing something similar with our code base (C rather than C#) that totals about a million lines. The steps have gone something like this: 1) Write some automated tests like you describe that do system level tests. 2) Implement the rule that new code shall have a unit test. 3) When an area has a few bugs against it the process of fixing those bugs should include writing a basic unit test. The point is that 3 shouldn't require a complete unit test (if it's easier people will do it). If you move from 0% test coverage to 40% coverage of a particular module then you've made great progress. Though 6 months in you may only be up to 5% of the total code base that 5% is the code that is changing the most and where you are most likely to introduce bugs. The code I work on now is about 60% covered by integration tests and 15% (by line) covered by unit tests. That doesn't seem like a lot but it does provide significant value and our development effort has benefited from it. edit: in response to one of the other comments the current set of integration tests we run take about 14 hours at the moment. We're now looking at running some in parallel to speed them up.
