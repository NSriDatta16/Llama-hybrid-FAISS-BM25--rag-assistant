[site]: stackoverflow
[post_id]: 1923769
[parent_id]: 1923409
[tags]: 
Encapsulation The OO principle of encapsulation states that you object should not expose its state to the outside. If your object epxose it internal information it breaks the encapsulation. What is still OK according to OO design is to pass the search criterion to the object and let it decides whether they match. interface IVehicle{ bool doesMatch( Map searchCriterion ) } You can have an interator on all vehicles and retrieve the ones which match whithout breaking the encapsulation. Particular implementation of vehicles can still be reimplemented as desired. Visitor Otherwise, I would suggest you look at the Visitor pattern. The idea then is to traverse all the object and have an extra class handle the treatment for each specific type. This also breaks pure encapsulation (because the object need to expose its data to the visitor), but it's much elegant. class VehicleSearchVisitor { Map searchCriterion; void visit( Car car ) {...} void visit( Bike bike ) { ... } .... } Meta-programming The idea of object which are self-describing is another concept, which is called meta-programming. The presentation layer then introspect other object to know how to handle them. This traditionally is considered an advanced OO technique. You could could create custom annotations to describe the field of your class, so that the presentation layer can dynamically render the appropriate label. The same idea is for instance used with hibernate annotations. Meta-programming need to be done carefully otherwise you run into other issue. Insteanceof Use insteanceof is also a form of introspection (because you ask the object for its class) and is usually discouraged. Not because it is wrong in itself, but because it tend to be abused. Whenever possible, rely on traditional OO principles. Using instanceof abusively is a code smell . All in all, I would recommend to use a visitor for the search, and to not use meta-programming for the presentation layer and to instead create one simple page per type of vehicle.
