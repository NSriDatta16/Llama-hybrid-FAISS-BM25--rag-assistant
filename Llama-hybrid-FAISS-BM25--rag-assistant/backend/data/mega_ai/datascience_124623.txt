[site]: datascience
[post_id]: 124623
[parent_id]: 124553
[tags]: 
Is there any point in using machine learning algorithms on these "well-defined" NP-hard problems (instead of using dynamical programming)? In short, yes. Consider that for whatever problem you can generate data (in this context, instances of the problem), and that the "classical" algorithms (**) that solve them have hand-made heuristics you can likely employ ML to lean from data either an improved heuristic or the whole algorithm. (**I refer to classical as non-ML algos.) To understand more, I suggest this survey . ML allows to map a given state (or partial solution) of the problem to a certain quantity that can be a number or an improved solution. A popular way to solve NP problems using ML is to leverage Reinforcement learning (read this ) which, ideally, can find an approximated solution that is very close to the optimal by being guided by a reward that is a way to evaluate the goodness or badness of the current solution. I also found some more works on graphs ( here and here ). Anyway, I'm not super expert on this particular sub-field so I'm not completely sure if with ML/RL you can at all find the optimum for a NP-hard or NP-complete problem, in reasonable time (although with a long training), but for sure you can devise a relaxation of the problem and then use ML to solve it without designing a specific algorithm by hand. If I randomly run into an NP-hard or NP-complete problem for which I have to design an efficient, but accurate algorithm, usually which method is most advised for tackling the problem? I think that with ML, you don't need to distinguish between NP-hard and NP-complete nor you devise the algo since it's learned from data.
