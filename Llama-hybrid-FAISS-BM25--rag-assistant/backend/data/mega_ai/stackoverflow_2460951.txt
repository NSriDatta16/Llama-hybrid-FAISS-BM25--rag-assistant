[site]: stackoverflow
[post_id]: 2460951
[parent_id]: 
[tags]: 
casting Collection to Collection

I'm sure this has been answered before, but I really cannot find it. I have a java class SomeClass and an abstract class SomeSuperClass . SomeClass extends SomeSuperClass . Another abstract method has a method that returns a Collection . In an implementation class, I have a Collection myCollection I understand that I cannot just return myCollection , because Collection does not inherit from Collection . Nevertheless, I know that everything in myCollection is a SomeSuperClass because after all, they're SomeClass objects which extend SomeSuperClass . How can I make this work? I.e. I want public class A { private Collection myCollection; public Collection getCollection() { return myCollection; //compile error! } } The only way I've found is casting via a non-generic type and getting unchecked warnings and whatnot. There must be a more elegant way, though? I feel that also using Collections.checkedSet() and friends are not needed, since it is statically certain that the returned collection only contains SomeClass objects (this would not be the case when downcasting instead of upcasting, but that's not what I'm doing). What am I missing? Thanks!
