[site]: stackoverflow
[post_id]: 2451173
[parent_id]: 2451042
[tags]: 
Chrome 4 raises an error too (INVALID_STATE_ERR: DOM Exception 11). You'll see the error if you open the Chrome Javascript Console. Firefox 3.6 also raises an error, but seems to silently discard it (it's not visible in the Error Console). If you wrap the function in a try..catch block you will see the error message (Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE)): pageRequest.onreadystatechange = function() { try { alert('pageRequest.readyState: ' + pageRequest.readyState + '\npageRequest.status: ' + pageRequest.status); } catch (e) { alert(e); } } The first two times onreadystatechange is invoked in Internet Explorer, readyState is 1 (OPENED). In this state, the request is being sent, but the response has not yet been received. The error is raised when calling the status property in this readyState because there is no HTTP response to read the status from. This behaviour is compatible with old versions of the W3C XMLHttpRequest specification , which state: If the status attribute is not available it MUST raise an exception. It MUST be available when readyState is 3 (Receiving) or 4 (Loaded). When available, it MUST represent the HTTP status code (typically 200 for a successful connection). Exceptions on retrieval DOMException INVALID_STATE_ERR SHOULD be raised if this attribute is accessed when readyState has an inappropriate value. Newer versions of the specification, however, state that status must always return a value: The status attribute must return the result of running these steps: If the state is UNSENT or OPENED return 0 and terminate these steps. If the error flag is true return 0 and terminate these steps. Return the HTTP status code.
