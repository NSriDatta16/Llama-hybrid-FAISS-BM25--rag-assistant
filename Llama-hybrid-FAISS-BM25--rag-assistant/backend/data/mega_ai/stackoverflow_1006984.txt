[site]: stackoverflow
[post_id]: 1006984
[parent_id]: 1006904
[tags]: 
See What is Truth? for more on boolean values in Perl. (If you're coming from another language, you may be in for a few other surprises, so it's worth a read.) Here's a key bit from the article: defined and undef are good for testing and setting scalars. Don't try them with arrays, though. Presently, defined(@array) returns true if Perl has allocated storage for array something that is weird and not useful to the average programmer. To return an array to its initial state, we say: @array = (); # good To say @array = undef is to make @array contain a one-element list, with the single element being the scalar value undef . This is hardly ever what we want. One other tip: localize your variables with my : my @array = ( #whatever );
