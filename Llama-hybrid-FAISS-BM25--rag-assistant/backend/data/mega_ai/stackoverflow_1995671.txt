[site]: stackoverflow
[post_id]: 1995671
[parent_id]: 1995472
[tags]: 
Intel Syntax / AT&T Syntax With x86 in particular, the first assemblers were from Intel and then largely-compatible assemblers from Microsoft formed one branch. These assemblers organize source and destination operands right to left and have an unusual (and to my eyes, kind of wacky) abstraction layer that uses a single mnemonic for 8, 16, and 32-bit ops and then derives the actual machine opcode to use based on properties of the operand. Modifiers exist (on operands) to force a particular size. But Unix was also important and it had a completely different assembler line with different traditions and conventions. The original Unix vendor was AT&T, which owned the intellectual property developed at Bell Labs. A series of BSD projects and then Linux continued with this tradition. These assemblers historically process operands left to right, have a spare design optimized for speed, and when used by humans they generally use cpp for macros and conditionals, even if the assembler also has parallel features. These days you are probably using VS on MS or Gnu on Linux or Mac, but this is why we still say AT&T vs Intel. The GNU assembler has an option to assemble both ways, although it's still really in the AT&T camp.
