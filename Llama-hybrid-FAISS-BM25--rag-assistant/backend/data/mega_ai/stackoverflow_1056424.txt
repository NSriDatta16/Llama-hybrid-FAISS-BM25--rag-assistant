[site]: stackoverflow
[post_id]: 1056424
[parent_id]: 1056411
[tags]: 
I should have read more on existing questions in stack overflow. C++ Passing Variable Number of Arguments is a similar question. Mike F has the following explanation: There's no way of calling (eg) printf without knowing how many arguments you're passing to it, unless you want to get into naughty and non-portable tricks. The generally used solution is to always provide an alternate form of vararg functions, so printf has vprintf which takes a va_list in place of the .... The ... versions are just wrappers around the va_list versions. This is exactly what I was looking for. I performed a test implementation like this: void Error(const char* format, ...) { char dest[1024 * 16]; va_list argptr; va_start(argptr, format); vsprintf(dest, format, argptr); va_end(argptr); printf(dest); }
