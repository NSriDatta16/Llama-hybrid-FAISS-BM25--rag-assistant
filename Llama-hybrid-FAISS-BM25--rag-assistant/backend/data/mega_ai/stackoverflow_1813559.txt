[site]: stackoverflow
[post_id]: 1813559
[parent_id]: 
[tags]: 
.NET/C#: Using RSS.NET with Stack Overflow Feeds: How To Handle Special Properties of RSS Items?

I'm writing a Stack Overflow API wrapper , currently at http://soapidotnet.googlecode.com/ . I have a few questions about parsing SO RSS feeds. I've chosen to use RSS.NET to parse the RSS, but I have a few questions about my code (which I have provided further down in this post). My Questions: First of all, am I parsing those attributes correctly ? I have a class named Question, which has those properties. Next, how can I parse the RSS property (used for # of votes)? I'm not sure how RSS.NET lets us do that. As far as I understand, it's a element with a custom namespace. Finally, do I have to add all the properties manually, like currently in my code? Is their some sort of deserialization that I can use? Code: Below is my current code for parsing recent question feeds: /// /// Utilises recent question feeds to obtain recently updated questions on a certain site. /// /// Trilogy site in question. /// A list of objects of type Question, which represents the recent questions on a trilogy site. public static List GetRecentQuestions(TrilogySite site) { List RecentQuestions = new List (); RssFeed feed = RssFeed.Load(string.Format("http://{0}.com/feeds",GetSiteUrl(site))); RssChannel channel = (RssChannel)feed.Channels[0]; foreach (RssItem item in channel.Items) { Question toadd = new Question(); foreach(RssCategory cat in item.Categories) { toadd.Categories.Add(cat.Name); } toadd.Author = item.Author; toadd.CreatedDate = ConvertToUnixTimestamp(item.PubDate).ToString(); toadd.Id = item.Link.Url.ToString(); toadd.Link = item.Link.Url.ToString(); toadd.Summary = item.Description; //TODO: OTHER PROPERTIES RecentQuestions.Add(toadd); } return RecentQuestions; } Here is the code of that SO RSS feed: Top Questions - Stack Overflow most recent 30 from stackoverflow.com 2009-11-28T19:26:49Z http://stackoverflow.com/feeds http://www.creativecommons.org/licenses/by-nc/2.5/rdf http://stackoverflow.com/questions/1813483/averaging-angles-again 0 Averaging angles... Again Lior Kogan 2009-11-28T19:19:13Z 2009-11-28T19:26:39Z &lt;p&gt;I want to calculate the average of a set of angles.&lt;/p&gt; &lt;p&gt;I know it has been discussed before (several times). The accepted answer was &lt;strong&gt;Compute unit vectors from the angles and take the angle of their average&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;However this answer defines the average in a non intuitive way. The average of 0, 0 and 90 will be &lt;strong&gt;atan( (sin(0)+sin(0)+sin(90)) / (cos(0)+cos(0)+cos(90)) ) = atan(1/2)= 26.56 deg&lt;/strong&gt; &lt;/p&gt; &lt;p&gt;I would expect the average of 0, 0 and 90 to be 30 degrees.&lt;/p&gt; &lt;p&gt;So I think it is fair to ask the question again: How would you calculate the average, so such examples will give the intuitive expected answer.&lt;/p&gt; etc. Here is my Question class, if it will help: /// /// Represents a question. /// public class Question : Post //TODO: Have Question and Answer derive from Post { /// /// # of favorites. /// public double FavCount { get; set; } /// /// # of answers. /// public double AnswerCount { get; set; } /// /// Tags. /// public string Tags { get; set; } } /// /// Represents a post on Stack Overflow (question, answer, or comment). /// public class Post { /// /// Id (link) /// public string Id { get; set; } /// /// Number of votes. /// public double VoteCount { get; set; } /// /// Number of views. /// public double ViewCount { get; set; } /// /// Title. /// public string Title { get; set; } /// /// Created date of the post (expressed as a Unix timestamp) /// public string CreatedDate { get { return CreatedDate; } set { CreatedDate = value; dtCreatedDate = StackOverflow.ConvertFromUnixTimestamp(StackOverflow.ExtractTimestampFromJsonTime(value)); } } /// /// Created date of the post (expressed as a DateTime) /// public DateTime dtCreatedDate { get; set; } /// /// Last edit date of the post (expressed as a Unix timestamp) /// public string LastEditDate { get { return LastEditDate; } set { LastEditDate = value; dtLastEditDate = StackOverflow.ConvertFromUnixTimestamp(StackOverflow.ExtractTimestampFromJsonTime(value)); } } /// /// Last edit date of the post (expressed as a DateTime) /// public DateTime dtLastEditDate { get; set; } /// /// Author of the post. /// public string Author { get; set; } /// /// HTML of the post. /// public string Summary { get; set; } /// /// URL of the post. /// public string Link { get; set; } /// /// RSS Categories (or tags) of the post. /// public List Categories { get; set; } } Thanks in advance! Btw, please contribute to the library project! :)
