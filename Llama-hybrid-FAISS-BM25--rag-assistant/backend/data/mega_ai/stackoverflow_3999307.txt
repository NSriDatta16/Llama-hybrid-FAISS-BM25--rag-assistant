[site]: stackoverflow
[post_id]: 3999307
[parent_id]: 3998861
[tags]: 
In stacktraces, you'll also get the line number in the source file. Assuming you have the source, that'll reveal which constant it is. (In eclipse, simply click the line number in the console view to directly navigate to the source). To find the constant name for a class, you could grab the class file for the enum, and disassemble the static initializer. For instance, if you compile: enum PieceColor { Black { @Override public String toString() { return "dark";} }, White { @Override public String toString() { return "light";} } } and then do: javap -c PieceColor you get: static {}; Code: 0: new #13; //class tools/PieceColor$1 3: dup 4: ldc #15; //String Black 6: iconst_0 7: invokespecial #16; //Method tools/PieceColor$1." ":(Ljava/lang/String;I)V 10: putstatic #20; //Field Black:Ltools/PieceColor; 13: new #22; //class tools/PieceColor$2 16: dup 17: ldc #24; //String White 19: iconst_1 20: invokespecial #25; //Method tools/PieceColor$2." ":(Ljava/lang/String;I)V 23: putstatic #26; //Field White:Ltools/PieceColor; But there might be a more elegant method, but if all else fails, this should do the trick.
