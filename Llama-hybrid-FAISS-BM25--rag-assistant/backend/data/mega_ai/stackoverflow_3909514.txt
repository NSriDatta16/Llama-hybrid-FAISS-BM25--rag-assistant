[site]: stackoverflow
[post_id]: 3909514
[parent_id]: 3909359
[tags]: 
I would use upcast , a la [ ] type Foo () = abstract member Value : unit -> string type A (i:int) = inherit Foo () override this.Value () = i.ToString() type B (s) = inherit Foo () override this.Value () = s let bar2 i : Foo = match i with | 1 -> upcast B "one" | _ -> upcast A i You still have to add it to every branch, but this is often preferable to casting to the type, since often the typename is like 20 or 30 characters long ( MyNamespace.ThisThingy ), whereas upcast is just 6 characters. But, briefly, the language rules don't allow for anything else, the types of all the branches have to be equal.
