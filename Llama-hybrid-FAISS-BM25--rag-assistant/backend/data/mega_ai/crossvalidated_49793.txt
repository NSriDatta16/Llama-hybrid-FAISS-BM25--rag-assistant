[site]: crossvalidated
[post_id]: 49793
[parent_id]: 49775
[tags]: 
To my knowledge lmer is not having an "easy" way to address this. Also given that in most cases lmer makes heavy use of sparse matrices for Cholesky factorization I would find it unlikely that it allows for totally unstructured VCV's. To your address your question on "default structure": there is not a concept of default; depending on how you define your structure, you use that structure. Eg. using random effects like : $(1|RandEff_1)+(1|RandEff_2)$ where each random effect has 3 levels will result in unnested and independent random effects and a diagonal random effects VCV matrix of the form: $R = \begin{bmatrix} \sigma_{RE1}^2 & 0& 0 & & 0 & 0 & 0\\ 0 & \sigma_{RE1}^2& 0 & & 0 & 0 & 0\\ 0 & 0& \sigma_{RE1}^2 & & 0 & 0 & 0\\ 0& 0& 0 & & \sigma_{RE2}^2 & 0 & 0 \\ 0 & 0& 0 & & 0 & \sigma_{RE2}^2 & 0\\ 0& 0& 0 & & 0& 0 & \sigma_{RE2}^2 \\\end{bmatrix}$ All is not lost with LME's though: You can specify these VCV matrix attributes "easily" is you are using the R-package MCMCglmm. Look at the CourseNotes.pdf , p.70. In that page it does give some analogues on how lme4 random effects structure would be defined but as you'll see yourself, lmer is less flexible than MCMCglmm in this matter. Half-way there is problem nlme's lme corStruct classes, eg. corCompSymm , corAR1 , etc. etc. Fabian's response in this tread gives some more concise examples for lme4-based VCV specification but as mentioned before they are not as explictly as those in MCMCglmm or nlme.
