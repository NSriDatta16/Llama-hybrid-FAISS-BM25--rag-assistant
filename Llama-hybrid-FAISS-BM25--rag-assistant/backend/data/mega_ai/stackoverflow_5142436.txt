[site]: stackoverflow
[post_id]: 5142436
[parent_id]: 3712017
[tags]: 
To complete the LBushkin answer on NDepend ( Disclaimer: I am one of the developer of this tool ), NDepend can indeed help you on that. The Code LINQ Query (CQLinq) below, actually match methods that... shouldn't provoque any RPC calls but that are reading/writing any fields of any RPC types , or that are reading/writing any properties of any RPC types , Notice how first we define the 4 sets: typesRPC , fieldsRPC , propertiesRPC , methodsThatShouldntUseRPC - and then we match methods that violate the rule. Of course this CQLinq rule needs to be adapted to match your own typesRPC and methodsThatShouldntUseRPC : warnif count > 0 // First define what are types whose call are RDC let typesRPC = Types.WithNameIn("MyRpcClass1", "MyRpcClass2") // Define instance fields of RPC types let fieldsRPC = typesRPC.ChildFields() .Where(f => !f.IsStatic).ToHashSet() // Define instance properties getters and setters of RPC types let propertiesRPC = typesRPC.ChildMethods() .Where(m => !m.IsStatic && (m.IsPropertyGetter || m.IsPropertySetter)) .ToHashSet() // Define methods that shouldn't provoke RPC calls let methodsThatShouldntUseRPC = Application.Methods.Where(m => m.NameLike("XYZ")) // Filter method that should do any RPC call // but that is using any RPC fields (reading or writing) or properties from m in methodsThatShouldntUseRPC.UsingAny(fieldsRPC).Union( methodsThatShouldntUseRPC.UsingAny(propertiesRPC)) let fieldsRPCUsed = m.FieldsUsed.Intersect(fieldsRPC ) let propertiesRPCUsed = m.MethodsCalled.Intersect(propertiesRPC) select new { m, fieldsRPCUsed, propertiesRPCUsed }
