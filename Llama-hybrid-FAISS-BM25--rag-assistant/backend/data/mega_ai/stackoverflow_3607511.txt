[site]: stackoverflow
[post_id]: 3607511
[parent_id]: 
[tags]: 
Information to provide when asking JSF questions If you want good answers to your JSF questions, you will get it more quickly if you immediately include the following information in the question. Which JSF implementation and version are you using? Mojarra or MyFaces ? 1.0.x, 1.1.x, 1.2.x, 2.0.x, 2.1.x, 2.2.x, 2.3.x, 3.0.x or 4.0.x? You can usually find the exact implementation name and version in webapp's startup log or at least in JAR's filename, and/or MANIFEST.MF file. Also mention the exact version of any JSF component/utility library involved in the problem. If you don't mention anything, we will assume the latest version available to date. The difference between JSF 1.x and JSF 2.x/3.x/4.x is too big to be able to give a reliable answer which can cover both versions. Also, each of the JSF implementations/libraries may have its own set of version-specific bugs/quirks so that the answerer can, if necessary, take this into account. In case there is a newer version available, you should try upgrading and then re-test the problem. Any warnings/errors/exceptions in faces messages, or browser console, or server logs? If the application appears to be failing silently, make sure that you've added a tag to your JSF page to avoid that you miss any faces messages. Also, make sure that you've set javax.faces.PROJECT_STAGE to Development in web.xml to avoid that you miss any development warnings/hints. Also, make sure that you have read the browser console (press F12 in Chrome/Firefox23+/IE9+) and server logs from top to bottom. Investigate any line which represents a warning or error or looks otherwise abnormal. When you get an exception, then always include the bottommost root cause of the stack trace along with all "at" lines (all other causes there above are just consequences). Exceptions are generally excellent search keywords. You can just search on the exception type+message and optionally the 1st "at" line of the trace without the parentheses+linenumber to see if it isn't already asked and answered before. Example 1 , example 2 , example 3 . Provide a minimal reproducible example ! Try to isolate the problem as much as possible into the smallest possible but complete copy'n'paste'n'runnable example. As to Java (backing bean) code, you do not need to include imports and getters/setters. You also do not need to include any fields and methods which do not contribute to the actual problem. As to XHTML (view) code, you do not need to include any tags and attributes which do not contribute to the actual problem. You also do not need to include the whole business service layer (EJB/JPA/Spring/DAO/JDBC/etc), just a hardcoded model is sufficient ( otherwise it's not necessarily a JSF related problem ). You should assume that the potential answerer will copypaste the provided Java code into an empty test class and auto-organize imports and autogenerate getters/setters if necessary, and copypaste the provided XHTML code into a of a templateless(!) test file in a blank project with everything set to default (i.e. no or empty XML configuration files!) and using currently latest versions of libraries/server, unless explicitly otherwise mentioned in the question itself (and you should also test it yourself this way beforehand!). Without the above information and/or a proper MCVE, getting answers will depend more on luck (there's no ambiguity nor noise in the question as to possible causes) and educated guesses of the potential answerers (knowing the most common starter's mistakes). You may otherwise risk the question being closed as "Off-Topic, because there's no MCVE or there's only a full code dump", or "Too Broad, because it basically asks us to write code instead of to explain and solve a problem". Minimum requirements Faces 4.0 requires a minimum of Java 11, Servlet 6.0, EL 5.0 and CDI 4.0. Faces 4.0 is part of Jakarta EE 10 . JSF 3.0 requires a minimum of Java 1.8, Servlet 5.0, EL 4.0 and CDI 3.0. JSF 3.0 is part of Jakarta EE 9 . JSF 2.4 does actually not really exist even though this is accidentally present in Maven! See also Upgrading to JSF 2.4 and Do not use org.glassfish Mojarra 2.4.0! You need to pick the currently latest 2.3.x, or JSF 3.x or newer. JSF 2.3 requires a minimum of Java 1.8, Servlet 3.0, EL 3.0 and CDI 1.2. Servlet 4.0 is optional and will enable JSF 2.3 to serve resources via HTTP/2 push. When is used, JSONP 1.1 is required as well. CDI 1.2 is explicitly required because of the @ManagedBean being deprecated. JSF 2.3 is part of Java EE 8 / Jakarta EE 8. JSF 2.2 requires a minimum of Java 1.6, Servlet 3.0 and EL 2.2. Servlet 3.0 is explicitly required because of the new file upload component which is internally using the standard Servlet 3.0 API without the need for 3rd party libraries. JSF 2.2 is part of Java EE 7. JSF 2.1 requires a minimum of Java 1.5, Servlet 2.5 and EL 2.1. Servlet 3.0 is optional and will enable JSF 2.1 to automatically run on *.jsf without any necessary web.xml configuration as long as there's a faces-config.xml . JSF 2.0 requires a minimum of Java 1.5, Servlet 2.5 and EL 2.1. You can use Servlet 2.4 if you supply your own EL 2.1 API/impl . JSF 2.0 is part of Java EE 6. JSF 1.2 requires a minimum of Java 1.5, Servlet 2.5, JSP 2.1 and EL 2.1. If you replace JSP 2.1 by Facelets 1.x as default view technology, then you can use JSF 1.2 on Servlet 2.4. JSF 1.2 is part of Java EE 5. JSF 1.0 and 1.1 requires a minimum of Java 1.4, Servlet 2.4 and JSP 2.0. JSF 1.0 is part of J2EE 1.4. Examples of Java EE and Servlet containers Servlet 6.0 : Tomcat 10.1.x, GlassFish 7.x, WildFly 27.x.x Servlet 5.0 : Tomcat 10.0.x, GlassFish 6.x, Open Liberty 21.x.x.x, WildFly 23.x.x Servlet 4.0 : Tomcat 9.x, GlassFish/Payara 5.x Servlet 3.1 : Tomcat 8.x, WildFly 8/9/10/11.x, GlassFish/Payara 4.x, TomEE 7.x, WebSphere 9.x Servlet 3.0 : Tomcat 7.x, JBoss AS 6/7.x, GlassFish 3.x, TomEE 1.x, WebSphere 8.x Servlet 2.5 : Tomcat 6.x, JBoss AS 5.x, GlassFish 2.x, WebSphere 7.x Servlet 2.4 : Tomcat 5.5.x, JBoss AS 4.x, Sun Java Application Server, WebSphere 5/6.x Installing JSF Depending on the server used, JSF may already be built-in (full fledged Java EE containers such as WildFly , JBoss EAP , TomEE , Payara , GlassFish , WebSphere , etc.), or not (barebones JSP/Servlet containers such as Tomcat , Jetty , etc.). If the server doesn't ship with JSF built-in, then you need to manually install a JSF implementation to your choice ( Mojarra or MyFaces ). Don't forget JSTL , those barebones JSP/Servlet containers usually also don't even ship with JSTL. Mojarra installation instructions MyFaces installation instructions Resources Faces 4.0 Specification JSF 3.0 Specification JSF 2.3 Specification (JSR 372) JSF 2.2 Specification (JSR 344) JSF 2.0/2.1 Specification (JSR 314) Online tutorials Oracle Java EE tutorials Jakarta EE 9 tutorial - Jakarta Faces (JSF 3.0) Java EE 8 tutorial - JavaServer Faces Technology (JSF 2.3) - Tutorial examples Java EE 7 tutorial - JavaServer Faces Technology (JSF 2.2) Java EE 6 tutorial - JavaServer Faces Technology (JSF 2.0) - Tutorial examples Java EE 5 tutorial - JavaServer Faces Technology (JSF 1.2) - Tutorial examples The BalusC code JSF 2.3 Tutorial with Eclipse and WildFly JSF 2.2 Tutorial with Eclipse and WildFly JSF 2.0 Tutorial with Eclipse and Glassfish Communication in JSF 2.0 JSF 2.0 CRUD examples Mkyong.com JSF 2.0 tutorial Video Training JSF 2.0( Java Server Faces) Video Training Offline tutorials ("books") The Definitive Guide to Jakarta Faces in Jakarta EE 10 The Definitive Guide to JSF in Java EE 8 Mastering JSF 2.2 Pro JSF 2.2 with HTML5 Beginning Java EE 7 with GlassFish JSF implementations Mojarra - Oracle's reference implementation (RI), standard part of e.g. WildFly MyFaces - Apache's alternative, standard part of e.g. TomEE JSF component/utility libraries PrimeFaces ( showcase ) - component library, based on jQuery + custom UI (started off using jQuery UI) OmniFaces ( showcase ) - utility library, compatible with any JSF component library RichFaces ( showcase ) - component library, based on jQuery + custom UI. (Reached end-of-life June 2016) IceFaces ( showcase ) - component library, clone of PrimeFaces 2.x + some enhanced components Tomahawk - component library, basic extensions to standard JSF, e.g. tableless radio buttons Trinidad - component library, enhanced extensions to standard JSF + custom JS/ajax BootsFaces ( showcase ) - component library, based on Bootstrap ButterFaces - component library, based on Bootstrap TornadoFaces - component library with a sleek Widget API supporting SASS styles Frequently asked questions Check "frequent" tab of the JSF and JSF2 tags More links: Check JSF at ZEEF Related tags JSF general mojarra myfaces facesservlet facescontext facelets tagfile composite-component custom-component custom-renderer el jstl backing-beans managed-bean managed-property binding actionlistener valuechangelistener phaselistener systemeventlistener prerenderview postconstruct methodexpression viewexpiredexception protected-views passthrough-attributes passthrough-elements conditional-rendering rendered-attribute immediate-attribute JSF scopes session-scope view-scope flash-scope flow-scope JSF components/tags datatable uirepeat uiinclude graphicimage selectonemenu selectoneradio selectmanycheckbox selectmanymenu selectbooleancheckbox selectmanylistbox commandbutton commandlink viewparams viewaction setpropertyactionlistener JSF component/utility libraries primefaces primefaces-extensions omnifaces richfaces ajax4jsf icefaces tomahawk trinidad openfaces deltaspike seam ibm-jsf woodstock bootsfaces angularfaces butterfaces angularfaces JSF targeted/compatible frameworks cdi weld codi
