[site]: stackoverflow
[post_id]: 5536711
[parent_id]: 5536596
[tags]: 
[ Edit 2021/10 ] This answer is now > 10 years old. Here is a snippet containing several ways to create and/or inject elements. The answer for the question asked ( create some element(s) and retrieve their html code ) can be found @ the bottom of the snippet. // The classic createElement // ------------------------- // create a paragraph element using document.createElement const elem = document.createElement(`p`); elem.id = `myBrandnewDiv1`; // put in some text elem.appendChild(document.createTextNode(`My brand new div #1`)); // append some html (for demo, preferrably don't use innerHTML) elem.innerHTML += ` =&gt; created using document.createElement `; // append a new paragraph within #myBrandNewDiv1 const nested = elem.appendChild(document.createElement(`p`)); nested.classList.add(`nested`); // add some text to that nested.textContent = `I am nested!`; // the elements are still in memory, now add the // whole enchillada to the document document.body.appendChild(elem); // insertAdjacentHTML // ------------------ // nest an element within the nested div nested.insertAdjacentHTML(`afterbegin`, ` This text will appear above the text of my parent, that being div#nested. Someone had the nerve to insert me using insertAdjacentHTML `); // Object.assign // ------------- // Use Object.assign to create an element and // assign properties/html to it in one go const newElem = Object.assign( document.createElement(`div`), { id: `myBrandnewDiv2`, innerHTML: `div#myBrandnewDiv2 signing in. I was assigned using Object.assign &hellip;`}); document.body.appendChild(newElem); // insertAdjacentElement combined with Object.assign // ------------------------------------------------- // use the above technique combined with insertAdjacentElement newElem.insertAdjacentElement( `beforeend`, Object.assign(document.createElement(`span`), { id: `myBrandnewnested2_nested`, innerHTML: ` Me too! And appended I was with insertAdjacentElement ` }) ); // createDocumentFragment // ---------------------- // Use a document fragment to create/inject html const fragment = document.createDocumentFragment(); const mdnLnk = `https://developer.mozilla.org/en-US/` + `docs/Web/API/Document/createDocumentFragment`; fragment.appendChild( Object.assign( document.createElement(`p`), {innerHTML: `Regards from createDocumentFragment (see MDN )`}) ); document.querySelector(`#myBrandnewDiv2`).appendChild(fragment); // Create, but don't inject // ------------------------ const virtual = Object.assign( document.createElement(`p`), { innerHTML: ` id1 Hi! Hi 2! `, classList: [`xyz`], } ); const prepareHtml4Reporting = html => html.replace(/ html only ${ prepareHtml4Reporting(virtual.innerHTML)} `); body { font: normal 12px/15px verdana, arial, sans-serif; margin: 2rem; } code { background-color: #eee; } .nested { margin-left: 0.7rem; max-width: 450px; padding: 5px; border: 1px solid #ccc; } I have used some of these methods in this library (see /src/DOM.js ), with a mechanism for sanitizing html before it is injecting.
