[site]: stackoverflow
[post_id]: 5078069
[parent_id]: 5075379
[tags]: 
The simplest way to read a PGM file would be to use libpgm from the netpbm package. Your read in a pgm file using: gray **image; FILE *fp; int cols; # num columns int rows; # num rows int maxval; # max grayscale value fp = fopen("input.pgm","r"); image = pgm_readpgm( fp, &cols, &rows, &maxval); You can now get a negative image by looping across rows/cols: for (i = 0; i The tricky bit would be to distribute the task across your MPI nodes as image may not be contiguous in memory (I haven't checked). One could dig into the code to determine the storage pattern and scatter/gather the arrays accordingly, however there is not guarantee that it won't change in the future (unlikely, but possible) and break your code. A possible but non-optimal way to do this would be to create a temporary buffer which is contiguous in memory, distribute that, and reconstruct the image later on. E.g. gray *buffer = malloc(sizeof(gray) * rows * cols); for (i = 0; i Now, we're ready to scatter buffer across nodes you may need to broadcast maxval to each node. each node peforms buffer[n] = maxval - buffer[n]; gather buffer back onto master reconstruct output image You can reconstruct the image by writing it back to you image data, or simply print out the pgm file manually if you're familiar with the format As for datatypes to use for MPI operations, MPI_UNSIGNED would work since gray is a typedef of unsigned int . However, to be strictly forward compatible you can use MPI_BYTE and multiply your send_count by sizeof(gray) . not using libpgm If you want to read the files in manually, it isn't really too hard since your PGM file is in plain format ( P2 instead of P5 ). Assuming the format is valid, you'll need to: Open the file Skip the first 2 lines Read in cols and rows : fscanf(fp,"%d %d", &cols, &rows); Read in maxval : fscanf(fp,"%d", &maxval); Allocate you buffer according to cols and rows Read in rest of image by looping across col/rows and repeating fscanf(fp,"%d", &buffer[r][c]);
