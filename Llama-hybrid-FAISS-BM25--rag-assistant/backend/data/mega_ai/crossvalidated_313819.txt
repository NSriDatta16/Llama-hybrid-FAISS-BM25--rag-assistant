[site]: crossvalidated
[post_id]: 313819
[parent_id]: 
[tags]: 
How to compute p(w) in Machine Learning In Action 4.5.2

Machine Learning In Action 4.5.2 is about "Training: calculating probabilities from word vectors" and the target is to write code to compute p(ci|w) = p(w|ci) * p(ci) / p(w) The author talks about how to compute p(w|ci) and p(ci) here: We can calculate p(ci) by adding up how many times we see class i (abusive posts or non-abusive posts) and the dividing by the total number of posts. How can we get p(w|ci)? This is where our naive assumption comes in. ... says we can calculate this probability as p(w0|ci) * p(w1|ci) * p(w2|ci) * ... * p(wn|ci). But he does not cover p(w), and I cannot find out how p(w) is calculated in his code as below: def trainNB0(trainMatrix,trainCategory): numTrainDocs = len(trainMatrix) numWords = len(trainMatrix[0]) pAbusive = sum(trainCategory)/float(numTrainDocs) p0Num = ones(numWords); p1Num = ones(numWords) p0Denom = 2.0; p1Denom = 2.0 for i in range(numTrainDocs): if trainCategory[i] == 1: p1Num += trainMatrix[i] p1Denom += sum(trainMatrix[i]) else: p0Num += trainMatrix[i] p0Denom += sum(trainMatrix[i]) p1Vect = log(p1Num/p1Denom) p0Vect = log(p0Num/p0Denom) return p0Vect,p1Vect,pAbusive def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1): p1 = sum(vec2Classify * p1Vec) + log(pClass1) #element-wise mult p0 = sum(vec2Classify * p0Vec) + log(1.0 - pClass1) if p1 > p0: return 1 else: return 0 def testingNB(): listOPosts,listClasses = loadDataSet() myVocabList = createVocabList(listOPosts) trainMat=[] for postinDoc in listOPosts: trainMat.append(setOfWords2Vec(myVocabList, postinDoc)) p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses)) testEntry = ['love', 'my', 'dalmation'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) testEntry = ['stupid', 'garbage'] thisDoc = array(setOfWords2Vec(myVocabList, testEntry)) print testEntry,'classified as: ',classifyNB(thisDoc,p0V,p1V,pAb) Could any one point out the line in the code above that does the trick of computing p(w) and explain how?
