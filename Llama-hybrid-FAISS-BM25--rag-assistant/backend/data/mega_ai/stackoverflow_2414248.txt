[site]: stackoverflow
[post_id]: 2414248
[parent_id]: 2414210
[tags]: 
Design patterns are created to solve specific problems. These problems occur whether you use PHP or any other language (though the patterns may differ by language as well). Most of the patterns have their roots in object-oriented design, but can be adapted to procedural settings. Use the design pattern when you have a problem that the pattern addresses, whether PHP or any other language. Don't use a design pattern just because it's a "design pattern" -- know how and when it applies and when it doesn't. Having said that, much of what design patterns do, is organize code to accomplish their purpose in a clean, understandable way. There are other ways to solve the problem, but the design pattern is a well-recognized, clear, and understandable method. If you do need to solve a problem addressed by a particular pattern, you would usually be best off using the pattern (or adapting the pattern) rather than choosing an alternative. Using patterns, where appropriate, is thus beneficial to both current and future developers -- cleaner, better understood code -- and the customer -- less time reinventing the wheel, more robust, maintainable code. Using patterns when they aren't appropriate benefits no one; it's potentially an exercise in frustration trying to adapt a pattern to solve an unrelated problem and more than likely will simply make things more complicated.
