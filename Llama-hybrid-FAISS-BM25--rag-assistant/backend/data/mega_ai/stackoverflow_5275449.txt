[site]: stackoverflow
[post_id]: 5275449
[parent_id]: 
[tags]: 
What is an ideal way to organize a Spring 3 web application and its components?

I'm developing an application which has two main 'parts' to it... The public facing website The RESTful API for the mobile application. I'm developing the application with Spring 3 using Spring Tool Suite as my IDE. At first I thought that the API would be part of the same project as the public website. But then I tried to mix basic auth in with my form based auth for the public website things started to get a little confusing with Spring Security. So I thought it might be best to develop the API as a separate project and share my domain objects, services and DAOs between the API and website projects. My question(s) now are: Is this a dumb idea? Should create a 'core' project with the shared domain objects, services, etc? Should I use Maven and add the 'core' project as a dependency for the API and website projects? Is there a better way to do all this?
