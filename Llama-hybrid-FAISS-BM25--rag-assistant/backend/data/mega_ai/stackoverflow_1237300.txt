[site]: stackoverflow
[post_id]: 1237300
[parent_id]: 
[tags]: 
JQuery: Why is hoverIntent not a function here?

I'm modifying some code from a question asked a few months ago, and I keep getting stymied. The bottom line is, I hover over Anchors, which is meant to fade in corresponding divs and also apply a "highlight" class to the Anchor. I can use base JQuery and get "OK" results, but mouse events are making the user experience less than smooth. I load JQuery 1.3 via Google APIs. And it seems to work. I can use the built in hover() or mouseover(), and fadeIn() is intact... no JavaScript errors, etc. So, JQuery itself is clearly "loaded". But I was facing a problem that it seemed everyone was recommending hoverIntent to solve. After loading JQuery, I load the hoverIntent JavaScript. I've triple-checked the path, and even dummy-proofed the path. I just don't see any reasonable way it can be a question of path. Once the external javascripts are (allegedly) loaded in, I continue with my page's script: var $old=null; $(function () { $("#rollover a").hoverIntent(doSwitch,doNothing) }); function doNothing() {}; function doSwitch() { var $this = $(this); var $index = $this.attr("id").replace(/switch/, ""); //extract the index number of the ID by subtracting the text "switch" from its name if($old!=null) $old.removeClass("highlight"); //remove the highlight class from the old (previous) switch before adding that class to the next $this.addClass("highlight"); //adds the class "highlight" to the current switch div $("#panels div").hide(); //hide the divs inside panels $("#panel" + $index).fadeIn(300); //show the panel div "panel + number" -- so if switch2 is used, panel2 will be shown $old = $this; //declare that the current switch div is now "old". When the function is called again, the old highlight can be removed. }; I get the error: Error: $("#rollover a").hoverIntent is not a function If I change to a known-working function like hover (just change ".hoverIntent" to ".hover") it "works" again. I'm sure this is a basic question but I'm a total hack when it comes to this (as you can see by my code). Now, for all appearances, it SEEMS like either the path is wrong (I've zillion-checked and even put it on an external site with an HTTP link that I double-checked; it's not wrong), or the .js doesn't declare the function. If it's the latter, I must be missing a few lines of code to make the function available, but I couldn't find anything on the author's site. In his source code he uses a $(document).ready, which I also tried to emulate, but maybe I did that wrong, too. Again, the weird bit is that .hover works fine, .hoverIntent doesn't. I can't figure out why it's not considered a function. Trying to avoid missing anything... let's see... there are no other JavaScripts being called. This post contains all the Javascript the page uses... I tried doing it as per the author's var config example (hoverIntent is still not a function). I get the itching feeling I'm just missing one line to declare the function, but I can't for the life of me figure out what it is, or why it's not already declared in the external .js file. Thanks for any insight! Greg Update: The weirdest thing, since I'm on it... and actually, if this gets solved, I might not need hoverIntent solved: I add an alert to the "doNothing" function and revert back to plain old .hover, just to see what's going on. For 2 of my 5 Anchors, as soon as I hover, doNothing() gets called and I see the alert. For the other 3, doNothing() correctly does NOT get called until mouseout. As you can see, the same function should apply for any Anchor inside of "rollover" div. I don't know why it's being particular. But: If I change fadeIn to another effect like slideDown, doNothing() correctly does NOT get called until mouseout. when using fadeIn, doNothing() doesn't get called in Opera, but seems to get called in pretty much all other browsers. Is it possible that fadeIn itself is buggy, or is it just that I need to pass it an appropriate callback? I don't know what that callback would be, if so. Cheers for your long attention spans... Greg
