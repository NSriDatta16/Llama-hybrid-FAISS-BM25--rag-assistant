[site]: stackoverflow
[post_id]: 4098179
[parent_id]: 
[tags]: 
Anyone know this Python data structure?

The Python class has six requirements as listed below. Only bold terms are to be read as requirements. Close to O(1) performance for as many of the following four operations. Maintaining sorted order while inserting an object into the container. Ability to peek at last value (the largest value) contained in the object. Allowing for pops on both sides (getting the smallest or largest values). Capability of getting the total size or number of objects being stored. Being a ready made solution like the code in Python's standard library. What follows is left here for historical reasons (help the curious and prove that research was conducted). After looking through Python's Standard Library (specifically the section on Data Types), I still have not found a class that fulfills the requirements requirements of a fragmentation table. collections.deque is close to what is required, but it does not support keeping the data contained in it sorted. It provides: Efficient append and pops on either side of a deque with O(1) performance . Pops on both sides for the data contained within the object. Getting the total size or count of objects contained within. Implementing an inefficient solution using lists would be trivial, but finding a class that performs well would be far more desirable. In a growing memory simulation with no upper limit, such a class could keep indexes of empty (deleted) cells and keep fragmentation levels down. The bisect module may help: Helps keep an array in sorted order while inserting new objects in array. Ready made solution for keeping lists sorted as objects are added. Would allow executing array[-1] to peek at last value in the array. The final candidate that failed to fully satisfy the requirements and appeared least promising was the heapq module. While supporting what looked like efficient insertions and assuring that array[0] was the smallest value, the array is not always in a fully sorted state. Nothing else was found to be as helpful. Does anyone know of a class or data structure in Python that comes close to these six requirements?
