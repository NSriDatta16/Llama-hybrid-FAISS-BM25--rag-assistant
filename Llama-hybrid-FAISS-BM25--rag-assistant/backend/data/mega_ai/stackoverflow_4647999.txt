[site]: stackoverflow
[post_id]: 4647999
[parent_id]: 
[tags]: 
Scala How to avoid reading the file twice

Here is the sample program I am working on to read a file with list of values one per line. I have to add all these values converting to double and also need to sort the values. Here is what I came up so far and it is working fine. import scala.io.Source object Expense{ def main(args: Array[String]): Unit = { val lines = Source.fromFile("c://exp.txt").getLines() val sum: Double = lines.foldLeft(0.0)((i, s) => i + s.replaceAll(",","").toDouble) println("Total => " + sum) println((Source.fromFile("c://exp.txt").getLines() map (_.replaceAll(",", "").toDouble)).toList.sorted) } } The question here is, as you can see I am reading the file twice and I want to avoid it. As the Source.fromFile("c://exp.txt").getLines() gives you an iterator, I can loop through it only once and next operation it will be null, so I can't reuse the lines again for sorting and I need to read from file again. Also I don't want to store them into a temporary list. Is there any elegant way of doing this in a functional way?
