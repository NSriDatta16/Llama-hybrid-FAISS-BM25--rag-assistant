[site]: stackoverflow
[post_id]: 2330063
[parent_id]: 2328959
[tags]: 
Sorry for the first-person answer here, but although I have not used JS.Class, from a Java/Javascript developer standpoint, it looks very good. Our team works on a Java project with most of our front end using home-brewed JavaScript (and not a small amount of it). We don't use any JS frameworks (jQuery didn't exist when our project started) and we've even implemented our own drag and drop/sort utilities that make extensive use of inheritance. For convenience and for the ability to use inheritance, (and through much evolution) we ended up developing methods that come to nearly the exact same patterns as JS.Class (but not nearly as extensive). Everything I read in the docs on classes and modules, inheritance, etc. seemed very natural â€” in fact, it looks like we could probably replace all of our class-creation methods (a method we called objectLib.createClass ) with new JS.Class with no other changes to make. We also ended up developing our own Set classes and other array and object utilities that JS.Class includes as part of it's core functionality. So, while I can't say that I've used JS.Class and liked it, I can say that as a Javascript developer I have needed to solve nearly the exact problems that JS.Class appears to solve very well.
