[site]: stackoverflow
[post_id]: 465984
[parent_id]: 
[tags]: 
Type.IsSubclassOf() doesn't work across AppDomains?

I'm having some problems with the following code: private class ClientPluginLoader : MarshalByRefObject { public bool IsPluginAssembly(string filename) { AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += new ResolveEventHandler(CurrentDomainReflectionOnlyAssemblyResolve); Assembly asm = Assembly.ReflectionOnlyLoadFrom(filename); Type[] types = asm.GetTypes(); foreach (Type type in types) { if (type.IsSubclassOf(typeof(ClientPlugin))) { return true; } } return false; } } The code is called via a proxy that I've created through my custom app domain's CreateInstanceFromAndUnwrap(). This means that IsPluginAssembly() is executed in the context of my custom app domain. The problem is that the call to IsSubclassOf() always returns false, even though it should IMHO return true. The "type" in question really does inherit from ClientPlugin - there's no doubt about that. ClientPlugin is defined in a different private assembly, which I'm resolving manually, as evident in the code fragment above. I've put a breakpoint on the if (type.IsSubclassOf(...)) line and confirmed this expression to be false: type.BaseType == typeof(ClientPlugin) On the other hand, this expression is true: type.BaseType.FullName == typeof(ClientPlugin).FullName How is this possible? What's going on? UPDATE: Kent Boogaart pointed me to the right direction. I searched the web a bit more and run into this blog post. It seems I'll have to resolve my Load/LoadFrom/ReflectionOnlyLoadFrom conflicts in order to make this work.
