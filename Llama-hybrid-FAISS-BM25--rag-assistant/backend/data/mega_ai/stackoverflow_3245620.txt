[site]: stackoverflow
[post_id]: 3245620
[parent_id]: 203336
[tags]: 
Supports Multiple Objects with 1 line per class: This method will enforce singletons on any class you wish, al you have to do is add 1 method to the class you wish to make a singleton and this will do it for you. This also stores objects in a "SingleTonBase" class so you can debug all your objects that you have used in your system by recursing the SingleTonBase objects. Create a file called SingletonBase.php and include it in root of your script! The code is abstract class SingletonBase { private static $storage = array(); public static function Singleton($class) { if(in_array($class,self::$storage)) { return self::$storage[$class]; } return self::$storage[$class] = new $class(); } public static function storage() { return self::$storage; } } Then for any class you want to make a singleton just add this small single method. public static function Singleton() { return SingletonBase::Singleton(get_class()); } Here is a small example: include 'libraries/SingletonBase.resource.php'; class Database { //Add that singleton function. public static function Singleton() { return SingletonBase::Singleton(get_class()); } public function run() { echo 'running...'; } } $Database = Database::Singleton(); $Database->run(); And you can just add this singleton function in any class you have and it will only create 1 instance per class. NOTE: You should always make the __construct private to eliminate the use of new Class(); instantiations.
