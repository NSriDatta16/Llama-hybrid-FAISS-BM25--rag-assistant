[site]: stackoverflow
[post_id]: 5337588
[parent_id]: 5337382
[tags]: 
Here is a quick example that proves that it's this is not safe for strings, immutable or not. List > lambdas = new List >(); List strings = new List { "first", "second", "supercalifragilisticexpialidocious" }; foreach (string s in strings) { lambdas.Add(new Func (() => s.Length)); } Console.WriteLine(lambdas[0]()); //34 Console.WriteLine(lambdas[1]()); //34 Console.WriteLine(lambdas[2]()); //34 However, aside from getting bitten by LINQ's defered execution, I don't really think it's a problem to use lambdas in this way, since mostly the entire lifespan of the lambda is within the scope of the foreach.
