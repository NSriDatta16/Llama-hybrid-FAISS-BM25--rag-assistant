[site]: stackoverflow
[post_id]: 2376169
[parent_id]: 2375844
[tags]: 
I'm not sure that regular expressions will be necessarily more elegant, but so far I came up with the following which passes your tests: function ReduceFileName(name, max){ if(name.length > max) { var ell ="\u2026"; // defines replacement characters var ext = (/\.[^\.]*$/.exec(name) || [""])[0]; // gets extension (with dot) or "" if no dot var m = (max-ell.length-ext.length)/2; // splits the remaining # of characters var a = Math.ceil(m); var z = Math.floor(m); var regex = new RegExp("^(.{"+a+"}).*(.{"+z+"})"+ext, ""); var ret = regex.exec(name); return ret[1]+ell+ret[2]+ext; } return name; }
