[site]: stackoverflow
[post_id]: 5614169
[parent_id]: 5612607
[tags]: 
list_1 = ["3 - A", "4 - B", "5 - C", "7 - D", "8 - F"] list_2 = ["2 - A", "8 - B", "6 - C", "9 - D", "4 - E"] (list_1 + list_2).map do |str| # change array of strings to array in the form of [[name, value], ...] str =~ /(\d+) - (.*)/ && [$2, $1.to_i] end.reduce({}) do |memo, obj| # use a temporary Hash to sum up the values; # the value is an array in the form of [value_counter, iteration_counter] prev = memo[obj.first] || [0, 0] memo[obj.first] = [prev.first + obj.last, prev.last + 1] memo end.map do |key, value| # convert to array in original format or # nil, if occurred only once value.last > 1 ? "#{key} - #{value.first}" : nil end.compact => ["A - 5", "B - 12", "C - 11", "D - 16"] This code uses the map and reduce methods of Ruby, but doing all this directly on a Hash would be much more elegant.
