[site]: stackoverflow
[post_id]: 1297577
[parent_id]: 1296311
[tags]: 
Good answers so far, but let me also answer directly... self.__dict__ holds the attributes (i.e., the state) of instance self (unless its class does peculiar things such as defining __slots__ ;-). So by ensuring that all instances have the same __dict__ we're ensuring they all have the same attributes, i.e., exactly the same state. So, Borg is a neat Python implementation of the general Monostate pattern, but without any of the downsides that Robert Martin identified in his essay on Monostate in C++ . See also this SO thread for Monostate vs Singleton -- of course much of the discussion is NOT relevant to Python (obviously in Python Borg does not stand in the way of inheritance, on the contrary!, but then Singleton can be quite as transparent thanks to e.g. __new__ , so the tradeoff are quite different...). The funniest thing? In the 8+ years since I first conceived of Borg (before David Ascher, now CEO of Mozilla Messaging, suggested the cool Borg name) I've had occasion to use any kind of singleton or monostate maybe four times in all -- and three times out of the four I soon refactored it out in favor of a more flexible approach!-) (The fourth time was a subsystem that didn't prove very successful and didn't get much followup work/maintenance;-). Second-funniest thing is that Guido, personally, detests Borg;-). Not that he has any real liking for Singleton either: he thinks in Python "singletonarity", if needed, should be done as a module (or, I'd like to add, a class instance masquerading as a module -- see e.g. my observation in section 7.2.6 of Python in a Nutshell, e.g. in this pirate copy;-). But, Borg appears to particularly offend his design aesthetics!-) Peculiar, since he did nominate me for PSF membership based on my Five Easy Pieces essay, which is basically ALL about Borg (and variants thereof, and considerations thereupon)...!-). Ah well, guess he can "hate the sin but love the sinner", hm?-)
