[site]: stackoverflow
[post_id]: 446995
[parent_id]: 89266
[tags]: 
This thread might help, although some of the answers here reflect answers there already. One poster makes a good point: It seems that you want garbage collection for closures "in the absence of true garbage collection". Note that closures can be used to implement cons cells. So your question seem to be about garbage collection "in the absence of true garbage collection" -- there is rich related literature. Restricting problem to closures does not really change it. So the answer is: no , there is no elegant way to have closures and no real GC. The best you can do is some hacking to restrict your closures to a particular type of closure. All this is needless if you have a proper GC. So, my question reflects some of the other ones here - why do you not want to implement GC? A simple mark+sweep or stop+copy takes about 2-300 lines of (Scheme) code, and isn't really that bad in terms of programming effort. In terms of making your programs slower: You can implement a more complex GC which has better performance. Just think of all the memory leaks programs in your language won't suffer from. Coding with a GC available is a blessing. (Think C#, Java, Python, Perl, etc... vs. C++ or C).
