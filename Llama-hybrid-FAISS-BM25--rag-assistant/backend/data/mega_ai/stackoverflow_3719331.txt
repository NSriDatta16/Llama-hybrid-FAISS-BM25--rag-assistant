[site]: stackoverflow
[post_id]: 3719331
[parent_id]: 3719212
[tags]: 
Have a look at the getline() man page . If *lineptr is NULL, then getline() will allocate a buffer for storing the line, which should be freed by the user program. (In this case, the value in *n is ignored.) At the end of your program, you need to loop over your candidate_names array and call free on non NULL entries but in that case you must not do candidate_names[i] = "Invalid candidate"; as @pmg pointed in his answer as you would try to free a string literal. Pay also attention to: Alternatively, before calling getline(), *lineptr can contain a pointer to a malloc(3)-allocated buffer *n bytes in size. If the buffer is not large enough to hold the line, getline() resizes it with realloc(3), updating *lineptr and *n as necessary. In either case, on a successful call, *lineptr and *n will be updated to reflect the buffer address and allocated size respectively.
