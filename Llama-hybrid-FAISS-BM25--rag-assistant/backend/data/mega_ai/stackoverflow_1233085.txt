[site]: stackoverflow
[post_id]: 1233085
[parent_id]: 1232377
[tags]: 
One option is to use a StreamFilter : class MyFilter implements StreamFilter { private boolean on; @Override public boolean accept(XMLStreamReader reader) { final String element = "Fromhere"; if (reader.isStartElement() && element.equals(reader.getLocalName())) { on = true; } else if (reader.isEndElement() && element.equals(reader.getLocalName())) { on = false; return true; } return on; } } Combined with a Transformer , you can use this to safely parse logically-equivalent markup like this: --> Content Content Demo: StringWriter writer = new StringWriter(); XMLInputFactory inputFactory = XMLInputFactory.newInstance(); XMLStreamReader reader = inputFactory .createXMLStreamReader(new StringReader(xmlString)); reader = inputFactory.createFilteredReader(reader, new MyFilter()); TransformerFactory transFactory = TransformerFactory.newInstance(); Transformer transformer = transFactory.newTransformer(); transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); transformer.transform(new StAXSource(reader), new StreamResult(writer)); System.out.println(writer.toString()); This is a programmatic variation on Massimiliano Fliri's approach.
