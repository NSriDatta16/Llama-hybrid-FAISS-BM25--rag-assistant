[site]: stackoverflow
[post_id]: 3645723
[parent_id]: 3645543
[tags]: 
Well, first of all you can use django-piston , as @Tudorizer already mentioned. But then again, as I see it (and I might be wrong!), REST is more of a set of design guidelines, rather than a concrete API. What it essentially says is that the interaction with your service should not be based on 'things you can do' (typical RPC-style methods), but rather 'things, you can act on in predictable ways, organized in a certain way' (the 'resource' entity and http verbs). That being said, you don't need anything extra to write REST-style services using django. Consider the following: # urlconf from django.conf.urls.defaults import patterns, url urlpatterns = patterns('', url(r'^tickets$', 'myapp.views.tickets', name='tickets'), url(r'^ticket/(?P \d+)$', 'myapp.views.tickets', name='ticket'), url(r'^ticket$', 'myapp.views.tickets', name='ticket'), ) # views def tickets(request): tickets = Ticket.objects.all() return render_to_response('tickets.html', {'tickets':tickets}) def ticket(request, id=None): if id is not None: ticket = get_object_or_404(Ticket, id=id) if request.method == 'POST': # create or update ticket here else: # just render the ticket (GET) ... ... and so on. What matters is how your service is exposed to its user, not the library/toolkit/framework it uses.
