[site]: datascience
[post_id]: 51996
[parent_id]: 
[tags]: 
Is it possible to somehow improve the prediction?

I have a set of points, which is represented on the chart in black. I take the first 978 points and I want to predict the remaining 22. Blue indicates prediction using a recurrent neural network. Green indicates forecast using ARIMA with orders (7, 0, 2) . The forecast segment looks like this: Here is the code ARIMA: model = ARIMA(arr, order=(7,0,2)) model_fit = model.fit(disp=0) output = model_fit.forecast() forecast = model_fit.predict(start=len(arr), end=len(arr) + 22) res = np.append(arr, list(forecast)) Here is the code recurrent neural network: def split_sequence(sequence, n_steps): X, y = list(), list() for i in range(len(sequence)): # find the end of this pattern end_ix = i + n_steps # check if we are beyond the sequence if end_ix > len(sequence)-1: break # gather input and output parts of the pattern seq_x, seq_y = sequence[i:end_ix], sequence[end_ix] X.append(seq_x) y.append(seq_y) return array(X), array(y) def model(): n_steps = 3 # split into samples X, y = split_sequence(arr, n_steps) # reshape from [samples, timesteps] into [samples, timesteps, features] n_features = 1 X = X.reshape((X.shape[0], X.shape[1], n_features)) model = Sequential() model.add(Bidirectional(LSTM(50, activation='relu'), input_shape=(n_steps, n_features))) model.add(Dense(1)) model.compile(optimizer='adam', loss='mse') # fit model model.fit(X, y, epochs=100, verbose=1) # demonstrate prediction x_input = array([arr[-3], arr[-2], arr[-1]]) x_input = x_input.reshape((1, n_steps, n_features)) yhat = model.predict(x_input, verbose=0) return yhat while len(arr) The neural network is trained separately for each of the predicted values and adds a value to the array arr . arr - array for input. res - result which consists of arr array and 22 predicted values via ARIMA. Please check if the code for the neural network is written correctly. Is it possible to somehow improve the forecast, having previously processed this graph? Any ideas on this? Or such data is not predicted? I tried to predict 10 values instead of 22, and the result is still very bad.
