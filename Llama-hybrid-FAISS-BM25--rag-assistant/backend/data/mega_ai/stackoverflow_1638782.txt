[site]: stackoverflow
[post_id]: 1638782
[parent_id]: 1636500
[tags]: 
The first part of this answer is really old -- see below for the right way to do it You can use the Application object to store application persistent objects. This Android FAQ talks about this problem as well. Something like this: public class MyApplication extends Application{ private String thing = null; public String getThing(){ return thing; } public void setThing( String thing ){ this.thing = thing; } } public class MyActivity extends Activity { private MyApplication app; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); app = ((MyApplication)getApplication()); String thing = app.getThing(); } } The right way : When this answer was first written, the documentation for the Activity lifecycle was not as good as it is now. Reading Saving Activity State section on the Activity document helps us understand how Android wants us to save state. Essentially, there are two circumstances under which your activity starts: (1) as a new activity and (2) because of a configuration change or when it's recreated after being destroyed due to memory pressure. When your activity starts because it's a new activity, then saveInstanceState is null. It's not null otherwise. If it's null, then your activity should initialize itself from scratch. Fragments are very similar to Activities, and I covered this concept in detail for my AnDevCon-14 slide deck . You can also take a look at the sample code for my AnDevCon-14 presentation for more details. Reworking my previous example would look something like the code below. I do change the semantics a bit -- in this second version I assume the string thing is specific to the activity within a specific android task , in the previous example it's ambiguous. If you do want to keep the same data around for multiple android tasks, then using either the Application object or another singleton is still your best bet. public class MyActivity extends Activity { private static final String THING = "THING"; private String thing; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (savedInstanceState==null) { // First time here (since we last backed out at least) thing = initializeThing(); // somehow we init it } else { // Rehydrate this new instance of the Activity thing = savedInstanceState.getString(THING); } String thing = app.getThing(); } protected void onSaveInstanceState(Bundle outState) { outState.putString(THING, thing); } }
