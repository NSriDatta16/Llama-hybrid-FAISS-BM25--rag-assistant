[site]: crossvalidated
[post_id]: 326732
[parent_id]: 324516
[tags]: 
Thank you for the interesting question. I think the question will be hard to conclusively answer without a more rigorous definition of feature engineering which seems hard to give. I don't think there is any tension with no free lunch, since I think that feature engineering involves changing the optimisation problem. There is a version of no free lunch (equivalent to the original theorem) which states the following: Theorem (Radcliffe and Surry, 1995) Consider functions $f,g$ lying in the set of all functions between finite sets $X$ and $Y$ . Let $V_m(A, f)$ denote the length $m$ performance vector generated by $A$ and $f$ . For any two algorithms A and B, and for any function $f$ , there exists a function $g$ such that $V(A, f) = V(B,g)$ . I think this has an interesting interpretation in light of your question. If you're willing to model feature engineering as invertible transformations of your objective function $f$ , then there is a sequence permutations which takes $f$ to $g$ , and algorithm $B$ does just as well as $A$ . So in this sense, it would seem to confirm the folklore that the algorithm is less important than the problem formulation. My notation is taken from (Schumacher et al. 2001) which compares several version of no free lunch. Radcliffe, Nicholas J., and Patrick D. Surry. "Fundamental limitations on search algorithms: Evolutionary computing in perspective." Computer Science Today. Springer, Berlin, Heidelberg, 1995. 275-291. Schumacher, Chris, Michael D. Vose, and L. Darrell Whitley. "The no free lunch and problem description length." Proceedings of the 3rd Annual Conference on Genetic and Evolutionary Computation. Morgan Kaufmann Publishers Inc., 2001.
