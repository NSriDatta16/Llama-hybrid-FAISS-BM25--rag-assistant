[site]: stackoverflow
[post_id]: 1635036
[parent_id]: 1634995
[tags]: 
Actually quicksort is O(n log(n)) in the average case. In the worst case you pick the largest or smallest element as the partition every time and do n + (n -1) + ... 1 = O (n ^ 2). In the best case (the average case works out to the same big-O) you do n comparisons for the first partition. This makes two calls on problems of size n / 2 and those calls take n / 2 comparisons to partition. This continues so you get n + 2 * (n / 2) + 4 * (n /4) + ... . There are log(n) total terms and each one is n so the whole thing is O(n*log(n)). As Thon said you can get the same result by applying Master's theorem, but it's probably worth your time to do some examples by hand.
