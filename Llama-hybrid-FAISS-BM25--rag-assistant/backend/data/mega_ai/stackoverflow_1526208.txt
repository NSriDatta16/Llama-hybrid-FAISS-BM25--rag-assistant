[site]: stackoverflow
[post_id]: 1526208
[parent_id]: 1526046
[tags]: 
It depends on what you mean by "better". I'd consider this to be slightly more elegant, but that may be a matter of taste: (* get the list of possible heads + remaining elements *) let rec splitList = function | [x] -> [x,[]] | x::xs -> (x, xs) :: List.map (fun (y,l) -> y,x::l) (splitList xs) let rec permutations = function | [] -> [[]] | l -> splitList l |> List.collect (fun (x,rest) -> (* permute remaining elements, then prepend head *) permutations rest |> List.map (fun l -> x::l)) This can handle lists with duplicate elements, though it will result in duplicated permutations.
