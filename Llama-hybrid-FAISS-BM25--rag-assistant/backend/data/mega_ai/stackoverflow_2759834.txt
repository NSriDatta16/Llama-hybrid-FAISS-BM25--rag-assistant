[site]: stackoverflow
[post_id]: 2759834
[parent_id]: 2759371
[tags]: 
Your question is not clear enough to be answered unambiguously. On the one hand, compilers don't normally do any local memory allocation-deallocation for nested block scopes. The local memory is normally allocated only once at function entry and released at function exit. On the other hand, when the lifetime of a local object ends, the memory occupied by that object can be reused for another local object later. For example, in this code void foo() { { int d[100]; } { double e[20]; } } both arrays will usually occupy the same memory area, meaning that the total amount of the local storage needed by function foo is whatever is necessary for the largest of two arrays, not for both of them at the same time. Whether the latter qualifies as d continuing to occupy memory till the end of function in the context of your question is for you to decide.
