[site]: stackoverflow
[post_id]: 4541701
[parent_id]: 4541338
[tags]: 
You can build a Rest API or a restful project using ASP.NET MVC and return data as a JSON. An example controller function would be: public JsonpResult GetUsers(string userIds) { var values = JsonConvert.DeserializeObject >(userIds); var users = _userRepository.GetAllUsersByIds(userIds); var collection = users.Select(user => new { id = user.Id, fullname = user.FirstName +" "+ user.LastName }); var result = new { users = collection }; return this.Jsonp(result); } public IQueryable GetAllUsersByIds(List ids) { return _db.Users.Where(c=> ids.Contains(c.Id)); } Then you just call the GetUsers function via a regular AJAX function supplying the array of Ids(in this case I am using jQuery stringify to send the array as string and dematerialize it back in the controller but you can just send the array of ints and receive it as an array of int's in the controller). I've build an entire Restful API using ASP.NET MVC that returns the data as cross domain json and that can be used from any app. That of course if you can use ASP.NET MVC. function GetUsers() { var link = ' users?callback=?'; var userIds = []; $('#multiselect :selected').each(function (i, selected) { userIds[i] = $(selected).val(); }); $.ajax({ url: link, traditional: true, data: { 'userIds': JSON.stringify(userIds) }, dataType: "jsonp", jsonpCallback: "refreshUsers" }); }
