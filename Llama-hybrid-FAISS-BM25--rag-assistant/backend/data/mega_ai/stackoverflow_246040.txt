[site]: stackoverflow
[post_id]: 246040
[parent_id]: 246028
[tags]: 
It's a matter of purity vs being pragmatic... and a bit of personal style. Shouldn't matter... events are just more work than normal methods but more decoupled. Personally I like to keep views decoupled or unaware of the presenters, hence Views communicate to the presenter by raising events . This eliminates the need for the view to have a reference to the presenter. Keep Views thin and dumb. The presenter on the other hand has a member reference to the view (and the model) usually. Hence it can talk to the view by making method calls via an interface (permits views to be substituted as long as they conform to the IView interface). e.g. In your case, Set_X_Option(eOptionEnum) would be a member of the IView Interface, which the presenter can then invoke appropriately. However you could remove this IView dependency (presenter has reference to an IView, that needs to be instantiated and plugged in) as well by using events both ways... however I find that its too much work. The above scheme has never failed me... yet.
