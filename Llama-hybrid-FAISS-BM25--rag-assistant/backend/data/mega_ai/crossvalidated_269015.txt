[site]: crossvalidated
[post_id]: 269015
[parent_id]: 268993
[tags]: 
The original question was not specific as to whether unique sequences, or all combinations of that same sequence are to be counted. It specified closest to 50 and not greater than or equal to 50. It did not specify without replacement, but just specified combinations. Moreover, the new problem does not specify what an optimum answer is, so the question is likely to change once again. Still ambiguous in a more general case would be, for example, whether or not four sequences that fit the criteria with an error would be better than three sequences that fit the criteria exactly. Whether or not that applies to the limited problem here is relevant to the code one would write to do that automatically. Why are we solving this newer problem? With many more numbers and without replacement this new question becomes intractable due to the large number of solution paths to be attempted. With more exact criteria, currently unspecified, it then becomes some variation of the traveling salesman problem . That I do not know which variation of the traveling salesman problem this is, is due to, for example, whether symmetric solutions are counted separately, whether the number of sequences is important or not, whether total error summed from those sequences is more relevant or exhausting the greatest number of entries in the sequence provided, prohibits furnishing any unique answer at this time. Some observations are common to all possibilities, the ItemA column is not contributory, all one need do is test the objects in the second column. For the original question which was with replacement, and a sum test of closest to 50, since there are multiple solutions that are exactly 50, then no least distance formula (still unspecified) is needed, and one then applies a sum test to each sequence, for which we will run through all of the possibilities. There are many ways to solve the original problem. One is by hand. That is, we count possabilities 5 8 10 12 25 5,5 5,8 (=8,5) 5,10 (=10,5) 5,12 (=12,5) 5,25 (=25,5) 8,10 (=10,8) 8,12 (=12,8) 8,25 (=25,8) 10,10 10,12 (=12,10) 10,25 (=25,10) 12,12 12,25 (=25,12) 25,25 5,5,8 (=5,8,5=8,5,5) 5,5,10 (=5,10,5=10,5,5) . . And so forth, granted, it is a bit tedious to do by hand. Organizing that into a coherent combination pattern is not difficult, and, all I am doing here is showing how to "finger" count combinations, i.e., the brute force solution. Now if we want to make our counting more efficient, and our objective is to sum to 50, we can start counting at a minimum of two combined objects and a maximum of 6 combined objects. This is because only the (25,25) two item combinations make 50 and the last combination of the objects that makes 50 is six items (5,5,8,10,10,12). Now the simplest way of doing this is to write a program, and here is one in Mathematica. ( Code ) X={5,5,8,10,10,10,12,12,25,25,25}; i=Length[Subsets[X,{2,6}]];Print["Number of combinations is ",i] Y=Subsets[X,{2,6}]; j={}; For[k=1,k ( Output ) Number of combinations is 1474 Combinations totalling 50 {25,25} {25,25} {25,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,8,12,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {5,10,10,25} {8,10,10,10,12} {8,10,10,10,12} {5,5,8,10,10,12} {5,5,8,10,10,12} {5,5,8,10,10,12} {5,5,8,10,10,12} {5,5,8,10,10,12} {5,5,8,10,10,12} Number of combinations having sum = 50 is 41 From these 41 combinations, we can see that only five combinations are unique.
