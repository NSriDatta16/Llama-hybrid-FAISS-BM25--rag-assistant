[site]: stackoverflow
[post_id]: 4731557
[parent_id]: 4730907
[tags]: 
From the documentation server.listen(port, [hostname], [callback]) Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY). To listen to a unix socket, supply a filename instead of port and hostname. This function is asynchronous. The last parameter callback will be called when the server has been bound to the port. server.listen(path, [callback]) I think you should do your unit test from inside the callback ? At least it worked for me. I am using express.js because it is awesome. I also am using wwwdude to make http request, but the following snippet does work for me: const PORT = 1234; const HOST = 'localhost'; const assert = require('assert'); const wwwdude = require('wwwdude'); const express = require('express'); const app = module.exports = express.createServer(); const client = wwwdude.createClient({ headers: { 'User-Agent': 'wwwdude test 42' }, }); app.use( express.staticProvider(__dirname + '/public') ); app.get('/', function(req, res) { res.send('Hello World!'); }); if (!module.parent) { app.listen(PORT, HOST, function() { client.get('http://localhost:1234') .addListener('error', function (err) { }).addListener('success', function (data, resp) { assert.equal('Hello World!', data); process.exit(); }).send(); }); }
