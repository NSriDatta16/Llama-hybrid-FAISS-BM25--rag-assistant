[site]: stackoverflow
[post_id]: 1993596
[parent_id]: 1993580
[tags]: 
Here's a literal translation ( Edit : was a literal translation but there are some anomalies in the original C code which @hughdbrown pointed out in comments -- looks like you're trying to study this subject from code so utterly broken it wouldn't even compile, which seems very unwise on your part, so, anyway, I'm taking the liberty of fixing the apparent errors and absurdities of the original C code in this Python "almost"-literal translation...): import math for i in range(n): ax = ay = az = 0.0 for j in range(n): dx=x[j]-x[i] dy=y[j]-y[i] dz=z[j]-z[i] invr = 1.0/math.sqrt(dx*dx + dy*dy + dz*dz + eps) f=m[j]*invr**3 ax += f*dx # accumulate the acceleration from gravitational attraction ay += f*dy az += f*dz xnew[i] = x[i] + dt*vx[i] + 0.5*dt*dt*ax ynew[i] = y[i] + dt*vy[i] + 0.5*dt*dt*ay znew[i] = z[i] + dt*vz[i] + 0.5*dt*dt*az vx[i] += dt*ax # update velocity of particle "i" vy[i] += dt*ay vz[i] += dt*az Of course it assumes lists x, y, z, ... vx, vy, vz are all pre-existing and of the same length n , just like the C code snippet assumes for the same-named arrays.
