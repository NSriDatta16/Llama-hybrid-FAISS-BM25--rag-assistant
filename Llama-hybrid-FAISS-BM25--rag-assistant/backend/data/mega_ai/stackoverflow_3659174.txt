[site]: stackoverflow
[post_id]: 3659174
[parent_id]: 3369413
[tags]: 
There are several approaches to cross-platform development on mobile devices. Of course they all have limitations. No solution manages to take advantage of all the device's functionalities the way a native application can. Re-using code While all mobile OS don't use the same development language and API you can sometimes share some classes or logic tier code. C++ for example can probably be re-used for an iOS application , for an Android app by using the NDK , for a Symbian app since they are developed in C++, etc. Some solutions also offer the possibility to write the app in an other language than the one normally used by the device. The most famous (in fact the only one I know) are commercial and based on the Mono project (C# development): MonoTouch for iPhone [ 1 ] MonoDroid for Android (still in development) Similar project for BlackBerry (still in development) But I'm not sure we can really call this cross-platform development since the re-use of code is limited depending on the device : Windows Phone 7 will not allow native code development (maybe in further updates) AFAIK mono like project do not exist for all platforms (yet?) bada, webOS, maemo, etc. And the UI part also stays specific to each device. Web development A regular answer when asking about cross-platform development for mobiles is web development. We would then need a wrapper, that will use the mobile browser, to make it look and behave like a native application. That is how some of the cross-platform framework that we will see further on work. The rise of HTML5 brings to web development functionalities that could only be done with a native application like geolocation, off-line application, local storage. We can found more and more frameworks to develop web application for mobiles with a native look and feel by taking advantage of the latest web standards HTML5, CSS3, Js: Sencha Touch JQTouch based on jQuery JQuery Mobile framework But HTML5 is still very young and implementation may vary from a browser to another. Most default mobile browsers use the WebKit engine (main exception being Windows mobile/phone using Internet Explorer) and even so they don't necessarily support the same functionalities . Local database is still awkward to work with and we can't be sure how it is going to implemented by the different browsers. Moreover, even with HTML5, web development is still very limited compared to a native app. You can't access contacts, camera, accelerometer, etc. Edit: Earlier this month the W3C have delivered some warnings about the evolution of HTML5: Article from ZDNet So it will only suit a limited category of applications. Cross-platform frameworks And than we have the cross-platform mobile applications frameworks. With which you can presumably develop once and deploy on different platforms. These solutions usually focus on iOS and Android and rely on the WebKit engine. They offer more interaction with the phone functionalities while developing with web technologies. The most well-known are Nitobi PhoneGap, RhoMobile Rhodes, Appcelerator Titanium. But many others are out there and don't all use the same technique like MoSync which translate your code to it's own intermediate language before compiling it for the desired platform. [ 1 ] Remember that Apple has a special policy about apps written for their platform. They don't seem to be blocking these apps at this date but it is an information that should be taken into account. Edit: Apple has changed this policy since September 9.
