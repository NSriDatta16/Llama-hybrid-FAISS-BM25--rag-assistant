[site]: stackoverflow
[post_id]: 3384662
[parent_id]: 2728294
[tags]: 
I recommend a single composite application for your line-of-business app. Then there is no need for "forms reuse", the views are all there and integrated together. All your data-access can go through a single reusable layer and all 3rd party apps communicate with your system via techniques of SOA. Microsoft's Patterns and Practices group provides a few frameworks for developing a single extensible, pluggable, modular application that can be deployed through a single deployment mechanism. If you have complete control over the platform of your end users (Windows) I recommend WPF using Prism and if you don't, I recommend Silverlight using Prism. If you haven't moved to WPF/Silverlight technology yet, you can develop a good Windows Forms composite application with the Unity components from Prism or SCSF , which is much more developed for WinForms. (Note: WPF can host WinForms controls and WinForms can host WPF controls, so you can create a hybrid solution with existing components as you move toward a complete and cohesive enterprise system.) Beware that SCSF/CAB and Prism both leverage some well-known design patterns, so you'll have to get your team familiar with the fundamentals of OO and design patterns. As for the mobile solution, I think you can develop WPF views for Windows Mobile, therein allowing you to reuse the app with different views on mobile devices. WCF is hands down the best SOA framework for doing inter-application communication in .NET. If you have workflow, approval chains or document routing needs, then use WF . You can even integrate workflow editors into the composite application so end users can modify and update workflows as business needs change - all without calling you. If you're not already using an ORM, then I'd recommend nHibernate . Don't develop your own data access layer for integration with RDBMS, it's foolish; see here . Look into using ClickOnce for deployment of this application; it's got built-in support for allowing your app to detect and auto-install updates.
