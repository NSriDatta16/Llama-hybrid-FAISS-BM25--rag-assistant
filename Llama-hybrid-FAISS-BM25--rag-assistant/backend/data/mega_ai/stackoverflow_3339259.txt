[site]: stackoverflow
[post_id]: 3339259
[parent_id]: 
[tags]: 
Crockford Prototypical Inheritance... no prototype chain? No super?

Trying to understand a little more about Crockford's approach to Prototypical Inheritance whereby he essentially eliminates the constructor, thus eliminating any real possibility for a prototype chain or leveraging the idea of "super". mynamespace.object.create = function( o ) { function F(){}; F.prototype = o; return new F(); }; Is that intentional based on the theory behind prototypical? The reason I ran into this is I wanted to create a base class with an init method that did some common jquery stuff (these methods are designed for automating creating a jquery plugin from an object a la www.alexsexton.com/?p=51) As an example, I don't want to repeat this in every one of my init methods this.options = $.extend({},this.options,options); So I wanted to have that in a base init, override the init in my extended objects, and then call this.prototype.init within the override to take care of that repeated stuff. The object.create piece doesn't seem to let me do that in any way. Am I missing something here?
