[site]: stackoverflow
[post_id]: 3282212
[parent_id]: 3281901
[tags]: 
First of all, should this: Participation belongs_to :tournament belongs_to :players be this? Participation belongs_to :tournament belongs_to :player Ie, singular player after the belongs_to? I'm struggling to get my head around what this is doing: class Participation def rank_at_tour(tour) tour.participations.index(self) end end You don't really explain enough about your schema to make it easy to reverse engineer. Is it doing the following...? "Get all the participations for the given tour and return the position of this current participation in that list"? Is that how you calculate rank? If so i agree it seems like a very convoluted way of doing it. Do you do the above for the ten participation objects you get back for the player and then take the average? What is rating? Does that have anything to do with rank? Basically, can you explain your schema a bit more and then restate what you want to do? EDIT I think you just need a more efficient way of finding the position. There's one way i could think of off the top of my head - get the record you want and then count how many are above it. Add 1 to that and you get the position. eg class Participation def rank_at_tour(tour) tour.participations.count("rating > ?", self.rating) + 1 end end You should see in your log file (eg while experimenting in the console) that this just makes a count query. If you have an index on the rating field (which you should have if you don't) then this will be a very fast query to execute. Also - if tour and tournament are the same thing (as i said you seem to use them interchangeably) then you don't need to pass tour to participation since it belongs to a tour anyway. Just change the method to rank: class Participation def rank self.tour.participations.count("rating > ?", self.rating) + 1 end end
