[site]: stackoverflow
[post_id]: 1656584
[parent_id]: 1612731
[tags]: 
I have spent some more time reading around the subject (including the Domain Driven Design mini-book referenced in Bill's answer). There is an Aggregate concept in that book, which most closely represents what I am trying to achieve; the Customer encapsulates and controls access to the Account and Feature. If we stick with the Domain Driven Design approach we could use a Repository to control retrieval of the Customer, and it seems to me that this is where knowledge of the database structure would be encapsulated. I also had another look at my copy of Patterns of Enterprise Application Architecture, and while it seems that the ActiveRecord pattern is intended for a direct mapping of class to database table, if you chose not to follow the Repository approach from DDD then Data Mapper would be suitable for a composite mapping. Thanks all for your contributions. I have voted up the answers that contributed to this conclusion. As this may not be the last point in this discussion, I have flagged this answer as Community Wiki.
