[site]: datascience
[post_id]: 99898
[parent_id]: 23969
[tags]: 
One can use this Python 3 library to compute sentence similarity: https://github.com/UKPLab/sentence-transformers Code example from https://www.sbert.net/docs/usage/semantic_textual_similarity.html : # pip install -U sentence-transformers from sentence_transformers import SentenceTransformer, util model = SentenceTransformer('paraphrase-MiniLM-L12-v2') # Two lists of sentences sentences1 = ['The cat sits outside', 'A man is playing guitar', 'The new movie is awesome'] sentences2 = ['The dog plays in the garden', 'A woman watches TV', 'The new movie is so great'] #Compute embedding for both lists embeddings1 = model.encode(sentences1, convert_to_tensor=True) embeddings2 = model.encode(sentences2, convert_to_tensor=True) #Compute cosine-similarits cosine_scores = util.pytorch_cos_sim(embeddings1, embeddings2) #Output the pairs with their score for i in range(len(sentences1)): print("{} \t\t {} \t\t Score: {:.4f}".format(sentences1[i], sentences2[i], cosine_scores[i][i])) The library contains the state-of-the-art sentence embedding models. See https://stackoverflow.com/a/68728666/395857 to perform sentence clustering.
