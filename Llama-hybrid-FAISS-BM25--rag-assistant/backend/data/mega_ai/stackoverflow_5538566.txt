[site]: stackoverflow
[post_id]: 5538566
[parent_id]: 5532548
[tags]: 
A minor refactoring will save the second find in instances where you don't find results, and preallocating with AverageValue with Value saves the else part. UnwrappedRadians = unwrap( Angle ./ 180 * pi); AverageValue = Value; for i=1:length(UnwrappedRadians) mid = UnwrappedRadians(i); start = find( UnwrappedRadians(1:i) (mid + pi/2), 1, 'First'); if ~isempty(finish) AverageValue(i) = mean(Value(start:finish+i-1)); % nanmean end end end If you find that the calculation of finish is empty more often than the calculation of start, you can switch their order so that the finish check is done first. It's not clear if UnwrappedRadians will always be sorted. If so, you can reuse the results from earlier finds to reduce the size of the subvector you search over. For instance, if the you look for the last 1 between 11 and the end of the vector and it is element 23, when you search for 1.1, you can reduce the search to between 24 and the end of the vector. I've found that this technique can yield really big increases in speed. Vectorization is difficult in cases like this, because you are using the indexing variable (i) as an index again (in the find statements). It is possible to rig something up using arrayfun, but it is highly unlikely to be faster (I would guess slower, actually) and will definitely be less readable than what you have.
