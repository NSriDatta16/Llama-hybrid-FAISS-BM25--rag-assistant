[site]: stackoverflow
[post_id]: 3513036
[parent_id]: 3510964
[tags]: 
A couple points: First off, the proposed feature (implicit "this." on an extension method call) is unnecessary . Extension methods were necessary for LINQ query comprehensions to work the way we wanted; the receiver is always stated in the query so it is not necessary to support implicit this to make LINQ work. Second, the feature works against the more general design of extension methods: namely, that extension methods allow you to extend a type that you cannot extend yourself , either because it is an interface and you don't know the implementation, or because you do know the implementation but do not have the source code. If you are in the scenario where you are using an extension method for a type within that type then you do have access to the source code. Why are you using an extension method in the first place then? You can write an instance method yourself if you have access to the source code of the extended type, and then you don't have to use an extension method at all! Your implementation can then take advantage of having access to the private state of the object, which extension methods cannot. Making it easier to use extension methods from within a type that you have access to is encouraging the use of extension methods over instance methods. Extension methods are great, but it is usually better to use an instance method if you have one. Given those two points, the burden no longer falls on the language designer to explain why the feature does not exist. It now falls on you to explain why it should . Features have enormous costs associated with them. This feature is not necessary and works against the stated design goals of extension methods; why should we take on the cost of implementing it? Explain what compelling, important scenario is enabled by this feature and we'll consider implementing it in the future. I don't see any compelling, important scenario that justifies it, but perhaps there is one that I've missed.
