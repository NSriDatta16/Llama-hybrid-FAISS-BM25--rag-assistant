[site]: stackoverflow
[post_id]: 500106
[parent_id]: 364347
[tags]: 
DanHerbert got it. Darn, I spent hours on this too! In the process of trying to answer this question I came up with a simplified generic StateManagedCollection that inherits from the framework's built-in StateManagedCollection, based on the version here . Maybe you'll find it useful. Full source code of my sample project available here . using System; using System.Collections; using System.Collections.Specialized; using System.Security.Permissions; using System.Web; using System.Collections.Generic; using System.Web.UI; namespace Web { public abstract class StateManagedCollection : StateManagedCollection, IList , ICollection , IEnumerable where T : class, IStateManagedItem, new() { protected override object CreateKnownType(int index) { return Activator.CreateInstance (); } protected override Type[] GetKnownTypes() { return new Type[] { typeof(T) }; } protected override void SetDirtyObject(object o) { ((IStateManagedItem)o).SetDirty(); } #region IList Members public int IndexOf(T item) { return ((IList)this).IndexOf(item); } public void Insert(int index, T item) { ((IList)this).Insert(index, item); if (((IStateManager)this).IsTrackingViewState) { this.SetDirty(); } } public void RemoveAt(int index) { ((IList)this).RemoveAt(index); if (((IStateManager)this).IsTrackingViewState) { this.SetDirty(); } } public T this[int index] { get { return (T)this[index]; } set { this[index] = value; } } #endregion #region ICollection Members public void Add(T item) { ((IList)this).Add(item); this.SetDirty(); } public bool Contains(T item) { return ((IList)this).Contains(item); } public void CopyTo(T[] array, int arrayIndex) { ((IList)this).CopyTo(array, arrayIndex); } public bool IsReadOnly { get { return false; } } public bool Remove(T item) { if (((IList)this).Contains(item)) { ((IList)this).Remove(item); return true; } return false; } #endregion #region IEnumerable Members IEnumerator IEnumerable .GetEnumerator() { throw new NotImplementedException(); } #endregion #region IEnumerable Members IEnumerator IEnumerable.GetEnumerator() { return ((IList)this).GetEnumerator(); } #endregion } }
