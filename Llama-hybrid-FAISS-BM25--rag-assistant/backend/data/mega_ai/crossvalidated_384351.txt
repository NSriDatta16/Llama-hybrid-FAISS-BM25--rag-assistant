[site]: crossvalidated
[post_id]: 384351
[parent_id]: 
[tags]: 
Why does my product between normal and gamma distributions not have the expected shape?

I have implemented variational inference according to the model presented in Bishop's Pattern Recognition and Machine Learning (equations (10.21) - (10.30)). The VI algorithm gives me parameters to use in a model where I am approximating a posterior $p(\mu, \tau | \mathcal{D})$ with a function $q(\mu, \tau)=q(\mu)q(\tau)$ . Keep in mind that $q(\mu)$ is a Gaussian and $q(\tau)$ is a Gamma distribution. My code for getting the parameters from scipy.special import gamma as gamma_function # Check if correct gamma function from scipy.stats import norm from scipy.stats import gamma def q_mu(x): return norm.pdf(x, mu, np.sqrt(1 / lam)) def q_tau(tau): return gamma.pdf(tau, a, loc = 0, scale = 1 / b) mus = np.linspace(0, 4, 100) taus = np.linspace(-1, 3, 100) M, T = np.meshgrid(mus, taus) Z = np.zeros_like(M) for i in range(Z.shape[0]): for j in range(Z.shape[1]): Z[i][j] = q_mu(mus[i]) * q_tau(taus[j]) plt.contour(M, T, Z) In the last part of the snippet, I plot $q(\mu)q(\tau)$ with mu on the x axis and tau on the y axis. Since $q(\mu)$ is a Gaussian, the plot should look like a Gaussian (symmetric) when moving in the x-direction. Since $q(\tau)$ is a Gamma distribution, the plot should look like a Gamma distribution when travelling in the y-direction. Looking at the contour plot, this doesn't seem to be the case: : In fact, the opposite seems to be true. It looks like the plot is symmetric in the y-direction and unsymmetric (Gamma) in the x-direction. But I can't see that I've accidentally flipped anything. How come I get this result?
