[site]: datascience
[post_id]: 126959
[parent_id]: 53636
[tags]: 
import yfinance as yf # Define the ticker symbol tickerSymbol = 'NVDA' # Get data on this ticker tickerData = yf.Ticker(tickerSymbol) # Get the historical prices for this ticker # '1m' interval for minute-by-minute data, adjust 'start' and 'end' as needed tickerDf1 = tickerData.history(period='1d', start='2024-01-22', end='2024-01-26', interval='1M') tickerDf2 = tickerData.history(period='1d', start='2024-01-29', end='2024-02-02', interval='1M') tickerDf3 = tickerData.history(period='1d', start='2024-02-05', end='2024-02-09', interval='1M') tickerDf4 = tickerData.history(period='1d', start='2024-02-12', end='2024-02-19', interval='1M') In a recent personal experiment, I attempted to predict Nvidia stock prices using the last 2000 minutes of data, with a preceding 4000 minutes of data for training. The maximum closing price in the training data was lower than that in the test data. The neural network prediction followed the trend accurately but consistently forecasted values that were 0.04 less than the actual test data. By simply adding 0.04 to the predicted values, I was able to align the forecasts with the actual data, as shown in the provided image. Therefore, applying a simple linear regression to adjust the predictions within the test set could potentially match the actual values more closely. I will add now (March 2nd 2024) to my original answer that I had used expanding window and Min-Max normalization successfully and published an article about it here 2 .
