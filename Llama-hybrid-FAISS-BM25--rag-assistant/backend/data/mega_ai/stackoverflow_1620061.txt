[site]: stackoverflow
[post_id]: 1620061
[parent_id]: 1620007
[tags]: 
What you have: static NSString * const strings[] = {@"String 1", @"String 2", ...}; Is an array of immutable pointers. You might want: static NSString const *strings[] = {@"String 1", @"String 2", ...}; An array of pointers to immutable NSString objects. Or static NSString const * const strings[] = {@"String 1", @"String 2", ...}; An array of immutable pointers to immutable NSString objects. The "Clockwise-Spiral Rule" is the technique I use to interpret C declarations. The static keyword means that the array's 'storage duration' is for the entire life of the program. If the declaration is in a function, then the array doesn't go away when the function returns (though the scope will still be only for that function). If the declaration is at file scope, the static keyword will make the name of the array visible only within that compilation unit (ie., source file). Another source file could not access the array through an extern declaration.
