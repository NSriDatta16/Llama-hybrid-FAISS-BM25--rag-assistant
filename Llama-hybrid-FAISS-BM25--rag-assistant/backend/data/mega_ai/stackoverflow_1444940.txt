[site]: stackoverflow
[post_id]: 1444940
[parent_id]: 1444580
[tags]: 
I can't provide an answer, because I don't understand exactly what you are try to do, but I can offer some general advice. Start organizing your code into discrete subroutines that perform narrowly defined tasks. In addition, the subroutines that implement your central algorithms should not be oriented toward receiving input from the keyboard and producing output to the screen; rather they should receive input as arguments and return their results. If there is a need for user input or screen output, those tasks should be in separate subroutines, not comingled with your primary algorithms. A first (and partial) step down that path is to take you entire program, enclose it in a subroutine definition, and then call the subroutine with the required arguments. Instead of printing its key results, the subroutine should return them -- specifically, a reference to @matrix along with the values for $path , $alignseq1 , $alignseq2 . sub NW_algo { my ($seq1, $seq2, $matchscore, $mismatchscore, $gapscore) = @_; # The rest of your code here, but with all print # statements and inputs commented out. return \@matrix, $path, $alignseq1, $alignseq2; } my(@return_values) = NW_algo('CGCA', 'CACGTAT', 1, 0, -1); Print_matrix($return_values[0]); sub Print_matrix { for my $m ( @{$_[0]} ){ print join(' ', @$m), "\n"; } } At this point, you'll have an algorithm that can be invoked by other code, making it easier to test and debug your program going forward. For example, you could define various sets of input data and run NW_algo() on each set. Only then will it be possible to think about recursion or other techniques.
