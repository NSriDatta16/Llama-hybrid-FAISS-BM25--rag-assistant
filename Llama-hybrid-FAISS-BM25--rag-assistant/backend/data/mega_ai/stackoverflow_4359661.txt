[site]: stackoverflow
[post_id]: 4359661
[parent_id]: 
[tags]: 
Granular permissions with certain requirements for an MVC site

I don't like the built in membership providers. I've decided to roll my own. I'm trying to come up with a good method for performing authorization at the action level. Here are the requirements that I'm trying to go by: Attribute usage - I like this since it controls at a very high level in the call stack and is a nice place to organize permissions. No magic strings - This is a reason why I'm straying away from the current role providers. I don't want to leave strings lying around that can't be easily renamed. Permissions should can be composed of one other permission. Example: ReadWrite has permission for Read . Just like or'ing with an enum. NOTE: Some think this set of requirements is too broad (see comments). I don't think so, I think they're fairly straightforward. The biggest showstopper is attribute usage. There can only be "constant expressions, typeof expressions or array creation expression of an attribute parameter type". I was thinking of perhaps having something like this to make operations have static access. Inside of the attribute, it would "convert" the int to the actual Permission or something...: public static class Operations { public static class SectionA { public const int Read = 1; public const int ReadWrite = 2; } public static class SectionB { // ... and so on... } } But it really limits composition. I'm sure you're thinking "why don't you go the enum route?" well I want to plan for things to change and don't want to limit to 32 (int) or 64 (long) operations and have to do a massive rewrite later (also in the db that's just ugly). Also, if there is a better alternative than attributes on actions/controllers, then I'm all ears for suggestions. EDIT: Also from this post , I've read about the BitArray class. It seems kind of ugly, especially with the arbitrary storage in the database.
