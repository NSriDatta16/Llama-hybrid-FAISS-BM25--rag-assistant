[site]: stackoverflow
[post_id]: 3868318
[parent_id]: 3868287
[tags]: 
If the vector fills up its allocated space and you try to insert more, it needs to re-allocate its storage, and that will involve copying over the objects and destroying the old storage, which would invalidate the pointer you're keeping around - so no, this is not good enough. std::list would work fine, since it doesn't rely on continuous storage, but you lose the ability to do quick random access. Alternatively, you can store pointers to your Objects in your collection, in which case you can just take out that element, and the pointer will remain valid until you free that memory in your code - but you will need to handle that yourself at some point. Another option might be a deque ; while deque iterators are invalidated by push_back , direct references to elements (like the pointer you're using here) remain valid.
