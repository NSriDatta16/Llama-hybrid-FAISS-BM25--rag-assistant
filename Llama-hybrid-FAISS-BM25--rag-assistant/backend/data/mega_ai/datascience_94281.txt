[site]: datascience
[post_id]: 94281
[parent_id]: 
[tags]: 
Using machine learning to find the most similar image that contains another image

As the title states I want to use ml (maybe some kind of CNN autoencoder?) to find the most similar image (I have a list of 10k+ images) within another image. I am currently just using opencv with KAZE to get my current results here. If that isn't clear then here's an example Here's an example of images I will want to be searching to find something 'similar' (ex1, ex2, and ex3): Here's the matching I do (I use KAZE) from matplotlib import pyplot as plt import numpy as np import cv2 from typing import List import os import imutils def calculate_matches(des1: List[cv2.KeyPoint], des2: List[cv2.KeyPoint]): """ does a matching algorithm to match if keypoints 1 and 2 are similar @param des1: a numpy array of floats that are the descriptors of the keypoints @param des2: a numpy array of floats that are the descriptors of the keypoints @return: """ # bf matcher with default params bf = cv2.BFMatcher(cv2.NORM_L2) matches = bf.knnMatch(des1, des2, k=2) topResults = [] for m, n in matches: if m.distance Here's the result of my code: ex1.png 21.052631578947366 ex2.png 0.0 ex3.png 42.10526315789473 It does alright! It was able to tell that ex1 is similar and ex2 is not similar, however it states that ex3 is similar (even more similar than ex1). I am hoping ml will result in better result instead of a local feature extraction algorithm. Any ml things that can be done to keep only ex1 as similar and not ex3?
