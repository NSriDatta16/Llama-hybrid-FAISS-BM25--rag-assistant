[site]: stackoverflow
[post_id]: 4783905
[parent_id]: 
[tags]: 
Problems combining openssl as console and library

I would like to hide textual information (GLSL shaders in my case) used as strings in a C/C++ program, as they are directly readable within the binary. Therefore, I thought about encrypting the files during compile/build time and decrypt the data during runtime to continue with the reconstructed shaders. However, I have some trouble in getting openssl on the console work together with the library (evp) in the C program. I have to admit that I am by no means an expert in cryptography but have to go in for this topic now... Here's what I have tried: // on the console: openssl enc -aes-256-cbc -salt -in shader.frag -out shader.frag.enc // ... // in the program: //// read enc file //// int lengthIN; char * buffer_encIN; ifstream is2; is2.open( "/Path/To/My/Shader/shader.frag.enc", ios::binary ); // get length of file: is2.seekg( 0, ios::end ); lengthIN = is2.tellg(); is2.seekg( 0, ios::beg ); // allocate memory: buffer_encIN = new char[ lengthIN ]; // read data as a block: is2.read( buffer_encIN, lengthIN ); is2.close(); //// decryption //// char mykey[EVP_MAX_KEY_LENGTH] = "changeit"; // also tried: unsigned char mykey[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}; char iv[EVP_MAX_IV_LENGTH] = "01020304"; // also tried: unsigned char iv[] = {1,2,3,4,5,6,7,8}; int tmp_len = 0, in_len, out_len=0; EVP_CIPHER_CTX ctx; in_len = strlen( buffer_encIN ); char * buffer_dec = new char[ in_len ]; // decrypt EVP_DecryptInit( &ctx, EVP_aes_256_cbc(), (unsigned char *)mykey, (unsigned char *)iv ); EVP_DecryptUpdate( &ctx, (unsigned char *)buffer_dec, &out_len, (unsigned char *)buffer_encIN, in_len ); tmp_len += out_len; EVP_DecryptFinal( &ctx, (unsigned char *)&buffer_dec[ out_len ], &out_len ); printf( "Output:\n%s\n", buffer_dec ); I am stuck here with two problems. First, most of the things work out nicely only if I use the -nosalt option, which is not applicable for deployment. At least I get EVP_DecryptInit and *Update to return 1, but *Final results in 0: several bytes at the end are messed up then. Second, using the full version (i.e. with salt) I cannot get things up and running at all :( In a nutshell: is this the right approach and I just have to do my homework (help esp. on salt/IV appreciated ;)), or is this just spending hours and getting no more security than applying some ROT13 scheme to hide the string? Any help and comments much appreciated! Matthias
