[site]: stackoverflow
[post_id]: 24537
[parent_id]: 24451
[tags]: 
One of the reasons goto is bad, besides coding style is that you can use it to create overlapping , but non-nested loops: loop1: a loop2: b if(cond1) goto loop1 c if(cond2) goto loop2 This would create the bizarre, but possibly legal flow-of-control structure where a sequence like (a, b, c, b, a, b, a, b, ...) is possible, which makes compiler hackers unhappy. Apparently there are a number of clever optimization tricks that rely on this type of structure not occuring. (I should check my copy of the dragon book...) The result of this might (using some compilers) be that other optimizations aren't done for code that contains goto s. It might be useful if you know it just, "oh, by the way", happens to persuade the compiler to emit faster code. Personally, I'd prefer to try to explain to the compiler about what's probable and what's not before using a trick like goto, but arguably, I might also try goto before hacking assembler.
