[site]: stackoverflow
[post_id]: 4617350
[parent_id]: 4617306
[tags]: 
If you have class and a constructor which takes in an object as a input param - is that object passed by reference or is it passed by value? All parameters are passed by value in C# unless the parameter is marked with out or ref . This is a huge source of confusion. I'll state things a little more explicitly. All parameters have their value copied unless the parameter is marked with out or ref . For value types, this means that a copy of the value being passed is made. For reference types this means that a copy of the reference is made. For this last point, the value of a reference type is the reference. And is it true to assume that for class methods, object input parameters are passed by value by default unless the ref keyword is used? Again, all parameters are passed by value in C# unless the parameter is marked with out or ref . For a parameter marked with ref , a reference to the parameter is passed to the method and now you can think of that parameter as an alias. Thus, when you say void M(ref int m) { m = 10; } int n = 123; M(ref n); you can think of m in M as an alias for n . That is m and n are just two different names for the same storage location. This is very different from string s = "Hello, world!"; string t = s; In this case, s and t are not alises for the same storage location. These are two different variables that happen to refer to the same object. What about the `out keyword? Does this still mean that it is passed by reference? The only difference between ref and out is that ref requires the variable to be initialized before being passed.
