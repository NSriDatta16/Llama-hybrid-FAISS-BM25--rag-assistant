[site]: stackoverflow
[post_id]: 2772574
[parent_id]: 
[tags]: 
High Runtime for Dictionary.Add for a large amount of items

I have a C#-Application that stores data from a TextFile in a Dictionary-Object. The amount of data to be stored can be rather large, so it takes a lot of time inserting the entries. With many items in the Dictionary it gets even worse, because of the resizing of internal array, that stores the data for the Dictionary. So I initialized the Dictionary with the amount of items that will be added, but this has no impact on speed. Here is my function: private Dictionary AddEdgesToExistingNodes(HashSet connections) { Dictionary resultSet = new Dictionary (connections.Count); foreach (NodeConnection con in connections) { ... resultSet.Add(nodeIdPair, newEdge); } return resultSet; } In my tests, I insert ~300k items. I checked the running time with ANTS Performance Profiler and found, that the Average time for resultSet.Add(...) doesn't change when I initialize the Dictionary with the needed size. It is the same as when I initialize the Dictionary with new Dictionary(); (about 0.256 ms on average for each Add). This is definitely caused by the amount of data in the Dictionary (ALTHOUGH I initialized it with the desired size). For the first 20k items, the average time for Add is 0.03 ms for each item. Any idea, how to make the add-operation faster? Thanks in advance, Frank Here is my IdPair-Struct: public struct IdPair { public int id1; public int id2; public IdPair(int oneId, int anotherId) { if (oneId > anotherId) { id1 = anotherId; id2 = oneId; } else if (anotherId > oneId) { id1 = oneId; id2 = anotherId; } else throw new ArgumentException("The two Ids of the IdPair can't have the same value."); } }
