[site]: stackoverflow
[post_id]: 4776670
[parent_id]: 
[tags]: 
Should setting an image src to data URL be available immediately?

Consider the following (fragile) JavaScript code: var img = new Image; img.src = "data:image/png;base64,..."; // Assume valid data // Danger(?) Attempting to use image immediately after setting src console.log( img.width, img.height ); someCanvasContext.drawImage( img, 0, 0 ); // Danger(?) Setting onload after setting src img.onload = function(){ console.log('I ran!'); }; The Question(s) Should the image width and height be correct immediately? Should the canvas draw work immediately? Should the onload callback (set after the src was changed) be invoked? Experimental Tests I created a simple test page with similar code. In Safari my first tests, both by opening the HTML page locally ( file:/// url) and loading it from my server, showed everything working: the height and width is correct, the canvas draw works, and the onload also fires. In Firefox v3.6 (OS X), loading the page after launching the browser shows that the height/width is not correct immediately after setting, drawImage() fails. (The onload handler does fire, however.) Loading the page again, however, shows the width/height being correct immediately after setting, and drawImage() working. It would appear that Firefox caches the contents of the data URL as an image and has it available immediately when used in the same session. In Chrome v8 (OS X) I see the same results as in Firefox: the image is not available immediately, but takes some time to asynchronously 'load' from the data URL. In addition to experimental proof of what browsers the above does or does not work, I'd really love links to specs on how this is supposed to behave. So far my Google-fu has not been up to the task. Playing It Safe For those who don't understand why the above might be dangerous, know that you should use images like this to be safe: // First create/find the image var img = new Image; // Then, set the onload handler img.onload = function(){ // Use the for-sure-loaded img here }; // THEN, set the src img.src = '...';
