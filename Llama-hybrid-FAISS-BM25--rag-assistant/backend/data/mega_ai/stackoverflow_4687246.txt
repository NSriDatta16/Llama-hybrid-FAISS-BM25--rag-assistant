[site]: stackoverflow
[post_id]: 4687246
[parent_id]: 4686983
[tags]: 
This exact question was dealt with at length on Roberto Farah's blog: Comparing RegEx.Replace, String.Replace and StringBuilder.Replace â€“ Which has better performance? I'll summarize the findings here, which come as a shock to many .NET developers. It turns out that for relatively simple string replacement (in cases where it's not necessary for matches to be case sensitive), RegEx.Replace() has the worst performance and String.Replace() wins with the best. A link is also provided to an article on CodeProject that confirms these findings: StringBuilder vs String / Fast String Operations with .NET 2.0 In general, I would say the rules ought to be as follows: Use String.Replace() when you only have to do a small number of replacements (say around 5) Use StringBuilder.Replace() when you have to do a larger number of replacements Reserve regular expressions ( RegEx.Replace ) only for the most complex scenarios where it's worth paying a slight performance penalty for the elegance of a single expression that handles all of the necessary replacements. Ignore all of the above guidelines and use whatever makes your code most readable or expressive. Prematurely optimizing something like this isn't worth the time it took me to write this answer.
