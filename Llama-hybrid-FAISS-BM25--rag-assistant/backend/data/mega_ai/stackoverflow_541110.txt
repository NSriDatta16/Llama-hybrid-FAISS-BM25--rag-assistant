[site]: stackoverflow
[post_id]: 541110
[parent_id]: 541033
[tags]: 
Your solution will not perform well when all users request the same video. A better solution is to have all videos available on all servers and use a load balancing server to redirect the current request to the server which has the lowest number of feeds open. Note that storage back ends (RAID arrays, SAN) can deliver data at a very high rate, so you often can get away with one storage system for several video servers (i.e. one storage system per N video servers and 1 load balancer (or two if you want failover)). A good solution here is to have a "redirect" command in the protocol: Client asks load balancer (LB) for video LB tells client which video server (VS) to use. This is a simple "find VS with the lowest amount of open feeds." Client connects directly to VS (to avoid all overhead) VS tells LB the current amount of open feeds (don't use an incremental approach here to avoid synchronization issues) VS begins streaming the data to the client When a client disconnects, VS tells LB of the new number of feeds [EDIT] The main reason to get the clients to connect directly to the video servers is network throughput. If all VS send their data to the LB who passes it on to the clients, you are limiting yourself to the speed of the single (or dual) network card of the LB. If you have 5 VS, you can get five times the throughput when connecting directly. Also, you can easily scale your system when more users hammer it by simply adding another video server, plugging it into the backbone and adding one entry to the list on the LB.
