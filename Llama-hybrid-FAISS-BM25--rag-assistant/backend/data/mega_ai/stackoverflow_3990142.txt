[site]: stackoverflow
[post_id]: 3990142
[parent_id]: 3990093
[tags]: 
You can always replace a variable with getter, if you want such kind of 'variable-inheritance'. Not sure if 'variable-inheritance' ((c)) is a good design pattern in general, though. class Parent { public void doStuff() { System.out.println(getName()); } public String getName() { return "Parent"; } } class Child extends Parent { public Child() { doStuff(); } public String getName() { return "Child"; } } Or you could have protected constructor in Parent class, taking the name to use. edit I wouldn't call it a 'hack'. And version with passing parameter into parent constructor can be pretty elegant too. class Parent { private final String name; // don't let use to invoke this constructor, only for child classes protected Parent(String name) { this.name = name; } // public constructor for users public Parent() { this("Parent"); } public void doStuff() { System.out.println(name); } } class Child extends Parent { public Child() { super("Child"); doStuff(); } } do you have any idea why Java seems to have abandoned the concept of inheriting member variables? Java has abandoned a lot of C++ concepts (starting from infamous multiple inheritance), because they didn't add that much value to the language, but increased its complexity. Although I don't have anything against variable-inheritance, I'm not suffering without this concept either. And personally, I like the language simple and clean.
