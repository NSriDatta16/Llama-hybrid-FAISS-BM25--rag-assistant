[site]: crossvalidated
[post_id]: 482823
[parent_id]: 
[tags]: 
glmmTMB: AR1 models fail to converge

I am trying to utilize the first-order autocorrelation [AR(1)] covariance structure abilities of the glmmTMB package (described here by Kasper Kristensen) to model experimental time series data collected from multiple locations. However, the models consistently fail to converge, with the warning message: In fitTMB(TMBStruc) : Model convergence problem; non-positive-definite Hessian matrix. See vignette('troubleshooting') . To diagnose the problem, I created some simulated AR1 data (see code below). However, the failure-to-converge problem persists even when varying the time series length, data distribution and link function, dispersion, zero inflation, and model random effects structure. Is this a problem with my syntax, a data issue, or a glmmTMB bug? Many thanks for the assistance. # Simulation test of AR(1) time series using glmmTMB # ------------------------------------------------------------------------------------ # Install or load packages #install.packages('bbmle') #install.packages('dplyr') #install.packages('ggplot2') #install.packages('patchwork') #install.packages('Matrix') #install.packages('devtools') #library('devtools') #devtools::install_github("glmmTMB/glmmTMB/glmmTMB") library(bbmle) library(dplyr) library(ggplot2) library(glmmTMB) library(patchwork) # ------------------------------------------------------------------------------------ # Set parameters t = 40 # Length of time series phi = 0.8 # Amount of autocorrelation stdev = 0.1 # Standard deviation eff $plot location, sim.dat$treatment, sep = "_") # List description for AR(1) model ar.sim $response response + runif(nrow(sim.dat), min = -0.5, max = 0.5) # Convert simulated data to positive integers for poisson model sim.dat $response response * 100) sim.dat $response response - min(sim.dat $response) hist(sim.dat$ response) # Plot simulated data ggplot(data = sim.dat, aes(x = time, y = response, color = treatment)) + geom_abline(intercept = 0, slope = 0, linetype = "dashed") + geom_line() + facet_wrap(~ location, ncol = 1, scales = 'fixed') # ------------------------------------------------------------------------------------ # Fit models using glmmTMB # Fixed-effects model, no correlation structure sim.mod1 $location), function(x){ acf(sim.dat$resid[sim.dat$location == x], lag.max = length(unique(sim.dat$time)) / 3, plot = FALSE)$ acf }) pacf.dat $location), function(x){ pacf(sim.dat$resid[sim.dat$location == x], lag.max = length(unique(sim.dat$time)) / 3, plot = FALSE)$ acf } ) acf.dat $location)) colnames(pacf.dat) location)) acf.dat % dplyr::mutate(lag = 1:nrow(acf.dat) - 1) %>% tidyr::gather(key = "location", value = "acf", -lag) pacf.dat % dplyr::mutate(lag = 1:nrow(pacf.dat)) %>% tidyr::gather(key = "location", value = "pacf", -lag) acf.dat $crit location == "a1", ]$time))) # Plot ACF by location p1 $pacf), ], aes(x = lag, y = pacf)) + ggtitle("Average partial autocorrelation across locations") + stat_summary(fun.data = mean_cl_boot) + geom_hline(yintercept = 0) + geom_line(aes(y = crit), linetype = "dashed") + geom_line(aes(y = -crit), linetype = "dashed") + coord_cartesian(ylim = c(-0.4, 1.0)) + scale_y_continuous(breaks = seq(-1, 1, by = 0.2), name = "PACF") + scale_x_continuous(limits = c(0.95, max(acf.dat$ lag)), breaks = 1:max(acf.dat$lag), name = "Lag") + theme_classic() + theme(aspect.ratio = 1) p1 + p2 } plot.acf.fun(sim.mod1) # Fixed-effects model, no correlation structure plot.acf.fun(sim.mod2) # Mixed-effect model (random intercept), no correlation structure plot.acf.fun(sim.mod3) # Fixed-effects model, AR(1) correlation structure plot.acf.fun(sim.mod4) # Mixed-effect model (random intercept), AR(1) correlation structure
