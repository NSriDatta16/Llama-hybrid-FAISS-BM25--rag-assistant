[site]: crossvalidated
[post_id]: 616693
[parent_id]: 612473
[tags]: 
I found a possible approach in a very similar experimental setup from Ein-Dor et al. (2020) to assess the attainment of significant improvements of the AL query strategies over the random baseline. Specifically, for each query strategy and method, I calculate the p-value of the two-sided Wilcoxon signed-rank and perform a Bonferroni correction to account for the multiple strategies examined. To compute the p-value for a given strategy S and method, we compare the micro F1-score values for all pairs ( $S_{cik}$ , $R_{dik}$ ), where $R$ represents the results from the random baseline, $d \in D$ , and $D$ represents the two distinct corpora, $i = {1, ..., 19}$ is the step/iteration index, and $k = {1, ..., 5}$ is the experiment number. A possible implementation in Python would be: from scipy.stats import wilcoxon from statsmodels.stats.multitest import multipletests ALPHA = 0.05 BASELINE_NAME = "random sampling" METHODS = ["BiLSTM", "BERT", "CNN", "CRF"] STRATEGIES = ["LC", "BatchBALD"] def test_al_strategies(): # create an array to store the p-values for each strategy and scenario p_values = np.zeros((len(STRATEGIES), len(METHODS))) for j, method in enumerate(METHODS): method_p_values = [] for i, strategy_name in enumerate(STRATEGIES): strategy_data = load_method_data(method=method, strategy=strategy_name) baseline_data = load_method_data(method=method, strategy=BASELINE_NAME) assert len(strategy_data) == len(baseline_data) # calculate the Wilcoxon signed-rank test p-value for the pairs _, p_value = wilcoxon(x=strategy_data, y=baseline_data) # store the p-value for the current strategy and method method_p_values.append(p_value) # perform Bonferroni correction on the p-values for the current scenario rejected, corrected_p_values, _, _ = multipletests( method_p_values, alpha=ALPHA, method="bonferroni" ) # store the corrected p-values in the array p_values[:, j] = corrected_p_values # print the corrected p-values and indicate whether the null hypothesis is rejected or not for j, method in enumerate(METHODS): for i, strategy_name in enumerate(STRATEGIES): is_rejected = p_values[i, j]
