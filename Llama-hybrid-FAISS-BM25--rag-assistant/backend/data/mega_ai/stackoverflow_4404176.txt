[site]: stackoverflow
[post_id]: 4404176
[parent_id]: 
[tags]: 
Improve .NET/MSSQL select & update performance

I'd like to increase performance of very simple select and update queries of .NET & MSSQL 2k8. My queries always select or update a single row. The DB tables have indexes on the columns I query on. My test .NET code looks like this: public static MyData GetMyData(int accountID, string symbol) { using (var cnn = new SqlConnection(connectionString)) { cnn.Open(); var cmd = new SqlCommand("MyData_Get", cnn); cmd.CommandType = CommandType.StoredProcedure; cmd.Parameters.Add(CreateInputParam("@AccountID", SqlDbType.Int, accountID)); cmd.Parameters.Add(CreateInputParam("@Symbol", SqlDbType.VarChar, symbol)); SqlDataReader reader = cmd.ExecuteReader(); while (reader.Read()) { var MyData = new MyData(); MyData.ID = (int)reader["ID"]; MyData.A = (int)reader["A"]; MyData.B = reader["B"].ToString(); MyData.C = (int)reader["C"]; MyData.D = Convert.ToDouble(reader["D"]); MyData.E = Convert.ToDouble(reader["E"]); MyData.F = Convert.ToDouble(reader["F"]); return MyData; } } } and the according stored procedure looks like this: PROCEDURE [dbo].[MyData_Get] @AccountID int, @Symbol varchar(25) AS BEGIN SET NOCOUNT ON; SELECT p.ID, p.A, p.B, p.C, p.D, p.E, p.F FROM [MyData] AS p WHERE p.AccountID = @AccountID AND p.Symbol = @Symbol END What I'm seeing if I run GetMyData in a loop, querying MyData objects, I'm not exceeding about ~310 transactions/sec. I was hoping to achieve well over a 1000 transactions/sec. On the SQL Server side, not really sure what I can improve for such a simple query. ANTS profiler shows me that on the .NET side, as expected, the bottleneck is cnn.Open and cnn.ExecuteReader, however I have no idea how I could significantly improve my .NET code? I've seen benchmarks though where people seem to easily achieve 10s of thousands transactions/sec. Any advice on how I can significantly improve the performance for this scenario would be greatly appreciated! Thanks, Tom EDIT: Per MrLink's recommendation, adding "TOP 1" to the SELECT query improved performance to about 585 transactions/sec from 310 EDIT 2: Arash N suggested to have the select query "WITH(NOLOCK)" and that dramatically improved the performance! I'm now seeing around 2500 transactions/sec EDIT 3: Another slight optimization that I just did on the .NET side helped me to gain another 150 transactions/sec. Changing while(reader.Read()) to if(reader.Read()) surprisingly made quite a difference. On avg. I'm now seeing 2719 transactions/sec
