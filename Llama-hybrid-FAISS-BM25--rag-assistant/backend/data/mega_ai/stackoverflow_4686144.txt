[site]: stackoverflow
[post_id]: 4686144
[parent_id]: 4631702
[tags]: 
Your table structure may be a little iffy. The example input data you provide suggests that the entire set of measures applies to the entire node list. If this is true, then you are better off hashing the node list string, getting something like this: TABLE: Category HashId NodeList ====== =================== 289383 node1\node2\.... 139829 node6\node7\.... The foreign key from MeasurementData is now on the HashId. This answers your Q1: generate the hash in C# while passing the data, generating two output files that are BCP ready for the Category table and the MeasurementData tables. Since this is some kind of data warehouse, don't be afraid to generate other copies of the data that are optimized for retrieval by other methods, so by all means make a second representation of the categories, in a CategoryDetails table something like this: TABLE CategoryDetails HashId NodeName ParentNodeName ====== ========= ================= 289383 node1 289383 node2 node1 etc, etc, As for how to use Common Table Expressions, I also had some trouble wrapping my head around them, but once I figure it out I wrote a blog entry: http://database-programmer.blogspot.com/2010/11/recursive-queries-with-common-table.html
