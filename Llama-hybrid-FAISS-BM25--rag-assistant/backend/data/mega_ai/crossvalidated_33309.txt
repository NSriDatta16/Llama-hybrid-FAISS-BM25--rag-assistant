[site]: crossvalidated
[post_id]: 33309
[parent_id]: 31374
[tags]: 
First of all, you should check out the auto.arima and ets functions in the forecast package. Secondly, you should consider which frequency is most appropriate for the data. Do you really expect that the logins on 11/1/2011 will be directly related to the logins on 11/1/2001, 11/1/2002...11/1/2010? Make some seasonplots of your data at different frequencies, and see if you can identify what seems to be the most "natural." I would suggest trying frequency=7, as it makes intuitive sense to me that the number of logins on a Sunday will be directly related to the number of logins last Sunday, and the Sunday before that. Thirdly, if you use an arima model, you can use the xreg term to pass dummy variables to represent other seasonal periods, such as day of the month, day of the year, month of the year, and holidays. The holidayNYSE function in timeDate is useful for finding holidays. Fourthly, if you start fitting any neural networks, make sure you cross-validate them! Cross-validating time series is difficult, but here's some R code to help you out . Finally, before you go too crazy with the analysis, consider your overall goal. For example, if your single goal is to accurately forecast peak CPU demand 6 months in advance, perhaps you should aggregate all your data to the monthly level before making your forecasts. You could fit an arima model to CPU demand, and use logins and registrations as your external regressors.
