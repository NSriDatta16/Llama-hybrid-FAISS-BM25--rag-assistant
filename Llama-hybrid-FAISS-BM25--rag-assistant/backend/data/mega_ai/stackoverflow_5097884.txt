[site]: stackoverflow
[post_id]: 5097884
[parent_id]: 5097628
[tags]: 
It's not possible to have a fragment shader write to anywhere other than the fragment it is processing. What you probably want to do is ping pong rendering. In your code, you'd have three textures, matching your listed tasks: the secondary texture the source model texture map the destination model texture map At a first run, you'd use (1) and (2) as source textures, to draw to (3). Next time through the loop you'd use (1) and (3) to write to (2). Then you'd switch back to using (1) and (2) to write to (3). And so on. So (2) and (3) are connected with framebuffer objects with the textures supplied as the colour buffer in place of a renderbuffer. NVidia authored the GL_NV_texture_barrier extension in 2009 that allows you to compact (2) and (3) into a single texture, provided you are explicit about the dividing line between where you're reading and where you're writing. I don't have the expertise to say how widely available it is. Attempting to read and write to the same texture (as is possible with FBOs) otherwise produces undefined results in OpenGL. Prompting issues at the hardware level are related to caching and multisampling.
