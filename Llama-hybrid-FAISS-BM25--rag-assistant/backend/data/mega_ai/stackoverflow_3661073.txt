[site]: stackoverflow
[post_id]: 3661073
[parent_id]: 
[tags]: 
Securing/omitting selected properties of a domain entity in NHibernate (subclass, projection, ?)

Consider the following simplified scenario: public class Person { public string Name { get; set; } public int Age { get; set; } // restricted public string SocialSecurityNumber { get; set; } // restricted public string MothersMaidenName { get; set; } } So, in the application, many users can view Person data. Some users can view all; other users can view only Name and Age . Having the UI display only authorized data is easy enough on the client side, but I really don't want to even send that data to the client. I've tried to achieve this by creating a FullPerson : BasicPerson hierarchy (table-per-class-hierarchy). I used two implementations of a StaffRepository to get the desired type, but the necessary casting fails at runtime because of the NH proxies. Of course in the RDBMS any given row in the People table can represent a FullPerson or a BasicPerson , and giving them both the same discriminator value does not work either. I considered mapping only FullPerson and using AliasToBean result transformer to filter down to BasicPerson , but I understand this to be a one-way street, whereas I want the full benefit of entity management and lazy loading (though the example above doesn't include collections) in the session. Another thought I had was to wrap up all the restricted fields into a class and add this as a property. My concerns with this approach are several: It compromises my domain model, I'd have to declare the property as a collection (always of 1) in order to have it load lazily, and I'm not even sure how I'd prevent that lazy collection from loading. All this feels wrong. Is there a known approach to achieve the desired result? clarification: This in an intranet-only desktop application; the session lives on the client. While I can certainly create an intermediate service layer, I would have to give up lazy loading and change tracking, which I'd really like to keep in place.
