[site]: stackoverflow
[post_id]: 631657
[parent_id]: 631632
[tags]: 
enum type { typeint, typefloat, typedouble } struct genericarray { enum type type; union { int i; float f; double d; } storage; }; is what you need (imho.) EDIT: to use void* as a container for int/float/double, you must allocate it: (array is genericarray of your old type - with void* storage) array.storage = malloc(sizeof(int)); and dereference as: (*((int*)array.storage)) replace float for the case of type == typefloat, etc. and you must also free it free(array.storage);
