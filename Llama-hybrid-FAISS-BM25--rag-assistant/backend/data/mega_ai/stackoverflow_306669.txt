[site]: stackoverflow
[post_id]: 306669
[parent_id]: 306625
[tags]: 
A few questions, the answers may inform your decision: How important is the correct functioning of this code? Is the implementation of this code likely to be changed in the future? (if so, test more to support the future change) Is the public contract of this code likely to change in the future? (if so, test less - to reduce the amount of throw-away test code) How is the code coverage, are all branches visited? Even if the code doesn't branch, are boundary considerations tested? Do the tests run quickly? Edit: Hmm, so to advise in your specific scenario. Since you started writing unit tests yesterday, you might not have the experience to decide among all these factors. Let me help you: This code is probably not too important (no one dies, no one goes to war, no one is sued), so a smattering of tests will be fine. The implementation probably won't change (prime number techniques are well known), so we don't need tests to support this. If the implementation does change, it's probably due to an observed failing value. That can be added as a new test at the time of change. The public contract of this won't change. Get 100% code coverage on this. There's no reason to write code that a test doesn't visit in this circumstance. You should be able to do this with a small number of tests. If you care what the code does when zero is called, test that. The small number of tests should run quickly. This will allow them to be run frequently (both by developers and by automation). I would test 1, 2, 3, 21, 23, a "large" prime (5 digits), a "large" non-prime and 0 if you care what this does with 0.
