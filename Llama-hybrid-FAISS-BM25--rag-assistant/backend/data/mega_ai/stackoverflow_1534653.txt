[site]: stackoverflow
[post_id]: 1534653
[parent_id]: 1534218
[tags]: 
You definitely want to weigh the different matches. If an SSN matches, that's a pretty good indication. If a firstName matches, that's basically worthless. You could try a scoring method based on weights for the matches, combined with the phonetic string matching algorithms you linked to. Here's an example I whipped up in T-SQL. It would have to be ported to Oracle for your issue. --Score Threshold to be returned DECLARE @Threshold DECIMAL(5,5) = 0.60 --Weights to apply to each column match (0.00 - 1.00) DECLARE @Weight_FirstName DECIMAL(5,5) = 0.10 DECLARE @Weight_LastName DECIMAL(5,5) = 0.40 DECLARE @Weight_SSN DECIMAL(5,5) = 0.40 DECLARE @Weight_Gender DECIMAL(5,5) = 0.10 DECLARE @NewStuff TABLE (ID INT IDENTITY PRIMARY KEY, FirstName VARCHAR(MAX), LastName VARCHAR(MAX), SSN VARCHAR(11), Gender VARCHAR(1)) INSERT INTO @NewStuff ( FirstName, LastName, SSN, Gender ) VALUES ( 'Ben','Sanders','234-62-3442','M' ) DECLARE @OldStuff TABLE (ID INT IDENTITY PRIMARY KEY, FirstName VARCHAR(MAX), LastName VARCHAR(MAX), SSN VARCHAR(11), Gender VARCHAR(1)) INSERT INTO @OldStuff ( FirstName, LastName, SSN, Gender ) VALUES ( 'Ben','Stickler','234-62-3442','M' ), --3/4 Match ( 'Albert','Sanders','523-42-3441','M' ), --2/4 Match ( 'Benne','Sanders','234-53-2334','F' ), --2/4 Match ( 'Ben','Sanders','234623442','M' ), --SSN has no dashes ( 'Ben','Sanders','234-62-3442','M' ) --perfect match SELECT 'NewID' = ns.ID, 'OldID' = os.ID, 'Weighted Score' = (CASE WHEN ns.FirstName = os.FirstName THEN @Weight_FirstName ELSE 0 END) + (CASE WHEN ns.LastName = os.LastName THEN @Weight_LastName ELSE 0 END) + (CASE WHEN ns.SSN = os.SSN THEN @Weight_SSN ELSE 0 END) + (CASE WHEN ns.Gender = os.Gender THEN @Weight_Gender ELSE 0 END) , 'RAW Score' = CAST( ((CASE WHEN ns.FirstName = os.FirstName THEN 1 ELSE 0 END) + (CASE WHEN ns.LastName = os.LastName THEN 1 ELSE 0 END) + (CASE WHEN ns.SSN = os.SSN THEN 1 ELSE 0 END) + (CASE WHEN ns.Gender = os.Gender THEN 1 ELSE 0 END) ) AS varchar(MAX)) + ' / 4', os.FirstName , os.LastName , os.SSN , os.Gender FROM @NewStuff ns --make sure that at least one item matches exactly INNER JOIN @OldStuff os ON os.FirstName = ns.FirstName OR os.LastName = ns.LastName OR os.SSN = ns.SSN OR os.Gender = ns.Gender where (CASE WHEN ns.FirstName = os.FirstName THEN @Weight_FirstName ELSE 0 END) + (CASE WHEN ns.LastName = os.LastName THEN @Weight_LastName ELSE 0 END) + (CASE WHEN ns.SSN = os.SSN THEN @Weight_SSN ELSE 0 END) + (CASE WHEN ns.Gender = os.Gender THEN @Weight_Gender ELSE 0 END) >= @Threshold ORDER BY ns.ID, 'Weighted Score' DESC And then, here's the output. NewID OldID Weighted Raw First Last SSN Gender 1 5 1.00000 4 / 4 Ben Sanders 234-62-3442 M 1 1 0.60000 3 / 4 Ben Stickler 234-62-3442 M 1 4 0.60000 3 / 4 Ben Sanders 234623442 M Then, you would have to do some post processing to evaluate the validity of each possible match. If you ever get a 1.00 for weighted score, you can assume that it's the right match, unless you get two of them. If you get a last name and SSN (a combined weight of 0.8 in my example), you can be reasonably certain that it's correct.
