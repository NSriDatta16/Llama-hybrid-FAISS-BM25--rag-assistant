[site]: stackoverflow
[post_id]: 3149230
[parent_id]: 3149209
[tags]: 
Sorry to say but you cannot return anonymous type out side the scope of method. This is the alternate way to get anonmous type // Method that returns anonymous type as object object ReturnAnonymous() { return new { City="Prague", Name="Tomas" }; } // Application entry-point void Main() { // Get instance of anonymous type with 'City' and 'Name' properties object o = ReturnAnonymous(); // This call to 'Cast' method converts first parameter (object) to the // same type as the type of second parameter - which is in this case // anonymous type with 'City' and 'Name' properties var typed = Cast(o, new { City="", Name="" }); Console.WriteLine("Name={0}, City={1}", typed.Name, typed.City); } // Cast method - thanks to type inference when calling methods it // is possible to cast object to type without knowing the type name T Cast (object obj, T type) { return (T)obj; } you can use it only for types in one assembly (two anonymous types from two different assemblies will be internally compiled to two different types that can't be converted using this trick).
