[site]: crossvalidated
[post_id]: 94537
[parent_id]: 47923
[tags]: 
Computationally the most effective way to decide whether two sets of points are linearly separable is by applying linear programming . GLTK is perfect for that purpose and pretty much every highlevel language offers an interface for it - R , Python, Octave, Julia, etc. With respect to the answer suggesting the usage of SVMs : Using SVMs is a sub-optimal solution to verifying linear separability for two reasons: SVMs are soft-margin classifiers. That means a linear kernel SVM might settle for a separating plane which is not separating perfectly even though it might be actually possible. If you then check the error rate it is going to be not 0 and you will falsely conclude that the two sets are not linearly separable. This issue can be attenuated by choosing a very high cost coefficient C - but this comes itself at a very high computational cost. SVMs are maximum-margin classifiers. That means the algorithm will try to find a separating plane that is separating the two classes while trying to stay away from both as far as possible. Again this is a feature increasing the computational effort unnecessarily as it calculates something that is not relevant to answering the question of linear separability. Let's say you have a set of points A and B: Then you have to minimize the 0 for the following conditions: (The A below is a matrix, not the set of points from above) "Minimizing 0" effectively means that you don't need to actually optimize an objective function because this is not necessary to find out if the sets are linearly separable. In the end ( ) is defining the separating plane. In case you are interested in a working example in R or the math details, then check this out.
