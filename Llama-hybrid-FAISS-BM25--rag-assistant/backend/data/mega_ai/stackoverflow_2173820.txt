[site]: stackoverflow
[post_id]: 2173820
[parent_id]: 2173501
[tags]: 
As Georg said, you can associate whatever object to another object using the Objective-C runtime, so you can associate an Object to a control if you really want. But that is not really how a standard Cocoa program works. Instead, in Cocoa, the Model-View-Controller pattern and the Delegation are the standard idiom, and associating an object directly to a widget or a view is discouraged. Even for a very small program, you would at least create a Model-Controller (called usually the application delegate in the Cocoa jargon) which manages the data, and keep the view composed of the standard controls as is. Then the view and the model-controller interact via target/action and delegation. Apple has a very nice discussion of design patterns prevalent in Cocoa, see here . In general, when you move from one API(Winforms/C#) to another API(Cocoa/Objective-C), there are some similarities but also some differences. It is usually worth learning how things are done in that API, rather than trying to shoehorn what you're used to into a new situation. (Just to be clear, I'm not saying which API is inherently better; this discussion goes both ways!) So, when you are in a situation: To do X in API A , I know the idiom P works. I now want to do X in API B . How can I directly implement idiom P in API B ? I recommend you to ask To do X in API B , what should I do? What's the idiom in API B ? instead.
