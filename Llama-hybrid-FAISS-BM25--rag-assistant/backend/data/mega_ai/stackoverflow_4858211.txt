[site]: stackoverflow
[post_id]: 4858211
[parent_id]: 4858108
[tags]: 
You are first putting the (already-escaped) string into the URL class. That doesn't escape anything. Then you are pulling out sections of the URL , which returns them without any further processing (so -- they are still escaped since they were escaped when you put them in). Finally, you are putting the sections into the URI class, using the multi-argument constructor . This constructor is specified as encoding the URI components using percentages. Therefore, it is in this final step that, for example, " : " becomes " %3A " (good) and " %3A " becomes " %253A " (bad). Since you are putting in URLs which are already-encoded*, you don't want to encode them again. Therefore, the single-argument constructor of URI is your friend. It doesn't escape anything, and requires that you pass a pre-escaped string. Hence, you don't need URL at all: mUrl = "A string url is already percent-encoded for use in a new HttpGet()"; URI uri = new URI(mUrl); *The only problem is if your URLs are sometimes not percent-encoded, and sometimes they are. Then you have a bigger problem. You need to decide whether your program is starting out with a URL which is always encoded, or one which needs to be encoded. Note that there is no such thing as a full URL which is not percent-encoded. For example, you can't take the full URL " http://example.com/bob&co " and somehow turn it into the properly-encoded URL " http://example.com/bob%26co " -- how can you tell the difference between the syntax (which shouldn't be escaped) and the characters (which should)? This is why the single-argument form of URI requires that strings are already-escaped. If you have unescaped strings, you need to percent-encode them before inserting them into the full URL syntax, and that is what the multi-argument constructor of URI helps you do. Edit: I missed the fact that the original code discards the fragment. If you want to remove the fragment (or any other part) of the URL, you can construct the URI as above, then pull all the parts out as required (they will be decoded into regular strings), then pass them back into the URI multi-argument constructor (where they will be re-encoded as URI components): uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null) // Remove fragment
