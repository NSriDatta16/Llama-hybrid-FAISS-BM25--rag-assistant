[site]: stackoverflow
[post_id]: 831542
[parent_id]: 61400
[tags]: 
Most of the answers here seem to address unit testing best practices in general (when, where, why and what), rather than actually writing the tests themselves (how). Since the question seemed pretty specific on the "how" part, I thought I'd post this, taken from a "brown bag" presentation that I conducted at my company. Womp's 5 Laws of Writing Tests: 1. Use long, descriptive test method names. - Map_DefaultConstructorShouldCreateEmptyGisMap() - ShouldAlwaysDelegateXMLCorrectlyToTheCustomHandlers() - Dog_Object_Should_Eat_Homework_Object_When_Hungry() 2. Write your tests in an Arrange/Act/Assert style . While this organizational strategy has been around for a while and called many things, the introduction of the "AAA" acronym recently has been a great way to get this across. Making all your tests consistent with AAA style makes them easy to read and maintain. 3. Always provide a failure message with your Asserts. Assert.That(x == 2 && y == 2, "An incorrect number of begin/end element processing events was raised by the XElementSerializer"); A simple yet rewarding practice that makes it obvious in your runner application what has failed. If you don't provide a message, you'll usually get something like "Expected true, was false" in your failure output, which makes you have to actually go read the test to find out what's wrong. 4. Comment the reason for the test – what’s the business assumption? /// A layer cannot be constructed with a null gisLayer, as every function /// in the Layer class assumes that a valid gisLayer is present. [Test] public void ShouldNotAllowConstructionWithANullGisLayer() { } This may seem obvious, but this practice will protect the integrity of your tests from people who don't understand the reason behind the test in the first place. I've seen many tests get removed or modified that were perfectly fine, simply because the person didn't understand the assumptions that the test was verifying. If the test is trivial or the method name is sufficiently descriptive, it can be permissible to leave the comment off. 5. Every test must always revert the state of any resource it touches Use mocks where possible to avoid dealing with real resources. Cleanup must be done at the test level. Tests must not have any reliance on order of execution.
