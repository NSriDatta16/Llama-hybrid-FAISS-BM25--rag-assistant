[site]: stackoverflow
[post_id]: 2245652
[parent_id]: 2244172
[tags]: 
METHOD_002 definitely. While some might come up with justifications for METHOD_001, it exists primarily for technical, historical reasons. Older C compilers needed all the stack variables (local variables) defined before any executable code. This is part of the ANSI standard. It no longer is, and should be relegated to history. METHOD_002 has several advantages: It encourages block scoping. By defining a variable inside of a block (a for() loop for instance), that variable cannot be accidentally used outside of its meaningful scope. ANSI allows block scoping by defining variables at the top of the block, but I find that it is seldom done this way in practice once people get used to declaring at the top of the function. It catches other accidental re-use. For instance, you define a variable "result" at the top of the function and assign it to nil. Your code assumes that it is NULL at the start of some loop. Then you insert more code at the top of the function, and through habit, reuse the variable "result." You may have just created unintended side effects for the later code. If you use METHOD_002, then you'll either have made the former result block-local, or you'll get a compiler error when you redeclare another variable with the same name in the same scope. It makes the Extract refactor much easier, since variable declarations will generally be close to the code that uses them. Extraction will also be much less likely to have unintended side-effects, because variables are less likely to be reused in distinct areas of the code. It reduces the likelihood of "cruft." Variables at the top of the function are very seldom deleted when the code that uses them is deleted. The compiler can optimize this away, but it's still code cruft. It encourages more meaningful names through less variable reuse. In practice, I find that when people declare variables at the top of the function, they are more likely to just reuse some variable called "tmpValue" for several different uses through the function. There's no reason this has to be true, but I find that the further the variable declaration is from the code that uses it, the less likely people will take the trouble to declare a new variable. There are few things that are better at preventing bugs than good naming. There is one disadvantage that I find with METHOD_002: It is harder to find the type of a variable. This is less significant with an IDE, since you can generally easily jump to its declaration. And I argue that the name of the variable should generally make its type obvious. But still, it can sometimes be difficult to find the type. As a corollary, it can sometimes make it difficult to determine the scope of a variable.
