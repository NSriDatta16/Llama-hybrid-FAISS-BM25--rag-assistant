[site]: stackoverflow
[post_id]: 4953166
[parent_id]: 4953032
[tags]: 
TDD is not supposed to have 100% code coverage. TDD tends to have very high code coverage, as compared to other methodologies. If you don't write a line of code without a failing test, if you follow that strictly, then yes, you'll get to 100% coverage. But most of us don't follow that strictly, and perfect code coverage is not the objective of TDD . High code coverage is a nice side effect of Test-Driven Development, but it is not the point. Most of us don't test-drive simple getters and setters specifically as part of the TDD process. But we're not creating that field which needs the getter and setter until we have a need for it - where "need" is defined as a failing test. So the getter & setter will be tested as a matter of course, because they're created as needed by methods we are test driving. Both of your examples have enough logic in them to be worthy of tests; I would test-drive both of them.
