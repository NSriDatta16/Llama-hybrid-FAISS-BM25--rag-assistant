[site]: stackoverflow
[post_id]: 1653116
[parent_id]: 1648792
[tags]: 
Anurag, There are a lot of assumptions I have to make here, but I'll give it a shot. You probably have something like this... // ... public static string GetValue(Dependency obj) { // ... } // ... public static void SetValue(DependencyObject obj, string value) { // ... } // Using a DependencyProperty as the backing store for Value. This enables animation, styling, binding, etc... public static readonly DependencyProperty ValueProperty = DependencyProperty.RegisterAttached("Value", typeof(string), typeof(MyCustomControl), new UIPropertyMetadata(OnValuePropertyChanged)); public static void OnValuePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e) { string newValue = e.NewValue as string; // You validate your value here, // Then if fails, revert to old value. if(!SomeCondtion(newValue)) SetValue(obj,e.OldValue as string); } This is definitely not the best approach to validate data. There are other, more efficient approaches that will give you more flexibility. Apply a ValidationRule on your TexBox. This is my first recommendation because it will give you control on displaying the error when validation fails. If you're after a simple validation, check out my article . Listen for the TextBox.TextChanged event. This is cumbersome and is not re-usable at most hacked. Don't use DependecyPropertyChanged callback method. Use a registered string Property and in your setter, apply logic, e.g. public static readonly DependencyProperty ValueProperty = DependencyProperty.Register("Value", typeof(string), typeof(UserControlWithTextBox)); private string _oldValue; public string Value { get { return GetValue(ValueProperty) as string; } set { // Check if the value passes your validation logic if(SomeCondtion(value)) { // If yes, then set the value, and record down the old value. SetValue(ValueProperty, value); _oldValue = value; } else { // Else logic fails, set the value to old value. SetValue(ValueProperty, _oldValue); } // Implement INotifyPropertyChanged to update the TextBox. if(PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs("Value")); } } Once again, as you can see from my answer that you can still show code in your question to help others answer your question no matter how complex your solution may be (if you want a good answer, you need to put in the effort to ask a good question). My answer may not work for you but maybe it might give you some "Googling" directions. Hope it helps.
