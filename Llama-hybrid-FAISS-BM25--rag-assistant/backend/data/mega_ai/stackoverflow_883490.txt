[site]: stackoverflow
[post_id]: 883490
[parent_id]: 883371
[tags]: 
What you are essentially wanting to do is: A) On account creation, you get a username and password from the user, you hash those together with your own salt and store the resultant string in your database like: Dim sUserName = "barry" Dim sPassWord = "fishlegs" Dim mySalt = "A deliciously salty string! fillED WIth all KindS of Junkk(&^&*(£" Dim d As New Encryption.Data(mySalt + sUserName + sPassWord) Dim hash As New Encryption.Hash(Encryption.Hash.Provider.SHA256) hash.Calculate(d) Dim sTheSaltedHashedUnPassCombination = hash.Value.Hex; SavenewPasswordHashToDatabase(sTheSaltedHashedUnPassCombination) You never store sPassWord. B) When the user logs in you perform exactly the same operation on the provided username and password then compare the resultant hash to the previously stored value in the database so you use: Dim sThePreviouslyCreatedHashFromTheDatabase = GetHashForUserFromDatabase(usernameProvided) Dim mySalt = "A deliciously salty string! fillED WIth all KindS of Junkk(&^&*(£" Dim d As New Encryption.Data(mySalt + usernameProvided+ passwordProvided) Dim hash As New Encryption.Hash(Encryption.Hash.Provider.SHA256) hash.Calculate(d) Dim sTheSaltedHashedUnPassCombination = hash.Value.Hex; if (sThePreviouslyCreatedHashFromTheDatabase.Equals(sTheSaltedHashedUnPassCombination)) 'UN & Password Valid! else 'UN & PW Invalid! end (Pardon any errors, VB aint my language) To answer your given questions: 1) See above. Never store the password directly, store the hashed value 2) use a char(X), the number of characters returned from the hash is constant so you can give it a known storage size. 3) What you are effectively storing is the password for the user salted with their username and also salted with the constant on your server. This will be a fixed length string and you cannot change this string back into the separate username and password.
