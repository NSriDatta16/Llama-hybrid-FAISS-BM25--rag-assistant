[site]: stackoverflow
[post_id]: 3619049
[parent_id]: 3565160
[tags]: 
I lead the EclipseLink JAXB & SDO implementations and represent Oracle on those specifications so hopefully I can help you out. This question is very similar to talk I'm giving at JavaOne in September. 1) What data type should I use as the parameters of the web services? How to utilize my schema for this usage? I was considering various XML binding frameworks (especially JAXB and SDO) for this but didn't know how to proceed. This depend's on what web service framework you are using. JAXB is much easier to use with JAX-WS, and while JAXB is still easier to use with JAX-RS SDO, is a possible alternative. 2) How can I enhance the two services (call them store and search) to use dynamically created templates based on the original generic schema? The service would still accept documents of the main schema type but has the inner attribute list based on a template say template1 only requires whose values are ints while template2 require (float) and (string). The current JSP-based prototype manually creates this template but as an XML document that is assembled by hand (<>tags dispersed in text) and there is no type checking what so ever so I thought I could do better! I'm not 100% what you mean here, but the following may be helpful: Using @XmlAnyElement to Build a Generic Message 3) Is it possible to generate a quick web app prototype for simple access to this system (again by using the schema (&templates) to edit the appropriate XML message structures? What I am looking for is for the (human) user to choose a template and then just "fill in the blanks" and submit, no need for any fancy look and feel. JAX-RS is a nice framework for creating quick prototypes. Below is an example I created: Part 1 - The Database Part 2 - Mapping the Database to Objects Part 3 - Mapping the Objects to XML Part 4 - The RESTful Service Part 5 - The Client 4) Can I or how can I also use this XML message type for communicating across sockets? I prefer frameworks like JAX-RS that communicate over the HTTP protocol. 5) Does it matter if I deploy the services as stateless EJBs or not? Do I need them to be EJBs or servlets would be more than enough? My preference is to use an EJB session bean for the service. If you are interacting with a database then you can leverage the Java Transaction API (JTA) to manage your database transactions. Part 4 - The RESTful Service SDO EclipseLink is the SDO 2.1.1 (JSR-235) reference implementation. We have some examples posted below. If you are looking how to do something specific, I will try to post a relevant example. http://wiki.eclipse.org/EclipseLink/Examples/SDO JAXB JAXB is static. It is also more popular than SDO. Recognizing this in EclipseLink we have implemented a dynamic JAXB feature. It gives you the dynamic aspect of SDO with a JAXB slant. http://wiki.eclipse.org/EclipseLink/Examples/MOXy/Dynamic EDIT #1 Since you are dealing with JAX-WS and your model is almost entirely dynamic, I think you should skip the JAXB binding altogether. In the following link see the section "Switching Off Data Binding" http://java.sun.com/developer/technicalArticles/xml/jaxrpcpatterns3/ This will give us the body of the message as a javax.xml.transform.Source object. We will need to process the XML based on the dynamic templates. SDO would be a good choice here. You can constantly add new types to the HelperContext using XML schemas. helperContext.getXSDHelper().define(schema1, null); helperContext.getXSDHelper().define(schema2, null); You wil be able to unmarshal the Source from the web service as follows: XMLDocument doc = helperContext.getXMLHelper().load(source, null, null); DataObject rootDataObject = doc.getRootObject(); String someValue = rootDataObject.getString("attr3/childAttr/anotherChildAttr"); You will also be able to use the XMLHelper to marshal your objects to XML when calling another service.
