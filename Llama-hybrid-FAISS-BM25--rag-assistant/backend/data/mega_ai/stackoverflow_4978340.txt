[site]: stackoverflow
[post_id]: 4978340
[parent_id]: 4977509
[tags]: 
@Transactional only works when its placed on a public method that is invoked from other objects (and not within the same object). Transactions are handled by creating a proxy around the object. Calls from outside are intercepted by the proxy, and hence a transaction is started. Calls within the same object are not intercepted by the proxy. So in your case: @Transactional(propagation=Propagation.REQUIRED, rollbackFor=Exception.class) public List createSequences(List gameList) { Note that it is generally a good practice to wrap units of work within a transaction. Even if your code worked, it would be unnecessarily opening and closing multiple transactions. Unless you wanted to persist each game individually. If this is the case, then either iterate the list in the controller, or create a new class that will save the games. As Augusto noted, if you use proxy-target-class="true" for your proxies, you may be able to make an internal invocation start a transaction. However I'd discourage that, because you are becoming dependent on this configuration option, and if you change in the future for some other reason, you might waste time finding why existing functionality stopped working.
