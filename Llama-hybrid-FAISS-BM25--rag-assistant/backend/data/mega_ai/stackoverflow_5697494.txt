[site]: stackoverflow
[post_id]: 5697494
[parent_id]: 5575047
[tags]: 
You can choose a couple ways to leverage storage: BLOBs (binary large objects) or Tables. Blobs just store text or binary data. Tables provide a little more structure. Furthermore, they provide REST services to manage them. If you need "persistent and durable" storage options, Microsoft says that Azure Storage is perfect for that. However, if your application is subject to changes in the way that most applications are, I'd recommend using SQL Azure. SQL is much more common for storing application data. Azure storage is more useful for leveraging diagnostic logs and such without the need for setting up a SQL db (or to write problems with connecting to the database, themselves). Another use for storage could be partitioning out your information so different people can access them. For example, you put all the diagnostics and error information into one location for an Ops team and then create another storage location for Managers who need a simple file that contains a report, which your application generates. Each storage location can have it's own identifier and connection hash string (sorry, I don't know what they're officially called). Also, you can use storage for deployment and build purposes. I believe Visual Studio uses storage for propping a deployment when configuring it to deploy via the IDE. My point is, more people find SQL useful for application data and storage for operational data. One pattern that I like but haven't seen implemented yet is the use of Azure Queues. The usefulness becomes apparent when you want to scale your application with a couple different types of roles. For example, a web role can use the Queue to add transactions and have two or more worker roles picking transactions off of the queue for processing and storage. Typically, the bottleneck in many Azure applications is the database, so moving the processing of data out of the web roles into worker roles is useful when scalability is a concern.
