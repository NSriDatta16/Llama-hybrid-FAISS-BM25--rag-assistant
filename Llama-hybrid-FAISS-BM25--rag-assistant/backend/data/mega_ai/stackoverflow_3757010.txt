[site]: stackoverflow
[post_id]: 3757010
[parent_id]: 3756266
[tags]: 
You can in theory use reflection to build up the correct generic type, but it will be pretty useless to you as at some point you will need to upcast it to a less specific type. public class ThingFactory { public object Create(bool flag) { Type outputType = null; if(flag) { outputType = typeof(string); } else { outputType = typeof(int); } return Activator.CreateInstance(typeof(Thing<>).MakeGenericType(outputType)); } } As you can see, the value of doing this is about zero as you will need to cast the return type to the type you want, meaning that the logic to determine it needs to live outside the Create method. I would use Reinderien's method and have a non-generic base. This is the most sane and idiomatic approach.
