[site]: stackoverflow
[post_id]: 4701901
[parent_id]: 4682468
[tags]: 
If most of these steps initiate from a database state and end up in a database update, then merging your message storage with your data storage makes a lot of sense: a single product to backup/restore consistent state backups a single high-availability/disaster recoverability solution (DB mirroring, clustering, log shipping etc) database scale storage (IO capabilities, size and capacity limitations etc as per the database product characteristics, not the limits of message store products). a single product to tune, troubleshoot, administer In addition there are also serious performance considerations, as having your message store be the same as the data store means you are not required to do two-phase commit on every message interaction. Using a separate message store requires you to enroll the message store and the data store in a distributed transaction (even if is on the same machine) which requires two-phase commit and is much slower than the single-phase commit of database alone transactions. In addition using a message store in the database as opposed to an external one has advantages like queryability (run SELECT over the message queues). Now if we translate the abstract terms 'message store in the database as being Service Broker and 'non-database message store' as being MSMQ, you can see my point why SSB will run circles any time around MSMQ.
