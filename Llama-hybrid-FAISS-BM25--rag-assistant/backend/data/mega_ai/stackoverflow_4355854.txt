[site]: stackoverflow
[post_id]: 4355854
[parent_id]: 4355827
[tags]: 
Instead of passing "by reference", which is something you might do in an imperative language, Scheme encourages you to think in a functional sense. This means that your push operation, for example, would take two parameters: a stack a new element and return a new stack that contains the new element in combination with the rest of the existing stack. Similarly, the pop operation would take a stack and return one with the top element gone, and peek would return the value of the top element. As it turns out, lists in Scheme work almost exactly like stacks. The following mappings will help you get started: push - cons pop - rest peek - first
