[site]: stackoverflow
[post_id]: 2333724
[parent_id]: 2327569
[tags]: 
It depends on what you are going to do with the data. For a great many purposes, it's worthwhile to store, under each item, the unit price of that item, the quantity purchased, and the extended price. The extended price is quantity times unit price. Is this redundant? well, yes. Does it violate some normal form? Well, yes. But it works quite well. Why store the price in the item row (record) and not just rely on the same price data stored in the master product table? Because if you change the price after this sale, you don't want to change the price that this customer incurred on this purchase. Why store the extended price, since this can be recomputed on the fly? Because it makes it one step simpler to aggregate (sum or average) over some set of items later. If you store the extended price, you can use those point and click, drill down analysis tools (see OLAP) for later analysis, with no further programming. If you count on recomputing the extended price when you need it, you may find that the drill down tool isn't smart enough to do the multiplying for you. "items" will normally be children of some larger unit of work. In an invoicing system, an item is part of an invoice. In a general ledger system, an item is part of a transaction. The items aren't balanced, but the transaction is. In a lot of commerce systems these days, the invoicing function and the accounting function are driven off of the same database, but that goes beyond your question. Normally, I try to keep my data normalized. This is one place where many experts intentionally deviate from the requirements of pure normalization.
