[site]: stackoverflow
[post_id]: 4894516
[parent_id]: 4893265
[tags]: 
Another way to do this is to add the JLabel to a JLayeredPane or to a JPanel held by a JLayeredPane and add a MouseAdapter as the JLayeredPane's MouseListener and MouseMotionListener. Then when clicking on the label, move it to the JLayeredPane's JLayeredPane.DRAG_LAYER so it moves on top of everything else, then place the JLabel on whichever is the most appropriate level on mouse release. I've found this to work well when moving chess pieces on a chess board, for instance, and you want to make sure that the piece you're moving is displayed above all the other pieces when dragging. Addition: You've probably left this thread, but if you come back, or for the benefit of others, I wanted to clarify what I meant by using a JLayeredPane by posting an example. import java.awt.*; import java.awt.event.*; import javax.swing.*; public class DragLabelOnLayeredPane extends JLayeredPane { public static final int WIDTH = 680; public static final int HEIGHT = 480; private static final int GRID_ROWS = 8; private static final int GRID_COLS = 6; private static final int GAP = 3; private static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT); private static final Dimension LABEL_SIZE = new Dimension(60, 40); private GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP); private JPanel backingPanel = new JPanel(gridlayout); private JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS]; private JLabel redLabel = new JLabel("Red", SwingConstants.CENTER); private JLabel blueLabel = new JLabel("Blue", SwingConstants.CENTER); public DragLabelOnLayeredPane() { backingPanel.setSize(LAYERED_PANE_SIZE); backingPanel.setLocation(2 * GAP, 2 * GAP); backingPanel.setBackground(Color.black); for (int row = 0; row Please feel free to post any questions, need for clarification, or corrections.
