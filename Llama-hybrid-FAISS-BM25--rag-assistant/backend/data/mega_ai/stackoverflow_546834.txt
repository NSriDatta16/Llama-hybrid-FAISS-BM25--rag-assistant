[site]: stackoverflow
[post_id]: 546834
[parent_id]: 532875
[tags]: 
This is less of a SQL vs. Code question, and more of a Client vs. Server question. The whole idea of Client/Server is to let the server provide a service to the clients in a centralized manner. In practice this means: If the server can do it quickly then do it on the server If the server can return a small result then do it on the server If you can hide complexity from the client then do it on the server Many of the issues involved are found in other design areas such as Object Oriented design. A class providing services to other classes should encapsulate the functionality and only expose what's needed by its clients. The same goes for a SQL server. If you're thinking of a SQL server as a mere data retrieval system then you're not taking proper advantage. Practical savings include: minimizing data sent over the network; centralizing/standardizing processing; allowing changes without redeploying client software; improved performance. As for where exactly to draw the line... there's no magic answer. The real answer is that the database schema + stored procedures + views define an API, and good API design is not trivial but it's worth the hassle. Use principles such as information hiding, encapsulation, cohesion, and all those other things you use in the rest of your programming and design work. They are appropriate here.
