[site]: stackoverflow
[post_id]: 1430420
[parent_id]: 1429094
[tags]: 
This looks to me like something that grew organically: Someone wrote L2's Makefile and made it very complex and powerful. This Makefile uses variables, such as lists of objects, and builds them up from whatever they start with (like, say, nothing). Someone (else?) had to write L1's Makefile and decided to piggyback by constructing L1's lists and then handing everything over to L2's Makefile, rather than try to reinvent all that machinery. Someone at your shop had to write P's Makefile and piggybacked on L1's Makefile. The trouble with this design (apart from its being hard to untangle) is that it's only as good as the worst Makefile in the chain (probably made by someone else). If L2 isn't compiling, then either some Makefile has included a delicate Makefile and broken it, or else something in the environment has changed that one of the earlier writers counted on. If the L2 Makefile handles dependencies correctly, then you should be able to persuade it to use the libraries without rebuilding them (and you can try making L2 alone to diagnose the problem). If it doesn't, then you'll just have to go spelunking.
