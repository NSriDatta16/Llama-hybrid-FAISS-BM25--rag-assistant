[site]: stackoverflow
[post_id]: 5517410
[parent_id]: 
[tags]: 
estimating size of Java objects inside memcached

I have a Java app that uses the spymemcached library (http://code.google.com/p/spymemcached) to read and write objects to memcached. The app always caches the same type of object to memcached. The cached object is always an ArrayList of 5 or 6 java.util.Strings. Using the SizeOf library (http://www.codeinstructions.com/2008/12/sizeof-for-java.html), I've determined that the average deep size of the ArrayList is about 800 bytes. Overall, I have allocated 12 GB of RAM to memcached. My question is: How many of these objects can memcached hold? It's not clear to me if it's correct to use the "800 byte" metric from SizeOf, or if that's misleading. For example, SizeOf counts each char to be 2 bytes. I know that every char in my String is a regular ASCII character. I believe spymemcached uses Java serialization, and I'm not sure if that causes each char to take up 1 byte or 2 bytes. Also, I don't know how much per-object overhead memcached uses. So the calculation should account for the RAM that memcached uses for its own internal data structures. I don't need a number that's 100% exact. A rough back-of-the-envelope calculation would be great.
