[site]: stackoverflow
[post_id]: 1406995
[parent_id]: 
[tags]: 
Using STL/Boost to find and modify matching elements in a vector

Let's say I have a vector declared like this: struct MYSTRUCT { float a; float b; }; std::vector v; Now, I want to find all elements of v that share the same a, and average their b, i.e. Say v contains these five elements {a, b}: {1, 1}, {1, 2}, {2, 1}, {1, 3}, {2, 2} I want to get v[0], v[1], v[3] (where a is 1) and average b: (1 + 2 + 3)/3 = 2, and v[2] and v[4] (where a is 2) and average b: (1+2)/2 = 1.5 Afterwards v will look like this: {1, 2}, {1, 2}, {2, 1.5}, {1, 2}, {2, 1.5} I'm not really familiar with STL or Boost so I can only figure out how to do this the "bruteforce" way in C++, but I'm guessing that the STL (for_each?) and Boost (lambda?) libraries can solve this more elegantly. EDIT Just for reference, here's my (working) brute force way to do it: for(int j = 0; j 0) { v.b = v.b/matchesFound; } finalV.push_back(v); }
