[site]: stackoverflow
[post_id]: 1868503
[parent_id]: 1868414
[tags]: 
There are two standard unit testing approaches in this case: 1) Don't test the platform - if the dependency is on a framework class, you don't write tests where that interaction is verified. This typically means you substitute a dependency at test time, but in your case it likely means you inject the table itself. 2) Wrap the platform - if you need to test something that interacts with the platform, then write a wrapper layer for the relevant components There's also integration and acceptance testing to consider. For both of these cases you would usually simply accept the dependency as it exists in your application. What precisely are you concerned about testing that you need to directly mock/substitute this class? Edit: It seems as if you're looking to avoid rewriting code to be more testable. This is where TypeMock excels, and is the reason why some test advocates think TypeMock can lead to problems. It is, however, the right tool for the job if you absolutely refuse to restructure your code for testability. Edit #2: Perhaps I'm being overly obsessive about this, but let's consider a more testable pattern: Organization() { HasUser(name) } OrganizationDAL { Organization LoadOrganization(id) } OrganizationServiceFacade { IsUserInOrganization(name, orgid) { return OrgDAL.LoadOrganization(id).HasUser(name) } } Organization's natural contains test for a user no longer needs to be platform-dependent, you should be able to inject the datasource. OrganizationDAL is only responsible for loading organizations rather than returning information about organizations (although there are ways to put queries into this layer if necessary). OrganizationServiceFacade is only responsible for providing composed services, which should both satisfy mockability and avoid the need for extra unit tests (it's an Integration or possibly even an Acceptance target) since it's a wrapper class. Depending on how you construct Organizations, you can inject data without relying on a particular notion of how that data works.
