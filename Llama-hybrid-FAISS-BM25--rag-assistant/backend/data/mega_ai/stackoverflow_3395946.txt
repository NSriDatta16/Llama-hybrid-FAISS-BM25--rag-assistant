[site]: stackoverflow
[post_id]: 3395946
[parent_id]: 3395853
[tags]: 
Pros: You can freely change profile table schema and do not bother if it breaks user. You can reuse authentication/authorization logic in other apps. You can link one user to different profiles, and even to other apps. Better performance due to small amounts of data in user entity (applies to DB storage, where less columns in table is better) during authentication operations and other user-only operations which do not require profile data. Cons: One more DB table or other data entity to store profile You have to maintain relation between profile and user data. More code. Performance drop may occur when accessing profile data. For example, Django (Python web framework) provides auth mechanism and you can add up your very own profile mechanism. Generally if profile is small and will never be subject to modifications you can save it alongside user data. If profile schema may be altered in future or if it contains lots of data then it's better to separate user and profile.
