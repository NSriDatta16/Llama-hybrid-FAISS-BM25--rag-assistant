[site]: stackoverflow
[post_id]: 3407058
[parent_id]: 
[tags]: 
Why casting to object when comparing to null?

While browsing the MSDN documentations on Equals overrides, one point grabbed my attention. On the examples of this specific page , some null checks are made, and the objects are casted to the System.Object type when doing the comparison : public override bool Equals(System.Object obj) { // If parameter is null return false. if (obj == null) { return false; } // If parameter cannot be cast to Point return false. TwoDPoint p = obj as TwoDPoint; if ((System.Object)p == null) { return false; } // Return true if the fields match: return (x == p.x) && (y == p.y); } Is there a specific reason to use this cast, or is it just some "useless" code forgotten in this example ?
