[site]: stackoverflow
[post_id]: 4886976
[parent_id]: 4885363
[tags]: 
It looks like the Visitor pattern (possibly with Iterator pattern) is a perfect candidate here. I think that accepting stickers as a first class citizen and creating their own class is already a good start for an elegant solution in your case. You should first create a visitor interface (or a base class) for your sticker hierarchy. public interface IStickerVisitor { void Visit(NewRollSticker sticker); void Visit(EnumeratedSticker sticker); void Visit(QualitySticker sticker); //need a method for every kind of sticker here } Then you need to add an abstract Accept method to your StickerBase class that takes a Visitor as parameter like below; public abstract void Accept(IStickerVisitor visitor); the content of this method in the concrete classes should simply like below; public abstract void Accept(IStickerVisitor visitor) { visitor.Visit(this); } At this point you can create a specific visitor, say StickerRollerVisitor that contains required logic to add stickers to the list you want. public class StickerRollerVisitor : IStickerVisitor { private RollList rollList; public StickerRollerVisitor(RollList list) { this.rollList = list; } public void Visit(NewRollSticker sticker) { // Next 9999 sticker should be in the form of NN0001 to NN9999 } public void Visit(EnumeratedSticker sticker) { // Add 9999 stickers to the list, other business logic... } public void Visit(QualitySticker sticker) { // Stop the machine and notify the worker } } In this visitor implementation, you can accept a Iterator rather than the original list to walk in (forward, backward, skip etc.) the list with a custom strategy. After creating a default StickerRollerVisitor in your RollList or accepting the visitor as a constructor parameter, your code may looks like below; private StickerRollerVisitor rollListStickerVisitor; public void AddSticker(StickerBase sticker) { sticker.Accept(rollListStickerVisitor) } After including this pattern in your design you can use it with many different ways by creating new visitors, so it will be great improvement/addition to your design.
