[site]: stackoverflow
[post_id]: 4393086
[parent_id]: 
[tags]: 
HTTPS proxy tunneling with the ssl module

I'd like to manually (using the socket and ssl modules) make an HTTPS request through a proxy which itself uses HTTPS . I can perform the initial CONNECT exchange just fine: import ssl, socket PROXY_ADDR = ("proxy-addr", 443) CONNECT = "CONNECT example.com:443 HTTP/1.1\r\n\r\n" sock = socket.create_connection(PROXY_ADDR) sock = ssl.wrap_socket(sock) sock.sendall(CONNECT) s = "" while s[-4:] != "\r\n\r\n": s += sock.recv(1) print repr(s) The above code prints HTTP/1.1 200 Connection established plus some headers, which is what I expect. So now I should be ready to make the request, e.g. sock.sendall("GET / HTTP/1.1\r\n\r\n") but the above code returns 400 Bad Request Bad Request Your browser sent a request that this server could not understand. Reason: You're speaking plain HTTP to an SSL-enabled server port. Instead use the HTTPS scheme to access this URL, please. This makes sense too, since I still need to do an SSL handshake with the example.com server to which I'm tunneling. However, if instead of immediately sending the GET request I say sock = ssl.wrap_socket(sock) to do the handshake with the remote server, then I get an exception: Traceback (most recent call last): File "so_test.py", line 18, in ssl.wrap_socket(sock) File "/usr/lib/python2.6/ssl.py", line 350, in wrap_socket suppress_ragged_eofs=suppress_ragged_eofs) File "/usr/lib/python2.6/ssl.py", line 118, in __init__ self.do_handshake() File "/usr/lib/python2.6/ssl.py", line 293, in do_handshake self._sslobj.do_handshake() ssl.SSLError: [Errno 1] _ssl.c:480: error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol So how can I do the SSL handshake with the remote example.com server? EDIT: I'm pretty sure that no additional data is available before my second call to wrap_socket because calling sock.recv(1) blocks indefinitely.
