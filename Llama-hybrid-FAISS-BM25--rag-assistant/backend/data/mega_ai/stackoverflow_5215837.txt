[site]: stackoverflow
[post_id]: 5215837
[parent_id]: 5215675
[tags]: 
An elegant and high-level way to write this that probably won't be extremely efficient is to use lazy sequence expressions: seq { for r in 0 .. this.Rows - 1 do for c in 0 .. this.Cols - 1 do if then yield false} |> Seq.forall id The idea is that the sequence will generate false as soon as the first element in the matrix matches the condition. Then the Seq.forall function immediately returns false (and stops iterating over the sequence). In practice, you'll probably need to implement this using recursive function to make it efficient. This is not particularly nice (because breaking out of loops cannot be done in F#), but you shouldn't need code like this too often: let rec loopRows r = let rec loopCols c = if c = this.Cols then true elif then false else loopCols (c + 1) if r = this.Rows then true // Processed all rows elif not (loopCols 0) then false // Nonequal element in this row else loopRows (r + 1) // Continue looping loopRows 0
