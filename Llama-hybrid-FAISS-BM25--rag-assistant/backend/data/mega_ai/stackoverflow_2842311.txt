[site]: stackoverflow
[post_id]: 2842311
[parent_id]: 2842180
[tags]: 
My starting advice for dealing with memory and correctness issues in your code starts not with the language but with software practise in general: Program a bit at a time, then test. Test, test, test! Unit test wherever feasible. Catch errors early and incrementally. I've found through hard experience that C and C++ will be sure to punish you, the longer you go without testing your code. I'll bet you've tried to debug enough of these issues to know that finding a problem in an untested code base of nontrivial size can be baffling and painful. For books that will help you develop discipline along these lines, I recommend as one starting point The Pragmatic Programmer , Andrew Hunt and David Thomas, Addison-Wesley Professional, 1999. Tips I have specific to C and C++ are: Don't dynamically allocate unless you need to. Watch your dynamic memory allocation (malloc/new) like a hawk. Make sure you've thought out exactly who owns the objects, and is responsible for deleting them, once they've been created â€“ even in the case of exceptions! (That's where Resource Acquisition Is Initialization comes in.) Design your code so that this ownership is logical and predictable. Use Valgrind, Purify, and other such tools to help catch and diagnose memory issues. The two books on Stack Overflow's Definitive C++ Book Guide and List (an excellent list, btw!) that I think will help you most along these lines are: Thinking in C++ Vol. 2 , Bruce Eckel and Chuck Allison, Prentice Hall, 2003 Accelerated C++ , Andrew Koenig and Barbara Moo, Addison-Wesley Professional, 2000
