[site]: stackoverflow
[post_id]: 1876823
[parent_id]: 1876415
[tags]: 
1) generally, yes. If the API gets complex and multi-object, I'd use COM or a similar mechanism. But if you have to manage only a little state, or can go completely state-free, a pure DLL interface is fine. 2) Use a suitable calling convention (stdcall) and data types. I would not even asusme that the implementation has to be in C++. so that means char/wchar_t, explicit-sized ints, e.g. int32 , float and double, and C-style arrays of them. 3) can't say 4) No cross-boundary memory allocations: free what you allocate, and let the plugin free what it allocated. Your API design has a big influence on achievable performance and implementation effort. DOn't make the functions to small, give the implementation some freedom how it handles certain things, define error protocol, threading requirements etc. [edit] Also, if you declare structures, look into alignment and compiler options to control this (usually #pragma pack). This is required so clients see the same layout. The compiler usually "mangles" the names for the exported symbols (e.g. add an udnerscore for STDCALL convention). Typically, this is controlled through a .def file that is passed to the linker.
