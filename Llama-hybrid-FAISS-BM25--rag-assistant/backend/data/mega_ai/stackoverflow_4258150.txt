[site]: stackoverflow
[post_id]: 4258150
[parent_id]: 4257916
[tags]: 
I've got some experience of Matlab's Parallel Compute Toolbox, which I guess is what you are referring to, rather than plain Matlab's increasing use of multiple threads for intrinsic functions. Parallel Matlab is not a silver bullet, you won't get magical increases in speed of 8-times on 8-cores or 12-times on 12-cores, you'll have to put in some work. However, as someone who spends most of his time on parallel Fortran programs, I'd say that Matlab provides a much shorter route to a well-parallelised program than Fortran+OpenMP or MPI, in the same way and to the same degree that Matlab is quicker to develop with than Fortran. But your concerns as a programmer remain very similar: (re-)designing your program to expose parallelism; bear in mind that the best serial algorithm is not always the best after it has been parallelised; when you have multiple cores the brute-force approach which was so inelegant and costly on a single core may be the best option; load-balancing: making sure each core gets approximately the same amount of work; minimising the parallelisation overhead: which comprises both message-passing (if that's the way you go) and thread/process start-up and tear-down times; it's more efficient to have 4 threads running continually with idle periods, than to start and stop them every time your program hits a serial section; minimising contention for shared memory (if that's the way you go), both to prevent errors and to maximise speed; don't get too hung up on parallel speed-up, once the program is fast enough for your purposes it's fast enough, the objective of your work is data analysis not parallel program optimisation (that's my job !) Matlab's PCT provides the tools you need, but you do have to roll your sleeves up. As to the specific question of where the garbage collector runs, I don't know; I suggest your find out. What operations are automatically parallelised ? I interpret this to mean what Matlab functions are multithreaded ? and the answer is more and more all the time , but for the latest situation you need either to test (watch the task manager or whatever it's called on your machine) or read the documentation. Personally, in your situation, I'd go for the dual 6-core processors and be happy if I got 6-times speed up within a reasonable time -- difficult to be precise about how long that is without knowing your code as well as you do.
