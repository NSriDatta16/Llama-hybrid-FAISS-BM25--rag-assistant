[site]: stackoverflow
[post_id]: 731824
[parent_id]: 730434
[tags]: 
Is this intended for real-time operation? Some of the worst-performing video editors I've seen will "index" each frame by storing each frame into its own image file. Are you stuck with using this storage mechanism? It would be significantly more efficient if the source videos were stored in a video format already (one per file) and there was an index for each video (basically the file offsets for each frame). Then you can use the operating system's caching mechanism to help improve your performance. Another thing you may want to consider, although it probably won't help much with networked filesystems, is to store the images in YUV format. Your application which displays the videos might run faster (partly because the RGB-to-YUV conversion isn't necessary, and often because you can offload the work of drawing the YUV image to the video card), thus leaving more time for the filesystem work. I do this when drawing onto an X display just to avoid jitter. As far as caching the images, I would probably use a separate thread to read the images from disk as fast as you can while the main thread assembles and presents the image. The main thread can do its loop once per frame presentation interval, and the separate thread can block when the amount of buffered/prepared images reaches a certain threshold. Video players like mplayer use such strategies.
