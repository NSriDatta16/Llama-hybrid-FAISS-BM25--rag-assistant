[site]: stackoverflow
[post_id]: 1820779
[parent_id]: 1820505
[tags]: 
Just to add to the other excellent answers, I'd agree that going from 0% to 100% coverage in one go is unrealistic - but that you should definitely add unit tests every time you fix a bug . You say that there are quite a lot of bugs and unhappy customers - I'd be very positive about incorporating strict TDD into the bugfixing process, which is much easier than implementing it overall. After all, if there really is a bug there that needs to be fixed, then creating a test that reproduces it serves various goals: It's likely to be a minimal test case to demonstrate that there really is an issue With confidence that the (currently failing) test highlights the reported problem, you'll know for sure if your changes have fixed it It will forever stand as a regression test that will prevent this same issue recurring in future. Introducing tests to an existing project is difficult and likely to be a long process, but doing them at the same time as fixing bugs is such an ideal time to do so (parallel to introducing tests gradually in a "normal" sense) that it would be a shame not to take that chance and make lemonade from your bug reports. :-)
