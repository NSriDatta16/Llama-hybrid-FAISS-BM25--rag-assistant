[site]: stackoverflow
[post_id]: 708277
[parent_id]: 708231
[tags]: 
There really are a couple things going on here. First thing you should look at is something like a compilers book. There are several old ones, like the famous Dragon book , that are very good. I just discovered another one today, through, from the same guy who wrote the Art of Assembly Language Programming , on How to Write Great Code . I've only read the sample chapters so far, but it looks very good and also seems to address just what you want without dropping immediately into the wonders of LALR(1) grammars and so on. "Systems programming" is more about, well, programming systems. In a systems programming ouse, you learn about using various system calls and other stuff to build useful programs. You need to know that too, but it's a different track than "how it happens." A computer organization book, like the one aaronis refers to, is more about how the program gets from the assembly language level to actual gates and such. It's also called "computer architecture", as the phrase was used when Amdahl, Blaauw, and Brooks invented the term: instruction sets, how they're implemented, and how you make quantitative choices in the design of the things.
