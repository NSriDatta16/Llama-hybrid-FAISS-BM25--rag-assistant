[site]: stackoverflow
[post_id]: 486934
[parent_id]: 486815
[tags]: 
we use custom java annotations to mark special purposes of certain methods, mostly targeted at developers: @ScriptingAPI -- marks code that is exposed as part of our scripting API (warns developers that changes could affect the public API) @Transaction -- marks methods on the database facade that are starting/commiting a transaction (we have a dedicated transaction handler class that respects this annotation) @NeedsAttentionToSupportFoo -- if we know that feature Foo is a requirement that we will need to address in the near future, we use an annotation to mark code that we will need to touch to support it, i.e. when we come across a piece of code that makes us think "ah, this will need to be changed to support Foo", we annotate it. if the implementation of Foo is postponed or will never happen, it's easier to remove the annotation than to revert pre-mature optimizations scattered all around in the code. another good example usage of a custom annotation is covered in this java specialist newsletter : enforcing a public no-args constructor in all sub classes.
