[site]: stackoverflow
[post_id]: 3325269
[parent_id]: 3325194
[tags]: 
It very much depends (the catch-all answer!). If a piece of functionality makes sense as a plugin i.e. can be reused in different ways on your site, then make it a plugin. Similarly, if a function is useful all over the place e.g. a date parsing function, make it a utility function. There are a couple of points that I think are really worth bearing in mind - scope and pollution scope If a function needs to be in a scope that makes it accessible to functions in other scopes, then make it so. If it doesn't, don't. Which leads onto pollution try not to pollute the global namespace/object with numerous different functions. Organise your code into related functions by utilising object literals such that only one property is created on the global object that contains objects with properties containing related functions. For example, var date = { parse : function(s) { // some date parsing function }, format : function(date, patten) { // some date formatting function } } In summary, attach to the jQuery object when it make sense to (reusable plugin, common utility function) declare functions in the narrowest scope that provides the accessibility to them that is required (use closures where necessary). use object literals to group related functions and prevent pollution
