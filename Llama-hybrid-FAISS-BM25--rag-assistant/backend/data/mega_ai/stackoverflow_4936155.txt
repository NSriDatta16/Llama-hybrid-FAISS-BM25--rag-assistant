[site]: stackoverflow
[post_id]: 4936155
[parent_id]: 4932034
[tags]: 
Modules have 2 primary purposes : Namespacing Mixins Module Namespacing is generally used to organize code better and to facilitate safer and coherent scoping. But modules find their major use as mixins. Its Ruby's way of providing multiple inheritance. For example, lets say you have methods that need to be accessed across Classes (for instance across different models/controllers etc). Instead of repeating those methods in each class, that don't necessarily apply just to that class, you abstract those methods out into a module and include or extend the module in the appropriate class. It depends on how tightly coupled a module is with the app directory to decide as to where to store the module. A few patterns in storing modules : The /lib directory, if the module does not particularly 'interact' with app/. The app/models directory, but may cause confusion with actual ActiveRecord models. 37 Signals introduced a pattern of treating them as 'concerns' and storing them in app/concerns. However, if in case you have a method that you're using just for your Users Controller, it is recommended that you put that code into your User model, because that's where the business logic for the 'User' should be. By 'ActiveRecords', I'm assuming you mean Model classes (such as User). You CAN access model classes and perform ActiveRecord operations (such as User.find(:all)) on them in modules. However, as you guessed right, you can't use params, you'll have to pass that as an argument to the module's method.
