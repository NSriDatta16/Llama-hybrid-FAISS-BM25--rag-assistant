[site]: stackoverflow
[post_id]: 5448725
[parent_id]: 5444903
[tags]: 
I want to dissect and improve your code while providing answers to your questions along the lines. Standard indentation is two spaces. (defun print-to-lines (slist) (cond ((null slist) slist) (t (let ((empty (write-line (car slist)))) (print-to-lines (cdr slist)))))) You are allowed to make newlines between any two tokens. (defun print-to-lines (slist) (cond ((null slist) slist) (t (let ((empty (write-line (car slist)))) (print-to-lines (cdr slist)))))) The stuff after a condition in a cond form is evaluated in an implicit progn . You do not need to name the value that is thrown away anyway. (defun print-to-lines (slist) (cond ((null slist) slist) (t (write-line (car slist)) (print-to-lines (cdr slist))))) In order to return nothing, use values . Note that this is usually not necessary, as the return value is not part of the output; it is just displayed by the REPL (in a syntax highlighting environment, program output and REPL output are usually different colours). Note as an aside that values can also be used to return multiple values. (defun print-to-lines (slist) (cond ((null slist) (values)) (t (write-line (car slist)) (print-to-lines (cdr slist))))) Note that explicit recursion is not needed here. Some other, more concise ideas: (defun print-to-lines (slist) (dolist (string slist) (write-line string))) (defun print-to-lines (slist) (mapcar #'write-line slist)) (defun print-to-lines (slist) (format t "~{~a~%~}" slist))
