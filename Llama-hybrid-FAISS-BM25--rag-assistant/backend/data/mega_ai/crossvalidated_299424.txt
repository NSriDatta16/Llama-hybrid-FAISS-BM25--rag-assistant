[site]: crossvalidated
[post_id]: 299424
[parent_id]: 298676
[tags]: 
To deal with your questions directly (and then to offer some thoughts on the circumstances surrounding your questions): Am I doing completely the wrong analysis for what I'm trying to test? This question is more difficult than it may seem at first. You want a way to test the adequacy of a principal components solution with pre-specified loading values, but component loadings aren't parameter estimates. So while your concern that common factor analyses are different than principal components solutions is well taken, PCA isn't really poised to help you (dis)confirm the adequacy of your model. CFA would give you a way to test the adequacy of your particular model, but as you note, you would have to feel comfortable jumping from component to common factor conceptualizations. For better or worse, in my field this is not all that uncommon--people often use PCA to get an exploratory solution (while actually thinking in terms of common factors) and then move to confirm it via CFA in a separate sample. In your particular case, it sounds like CFA may be the best way for you to address your analytic needs, and switching to a common factor model seems at the very least common, if not entirely defensible. If not, what am I doing wrong in my implementation? This part of your question is, I suspect, a bit off-topic for CV, since it's really about your sem syntax. I'm pretty unfamiliar with sem , but in lavaan (which is the package I know), you would want syntax that would look something like below, where you set up a baseline model where your factor loadings are freely estimated (I've just used a simple one-factor three variable example, but I think you'll get the gist), and then compare against it the fit of a model where you constrain the loadings to the particular values you are interested in (both models would have their latent variance fixed to 1, via the std.lv = T option in the model fitting syntax): baseline = ' f1 =~ x1 + x2 + x3 ' alt.model = ' f1 =~ .17*x1 + .19*x2 + .20*x4 ' anova(baseline.fit, alt.model.fit) Other Thoughts I'll say, up front, that what you're proposing is a really strict test; constraining every factor loading to a particular value is likely going to substantially degrade the fit of your model. I'd be really surprised if it was anywhere near acceptable fitting. If you're less concerned about particular value of a loading, and more concerned about the direction of a loading, you might instead consider just looking at the Wald tests of each loading (testing against a null value of zero) as a way of discerning whether your variables load in the direction you intend (if significant, and in correct direction: yes; if significant an in improper direction: no). I also find the motivating problems/solutions that lead you to this modelling strategy to be a little concerning. Ignoring your original component loadings, for example, begs the question for me: why use the components analysis in the first place if you were intent on forcing a particular structure onto the data? Moreover, how can you be so confident that "expert knowledge" can discern the exact factor loading values in tandem with some simulations? If your analytic strategy was more relaxed, I might feel differently, but again, you're fitting an incredibly restricted--and therefore specific--model; I'm not sure I would ever be inclined to take someone's "expert knowledge" to the bank to the extent of predicting each and every loading value, especially when the data--through your component loadings--are telling me that the expert might be mistaken.
