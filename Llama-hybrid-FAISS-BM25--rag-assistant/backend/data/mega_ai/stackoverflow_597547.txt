[site]: stackoverflow
[post_id]: 597547
[parent_id]: 597354
[tags]: 
First off, Winforms is dead . Why anyone would start a new desktop program with WinForms is beyond me when WPF has been out for nearly two years. Why move your client from one technology (VB6) that is very, very outdated to another that will be outdated very soon? Please don't take this wrong, but unless you have to support versions of Windows older that XP I think it is actually irresponsible to start a WinForms project in 2009. Here are the downsides vs WPF: XAML, WPF and Silverlight are the focus and Microsoft. WPF is much, much more powerful graphically than Winforms (at least as far as ease of developing a very rich UI). Databinding in WPF is a quantum leap ahead of Winforms; it will save you time. WPF is stable and has seen significant performance increases over the last few SPs and versions. Like all old MS technologies, Winforms will sooner or later die. It is obviously now the old technology. Now for ASP.Net. This sounds like what you are converting is a fairly straightforward, internal app. ASP.Net is suited for just such a thing. While ASP.Net MVC is almost out of beta, it doesn't yet have the arguments against ASP.Net that WPF does have against WinForms. We do ASP.Net + jQuery at work and it works very well. We are also doing Silverlight, which you might look into. I have really enjoyed working in it. If this is an internal app, you can probably count on the Silverlight plugin being installed on all of you browsers. Now for general pros of going to WPF vs ASP.Net : WPF Easier code migration from VB6 desktop to another desktop environment. You might be able to save a lot of your logic, although it will need to be translated to VB.Net or C#. You are going from one stateful environment to another. Not so with ASP.Net. Easier to test (especially if you have to support multiple browsers). Possibly faster to develop (especially if you have to support multiple browsers). ASP.Net Easier to distribute updates that a desktop app (all you do is update your web server). Can be used on a wide variety of desktops and even mobile devices if authored correctly. Can provide much of the dynamic nature of a desktop app with extra development effort. Can be leveraged for future products that might be public facings. Good luck on your project!
