[site]: stackoverflow
[post_id]: 2091955
[parent_id]: 1978466
[tags]: 
but how does this work with DbC and post-conditions? Every function is basically one of these: A sequence of statements A conditional statement A loop The idea is that you should check any postconditions about the results of the function that go beyond the union of the postconditions of all the functions called. that you basically have to re-write the body of the function for your post-condition to know what the new state is going to be Think about it the other way round. What made you write the function in the first place? What were you pursuing? Can that be expressed in a postcondition which is more simple than the function body itself? A postcondition will typically use queries (what in C++ are const functions), while the body usually combines commands and queries (methods that modify the object and methods which only get information from it). In some cases, yes, you will find out that you can really add little value with postconditions. In these cases, writing a bunch of tests will typically be enough. See also: Bertrand Meyer, Contract Driven Development Related questions 1 , 2
