[site]: datascience
[post_id]: 113539
[parent_id]: 94692
[tags]: 
use logistic regression to predict the probability of churn. then use the proba element of the classifier to find the top 20 highest probabilities for churn. The probabilities are used to plot true positive and true negative areas under the curve. ytrain_pred_probas = lr.predict_proba(X_train)[:, 1] # prob of predict as 1 fpr, tpr, thresholds = roc_curve(y_train, ytrain_pred_probas) # precision_recall_curve roc = pd.DataFrame({'FPR':fpr,'TPR':tpr,'Thresholds':thresholds}) _ = plt.figure() plt.plot(roc.FPR, roc.TPR) plt.axvline(0.1, color = '#00C851', linestyle = '--') plt.xlabel("FPR") plt.ylabel("TPR") # Print the models coefficients print(lr.coef_) [[-2.27622202e-09 1.28517496e-09 -2.17211991e-05]] int_coef_sum = -3.3e-10+ (1.29e-09 * feature1) + (-2.28e-09 * feature2) + (-2.17e-05 * feature3) prob_churn =1/(1+ np.exp(-int_coef_sum)) prob_nonchurn=1-(1/(1+ np.exp(-int_coef_sum))) cycle through each of the features for each person and calculate the probability of churn preds_probability = clf_logistic.predict_proba(X_test) # Create dataframes of first five predictions, and first five true labels preds_df = pd.DataFrame(preds_probability[:,1], columns = ['prob_default'])
