[site]: stackoverflow
[post_id]: 4359968
[parent_id]: 4359671
[tags]: 
What types of queries are people going to ask? Searching for one term on its own is the obvious and simplest case, and probably also the most common case. What about 'term1 AND term2'? What about 'term1 OR term2'? What about wild-carding? What about 'term1 AND NOT term2'? What about nesting conditions in parentheses? In many ways, though, it doesn't matter. The first solution is the way to go. Quite apart from the fact that it is more nearly normalized, your outline query for option 2 is inaccurate, and so is misleading you about the (absence of) benefits of the organization. Suppose someone is searching for 'term1' and 'term2' and 'term3'. Each of those values can be stored in any of the S N columns, so the query is not: SELECT * FROM [Fields Values Table] WHERE [S1]=1 AND [S2]=2 AND [S3]=3 but SELECT * FROM [Fields Values Table] WHERE ([S1] = 'term1' OR [S2] = 'term1' OR ... OR [SN] = 'term1') AND ([S1] = 'term2' OR [S2] = 'term2' OR ... OR [SN] = 'term2') AND ([S1] = 'term3' OR [S2] = 'term3' OR ... OR [SN] = 'term3') Your nominal solution could only work if you can pre-identify and encode in your table schema every possible search term - and (believe me) you can't do that. And, if your system did limit the search terms to only those that it knows about, then people won't use it, because it won't be flexible enough or powerful enough. So, go with Option 1. The nested query solution in the question is: SELECT * FROM [Fields Values Table] WHERE doc_id IN (SELECT doc_id FROM [Fields Values Table] WHERE [field_id] = 1 AND [field_value]=1) AND (doc_id IN (SELECT doc_id FROM [Fields Values Table] WHERE [field_id] = 2 AND [field_value]=2 ... ) ) I think this should be written using JOIN notation, which avoids as much nesting of the SQL, without altering the execution plan very much (beyond making it easier for the optimizer to decide which queries to do first): SELECT * FROM [Fields Values Table] AS T1 JOIN [Fields Values Table] AS T2 ON T1.Doc_ID = T2.Doc_ID AND T2.Field_ID = 2 AND T2.Field_Value = 2 JOIN [Fields Values Table] AS T3 ON T1.Doc_ID = T3.Doc_ID AND T3.Field_ID = 3 AND T3.Field_Value = 3 WHERE T1.Field_ID = 1 AND T1.Field_Value = 1 Or even: SELECT * FROM (SELECT Doc_ID FROM [Fields Values Table] WHERE Field_ID = 1 AND Field_Value = 1 ) AS T1 JOIN (SELECT Doc_ID FROM [Fields Values Table] WHERE Field_ID = 2 AND Field_Value = 2 ) AS T2 ON T1.Doc_ID = T2.Doc_ID JOIN (SELECT Doc_ID FROM [Fields Values Table] WHERE Field_ID = 3 AND Field_Value = 3 ) AS T3 ON T1.Doc_ID = T3.Doc_ID This is even more symmetric.
