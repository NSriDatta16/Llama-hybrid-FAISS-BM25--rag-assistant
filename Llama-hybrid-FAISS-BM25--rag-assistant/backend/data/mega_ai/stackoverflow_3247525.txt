[site]: stackoverflow
[post_id]: 3247525
[parent_id]: 3247369
[tags]: 
It is hard to tell what you are asking, but according to the Java Language Specification : In a situation such as this: interface Fish { int getNumberOfScales(); } interface StringBass { double getNumberOfScales(); } class Bass implements Fish, StringBass { // This declaration cannot be correct, no matter what type is used. public ??? getNumberOfScales() { return 91; } } It is impossible to declare a method named getNumberOfScales with the same signature and return type as those of both the methods declared in interface Fish and in interface StringBass, because a class can have only one method with a given signature (ยง8.4). Therefore, it is impossible for a single class to implement both interface Fish and interface StringBass. However, if both of your interfaces specify the same return type, then you can go ahead and implement that method. If MyUser and YourUser have a common ancestor then you could do List or if they have no commonality you can use simply use List . At that point though, you have to stop and consider if a common implementation is what you actually want. I suspect there may be a more elegant solution, if you provided us with more details about your problem. Edit: Based on your comment, you want something like... interface MyUserGetter { List getUsers(); } interface YourUserGetter { List getUsers(); } class UserGetterImpl { List getUsers(); } This is untested, and I'd guess has a 50% chance of working. The architectural suggestion is that instead of having a single implementation for two interfaces you might actually want two implementations of one interface: interface User {} class MyUser implements User {} class YourUser implements User {} interface UserGetter { List getUsers(); }
