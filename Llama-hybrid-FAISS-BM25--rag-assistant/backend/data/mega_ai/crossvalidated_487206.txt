[site]: crossvalidated
[post_id]: 487206
[parent_id]: 487191
[tags]: 
This is a long response, since it overlaps with some teaching materials I had been preparing. Background Most of what you're looking for can be done simply enough using linear mixed models. I'm going to ignore the it about sinusoidal variations, which is a separate problem, and describe the data as if each time series can be described by a starting weight $\alpha$ and a slope $\beta$ , measuring change in weight per day (I'm also assuming you have daily measurements, for convenience). Each of your series will be described by a different set of parameters $[\alpha, \beta]$ . I'm going to work through a particular way they might vary. You could always modify this for your purposes. Let's assume there are three sources of variance between these parameters. Treatment effects. The average slope $\beta$ will differ systematically between treatments. Variation between subjects. Subjects will differ in their average starting weights and average slopes across multiple treatments. Variation between treatments within subjects. Over and above the variation in average starting weights and slopes between participants, every participant will have a slightly different starting weight and slope for each treatment. We assume that this is independent of the treatment: it's not that people are typically heavier starting treatment 1, for example. In other words, variation between treatments is nested within variation between subjects. Finally, there's random noise and fluctuations in the day-to-day weight measurements. Formal Model Formally, this model says that the starting weight for subject $s$ on treatment $t$ is $$\alpha_{s,t} = A + a_s + a_{t:s}$$ where $A$ is the overall average $a_s$ is how much heavier than average $s$ is at the start of the treatments, and $a_{t:s}$ is how much heavier than their own average they are at the start of this treatment. $a_s$ and $a_{t:s}$ are assumed to be Normally distributed with means $0$ and standard deviations $\sigma(a_{s})$ and $\sigma(a_{t:s})$ . Similarly, the slope is $$\beta_{s,t} = B_t + b_s + b_{t:s}$$ where, importantly, $B_t$ is the average slope for that treatment , and you're interested in the difference in this parameter between treatments. Code All of this probably makes more sense in code. First, we simulate the data as described. library(tidyverse) n_subjects = 5 n_treatment_per_subject = 3 effects_of_treatment_on_slope = c(0, -5, -10) treatment_length = 10 mu_starting = 200 mu_slope = 0 # Variation between subjects sd_subject_starting = 20 sd_subject_slope = 1 # Variation between treatments (within a subject) sd_treatment_starting = 3 sd_treatment_slope = 2 noise = .1 simulate_treatment = function(treatment, subject, subject_starting, subject_slope){ starting = rnorm(1, subject_starting, sd_treatment_starting) treatment_slope = effects_of_treatment_on_slope[treatment] slope = treatment_slope + rnorm(1, subject_slope, sd_treatment_slope) tibble( subject = subject, treatment=treatment, day = 1:treatment_length, weight = starting + slope*day + rnorm(treatment_length, 0, noise)) } simulate_subject = function(subject){ subject_starting = rnorm(1, mu_starting, sd_subject_starting) subject_slope = rnorm(1, mu_slope, sd_subject_slope) treatments = map_df(1:n_treatment_per_subject, ~simulate_treatment(., subject, subject_starting, subject_slope)) treatments } subjects = 1:n_subjects subject_data = map_df(subjects, simulate_subject) %>% mutate(Treatment = paste('Treatment', treatment)) ggplot(subject_data, aes(day, weight, color=factor(subject))) + facet_wrap(~Treatment) + geom_path() + labs(x='Day of treatment', y='Weight', color='Subject') Then, we fit a model with the same structure (I won't go into detail of what the lme4 code does here). Note that I've set n_subjects=20 because the model didn't converge with just 5 subjects. library(lme4) model = lmer(weight ~ 1 + day + day:Treatment + (1 + day|subject) + (1 + day|Treatment:subject), data=subject_data) summary(model) ## Linear mixed model fit by REML ['lmerMod'] ## Formula: weight ~ 1 + day + day:Treatment + (1 + day | subject) + (1 + ## day | Treatment:subject) ## Data: subject_data ## ## REML criterion at convergence: 221.9 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.89645 -0.60115 0.01494 0.61598 2.89154 ## ## Random effects: ## Groups Name Variance Std.Dev. Corr ## Treatment:subject (Intercept) 8.22424 2.8678 ## day 5.06814 2.2513 -0.26 ## subject (Intercept) 300.28472 17.3287 ## day 0.11046 0.3324 0.39 ## Residual 0.01043 0.1021 ## Number of obs: 600, groups: Treatment:subject, 60; subject, 20 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 205.7260 3.8925 52.852 ## day 0.4852 0.4977 0.975 ## day:TreatmentTreatment 2 -5.4666 0.6879 -7.947 ## day:TreatmentTreatment 3 -10.0403 0.6879 -14.595 ## ## Correlation of Fixed Effects: ## (Intr) day dy:TT2 ## day 0.044 ## dy:TrtmntT2 0.000 -0.691 ## dy:TrtmntT3 0.000 -0.691 0.500 Note that the fixed effects (0.48, -5.46, -10.04) roughly match the treatment effects (0, -5, -10), and the intercept matches the average starting weight (200). The standard deviations of the random effects roughly match the values in the code: subject starting weights = 17.3 (20 in the code), subject slopes (effect of day) = 0.33 (1 in the code), treatment:subject starting weight = 2.8 (3), slope = 2.25 (2), residual noise = 0.102 (0.1). Limitations This approach doesn't capture the fact that a subject's starting weight for one treatment is influenced by their final weight for the previous treatment. In fact, all information about treatment order is ignored. I haven't covered the non-linear sinusoidal bit of the model. I'll leave it to you to modify the approach accordingly. This is only one possible way to carve up the variance between different series. There are plenty of other valid ways to frame the problem!
