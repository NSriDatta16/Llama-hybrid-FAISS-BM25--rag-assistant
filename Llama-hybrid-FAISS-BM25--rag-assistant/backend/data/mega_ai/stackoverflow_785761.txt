[site]: stackoverflow
[post_id]: 785761
[parent_id]: 436211
[tags]: 
This a discussion of two worlds: language and memory. To me language is like a layer of abstraction and the term object belongs to this level of abstraction. I don't see a point in talking about objects in terms of memeory organisation and if you do use the "object" term when talking about memory you actually are borrowing this term from a different layer of abstraction. Thus you shouldn't forget where it came from. If we're talking about C# I don't undestand why someone would use memory organisation as an argument. Of course if I would answer this question to someone I would say "Yes, in C# everything is an object, but you also should know that under the hood it may work differently depending on...." This may start an interesting argument but may also speak to some: in a similar discussion one could say that actually there is no object oriented programming, there's only procedural programming. Does you CPU understand objects? Even better, actually there is no software, there's only differnt hardware states :) My point is that some terms don't translate to other layers of abstraction and you should stick the discussion to where it belongs (which in this case is a language, not memory). Even the author of this question stated: "Note that this question refferes to C# not necessarily .NET and how it handles the data under the hood (obviously it's all 1's and 0's.)"
