[site]: stackoverflow
[post_id]: 4565041
[parent_id]: 4558016
[tags]: 
As someone who has lead this process at several companies, my recommendation is to gradually raise the "maturity" of your organisation as a software factory by incrementally consolidating a set of practices in an order that makes sense to your needs. The order I tend to follow (starting with things that I consider more basic, to the more advanced stuff): Version control - control your sources. I used to work with SVN but I'm gradually migrating my team to Mercurial (I agree to meagar's recommendation for a distributed VCS). A great HG tutorial is in hginit Establish a clear release process , label your releases in VCS, do clean builds in a controlled environment, test and release from these. Defect tracking - be systematic about your bugs and feature requests. I tend to use Trac because it gives me a more or less complete solution for project management plus a wiki that I use as a knowledge base. But you have choices galore (Jira, Bugzilla, etc...) Establish routine Testing practices . Unit tests e.g. by using one of the xUnit frameworks (make it a habit to at least write unit tests for new functions you write and old code you modify) and Integration / System tests (for webapps use some tool like Selenium). Make your tests run frequently, as a part of an automated build process Eventually, write your tests before you code ( Test-Driven Development ) and strive to increase coverage. Go a step forward in your build/test/release cycle by setting up some continuous integration system (to make sure your build and tests are run regularly, at least nightly). I recently started using Hudson and it is great for our Java/Maven projects, but you can use it for any other build process as well In terms of testing environments, I agree with meagar's recommendations. We have these layers: Test at developers workstations (should contain a full setup to run your code) Staging environment: clone your production environment as closely as possible and deploy and run your app there. We also use VMs. Production preview : we deploy our app to the production servers with production data but in a different "preview" URL for our internal use only. We run part of our automated Integration tests against this server, and do some additional manual testing with internal users Production - and keep fingers crossed ;) In terms of backup, at least for your source code, distributed VCS give you the advantage that your full repos are replicated in many machines, thus minimising the risk of data loss (which is much more critical with centralised repos as is the case with SVN).
