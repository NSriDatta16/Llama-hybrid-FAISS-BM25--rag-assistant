[site]: stackoverflow
[post_id]: 3395832
[parent_id]: 3395023
[tags]: 
My preference is not to check for NULL pointers. Checking against NULL is merely checking against one of the billions of possible invalid argument values; the rest are undetectable and potentially much more dangerous. Unless your function's documentation states that NULL is a valid argument with special meaning, anyone calling it should assume all hell will break loose if they pass NULL. If your function is very short and used in tight loops, checks against NULL can be a significant performance loss. One very real example is the standard C mbrtowc function used for decoding multibyte characters. If your application needs to do byte-by-byte ot character-by-character decoding, a dedicated UTF-8 decoder can be 20% faster than the optimal UTF-8 mbrtowc implementation simply because of the fact that the latter is required to do a bunch of useless checks at the beginning, mainly NULL pointer checks, and it's called many many times on very small data. Even if most of your functions work on large data, it sets a bad precedent to tell the caller it's okay to pass NULL pointers. What if you later need functions that work on small fragments? Unless you're coding for embedded systems, NULL is the least-dangerous invalid pointer to dereference, since it will immediately result in an operating-system-level exception (signal/etc.). If you don't want to rely on that, why not just use assert(ptr); so you can enable/disable the checks easily for debugging?
