[site]: stackoverflow
[post_id]: 1350500
[parent_id]: 1350410
[tags]: 
...Is it worth it? It depends on what you're trying to do. Most web applications are built with little or no regard for performance. The majority of pages do not need CGI at all. Using a database and code to produce/modify the page makes sense but serving pages to clients by generating each time is not optimum. As stated by others, creating the design, layout, content, infrastructure and keeping it all running usually take precedence over speed of generating the page. The current methods used for performance are reverse caching, edge side caching, load balancing, clustering, etc.. The web system is fed by a standard framework (java, php, python, ruby, perl, etc.) and the performance gains are met by spreading the load over more boxes and caching. Any CGI, even C++, will be slower than static files served by an optimized static server (ex. nginx) or static files served from memory using a reverse cache (ex. varnish). That being said most people shy away from using a lower level language for web serving because of lack of knowledge in lower level languages and the mass of code and frameworks available in scripting languages. Having worked on projects where management dictated that no open source code was to be used, I do not agree that it takes longer to develop using lower level languages. If you wrote "all" the code in PHP it would take you just as long but most don't. Most people use other's code and then claim it's faster than writing all your own code in a lower level language. Web apps usually are very simplistic and over time you (or your company) will develop a set of libraries to do standard web routines. Once written, a CGI web page can be constructed just as fast in C or C++ as in any scripting language. But if you need an json imported to your AJAX output chances are you'll find some amount of starter code in a scripting language rather than a lower level language. Are web apps built with C and C++? Absolutely. Many of those "evil" ad servers are coded in C for performance. Many web based "applications" are built using C or C++ such as VMware's web based virtual console. If you're looking for performance start thinking of your web application as two separate apps. One is a content management and page generator. The other is the serving framework. Full pages and page fragments can be pre-generated or generated on demand and served as static files increasing performance far above any changes in programming language. Even if a page only lasts for two requests it may be 100 to 1 load and speed difference. Dealing with sessions, authentication and authorization becomes the tricky part. How to de-couple sessions from pages and maintain security. This is often done by using C based modules in the web server. The same thing is done for SSL decryption, GZIP compression, flow control, etc.. If you're writing a web based game server or complex web app then by all means start building a C or C++ library. If you want to speed up a blog, learn and use clustering and caching techniques.
