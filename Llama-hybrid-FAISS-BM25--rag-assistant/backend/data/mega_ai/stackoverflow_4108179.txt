[site]: stackoverflow
[post_id]: 4108179
[parent_id]: 3555655
[tags]: 
I swear I've answered this before, but I can't seem to find it. this always refers to the object you are calling the method on. In this case you are using category_func as that object, and calling app_func() . The pattern that jQuery UI uses is one possible way to work around this issue. They allow you to call methods on a UI object by doing something like $elem.draggable('destroy'); Imagine for a moment: $.fn.my_namespace = function(submethod, method) { var args = [].slice.call(arguments, 1); var func = $.fn.my_namespace[submethod]; if (func && method) { if ($.isFunction(func[method])) { args.shift(); // remove the method func = func[method]; } } if ($.isFunction(func)) { // using .apply() allows us to pass `this` along to our "method functions" return func.apply(this, args); } else { // didn't find the method, return... or do something else... console.log('my_namespace', this, arguments); return this; // jQuery chaining default } } $.fn.my_namespace.category_func = function() { console.log('category_func', this, arguments); return this; } $.fn.my_namespace.category_func.method_func = function() { console.log('method_func', this, arguments); return this; } $("body").my_namespace('category_func', 'method_func', 10); //method_func jQuery(body) [10] $("body").my_namespace('category_func', 10); //category_func jQuery(body) [10] $("body").my_namespace(10, 'slow'); //my_namespace jQuery(body) [10, "slow"]
