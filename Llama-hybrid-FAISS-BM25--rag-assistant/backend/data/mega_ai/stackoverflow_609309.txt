[site]: stackoverflow
[post_id]: 609309
[parent_id]: 609297
[tags]: 
Phew! Big subject. The "right" answer depends a lot on your problem domain and various details of what you're doing. Interpolating in more than 1 dimension requires making some choices. I'll assume that you are plotting on a regular grid, but that some of your grid points have no data. Big question: are the missing points sparse, or do they make big blobs? You can't add information, so you're just trying to establish something that will look OK. Conceptually simple suggestion (but the implementation may be some work): For each region on missing data, identify all the edge points. That is find the x's in this figure oooxxooo oox..xoo oox...xo ox..xxoo oox.xooo oooxoooo where the .'s are the points missing data, and the x's and o's have data (for a single missing point, this will be the four nearest neighbors). Fill in each missing data point with an average over the edge points around this blob. To make it smooth, weight each point by 1/d where d is the taxidriver distance (delta x + delta y) between the two points.. From before we had any details: In the absence of that kind of information, have you tried straight ahead linear interpolation? If your data is reasonably dense this might do it for you, and it is simple enough to code in-line when you need it. Next step is usually a cubic spline, but for that you'll probably want to grab an existing implementation. When I need something more powerful than a quick linear interpolation, I usually use ROOT (and pick one of the TSpline classes), but this may be more overhead than you need. As noted in the comments, ROOT is big , and while it is fast, it does try to force you to do things the ROOT way, so it can have a big effect on your program. A linear interpolation between (or indeed extrapolation from) two points (x1, y1) and (x2, y2) gives you y_i = (x_i-x1)*(y2-y1)/(x2-x1)
