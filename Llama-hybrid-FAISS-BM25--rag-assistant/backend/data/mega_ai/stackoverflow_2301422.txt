[site]: stackoverflow
[post_id]: 2301422
[parent_id]: 2298318
[tags]: 
The simplest solution to this problem is a Tally or Numbers table. That is a table that simply stores a sequence of integers and/or dates Create Table dbo.Tally ( NumericValue int not null Primary Key Clustered , DateValue datetime NOT NULL , Constraint UK_Tally_DateValue Unique ( DateValue ) ) GO ;With TallyItems As ( Select 0 As Num Union All Select ROW_NUMBER() OVER ( Order By C1.object_id ) As Num From sys.columns as c1 cross join sys.columns as c2 ) Insert dbo.Tally(NumericValue, DateValue) Select Num, DateAdd(d, Num, '19000101') From TallyItems Where Num Once you have that table populated, you never need touch it unless you want to expand it. I combined the dates and numbers into a single table but if you needed more numbers than dates, then you could break it into two tables. In addition, I arbitrarily filled the table with 100K rows but you could obviously add more. Every day between 1900-01-01 to 9999-12-31 takes about 434K rows. You probably won't need that many but even if you did, the storage is tiny. Regardless, this is a common technique to solving many gaps and sequences problems. For example, your original queries all ran in less than tenth of a second. You can also use this sort of table to solve gaps problems like: Select NumericValue From dbo.Tally Left Join MyTable On Tally.NumericValue = MyTable.IdentityColumn Where Tally.NumericValue Between SomeLowValue And SomeHighValue
