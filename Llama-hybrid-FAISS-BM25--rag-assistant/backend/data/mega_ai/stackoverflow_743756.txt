[site]: stackoverflow
[post_id]: 743756
[parent_id]: 743724
[tags]: 
Yes, you can do it, it is a fine practice which must however be considered strongly with respect to the situation. Two examples: Be careful not to call methods in the class constructor: during the call your class is partially initialized, so any call to methods (of the class itself or inherited) could have bad and hard to track consequences. As a rule of thumb, the constructor must be "self-satisfied" with respect to the class. Since you are using methods of the class, you have free access to its implementation. Ask yourself "Do I want to access the class through its interface, or through its implementation?". To better explain the second point, suppose you have a class A with methods foo() and bar(). Suppose that foo() calls bar() in its code. In this case you are talking with the interface of your object. This interface could not be the one you expect! For example, suppose that the class has been reimplemented (class B, derived from A) by you, but also by an user of your code, and that method bar() has been overridden. Due to the inheritance, A::foo() will call B::bar(), instead of A::bar(). By not using the bar() method call, and accessing the implementation instead, you are guaranteed that your function behaves the same, even for child classes. Some of these issues enter in the so-called fragile base class problem . Here is a very good article about it.
