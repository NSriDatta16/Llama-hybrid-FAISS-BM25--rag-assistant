[site]: stackoverflow
[post_id]: 3383144
[parent_id]: 3381981
[tags]: 
1) What impact has this approach (1000 String constants) on the String pool? Declaring property names as String constants is the right decision. But there will be no change in the 'String Literal Pool'. When multiple instances of the same literal present, all of them are simply linked to same item in the literal pool (provided String constructor is not used). 2) they are created on-demand when I access those constants? String literals are added to 'String Literal Pool' during class loading. 3) Does this prevent other Strings from being cached in the String pool? No. 4) What is the performance cost of this approach compared to the one where I use hard-coded String constants, is it the same (neglecting the cost of accessing field)? Does the String pool behave similarly or a lot different? It is the same. 5) What's the average memory increase with this approach, are all those String constants kept in memory all the time? I have already answered. :) Additional notes a) Constants interface is a Java anti-pattern. Please avoid it. b) You must read this Javaranch article .
