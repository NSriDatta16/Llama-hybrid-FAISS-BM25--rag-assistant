[site]: stackoverflow
[post_id]: 4959163
[parent_id]: 4959098
[tags]: 
If you really want more structure with a continuous-memory array, wrap it in an object. public class My2dArray { int sizeX; private T[] items; public My2dArray(int x, int y) { sizeX = x; items = new T[x*y]; } public T elementAt(int x, int y) { return items[x+y*sizeX]; } } Not a perfect solution, and you probably already know it. So consider this confirmation of what you suspected to be true. Java only provides certain constructs for organizing code, so eventually you'll have to reach for a class or interface. Since this also requires specific operations, you need a class. The performance impacts include creating a JVM stack frame for each array access, and it would be ideal to avoid such a thing; however, a JVM stack frame is how the JVM implements it's scoping. Code organization requires appropriate scoping, so there's not really a way around that performance hit that I can imagine (without violating the spirit of "everything is an object").
