[site]: datascience
[post_id]: 109780
[parent_id]: 
[tags]: 
Possible LSTM architectures and training methods to fill in missing trajectory data

Please see the picture below which represents a trajectory of something like a car, person, or boat moving in 2-dimensional x and y space, and their points in that space are plotted here: What if the points in green were missing and we wanted to get back these points based on points before and after this gap. A solution I've found for this (paper here: https://ieeexplore.ieee.org/document/8713215 , however, the authors do not provide many details about their LSTM architecture and input training data), that can be generalized to more complex curves is by using an LSTM neural network. With this, we can input the points before and after this gap and output the missing points. Here is the LSTM architecture I am using currently that is implemented in Python with the library Tensorflow: time_step=10 # how many points previously to use to predict X_train, y_train = create_dataset(scaled_traj, time_step) # reshape input to be [samples, time steps, features] which is required for LSTM units = 3 # before 3 # for nodes in network model = Sequential() model.add(LSTM(units, input_shape=(time_step,2), return_sequences=True)) # no activation as we are not returning a binary value model.add(LSTM(units, return_sequences=True)) model.add(LSTM(units)) model.add(Dense(2)) # LSTM with return_sequence=False will return just one output so does Dense have to be 2 opt = tf.keras.optimizers.Adam(lr=0.001, decay=1e-6) model.compile( loss='mean_squared_error', optimizer=opt, metrics=['accuracy'], ) model.summary() model.fit(X_train, y_train, epochs=500 ) For training, I am inputting the previous (ten points for example) as X and the next point, that is given, as y. After training, for the input, I tried to take in the previous points and output the next point in the gap. Here are the results of that: I also tried plotting a weighted sum of a forward pass, with previous points to output the next one, and a backward pass. Here are the results of that, which is much better: As seen here though, the trajectory is still not accurate so I tried training with the endpoints in the training data to use to predict the next point. However that yielded worse results here: Also, here is the trajectory with just the missing points: With all this, my project is here: https://github.com/eleehiga/Trajectory_Correction_Research/blob/main/NN_Reconstruction.py . Can you guys please assist me with how I can improve my LSTM architecture, training method with which points to use, reconstruction method with how to better use this trained neural network to fill in the missing points, and other things I can do to reconstruct trajectories more accurately?
