[site]: stackoverflow
[post_id]: 5192522
[parent_id]: 
[tags]: 
Kindly do not use this tag, The tag is in the process of being removed. More discussion here http://meta.stackoverflow.com/questions/341843/should-we-burninate-software-engineering Software engineering is concerned with optimising the quality of software projects and the software systems the produce. The process of engineering a software system has many phases and software engineering is the discipline concerned with the whole life-cycle. The life-cycle includes these and potentially other phases: Requirements Engineering : The requirements of the client and other stakeholders are elicited and (usually) documented to provide an specification of what the software should do (and not do). Ideally, requirements are managed throughout the life-cycle to account for change. Design , Architecture and Implementation (Development) : Developers decide on high-level architecture and more detailed design to address the challenges of the problem space. The design is implemented in code it using various technologies tools and computer languages; the selection of which is often constrained by stakeholders. Verification & Validation (Quality Control) : In this important phase, a high level software validation activity occurs, much of it on a near-complete version of the software system. Testing has become a very important part of software development due to Kent Beck 's approach of Test Driven Development Maintenance , Support and Configuration Management : Software needs to be maintained, sometimes to add new features or improve existing ones but often to manage a decaying or unstable execution environment. Configuration management is the practice of managing versions and managing the different components of the software. Many different scientist have brought many new ways to practice software engineering, like design patterns, and many new approaches to create more robust and powerful software. There is much required reading in the field of design patterns, but the most important texts are: Design Patterns: Elements of Reusable Object-Oriented Software (AKA The Gang of Four Book) Martin Fowler's Patterns of Enterprise Application Architecture . (If you want an Amazon link, it's here ) One of this time's more important software analysts/engineer/architect is Martin Fowler, so his collection of books and bliki are mandatory readings as well. Another approach is Aspect Oriented software development which looks to separate the program's functions from the Actual business logic.
