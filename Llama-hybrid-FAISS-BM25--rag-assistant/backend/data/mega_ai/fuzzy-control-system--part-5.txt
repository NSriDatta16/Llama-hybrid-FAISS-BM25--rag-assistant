 output = SN rule 3: IF e = SN AND delta = SN THEN output = LP rule 4: IF e = LP OR delta = LP THEN output = LN These rules are typical for control applications in that the antecedents consist of the logical combination of the error and error-delta signals, while the consequent is a control command output. The rule outputs can be defuzzified using a discrete centroid computation: SUM( I = 1 TO 4 OF ( mu(I) * output(I) ) ) / SUM( I = 1 TO 4 OF mu(I) ) Now, suppose that at a given time: e = 0.25 delta = 0.5 Then this gives: ________________________ e delta ________________________ mu(LP) 0 0.3 mu(SP) 0.7 1 mu(ZE) 0.7 0.3 mu(SN) 0 0 mu(LN) 0 0 ________________________ Plugging this into rule 1 gives: rule 1: IF e = ZE AND delta = ZE THEN output = ZE mu(1) = MIN( 0.7, 0.3 ) = 0.3 output(1) = 0 -- where: mu(1): Truth value of the result membership function for rule 1. In terms of a centroid calculation, this is the "mass" of this result for this discrete case. output(1): Value (for rule 1) where the result membership function (ZE) is maximum over the output variable fuzzy set range. That is, in terms of a centroid calculation, the location of the "center of mass" for this individual result. This value is independent of the value of "mu". It simply identifies the location of ZE along the output range. The other rules give: rule 2: IF e = ZE AND delta = SP THEN output = SN mu(2) = MIN( 0.7, 1 ) = 0.7 output(2) = -0.5 rule 3: IF e = SN AND delta = SN THEN output = LP mu(3) = MIN( 0.0, 0.0 ) = 0 output(3) = 1 rule 4: IF e = LP OR delta = LP THEN output = LN mu(4) = MAX( 0.0, 0.3 ) = 0.3 output(4) = -1 The centroid computation yields: m u ( 1 ) ⋅ o u t p u t ( 1 ) + m u ( 2 ) ⋅ o u t p u t ( 2 ) + m u ( 3 ) ⋅ o u t p u t ( 3 ) + m u ( 4 ) ⋅ o u t p u t ( 4 ) m u ( 1 ) + m u ( 2 ) + m u ( 3 ) + m u ( 4 ) {\displaystyle {\frac {mu(1)\cdot output(1)+mu(2)\cdot output(2)+mu(3)\cdot output(3)+mu(4)\cdot output(4)}{mu(1)+mu(2)+mu(3)+mu(4)}}} = ( 0.3 ⋅ 0 ) + ( 0.7 ⋅ − 0.5 ) + ( 0 ⋅ 1 ) + ( 0.3 ⋅ − 1 ) 0.3 + 0.7 + 0 + 0.3 {\displaystyle ={\frac {(0.3\cdot 0)+(0.7\cdot -0.5)+(0\cdot 1)+(0.3\cdot -1)}{0.3+0.7+0+0.3}}} = − 0.5 {\displaystyle =-0.5} —for the final control output. Simple. Of course the hard part is figuring out what rules actually work correctly in practice. If you have problems figuring out the centroid equation, remember that a centroid is defined by summing all the moments (location times mass) around the center of gravity and equating the sum to zero. So if X 0 {\displaystyle X_{0}} is the center of gravity, X i {\displaystyle X_{i}} is the location of each mass, and M i {\displaystyle M_{i}} is each mass, this gives: 0 = ( X 1 − X 0 ) ⋅ M 1 + ( X 2 − X 0 ) ⋅ M 2 + … + ( X n − X 0 ) ⋅ M n {\displaystyle 0=(X_{1}-X_{0})\cdot M_{1}+(X_{2}-X_{0})\cdot M_{2}+\ldots +(X_{n}-X_{0})\cdot M_{n}} 0 = ( X 1 ⋅ M 1 + X 2 ⋅ M 2 + … + X n ⋅ M n ) − X 0 ⋅ ( M 1 + M 2 + … + M n ) {\displaystyle 0=(X_{1}\cdot M_{1}+X_{2}\cdot M_{2}+\ldots +X_{n}\cdot M_{n})-X_{0}\cdot (M_{1}+M_{2}+\ldots +M_{n})} X 0 ⋅ ( M 1 + M 2 + … + M n ) = X 1 ⋅ M 1 + X 2 ⋅ M 2 + … + X n ⋅ M n {\displaystyle X_{0}\cdot (M_{1}+M_{2}+\ldots +M_{n})=X_{1}\cdot M_{1}+X_{2}\cdot M_{2}+\ldots +X_{n}\cdot M_{n}} X 0 = X 1 ⋅ M 1 + X 2 ⋅ M 2 + … + X n ⋅ M n M 1 + M 2 + … + M n {\displaystyle X_{0}={\frac {X_{1}\cdot M_{1}+X_{2}\cdot M_{2}+\ldots +X_{n}\cdot M_{n}}{M_{1}+M_{2}+\ldots +M_{n}}}} In our example, the values of mu correspond to the masses, and the values of X to location of the masses (mu, however, only 'corresponds to the masses' if the initial 'mass' of the output functions are all the same/equivalent. If they are not the same, i.e. some are narrow triangles, while others maybe wide trapezoids or shouldered triangles, then the mass or area of the output function must be known or calculated. It is this mass that is then scaled by mu and multiplied by its location X_i). This system can be implemented on a standard microprocessor, but dedicated fuzzy chips are now availabl