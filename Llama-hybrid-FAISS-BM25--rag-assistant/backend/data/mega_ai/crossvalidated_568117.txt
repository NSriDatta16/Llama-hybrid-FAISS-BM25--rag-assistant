[site]: crossvalidated
[post_id]: 568117
[parent_id]: 568055
[tags]: 
I need those two distributions to look the same. I need to adjust the signal strengths sent by the weaker transmitter to match the equivalent signal sent by the stronger transmitter. @BruceET shows how to turn an arbitrary distribution into a parametric one, like the normal. An alternative, which perhaps you could call non-parametric, is to have the final distribution be a "merge" of the two (or more) input ones. So you don't need to decide which final distribution to aim for and the normalized distribution retains some characteristics of the input ones. This quantile-quantile normalization has been used for normalizing gene expression arrays. The idea is: Sort each input distribution by signal value - you obtain a table with as many rows as observations and each column is a radio transmitter (two columns in your case, there could be more). Note that each column is sorted Take the average of each row - this is the normalized value Re-order the input distributions to return to the original order. Use the averaged value for further analysis. Here's an example implementation in R to show the idea: set.seed(2022) # Original distributions w # Store original order in columns ow, ox wdat $w), ], xdat[order(xdat$ x), ]) dat$qq $ow), c('w', 'qq')] qxdat ox), c('x', 'qq')] # Plot normalized values: boxplot(data.frame(qw= qwdat $qq, qx= qxdat$ qq)) In practice, you should use an implementation that nicely handles NAs and ties like the function I linked above, assuming you use R.
