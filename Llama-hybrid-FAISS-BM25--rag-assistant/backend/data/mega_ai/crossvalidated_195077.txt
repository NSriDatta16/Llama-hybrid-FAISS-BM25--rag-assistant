[site]: crossvalidated
[post_id]: 195077
[parent_id]: 
[tags]: 
Improving the results coming from an image recognition API

We are developing a software application that will automatically suggest tags (keywords) for images that are being uploaded into a database of already-tagged (by a human) images. We are using a 3rd party tagging API (currently Clarifai) to suggest tags but then (and this is the important bit) trying to improve the suggestions by mapping them onto the human-entered tags seen in the images already in the database. An underlying assumption is that the new image being uploaded will be more similar to the images already in the database than they are to whatever set Clarifai has learned from. Clarifai (and, AFAIK, other similar APIs) don't have the means to learn from our images or to limit the subject domain - so we are trying to do that ourselves. This is what we are currently doing: Learning : for each image in the already-seen set, get the AI tags (i.e. tags suggested by Clarifai) and the human tags (tags entered by a human, which we assume to be correct). Work out the possible combinations of AI tags (to reduce the number we are limiting this to combinations consisting of between 2 and 5 tags) and for each combination calculate a probability score, calculated as: (number of times this combination of AI tags has been seen with this human tag in an image)/(total number of times this combination of AI tags has been seen in an image with any human tag). Tagging : when we see a new image, get the AI tags suggested by Clarifai and work out the combinations of these. For each combination, get the human tags that have a probability of over (say) 0.75 for that combination. This is giving reasonable results. However, we are using brute force to calculate and store the probability mappings and, using conventional means (a relational database for storage and doing the calculations in our code), we are struggling with performance and/or memory - so we can only use it for smallish data sets (~10,000 images). I also feel we are probably reinventing the wheel somewhat. Could we use a Bayesian network for this problem? If so, are there any good packages/libraries/products/API services we could use? We're developing the application in Java.
