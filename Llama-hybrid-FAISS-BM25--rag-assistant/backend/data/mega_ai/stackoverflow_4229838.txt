[site]: stackoverflow
[post_id]: 4229838
[parent_id]: 4227725
[tags]: 
This project is not going to be cheap... Number of devs is known and fixed, most devs are above average in terms of know-how, however some learning about domain-specific issues might be required. This is a good thing. You don't want to flood the number of developers into the project. Though if you go above around 10 people, do count every 2 as only 1, as the rest will go up in overhead. Unless you can split the task into something that can be handled by two totally separate teams. Then you could have a chance of getting some traction. Known and fixed max. number of app users. This means that you can with more certainty land your architecture early on, as you can estimate how much effort you must put into scaling your solution. This is a good thing. Make sure that you work within these limits and never ever fool yourself into thinking "it's fast enough". It almost never is if you doubt that it could be too slow... Technology stack to be used is reasonably diverse (up to 4 different languages and up to 6 various platforms). This isn't as important as to do your people know this stack/set of languages? If there are any learning involved, raise the estimate x2 or x3 if you don't perform a proof of concept up front to learn the technology. Or even better, take the pain and get some coursing. If the language for implementation or technology to be used is unknown, then it is quite likely that you will misuse the technology and do things that will screw stuff up. Make sure that the technology is proven or you'll end up getting bitten by it. Are the source available for the tools/technology? Do you get support? Do you understand the product and or used it before? Have the customer used it before? If too many of these questions get a no, add some (or a lot of) additional time to the sum. Interfacing to up to three legacy systems is expected. This is really a kicker. For legacy integration ask yourself: Has anyone else integrated with them? Do you have access to people with knowledge of these systems? Do they intend to share this knowledge with you? Do you have to wait for changes being created in these systems? Are there test systems available for you to use? Are there development systems available for you to use? Again, if too many of these questions has a "no" on them, then be afraid. You should also know that actual integration takes about 3-5 times longer than you actually think. This isn't a project that I would have given a table grabbing estimate for. Do yourself and your customer a favor and do this by the hour. If not, you will as times go by start cutting corners to cover up your lack of progress/underestimation... And both you and your customer will suffer.
