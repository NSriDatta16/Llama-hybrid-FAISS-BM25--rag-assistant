[site]: stackoverflow
[post_id]: 4965575
[parent_id]: 4965513
[tags]: 
It is true that StringBuilder tends to be better than concatenating or modifying Strings manually, since StringBuilder is mutable, while String is immutable and you need to create a new String for each modification. Just to note, though, the Java compiler will automatically convert an example like this: String result = someString + someOtherString + anotherString; into something like: String result = new StringBuilder().append(someString).append(someOtherString).append(anotherString).toString(); That said, unless you're replacing a whole lot of Strings, go for whichever is more readable and more maintainable. So if you can keep it cleaner by having a sequence of 'replace' calls, go ahead and do that over the StringBuilder method. The difference will be negligible compared to the stress you save from dealing with the sad tragedy of micro-optimizations . PS For your code sample (which, as OscarRyz pointed out, won't work if you have more than one "$VARIABLE1" in someString , in which case you'll need to use a loop), you could cache the result of the indexOf call in: someString.replace(someString.indexOf("$VARIABLE1"), someString.indexOf("$VARIABLE1")+10, "abc"); With int index = someString.indexOf("$VARIABLE1"); someString.replace(index, index+10, "abc"); No need to search the String twice :-)
