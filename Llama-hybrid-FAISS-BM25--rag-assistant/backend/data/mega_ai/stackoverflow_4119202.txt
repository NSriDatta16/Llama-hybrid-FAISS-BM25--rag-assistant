[site]: stackoverflow
[post_id]: 4119202
[parent_id]: 4110178
[tags]: 
I feel ya man. I don't like the idea that I have to embed the .config stuff into web.config when a WCF service is deployed into IIS, for example, or translate the .config and embed into code when hosting in some other way. The way I worked around it was to use a custom service host that overrides the default ApplyConfiguration() logic. It allows, on the service side, the WCF DLL to look in dllname.dll.config (or anyplace, really) for its configuration. It is all explained here . That information is also duplicated in this answer on Stackoverflow . You're using a WCF client, so you need to override the ApplyConfiguration() method in a custom ChannelFactory . This is described here . On that same forum post, there is an alternative technique described where you override CreateDescription() and specify an alternative .config file path. These approaches are very similar; either should work in a WCF client. You might also consider embedding the .config as a resource embedded into the .dll. That way, you still have a single-file distribution (the dll), but you can use the xml config syntax to specify everything. At build time, embed the .config file into the DLL. At runtime inside your custom ApplyConfiguration(), you'd have to call Assembly.GetManifestResourceStream(); , passing the string "dllname.dll.config" to get a read-only stream that contains the config information. If you want to allow the user to override the embedded config, then you could introduce that intelligence into your own ApplyConfiguration() implementation. Probably look for the filesystem file first; if it is not present, then fallback to the embedded .config file. This answer doesn't really tell you how to move config settings into code, because I think it is a heinous idea. But maybe it solves your problem anyway.
