[site]: stackoverflow
[post_id]: 947952
[parent_id]: 
[tags]: 
Are string constants overrated?

It's easy to lose track of odd numbers like 0 , 1 , or 5 . I used to be very strict about this when I wrote low-level C code. As I work more with all the string literals involved with XML and SQL, I find myself often breaking the rule of embedding constants in code, at least when it comes to string literals. (I'm still good about numeric constants.) Strings aren't the same as numbers. It feels tedious and a little silly to create a compile-time constant that has the same name as its value (E.g. const string NameField = "Name"; ), and although the repetition of the same string literal in many locations seems risky, there's little chance of a typo thanks to copying and pasting, and when I refactor I'm usually doing a global search that involves changing more than just the name of the thing, like how it's treated functionally in relation to the things around it. So, let's say you don't have a good XML serializer (or aren't in the mood to set one up). Which of these would you personally use (if you weren't trying to bow to peer pressure in some code review): static void Main(string[] args) { // ...other code... XmlNode node = ...; Console.WriteLine(node["Name"].InnerText); Console.WriteLine(node["Color"].InnerText); Console.WriteLine(node["Taste"].InnerText); // ...other code... } or: class Fruit { private readonly XmlNode xml_node; public Fruit(XmlNode xml_node) { this.xml_node = xml_node; } public string Name { get { return xml_node["Name"].InnerText; } } public string Color { get { return xml_node["Color"].InnerText; } } public string Taste { get { return xml_node["Taste"].InnerText; } } } static void Main(string[] args) { // ...other code... XmlNode node = ...; Fruit fruit_node = new Fruit(node); Console.WriteLine(fruit_node.Name); Console.WriteLine(fruit_node.Color); Console.WriteLine(fruit_node.Taste); // ...other code... }
