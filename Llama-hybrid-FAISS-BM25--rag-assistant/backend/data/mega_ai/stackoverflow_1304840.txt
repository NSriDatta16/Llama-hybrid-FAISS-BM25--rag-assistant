[site]: stackoverflow
[post_id]: 1304840
[parent_id]: 1304771
[tags]: 
You don't have "a pointer allocated to hold 4096 bytes", you have a pointer to an allocated block of 4096 bytes. If your block was allocated with malloc() , realloc() will allow you to reduce or increase the size of the block. The start address of the block won't necessarily stay the same, though. You can't change the start address of a malloc 'd memory block, which is really what your second scenario is asking. There's also no way to split a malloc 'd block. This is a limitation of the malloc / calloc / realloc / free API -- and implementations may rely on these limitations (for example, keeping bookkeeping information about the allocation immediately before the start address, which would make moving the start address difficult.) Now, malloc isn't the only allocator out there -- your platform or libraries might provide other ones, or you could write your own (which gets memory from the system via malloc , mmap , VirtualAlloc or some other mechanism) and then hands it out to your program in whatever fashion you desire. For C++, if you allocate memory with std::malloc , the information above applies. If you're using new and delete , you're allocating storage for and constructing objects, and so changing the size of an allocated block doesn't make sense -- objects in C++ are a fixed size.
