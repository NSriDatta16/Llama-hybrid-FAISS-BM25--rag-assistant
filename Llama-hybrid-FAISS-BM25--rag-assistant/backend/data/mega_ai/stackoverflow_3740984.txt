[site]: stackoverflow
[post_id]: 3740984
[parent_id]: 3740621
[tags]: 
You could define your own typeClass like this: class GShow a where gShow :: a -> String gShow = show instance GShow String where show = id instance GShow Integer instance GShow Char -- And so on for all the types you need. The default implementation for "gShow" is "show", so you don't need a "where" clause for every instance. But you do need all the instances, which is a bit of a drag. Alternatively you could use overlapping instances . I think (although I haven't tried it) that this will let you replace the list of instances using the default "gShow" by a single line: instance (Show a) => GShow a The idea is that with overlapping instances the compiler will chose the most specific instance available. So for strings it will pick the string instance over the more general one, and for everything else the general one is the only one that matches.
