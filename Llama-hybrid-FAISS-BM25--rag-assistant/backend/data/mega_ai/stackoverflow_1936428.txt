[site]: stackoverflow
[post_id]: 1936428
[parent_id]: 1888182
[tags]: 
I think the question was answered well above but I just thought that this was a valuable lesson that I learnt when doing drag and drop... The initial DragDropEffect that is passed to the DoDragDrop method should be considered as a suggestion (or a desire) for what operation should be performed. If I remember correctly, that method returns the actual effect that the target performed if the drag and drop was actually successful (and not cancelled). This creates a simple communication protocol between the source and destination and is mainly useful for cases when there are several potential targets for the drag. It allows you to distinguish what actually happened. This is particularly useful to think about because you might be interacting with a component that you don't even know about or expect. If you take this into account, you can sometimes get surprising benefits where drag and drop becomes more useful that was originally planned for because suddenly other components can interoperate without any other explicit coding. With this being said, I would imagine that it makes sense for the .net framework to treat copy and move operations differently by default because the one operation is constructive and the other is destructive. I think they are trying to protect from unwanted destructive operations from occurring without being handled explicitly. Not sure of this but just a thought :)
