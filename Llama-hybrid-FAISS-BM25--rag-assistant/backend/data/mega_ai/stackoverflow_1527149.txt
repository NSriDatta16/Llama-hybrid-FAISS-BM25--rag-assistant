[site]: stackoverflow
[post_id]: 1527149
[parent_id]: 1526596
[tags]: 
I think the wrong question is being asked here. If you would like to improve the speed at which you can search for an object in a List containing six million entries, then you should look into how fast these datatype's retrieval operations perform. As usual, the Javadocs for these classes state pretty plainly what type of performance they offer: HashMap : This implementation provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets. This means that HashMap.get(key) is O(1) . ArrayList : The size, isEmpty, get, set, iterator, and listIterator operations run in constant time. The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking). This means that most of ArrayList 's operations are O(1) , but likely not the ones that you would be using to find objects that match a certain value. If you are iterating over every element in the ArrayList and testing for equality, or using contains() , then this means that your operation is running at O(n) time (or worse). If you are unfamiliar with O(1) or O(n) notation, this is referring to how long an operation will take. In this case, if you can get constant-time performance, you want to take it. If HashMap.get() is O(1) this means that retrieval operations take roughly the same amount of time regardless of how many entries are in the Map. The fact that something like ArrayList.contains() is O(n) means that the amount of time it takes grows as the size of the list grows; so iterating thru an ArrayList with six million entries will not be very effective at all.
