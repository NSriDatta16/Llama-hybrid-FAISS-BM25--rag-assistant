[site]: stackoverflow
[post_id]: 2821231
[parent_id]: 2820576
[tags]: 
A few comments. First, gbn is correct with regard to not being able to cancel rollbacks in progress. This is how SQL keeps transactional integrity, and you wouldn't want that behavior changed. If you absolutely don't care and just want to get your DB back to where you were when the last backup was taken, then follow his steps. One caveat, however. There are times I've seen where a spid isn't really rolling back , its just stuck (usually at 0% or 100% progress). The most reliable indicator in this case is if the CPU/IO counters for the spid in activity monitor are not changing (and the SPID isn't being blocked by another SPID). In this case, you might have to restart the SQL service (don't need to do an entire reboot) to clear the spid. With regard to re-organizing your query so that these rollbacks don't cripple you, yes, its possible. Just use explicit transactions: WHILE @@Fetch_Status=0 BEGIN BEGIN TRANS EXEC spProcedure @code COMMIT TRANS FETCH NEXT ... INTO @code END The data is committed after each batch. If you experience an issue and have to kill the spid, it should only roll back the current batch it is working on. If even a single batch is too much, you could probably refactor your "spProcedure" to insert in smaller batches of 10k-100k records, committing after each one.
