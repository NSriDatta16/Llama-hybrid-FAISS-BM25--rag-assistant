[site]: stackoverflow
[post_id]: 436709
[parent_id]: 436608
[tags]: 
Since the callback is asynchronous (at least, in the sense that it's waiting on the user to do something), it might be easier to handle what you need to inside the callback: function confirm() { jConfirm('are you sure?', 'Confirmation Dialog', function(r) { if (r) doSomething(); }); } @klogan [comments] I assume you got these from here ? The page gives you your answer: (look under Usage ) These methods do not return the same values as confirm() and prompt(). You must access the resulting values using a callback function. (See the demo for more details.) @klogan The point I'm trying to make is that there isn't really an easy way to accomplish what you want. You're trying to correlate procedural and event-driven programming -- something JavaScript doesn't help you do. The simplest (though, risky ) solution is to use a pseudo-infinite-loop. But, if callback never gets called, you now have an actual infinite loop. And, depending on the JavaScript engine, you might kill the browser waiting. Point: Your best bet is to avoid this trying to force event-driven into procedural. function confirm() { var result = false; var response = false; jConfirm('are you sure?', 'Confirmation Dialog', function(r) { result = r; response = true; }); while(!response) continue; // wait return result; }
