[site]: stackoverflow
[post_id]: 1613334
[parent_id]: 1608465
[tags]: 
So, the correct way to conditionally handle unfortunately depends on the superView. For some view and events (like UITableView select), you need to forward the touchesBegan: event to nextResponder, keep track of your gesture, forward touchesMoved: events to the nextResponder until you detect your gesture, and when it's triggered you send a touchesCancelled: to the nextResponder, and hide all other events from the next responder (touchesEnded: and touchesCancelled:) until you receive touchesEnded: or touchesCancelled: yourself. In a UIScrollView, however, there is the special case in that it doesn't depend on being the nextResponder to handle scroll events (Scrolling is most likely detected in methods like hitTest:). So no matter what you do with regards to forwarding or events or not, scrolling still happens. The only way to prevent scrolling from happen is to disable scrolling on the parent view as soon as your gesture is detected, and then re-enable scrolling when it ends or is cancelled.
