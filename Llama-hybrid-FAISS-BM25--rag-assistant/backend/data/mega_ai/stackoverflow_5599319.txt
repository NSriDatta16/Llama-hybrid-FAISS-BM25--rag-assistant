[site]: stackoverflow
[post_id]: 5599319
[parent_id]: 5598994
[tags]: 
I agree with @Uri that making Tree an Interface instead of an Abstract class would be an improvement. If your parser doesn't know about subclasses of Tree, then one way is a reflection based scheme using Class.forName. Another way to deal with it would be to use a system where extension register when they are installed(A example here is the Eclipse plugin registry, although its a very complicated example of this pattern). Your larger question is really about how to best organize parsers written in an OO language. There are many, many books on this subject. One that you might try looking at is this book: Programming Language Processors in Java: Compilers and Interpreters David Watt (Author), Deryck Brown (Author) It's available on Amazon and is helpful is starting to understand how to design language parsers. The examples are all in Java. Also, if you have a grammar, you could try running it through Antlr and looking at the output for good examples of how to organize a parser. http://www.antlr.org/
