[site]: stackoverflow
[post_id]: 1608530
[parent_id]: 1581467
[tags]: 
The obvious answer to me is to use the last solution you mentioned but with decimals (floats). So you start with, say: {0.1, 0.2, 0.3, 0.4, 0.5} . If you move the last item to between 0.2 and 0.3 it becomes 0.25 . If you move it to the top it becomes 0.05 . Each time you simply take the mid-point of the two numbers on either side. In other words, the average of the previous/next items. Another similar solution is to use characters, then sort by strings alphabetically. Starting with {1, 2, 3, 4, 5} , if you move the 5 between 2 and 3 you'd use 25. If you do a string sort of the list you keep the right order: {1, 2, 25, 3, 4} . The only problem I can think of with these methods is that eventually, you will hit the limit of floating point precision, i.e. trying to find a number between 0.0078125 and 0.0078124 . A few ways to solve this: Run a script every so often that runs through every item and reorders them to {0.1, 0.2, 0.3, ...} . Don't use two decimal places when you can use one. Between 0.2 and 0.25 you could use 0.23 instead of the calculated 0.225 . Re-sequence locally, not globally. If you have {0.2, 0.3, 0.6} and want to insert after 0.2 , you could set the second one to 0.4 and insert the new item at 0.3 .
