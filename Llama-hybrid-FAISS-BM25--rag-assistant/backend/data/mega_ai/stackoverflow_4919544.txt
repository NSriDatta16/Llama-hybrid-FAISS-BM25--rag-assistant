[site]: stackoverflow
[post_id]: 4919544
[parent_id]: 4919354
[tags]: 
There is nothing inelegant about having a suite_id which is nullable. This basically says, in your data model, a room can be part of a suite. This is a direct representation of the situation and is therefore elegant. The alternatives are much worse. Consider for a moment, if you will, what the model might look like if you separated rooms out in to different tables. One for suites, and one for non-suites. Suddenly your search criteria has to go over two tables. You replicate information over two tables (when in actuality, only a single identifier is the difference). This is NOT representative of the problem, and just causes more legwork, and the potential performance hit of two search queries (in a UNION, presumably) to get your results back. Oh, and if you add a common property, you need to add it in two places and do whatever maintenance work you have to do to recognize that new column, twice. Another alternative would be to include all the fields that pertain to a "suite" in to the main table. However, this means every room that was not part of a suite had redundant data in it. As you've said, it's rare for them to be part of a suite so the majority of these records will have dead space in them. Once again, it is also not representative of the situation. The solution you have come to is correct and robust.
