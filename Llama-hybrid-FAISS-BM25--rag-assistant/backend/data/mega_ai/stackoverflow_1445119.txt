[site]: stackoverflow
[post_id]: 1445119
[parent_id]: 1445065
[tags]: 
I'd recommend the PEAK-Rules library by P. Eby. By the same author (deprecated though) is the RuleDispatch package (the predecessor of PEAK-Rules). The latter being no longer maintained IIRC. PEAK-Rules has a lot of nice features, one being, that it is (well, not easily, but) extensible. Besides "classic" dispatch on types ony, it features dispatch on arbitrary expressions as "guardians". The len() function is not a true generic function (at least in the sense of the packages mentioned above, and also in the sense, this term is used in languages like Common Lisp , Dylan or Cecil ), as it is simply a convenient syntax for a call to specially named (but otherwise regular) method: len(s) == s.__len__() Also note, that this is single-dispatch only, that is, the actual receiver ( s in the code above) determines the method implementation called. And even a hypothetical def call_special(receiver, *args, **keys): return receiver.__call_special__(*args, **keys) is still a single-dispatch function, as only the receiver is used when the method to be called is resolved. The remaining arguments are simply passed on, but they don't affect the method selection. This is different from multiple-dispatch, where there is no dedicated receiver, and all arguments are used in order to find the actual method implementation to call. This is, what actually makes the whole thing worthwhile. If it were only some odd kind of syntactic sugar, nobody would bother with using it, IMHO. from peak.rules import abstract, when @abstract def serialize_object(object, target): pass @when(serialize_object, (MyStuff, BinaryStream)) def serialize_object(object, target): target.writeUInt32(object.identifier) target.writeString(object.payload) @when(serialize_object, (MyStuff, XMLStream)) def serialize_object(object, target): target.openElement("my-stuff") target.writeAttribute("id", str(object.identifier)) target.writeText(object.payload) target.closeElement() In this example, a call like serialize_object(MyStuff(10, "hello world"), XMLStream()) considers both arguments in order to decide, which method must actually be called. For a nice usage scenario of generic functions in Python I'd recommend reading the refactored code of the peak.security which gives a very elegant solution to access permission checking using generic functions (using RuleDispatch ).
