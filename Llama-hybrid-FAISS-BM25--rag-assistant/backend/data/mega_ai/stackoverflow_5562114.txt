[site]: stackoverflow
[post_id]: 5562114
[parent_id]: 4697540
[tags]: 
I'm surprised that so few pointed out the simple fact that when you go below/above the smallest/largest representable (absolute) non-zero/non-infinite value you will get an underflow/overflow exception which will halt execution. This is because it is mathematically incorrect that a non-zero number (for example) multiplied by a another non-zero number could become zero in the same way that it could become infinity simply by passing a certain point in the scale. Of course you can mask out the exception(s) in the FP control word and accept that your program behaves mathematically incorrect and eventually deliver a zero which you might plug into a division and get another exception. In my view it is much better to have control over the FP-processing. I have encountered organizations where they've left integer math for fp to "simplify programming" but have ended up with a processing background which they only vaguely understand and so-called "strange" results and exceptions which they definitely don't.
