[site]: stackoverflow
[post_id]: 5598879
[parent_id]: 
[tags]: 
TDD workflow best-practices for .NET using NUnit

UPDATE: I made major changes to this post - check the revision history for details. I'm starting to dive into TDD with NUnit and despite I've enjoyed checking some resources I've found here at stackoverflow, I often find myself not gaining good traction. So what I'm really trying to achieve is to acquire some sort of checklist/workflow —and here's where I need you guys to help me out— or " Test Plan " that will give me decent Code Coverage. So let's assume an ideal scenario where we could start a project from scratch with let's say a Mailer helper class that would have the following code: (I've created the class just for the sake of aiding the question with a code sample so any criticism or advice is encouraged and will be very welcome) Mailer.cs using System.Net.Mail; using System; namespace Dotnet.Samples.NUnit { public class Mailer { readonly string from; public string From { get { return from; } } readonly string to; public string To { get { return to; } } readonly string subject; public string Subject { get { return subject; } } readonly string cc; public string Cc { get { return cc; } } readonly string bcc; public string BCc { get { return bcc; } } readonly string body; public string Body { get { return body; } } readonly string smtpHost; public string SmtpHost { get { return smtpHost; } } readonly string attachment; public string Attachment { get { return Attachment; } } public Mailer(string from = null, string to = null, string body = null, string subject = null, string cc = null, string bcc = null, string smtpHost = "localhost", string attachment = null) { this.from = from; this.to = to; this.subject = subject; this.body = body; this.cc = cc; this.bcc = bcc; this.smtpHost = smtpHost; this.attachment = attachment; } public void SendMail() { if (string.IsNullOrEmpty(From)) throw new ArgumentNullException("Sender e-mail address cannot be null or empty.", from); SmtpClient smtp = new SmtpClient(); MailMessage mail = new MailMessage(); smtp.Send(mail); } } } MailerTests.cs using System; using NUnit.Framework; using FluentAssertions; namespace Dotnet.Samples.NUnit { [TestFixture] public class MailerTests { [Test, Ignore("No longer needed as the required code to pass has been already implemented.")] public void SendMail_FromArgumentIsNotNullOrEmpty_ReturnsTrue() { // Arrange dynamic argument = null; // Act Mailer mailer = new Mailer(from: argument); // Assert Assert.IsNotNullOrEmpty(mailer.From, "Parameter cannot be null or empty."); } [Test] public void SendMail_FromArgumentIsNullOrEmpty_ThrowsException() { // Arrange dynamic argument = null; Mailer mailer = new Mailer(from: argument); // Act Action act = () => mailer.SendMail(); act.ShouldThrow (); // Assert Assert.Throws (new TestDelegate(act)); } [Test] public void SendMail_FromArgumentIsOfTypeString_ReturnsTrue() { // Arrange dynamic argument = String.Empty; // Act Mailer mailer = new Mailer(from: argument); // Assert mailer.From.Should().Be(argument, "Parameter should be of type string."); } // INFO: At this first 'iteration' I've almost covered the first argument of the method so logically this sample is nowhere near completed. // TODO: Create a test that will eventually require the implementation of a method to validate a well-formed email address. // TODO: Create as much tests as needed to give the remaining parameters good code coverage. } } So after having my first 2 failing tests the next obvious step would be implementing the functionality to make them pass, but, should I keep the failing tests and create new ones after implementing the code that will make those pass, or should I modify the existing ones after making them pass? Any advice about this topic will really be enormously appreciated.
