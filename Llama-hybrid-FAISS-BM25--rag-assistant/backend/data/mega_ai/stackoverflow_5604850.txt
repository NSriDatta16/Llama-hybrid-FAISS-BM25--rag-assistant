[site]: stackoverflow
[post_id]: 5604850
[parent_id]: 
[tags]: 
WPF: Commands and ViewModels relation in MVVM

I am trying to call the same command from two different view models, but I got stuck while designing them (both command and view models). First, I created a ViewModel1 view model class: public class ViewModel1 : DependencyObject { ... // The command property public ProcessMyString ProcessMyStringCommand { get; set; } public ViewModel1() { // Command gets instantiated this.ProcessMyStringCommand = new ProcessMyString(this); } internal void ProcessMyString() { // This is where the actual processing method is called // somewhere from the business logic... ... } And the ProcessMyString command class: public class ProcessMyString : ICommand { private ViewModel1 viewModel; public ProcessMyString(ViewModel1 viewModel) { this.viewModel = viewModel; } public bool CanExecute(object parameter) { return true; } public event EventHandler CanExecuteChanged { add { CommandManager.RequerySuggested += value; } remove { CommandManager.RequerySuggested -= value; } } public void Execute(object parameter) { viewModel.ProcessMyString(); } } Then, I created the second view model class ViewModel2 , but when I realized that this view model will also need to use the same command , the command's constructor public ProcessMyString(ViewModel1 viewModel) will not work because it takes ViewModel1 parameter and I need to be able to pass both view models. Then, I decided to create ViewModelBase class, and to make both view models extend from it. I modified the command's constructor as well, of course: // Constructor's parameter is now ViewModelBase public ProcessMyString(ViewModelBase viewModel) But that meant that command's method Execute(object parameter) called a method from ViewModelBase now. That is not a good appproach because ViewModel's calls for ProcessMyString() should be reserved for ViewModel1 and ViewModel2 classes only. If I had class ViewModel3 I wouldn't want it to call ProcessMyString() and if I don't extend it from the ViewModelBase that would be fine. But what happens if I need a command that is shared between ViewModel2 and ViewModel3 ? The summation question is: How should I organize my commands and view models to be able to make the view models share the same commands?
