[site]: stackoverflow
[post_id]: 360996
[parent_id]: 360943
[tags]: 
(note: this might seem an over-complicated solution, but I'm assuming that the source data is large (lots of rows), so loading it into a List might not be feasible) The file reading would be done quite well with an iterator block... if the data is large, you only want to handle one row at a time, not a 2D array. This actually looks like a good fit for MiscUtil 's PushLINQ approach, which can perform multiple aggregates at the same time on a stream of data, without buffering... An example is below... why is this useful? Because it allows you to write multiple queries on a data source using standard LINQ syntax, but only read it once. Example using System; using System.Collections.Generic; using System.IO; using System.Linq; using MiscUtil.Linq; using MiscUtil.Linq.Extensions; static class Program { static void Main() { // prepare a query that is capable of parsing // the input file into the expected format string path = "foo.txt"; var qry = from line in ReadLines(path) let arr = line.Split(',') select new { Name = arr[0].Trim(), Male = arr[1].Trim() == "male", Birth = int.Parse(arr[2].Trim()), M1 = int.Parse(arr[3].Trim()) // etc }; // get a "data producer" to start the query process var producer = CreateProducer(qry); // prepare the overall average var avg = producer.Average(row => row.M1); // prepare the gender averages var avgMale = producer.Where(row => row.Male) .Average(row => row.M1); var avgFemale = producer.Where(row => !row.Male) .Average(row => row.M1); // run the query; until now *nothing has happened* - we haven't // even opened the file producer.ProduceAndEnd(qry); // show the results Console.WriteLine(avg.Value); Console.WriteLine(avgMale.Value); Console.WriteLine(avgFemale.Value); } // helper method to get a DataProducer from an IEnumerable , for // use with the anonymous type static DataProducer CreateProducer (IEnumerable data) { return new DataProducer (); } // this is just a lazy line-by-line file reader (iterator block) static IEnumerable ReadLines(string path) { using (var reader = File.OpenText(path)) { string line; while ((line = reader.ReadLine()) != null) { yield return line; } } } }
