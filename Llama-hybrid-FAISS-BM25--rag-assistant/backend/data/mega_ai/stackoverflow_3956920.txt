[site]: stackoverflow
[post_id]: 3956920
[parent_id]: 3956898
[tags]: 
paxdiablo seems to have given you the correct approach to solve this problem the way you've said you want to solve it. Is there a better way to approach this task? Unless you have a specific performance or hardware reason to do your work at a bit-wise level, there might be better ways to represent a set. For example, a linked list or binary tree, who's values are members of the set. Both of these structures can have (effectively) infinite size, and are easy to iterate through. Just because some set operations are easy to implement with boolean logic does not mean all are. The additional code that depends on your set operations will likely be more clear if you have a set-type interface, rather than a boolean logic (only) interface. No matter what solution you come up with, I recommend you hide it behind an interface, so you can change your storage solution in the future. You can do this by defining functions which you pass your structure to, and only operating on the structure through those functions.
