[site]: stackoverflow
[post_id]: 3151134
[parent_id]: 3150955
[tags]: 
Well, one simple thing you could do to make this more elegant would be to compare the types directly instead of using strings and type names: void DoStuff(Base ^base) { System::Type ^type = base->GetType(); if(type == ConcreteClass1::typeid) DoOtherStuff((ConcreteClass1 ^) base); else if(type == ConcreteClass2::typeid) DoOtherStuff((ConcreteClass2 ^) base); (...and even more...) } However, this has quite a bit of "code smell" to it. Typically, the entire point of using abstract classes is to allow for polymorphism - if you can make DoOtherStuff a virtual function on each type, you could just do: base->DoOtherStuff(); And the appropriate method will get called for you...
