[site]: stackoverflow
[post_id]: 3746996
[parent_id]: 3746758
[tags]: 
You can implement an interface on your usercontrol for the appropriate params. public interface ICustomParams { string UserName { get; set; } DateTime SelectedDate { get; set; } } implement the interface in the usercontrol, like this public partial class WebUserControl : System.Web.UI.UserControl , ICustomParams { public string UserName { get; set; } public DateTime SelectedDate { get; set; } } then load your control: UserControl userControl = (UserControl)page.LoadControl(pathToControl); Acces the control via the interface ICustomParams ucontrol = userControl as ICustomParams; if(ucontrol!=null) { ucontrol.UserName = "henry"; ucontrol.SelectedDate = DateTime.Now; } Done, you can add multiple interfaces for multiple purposes there. If the usercontrol hasn't the interface implemented, the if statement will avoid using it But if you really cannot access the usercontrols and you know "a bit" of the properties you want to set and what type they are try a more dynamic way with reflection: load the usercontrol: UserControl userControl = (UserControl)Page.LoadControl(@"~/WebUserControl.ascx"); get the properties of the loaded usercontrol: PropertyInfo[] info = userControl.GetType().GetProperties(); loop trough it: foreach (PropertyInfo item in info) { if (item.CanWrite) { switch (item.Name) { case "ClientName" // A property exists inside the control": // item.SetValue(userControl, "john", null); // john is the new value here break; } } } I would only encourage you this if you CANNOT access the usercontrols and there are dozens of them with lots and lots of variable properties per usercontrol. (It can get very ugly, slow and not fail-safe)
