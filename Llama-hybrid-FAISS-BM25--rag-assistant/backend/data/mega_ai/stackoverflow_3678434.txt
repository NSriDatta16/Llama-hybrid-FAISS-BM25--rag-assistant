[site]: stackoverflow
[post_id]: 3678434
[parent_id]: 
[tags]: 
How to implement a getter-function (using callbacks)

I have to request data for a JS-script from a MySQL database (based upon a user-id). I did not find a simple solution for JavaScript and it was not possible to load the data using ajax, because the database is available under a different domain. I implemented a workaround using PHP and curl. Now the JS has to "wait" for the request to finish, but the script is of course running asynchronously and does not wait for the response. I know that it's not really possible to wait in JS, but it must be possible to return value like this. I also tried using a return as another callback, but that didn't work of course, because the getter-function will run further anyway. How can I implement a simple getter, which "waits" and returns the response from the HTTP-request? Thanks for any other clues. I'm really lost at the moment. This is a excerpt from the source code: /** * Simple getter which requests external data */ function simple_getter() { // http request using a php script, because ajax won't work crossdomain // this request takes some time. function finished before request is done. /* Example */ var url = "http://example-url.com/get_data.php?uid=1234"; var response_callback = handle_result_response; var value = send_request( url, response_callback ); value = value.split('*')[0]; if (value === '' || value == const_pref_none) { return false; } /* 1. returns undefinied, because value is not yet set. 2. this as a callback makes no sense, because this function will run asynchronous anyway. */ return value; } Additional information about the used functions: /** * Callback for the send_request function. * basically returns only the responseText (string) */ function handle_result_response(req) { // do something more, but basically: return req.responseText; } /** * Requests data from a database (different domain) via a PHP script */ function send_request( url, response_callback ) { var req = createXMLHTTPObject(); if (!req) return; var method = (postData) ? "POST" : "GET"; req.open(method, url, true); req.setRequestHeader('User-Agent','XMLHTTP/1.0'); // More not relevant source code // ... req.onreadystatechange = function () { // More not relevant source code // ... response_callback(req); } if (req.readyState == 4) return; req.send(postData); } Not really relevant code, but required for the HTTP-request: var XMLHttpFactories = [ function () {return new XMLHttpRequest()}, function () {return new ActiveXObject("Msxml2.XMLHTTP")}, function () {return new ActiveXObject("Msxml3.XMLHTTP")}, function () {return new ActiveXObject("Microsoft.XMLHTTP")} ]; function createXMLHTTPObject() { var xmlhttp = false; for (var i=0; i
