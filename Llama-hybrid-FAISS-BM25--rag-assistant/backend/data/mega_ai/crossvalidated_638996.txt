[site]: crossvalidated
[post_id]: 638996
[parent_id]: 
[tags]: 
Why do my optimal number of clusters changes everytime I re-run the same code? Is this normal?

I have the following code: from matplotlib.lines import Line2D from sklearn.metrics import silhouette_score from sklearn.cluster import SpectralClustering from shapely.wkt import loads # Make sure to import loads from shapely.wkt # Convert WKT column to geometry gdf_coefficients['geometry'] = gdf_coefficients['WKT'].apply(loads) gdf_coefficients = gdf_coefficients.set_geometry('geometry') # Iterate over each month's GeoDataFrame containing GWR coefficients for (year, month), gdf_month in gdf_coefficients.groupby(['Year', 'Month']): # Extract GWR coefficients from the GeoDataFrame gwr_coefficients = gdf_month[['Intercept_coefficient', 'temperature_mean_coefficient', 'contact_mean_mean_coefficient', 'policyIdx_max_coefficient', 'gdp_2019_coefficient', 'total_households_2021_coefficient', 'population_density_coefficient', 'daytime_population_2021_coefficient', 'elevation_mean_coefficient', 'NDVI_mean_coefficient', 'connectivity_index_coefficient']].values # Determine optimal number of clusters using Silhouette coefficient silhouette_scores = [] for n_clusters in range(2, 11): spectral = SpectralClustering(n_clusters=n_clusters, affinity='nearest_neighbors') labels = spectral.fit_predict(gwr_coefficients) silhouette_scores.append(silhouette_score(gwr_coefficients, labels)) # Find the optimal number of clusters optimal_clusters = silhouette_scores.index(max(silhouette_scores)) + 2 # Spectral Clustering with optimal number of clusters spectral = SpectralClustering(n_clusters=optimal_clusters, affinity='nearest_neighbors') gdf_month['spectral_cluster'] = spectral.fit_predict(gwr_coefficients) # Plot the clusters directly from gdf_month DataFrame plt.figure(figsize=(12, 8)) ax = gdf_month.plot(column='spectral_cluster', cmap='Wistia', legend=False, figsize=(12, 8)) plt.title(f'Spectral Clustering Results for GWR - Year: {year}, Month: {month}') # Calculate cluster centers (average coefficients) for the current month cluster_centers = gdf_month.drop(['NUTS3', 'WKT', 'geometry'], axis=1).groupby('spectral_cluster').mean() # Calculate and plot cluster centers (centroids) for each spectral cluster for cluster, group in gdf_month.groupby('spectral_cluster'): cluster_union = group['geometry'].unary_union cluster_center = Point(cluster_union.centroid.x, cluster_union.centroid.y) # Plot cluster center plt.scatter(cluster_center.x, cluster_center.y, color=plt.cm.cool(cluster / (optimal_clusters - 1)), marker='o', s=50, alpha=1, label=f'Cluster {cluster} Center') # Create legend elements with correct colors legend_elements = [Line2D([0], [0], marker='o', color='w', markerfacecolor=plt.cm.cool(cluster / (optimal_clusters - 1)), markersize=5, alpha=0.5, label=f'Cluster {cluster} Center') for cluster in cluster_centers.index] ax.legend(handles=legend_elements, title='Cluster Centers', bbox_to_anchor=(1.05, 1), loc='upper left') plt.show() # Print the optimal number of clusters print("Year:", year, "Month:", month, "Optimal number of clusters:", optimal_clusters) And everytime that, for whatever reason, I re-run the code, the optimal number of clusters, based on Silhouette score and spectral clustering, changes. I couldn't find any specific information if this is to be expected. My original data has been preprocessed, normalized and standardized so I was wondering if this has something to do with noisy data or a random process of the algorithm. Thank you very much for your help!
