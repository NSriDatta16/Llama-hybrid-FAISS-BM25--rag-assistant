[site]: stackoverflow
[post_id]: 2981146
[parent_id]: 2980805
[tags]: 
Okay, since the answers seem to stress the stylistic reasons for preferring one over the other, I decided to gen up a timing test. Edit : Following robinst's comment above, I now have three methods: one which does PrintWriter(StringWriter)-style appending, and two which use StringBuilder: one with the append of the newline inside the append (as in the original: builder.append(thing + newline); ), and the other does a separate append (as above: builder.append(thing).append(newline); ). I followed my usual benchmarking scheme: call the methods several (1000 in this case) times first to give the optimizer time to warm up, then call each a large number of times (100,000 in this case) in alternating sequence, so that any changes in the workstation's runtime environment are more fairly distributed, and run the test itself several times and average the results. Oh, and of course the number of lines created and the length of the lines is randomized but held to be the same for each pair of calls, because I wanted to avoid any possible effects of buffer size or line size on the results. The code for this is here: http://pastebin.com/vtZFzuds Note: I have not yet updated the pastebin code to reflect the new test. TL,DR? The average results for 100,000 calls to each method are quite close: 0.11908 ms per call using StringBuilder (+newline inside the paren) 0.10201 ms per call using StringBuilder (newline as a separate append) 0.10803 ms per call using PrintWriter(StringWriter) That's so close that the timing is nearly irrelevant to me, so I'm going to continue doing things the way I always did: StringBuilder(with separate append), for stylistic reasons. Of course, while working in this established and mature codebase, I'll mostly keep to the existing conventions, in order to minimize surprise.
