[site]: stackoverflow
[post_id]: 3648656
[parent_id]: 3534669
[tags]: 
There are multiple ways to approach a solution for this problem. Its a class hyperlinking problem in the domain of RESTful Web Services. Since this has to do with Jersey the first thing I would recommend is to avoid JAXB all together since JAXB (in context of XML or JSON) ain't HATEOAS. After dwindling a lot with Jersey and HATEOAS I have come to the opinion that the best representations for a RESTful WS is Atom Syndication Format coupled with JSON. For your example of Team and Employee I would take the following approach. GET /team/ - returns a paginated Atom Syndication Feed list of teams POST /team/ - creates a new team receiving a JSON representation GET /team/1 - returns a paginated Atom Syndication Feed list of employees in the team with the ID 1 with an Link to team's JSON representation too. GET /employee/ - returns a paginated Atom Syndication Feed list of employees POST /employee/ - creates a new employee using JSON GET /employee/1 - returns details about the employee with the ID 1 in JSON Till here I haven't change much just specifying some representation details. The interesting part is adding/removing an employee from a team. For this I would add resources with pattern @Path("/team/{id}/employees) class TeamEmployees { @Path("/{posId}") @GET @Produces(MediaType.APPLICATION_JSON) public Employee get(@PathParam("posId") int positonId) {} @Path("/{posId}") @DELETE public Employee remove(@PathParam("posId") int positonId) {} @POST @Consumes(MediaType.APPLICATION_FORM_URLENCODED) //empUri sample is /employee/{id} server knows how to parse it public Employee add(@FormParam("employeeUri") String empUri) {} } Now what is position id, one approach - it is a unique number across all teams, i.e. primary key in a table which will have position_id, team_id, emp_id as tuple. Ensuring that there will never be 2 position_id same for 2 teams. This way the whole scenario could be turned to be HATEOAS. In addition to be able to export URIs in JSON representation to a DTO, the approach that I take is, I have DTO representing the data model for its persistent storage and I have a representation model representing hyperlinked (de)serializable version of DTO where I store string value as hyperlink. I look at representation model as API and DTO as the SPI to the RESTful WS Data Model.
