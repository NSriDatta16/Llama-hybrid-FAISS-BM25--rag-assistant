[site]: stackoverflow
[post_id]: 1661729
[parent_id]: 1661561
[tags]: 
I believe the problem is that when you are loading a non-Xml formatted string into an XmlReader object. "XmlReader provides forward-only, read-only access to a stream of XML data. The XmlReader class conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations." & "XmlReader throws an XmlException on XML parse errors." - MSDN XmlReader Class Article http://msdn.microsoft.com/en-us/library/system.xml.xmlreader.aspx Try loading and reading actual Xml data instead by changing: TextReader tr = new StringReader("a [ z ]"); to: TextReader tr = new StringReader(" a [ z ] "); or alternately, if you need each piece in its own node: TextReader tr = new StringReader(" a [ z ] "); I'm providing complete source for the latter example, because I THINK that's what you're aiming at here. TextReader tr = new StringReader(" a [ z ] "); XmlReaderSettings settings = new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment, ProhibitDtd = false, ValidationType = ValidationType.None, XmlResolver = null, CheckCharacters = false, IgnoreProcessingInstructions = true, }; XmlReader reader = XmlReader.Create(tr, settings); reader.Read(); StringBuilder sb = new StringBuilder(); while (!reader.EOF) { string s = reader.ReadElementString(); if (s != " ") { sb.Append(s); } } This will allow you to iterate through the nodes, getting the full string values with no exceptions. ~md5sum~
