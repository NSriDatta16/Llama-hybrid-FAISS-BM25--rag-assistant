[site]: crossvalidated
[post_id]: 499393
[parent_id]: 499351
[tags]: 
One of the difficulties in using software based on multiple packages, like R, is keeping track of which packages are suitable for use in your research program. Here, you seem to be trying to use gene-expression values as a potential biomarker for survival outcomes. Each of the steps you have taken might make sense in some contexts, but there are better ways to proceed with your data. First, you use a logistic regression ( glm() with binomial family) to develop the biomarker. Your "Comb" values from predict() with type = "link" are what's called the linear predictors: the sum, for each case, of terms from the products of each predictor value times its fitted coefficient, plus the intercept. In the binomial model, that provides the estimated log-odds of the outcome. That model, however, throws away all the information about survival times. That's not a good idea in general. It would be better to get a linear predictor that takes survival times into account. You can do that by fitting a coxph() model from the survival package, then using predict() on the coxph output object with the default type = "lp" . Second, the survivalROC() function from the eponymous package evaluates how well a particular biomarker is associated with survival outcomes at a particular point in time, estimating a receiver operating characteristic (ROC) curve in a way that incorporates censoring in the survival data. You certainly could use the linear predictor from a Cox model instead of from your binomial model with this function. I've used that myself. It would be better for your "biomarker" also to include information about critical clinical variables, which could be linear predictors from a model that incorporates clinical variables along with the gene-expression values. If a Cox survival model fits well, however, the standard C-index reported for a model that includes the biomarker provides information related to the area under the ROC curve, a reasonable measure of model performance, although without providing the ROC curve itself. Third, the plot_kfold_cv() function evidently is from the sjPlot package. According to the manual page, however, "Currently, only linear, poisson and negative binomial regression models are supported." Neither your binomial model nor the Cox model that I suggest would thus seem to provide interpretable output from that function. Fourth, the cv.glm() function, by default as you invoke it, reports the mean-square error over the 5 folds, both raw and corrected for bias. I'm not sure, but I suspect that with a logistic/binomial model it would use the squares of the differences between the predicted probabilities and the observed {0,1} outcomes, related to the Brier score. Check the code to be sure. For a survival model you would want to use some other measure of model performance, like observed versus predicted survival probabilities at some point in time. I prefer bootstrapping to evaluate model performance in terms of validation and calibration, and use cross-validation instead to choose things like hyperparatmeter settings for penalized models with LASSO or ridge regression. It might make sense for you to step back a bit and engage in an overview of regression techniques and their application to things like survival data. In addition to many pages on this site, take a look at the resources provided by Frank Harrell under "RMS" (regression modeling strategies).
