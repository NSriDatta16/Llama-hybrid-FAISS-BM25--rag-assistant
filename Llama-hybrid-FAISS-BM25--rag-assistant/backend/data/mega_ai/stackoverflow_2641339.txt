[site]: stackoverflow
[post_id]: 2641339
[parent_id]: 2641201
[tags]: 
Most likely the server sends a cookie once login is performed. You need to submit the same values as the login form. (this can be done using UploadValues()) However, you need to save the resulting cookies in a CookieContainer . When I did this, I did it using HttpWebRequest, however per http://couldbedone.blogspot.com/2007/08/webclient-handling-cookies.html you can subclass WebClient and override the GetWebRequest() method to make it support cookies. Oh, also, I found it useful to use Fiddler while manually accessing the web site to see what actually gets sent back and forth to the web site, so I knew what I was trying to reproduce. edit, elaboration requested: I can only elaborate how to do it using HttpWebRequest, I have not done it using WebClient. Below is the code snippet I used for login. private CookieContainer _jar = new CookieContainer(); private string _password; private string _userid; private string _url; private string _userAgent; ... string responseData; HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(_url); webRequest.CookieContainer = _jar; webRequest.Method = "POST"; webRequest.ContentType = "application/x-www-form-urlencoded"; webRequest.UserAgent = _userAgent; string requestBody = String.Format( "client_id={0}&password={1}", _userid, _password); try { using (StreamWriter requestWriter = new StreamWriter(webRequest.GetRequestStream())) { requestWriter.Write(requestBody); requestWriter.Close(); using (HttpWebResponse res = (HttpWebResponse)webRequest.GetResponse()) { using (StreamReader responseReader = new StreamReader(res.GetResponseStream())) { responseData = responseReader.ReadToEnd(); responseReader.Close(); if (res.StatusCode != HttpStatusCode.OK) throw new WebException("Logon failed", null, WebExceptionStatus.Success, res); } } }
