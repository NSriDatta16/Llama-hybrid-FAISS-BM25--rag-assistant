[site]: stackoverflow
[post_id]: 2383864
[parent_id]: 2383778
[tags]: 
Thanks for this question! I did some work on a client/server web framework that used monads to distinguish between different exection environments. The obvious ones were client-side and server-side , but it also allowed you to write both-side code (which could run on both client and server, because it didn't contain any special features) and also asynchronous client-side which was used for writing non-blocking code on the client (essentially a continuation monad on the client-side). This sounds quite related to your idea of distinguishing between CGI code and DB code. Here are some resources about my project: Slides from a presentation that I did about the project Draft paper that I wrote with Don Syme And I also wrote my Bachelor thesis on this subject (which is quite long though) I think this is an interesting approach and it can give you interesting guarantees about the code. There are some tricky questions though. If you have a server-side function that takes an int and returns int , then what should be the type of this function? In my project, I used int -> int server (but it may be also possible to use server (int -> int) . If you have a couple of functions like this, then it isn't as straightforward to compose them. Instead of writing goo (foo (bar 1)) , you need to write the following code: do b You could write the same thing using some combinators, but my point is that composition is a bit less elegant.
