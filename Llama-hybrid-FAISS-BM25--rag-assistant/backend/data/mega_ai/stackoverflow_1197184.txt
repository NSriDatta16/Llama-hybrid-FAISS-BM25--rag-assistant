[site]: stackoverflow
[post_id]: 1197184
[parent_id]: 
[tags]: 
let and flet in emacs lisp

I don't know if you would call it the canonical formulation, but to bind a local function I am advised by the GNU manual to use 'flet': (defun adder-with-flet (x) (flet ( (f (x) (+ x 3)) ) (f x)) ) However, by accident I tried (after having played in Scheme for a bit) the following expression, where I bind a lambda expression to a variable using 'let', and it also works if I pass the function to mapcar*: (defun adder-with-let (x) (let ( (f (lambda (x) (+ x 3))) ) (car (mapcar* f (list x)) )) ) And both functions work: (adder-with-flet 3) ==> 6 (adder-with-let 3) ==> 6 Why does the second one work? I cannot find any documentation where 'let' can be used to bind functions to symbols.
