[site]: stackoverflow
[post_id]: 1915205
[parent_id]: 1915124
[tags]: 
A high code coverage metric does not guarantee code quality. From " The Meaning of 100% Test Coverage " What Does 100% Coverage NOT Mean? Correctness. While having 100% coverage is a strong statement about the level of testing that went into a piece of code, on its own, it can not guarantee that the code being tested is completely error-free. One of the main advantages of creating unit tests as part of Test Driven Development is to steer the code into a more test-able state. Trying to add tests over existing code post-hoc can lead to huge test fixtures which need to set up dozens of dependencies - the code was originally written to be tested as part of an application, not in a unit test. Revisiting the application's design and refactoring the code to be testable, to me, would be a worthy goal. This may significantly decrease technical debt while increasing the test-ability and maintain-ability of the code base. It could also be highly time consuming and not worth it from a business standpoint.
