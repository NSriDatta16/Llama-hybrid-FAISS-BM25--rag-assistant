[site]: stackoverflow
[post_id]: 4350951
[parent_id]: 
[tags]: 
Strategies for automatic parallelization

I am building a node-based drag-and-drop editor, where each node represents one action (for example, read this file, or sort this data, etc.) Outputs and inputs of nodes can be connected. One of the features I'd like to implement is automatic parallelization , so that if a path branches off I can automatically begin a thread to handle each branch. I'm concerned about a few issues, however: If a path branches off, but then later joins back together, I will need to synchronize them somehow If there are multiple start-nodes (where execution begins), their paths will have to be managed separately and then possibly dynamically joined/merged I want to limit how many threads are created so that I don't suddenly have 20 threads deadlocked Essentially, I'd like to know if any strategies for doing something like this exist (not looking for code necessarily; just theory). Could scheduling algorithms help? Thanks for your advice! I look forward to hearing your suggestions. Note : I'm using C# 3.5, so none of the fun parallel-tasking abilities are available to me. If necessary, I will make the switch to C# 4.0, but I'd like to avoid this.
