[site]: stackoverflow
[post_id]: 1953080
[parent_id]: 
[tags]: 
Good algorithm and data structure for looking up words with missing letters?

I need to write an efficient algorithm for looking up words with missing letters in a dictionary and I want the set of possible words. For example, if I have th??e , I might get back "these", "those", "theme:, "there", etc. There will be up to TWO question marks and when two question marks do occur, they will occur in sequence. I was wondering if anyone can suggest some data structures or algorithm I should use. A Trie is too space-inefficient and would make it too slow. Any other ideas modifications? Currently I am using 3 hash tables for when it is an exact match, 1 question mark, and 2 question marks. Given a dictionary I hash all the possible words. For example, if I have the word WORD. I hash WORD, ?ORD, W?RD, WO?D, WOR?, ??RD, W??D, and WO?? into the dictionary. Then I use a link list to link the collisions together. So say hash(W?RD) = hash(STR?NG) = 17. hashtab(17) will point to WORD and WORD points to STRING because it is a linked list. The timing on average lookup of one word is about 2e-6s. I am looking to do better, preferably on the order of 1e-9. It took 0.5 seconds for 3m entries insertions and it took 4 seconds for 3m entries lookup.
