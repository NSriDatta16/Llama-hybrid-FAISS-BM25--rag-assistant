[site]: stackoverflow
[post_id]: 1815979
[parent_id]: 1172933
[tags]: 
You could write a custom ASP.Net HttpModule as I did for my site to ban some rogue bots. Here's the code: public class UserAgentBasedRedirecter : IHttpModule { private static readonly Regex _bannedUserAgentsRegex = null; private static readonly string _bannedAgentsRedirectUrl = null; static UserAgentBasedRedirecter() { _bannedAgentsRedirectUrl = ConfigurationManager.AppSettings["UserAgentBasedRedirecter.RedirectUrl"]; if (String.IsNullOrEmpty(_bannedAgentsRedirectUrl)) _bannedAgentsRedirectUrl = "~/Does/Not/Exist.html"; string regex = ConfigurationManager.AppSettings["UserAgentBasedRedirecter.UserAgentsRegex"]; if (!String.IsNullOrEmpty(regex)) _bannedUserAgentsRegex = new Regex(regex, RegexOptions.IgnoreCase | RegexOptions.Compiled); } #region Implementation of IHttpModule public void Init(HttpApplication context) { context.PreRequestHandlerExecute += RedirectMatchedUserAgents; } private static void RedirectMatchedUserAgents(object sender, System.EventArgs e) { HttpApplication app = sender as HttpApplication; if (_bannedUserAgentsRegex != null && app != null && app.Request != null && !String.IsNullOrEmpty(app.Request.UserAgent)) { if (_bannedUserAgentsRegex.Match(app.Request.UserAgent).Success) { app.Response.Redirect(_bannedAgentsRedirectUrl); } } } public void Dispose() { } #endregion } You'll need to register it in web.config and specify the regular expression to use to match user agent strings. Here's one I used to ban msnbot/1.1 traffic: ...
