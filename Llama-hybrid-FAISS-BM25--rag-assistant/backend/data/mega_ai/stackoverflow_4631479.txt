[site]: stackoverflow
[post_id]: 4631479
[parent_id]: 4631396
[tags]: 
Well its usually something you do to suit your needs. There is no one right way. For a 3D platformer game I worked on years ago I designed the editor and game logic. The game logic was all a C++ hierarchy and each object had the ability to pass messages to other objects. To activate a lever which opened a door I would simply set up a simple "trigger zone" which was a logic object in itself that, simply, checked if the user was inside the sphere (As the level was organised into certain "zones" I needn't check triggers that weren't in my current zone). The trigger would then activate the lever (and this would start the animation). The lever was then set up to activate the door once it had been pulled. As any object could be a trigger it was simple to chain the triggers together. I could even assign triggers to certain points. Such as AnimationBegin, AnimationEnd, after a certain time or it could be keyed to a specific key frames in the animation. As each object could have triggers like this it was easy to design the editor to allow you to select a trigger event and then set which object was activated when the trigger occurred. Of course these trigger could just happen keyed to an animation which allowed me to do things like synchronising object movement for more nasty traps ... This is only one method and it worked beautifully for what we needed it for. There are many many different ways to approach this problem. No one way is correct so your best bet is to read up on things like "Game Logic" and "game object behaviours". More to the point you need to figure out what sort of interactions you are after and think about the state transitions that you will require. Counter-intuitively I've always found its significantly more complicated to design the frame work than it is to write the actual logic. Good luck!
