[site]: stackoverflow
[post_id]: 2202400
[parent_id]: 2202367
[tags]: 
The "live" function native to jQuery leverages the bubbling of events up the DOM. The "liveQuery" plugin, by contrast, uses the selector to find elements in the DOM and attach event handlers directly. In my opinion you're way better off using the "live" function when possible , because it involves less DOM traversal etc. For example, hooking event handlers to things throughout a big table can be kind-of slow with liveQuery but not slow at all with "live". There may be some issues (with IE of course) that force you to use liveQuery sometimes, though jQuery 1.4 has improved "live" considerably. edit â€” Update: Sep 2017 At this point, modern versions of jQuery centralize event handler registration in the .on() API. Briefly: $(selector).live("event-name", handler); would today be written with .on() : $(document).on("event-name", selector, handler); The .on() API provides considerably more flexibility than the long-deprecated .live() method did, including the option of using any node in the DOM as the delegation point (like the old .delegate() did).
