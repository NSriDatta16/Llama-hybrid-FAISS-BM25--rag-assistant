[site]: stackoverflow
[post_id]: 3251008
[parent_id]: 2905767
[tags]: 
I managed to figure this one out for myself! # Unobtrusive modifications to the Class class. class Class # Pass a block to attr_reader and the block will be evaluated in the context of the class instance before # the instance variable is returned. def attr_reader(*params,&block) if block_given? params.each do |sym| # Create the reader method define_method(sym) do # Force the block to execute before we… self.instance_eval(&block) # … return the instance variable self.instance_variable_get("@#{sym}") end end else # Keep the original function of attr_reader params.each do |sym| attr sym end end end end If you add that code somewhere it'll extend the attr_reader method so that if you now do the following: attr_reader :special_attr { p "This happens before I give you @special_attr" } It'll trigger the block before it gives you the @special_attr . It's executed in the instance scope so you can use it, for example, in classes where attributes are downloaded from the internet. If you define a method like get_details which does all retrieval and sets @details_retrieved to true then you can define the attr like this: attr_reader :name, :address, :blah { get_details if @details_retrieved.nil? }
