[site]: stackoverflow
[post_id]: 897185
[parent_id]: 
[tags]: 
SQL magic - query shouldn't take 15 hours, but it does

Ok, so i have one really monstrous MySQL table (900k records, 180 MB total), and i want to extract from subgroups records with higher date_updated and calculate weighted average in each group. The calculation runs for ~15 hours, and i have a strong feeling i'm doing it wrong . First, monstrous table layout: category element_id date_updated value weight source_prefix source_name Only key here is on element_id (BTREE, ~8k unique elements). And calculation process: Make hash for each group and subgroup. CREATE TEMPORARY TABLE `temp1` (INDEX ( `ds_hash` )) SELECT `category`, `element_id`, `source_prefix`, `source_name`, `date_updated`, `value`, `weight`, MD5(CONCAT(`category`, `element_id`, `source_prefix`, `source_name`)) AS `subcat_hash`, MD5(CONCAT(`category`, `element_id`, `date_updated`)) AS `cat_hash` FROM `bigbigtable` WHERE `date_updated` I really don't understand this fuss with hashes, but it worked faster this way. Dark magic, i presume. Find maximum date for each subgroup CREATE TEMPORARY TABLE `temp2` (INDEX ( `subcat_hash` )) SELECT MAX(`date_updated`) AS `maxdate` , `subcat_hash` FROM `temp1` GROUP BY `subcat_hash`; Join temp1 with temp2 to find weighted average values for categories CREATE TEMPORARY TABLE `valuebycats` (INDEX ( `category` )) SELECT `temp1`.`element_id`, `temp1`.`category`, `temp1`.`source_prefix`, `temp1`.`source_name`, `temp1`.`date_updated`, AVG(`temp1`.`value`) AS `avg_value`, SUM(`temp1`.`value` * `temp1`.`weight`) / SUM(`weight`) AS `rating` FROM `temp1` LEFT JOIN `temp2` ON `temp1`.`subcat_hash` = `temp2`.`subcat_hash` WHERE `temp2`.`subcat_hash` = `temp1`.`subcat_hash` AND `temp1`.`date_updated` = `temp2`.`maxdate` GROUP BY `temp1`.`cat_hash`; (now that i looked through it and wrote it all down, it seems to me that i should use INNER JOIN in that last query (to avoid 900k*900k temp table)). Still, is there a normal way to do so? UPD : some picture for reference: removed dead ImageShack link UPD : EXPLAIN for proposed solution: +----+-------------+-------+------+---------------+------------+---------+--------------------------------------------------------------------------------------+--------+----------+----------------------------------------------+ | id | select_type | table | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------+---------------+------------+---------+--------------------------------------------------------------------------------------+--------+----------+----------------------------------------------+ | 1 | SIMPLE | cur | ALL | NULL | NULL | NULL | NULL | 893085 | 100.00 | Using where; Using temporary; Using filesort | | 1 | SIMPLE | next | ref | prefix | prefix | 1074 | bigbigtable.cur.source_prefix,bigbigtable.cur.source_name,bigbigtable.cur.element_id | 1 | 100.00 | Using where | +----+-------------+-------+------+---------------+------------+---------+--------------------------------------------------------------------------------------+--------+----------+----------------------------------------------+
