[site]: stackoverflow
[post_id]: 5036672
[parent_id]: 
[tags]: 
Azure Diagnostics doesnt transfer IIS logs to blob storage

Ok, I have been banging my head on this one for a while, figure I would ask if anyone has encountered this before. My configuration and setup is below. This is when deployed to the staging environment. I know that the logging is happening because I enabled RDP and I am able to go in and I can see the IIS logs created. However they do not transfer to blob storage, even though other diagnostics logs do without problem. In the infrastructure logs i can see the following error, which I'm told is only about the proxy and not relevant: WinHttpGetProxyForUrl(http://mystorage.blob.core.windows.net) failed ERROR_WINHTTP_AUTODETECTION_FAILED (12180) The other warning I see in the Event Viewer is: - - 2283 0 3 0 0 0x80000000000000 266 Application RD00155D3273B5 - 3 5 \\?\C:\Resources\directory\345345kjh325kj5432452345.MyWebRole.DiagnosticStore\FailedReqLogFiles\Web\W3SVC1273337584\ 03000780 This is a fairly simple WCF application running as a WebRole. The config looks like this: ... ... I have also changed the listeners a few different ways, with the same outcome. So I dont think thats the problem, but im open to suggestions The code in the webrole looks like this: public override bool OnStart () { // To enable the AzureLocalStorageTraceListner, uncomment relevent section in the web.config DiagnosticMonitorConfiguration config = DiagnosticMonitor.GetDefaultInitialConfiguration(); //Windows Performance Counters List counters = new List (); counters.Add(@"\Processor(_Total)\% Processor Time"); counters.Add(@"\Memory\Available Mbytes"); counters.Add(@"\TCPv4\Connections Established"); counters.Add(@"\ASP.NET Applications(__Total__)\Requests/Sec"); counters.Add(@"\Network Interface(*)\Bytes Received/sec"); counters.Add(@"\Network Interface(*)\Bytes Sent/sec"); foreach (string counter in counters) { PerformanceCounterConfiguration counterConfig = new PerformanceCounterConfiguration(); counterConfig.SampleRate = TimeSpan.FromMinutes(1); counterConfig.CounterSpecifier = counter; config.PerformanceCounters.DataSources.Add(counterConfig); } config.PerformanceCounters.ScheduledTransferPeriod = TimeSpan.FromMinutes(1); //Windows Event Logs config.WindowsEventLog.DataSources.Add("System!*"); config.WindowsEventLog.DataSources.Add("Application!*"); config.WindowsEventLog.ScheduledTransferPeriod = TimeSpan.FromMinutes(1); config.WindowsEventLog.ScheduledTransferLogLevelFilter = LogLevel.Error; //Azure Trace Logs config.Logs.ScheduledTransferPeriod = TimeSpan.FromMinutes(1); config.Logs.ScheduledTransferLogLevelFilter = LogLevel.Error; //Crash Dumps CrashDumps.EnableCollection(true); //IIS Logs //This was added in a desperation move but it has not made a difference with or without DirectoryConfiguration directory = new DirectoryConfiguration(); directory.Container = "wad-tracefiles"; directory.DirectoryQuotaInMB = 10; directory.Path = RoleEnvironment.GetLocalResource("AppLocalStorage.svclog").RootPath; config.Directories.DataSources.Add(directory); //end desperation move config.Directories.ScheduledTransferPeriod = TimeSpan.FromMinutes(1); //infrastructure logs config.DiagnosticInfrastructureLogs.ScheduledTransferPeriod = TimeSpan.FromMinutes(1); config.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter = LogLevel.Error; DiagnosticMonitor.Start("DiagnosticsConnectionString", config); // For information on handling configuration changes // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357. RoleEnvironment.Changing += new EventHandler (RoleEnvironment_Changing); // This code is necessary to use CloudStorageAccount.FromConfigurationSetting CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) => { configSetter(RoleEnvironment.GetConfigurationSettingValue(configName)); RoleEnvironment.Changed += (sender, arg) => { if (arg.Changes.OfType () .Any((change) => (change.ConfigurationSettingName == configName))) { if (!configSetter(RoleEnvironment.GetConfigurationSettingValue(configName))) { RoleEnvironment.RequestRecycle(); } } }; }); return base.OnStart(); } The DiagnosticsConnectionString is set properly as some of the tables and containers are created and populated properly. Any help is appreciated. Thanks in advance.
