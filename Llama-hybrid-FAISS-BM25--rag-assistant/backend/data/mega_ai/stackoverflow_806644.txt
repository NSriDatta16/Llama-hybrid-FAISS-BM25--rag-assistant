[site]: stackoverflow
[post_id]: 806644
[parent_id]: 806561
[tags]: 
Regarding Class : All you need to do is derive Class from Base -- the fact that it implements Interface is implied, and in fact, inescapable: class Class: public Base // virtual inheritance is unnecessary here { }; Class will inherit method() from Base as desired. Regarding Class2 : Disclaimer: Negative result ahead Based on your comment on Tom's answer , I thought I had the answer for Class2 : // concrete class - specialised class Class2: public Interface2, public Base { public: using Base::method; // "Imports" all members named "method" from Base }; But actually, this doesn't work. Grovelling through the C++ standard reveals that section 7.3.3, paragraph 14 explains that using can't be used to resolve ambiguous accesses to inherited members: ... [Note: because a using-declaration designates a base class member (and not a member subobject or a member function of a base class subobject), a using-declaration cannot be used to resolve inherited member ambiguities. ...] It seems that the only way to get the desired behaviour in Class2 is to manually forward the method: // concrete class - specialised class Class2: public Interface2, public Base { public: virtual int method() { return Base::method(); } }; Regarding virtual inheritance: You don't need it for Class 's declaration, but you probably do need it for Interface2 's declaration to ensure that Class2 only has a single subobject of type Interface -- as it stands, every Class2 object has two subobjects of this type. (Although that won't cause problems if Interface is in fact a pure interface, lacking member variables.) If it helps, draw a diagram: every time a base class appears without the keyword virtual , it appears as a distinct object; all base classes that appear with the keyword virtual are condensed into one object. [UPDATE: markh44's excellent answer shows that the above approach (of making Interface2 inherit virtually from Interface ) will in fact allow Class2 to automatically inherit the implementation of method() from Base ! Problem solved!]
