[site]: stackoverflow
[post_id]: 2489320
[parent_id]: 2488915
[tags]: 
My take on things (based, in large part on Elements of Programming ) is that Stepanov considers containers as substantially less important than algorithms and iterators. From his viewpoint, the algorithms are the most important part. Iterators are secondary, and containers are simply the storage necessary for iterators to do their job. In the book, he starts off with some basics like objects and transformations. Chapter six is devoted primarily to iterators (in fact, "Iterators" is the name of the chapter). That also has nearly the only mention of containers in the book: There are four kinds of linear traversal: single-pass forward (an input stream), multipass forward (a singly linked list), bidirectional (a doubly linked list), and random access (an array). The only other place I remember him mentioning containers at all is to point out that a particular type (a "linearizable") isn't a container because it doesn't own its contents. There are also some other arguments to be made, such as minimizing duplication and avoiding ambiguity, but personally I think they're secondary (at best). The STL attempts to generalize algorithms to the greatest possible degree. Containers are de-emphasized, and a large part of the point of iterators is (or at least to me seems to be) to ensure that they stay in the background.
