[site]: stackoverflow
[post_id]: 5621945
[parent_id]: 
[tags]: 
How to Remove Duplication from Spring 3 MVC Standard and Ajax Request Controllers and Views

Lately I've been running into the same issue with my Spring MVC applications over and over again, and I'm trying to come up with a long term solution. The problem is that in a standard Spring 3 controller, you add model objects, you specify the view name (either inline or from some injected field) and return. The problem I've run into is that if you have a request that returns a page with a person, and their pets you have something like (not compilable, psuedo): @RequestMapping( value="personOverview", method="GET" ) public String getPersonOverview(model) { model.add(personRepo.getPerson( theName )); model.add(petRepo.getPetsForPerson( thePerson )); return "personOverviewViewName"; } Now, in your view you will be able to render all of this information. However, the issue arises when someone updates the "pets" for the person, and you just want to re-render the part of the page that shows the pets. Not only do you need to rewrite the rendering logic in a JSP fragment or in JavaScript, but also you will need to duplicate the controller code for each portion of the getPersonOverview method. If you were to break the controller methods up into smaller chunks, then you will not be able to render the full page, but will have to render each chunk with a separate request. In a normal ModelViewController pattern, the solution to this is that the view has access to the model, but in Spring MVC the model is in Java and lies behind the request layer, so you need to build request handlers for each model object. I know this question may seem a bit abstract, but what I'm looking for is patterns or principles that can be used to allow me to build full pages with many model objects, but also be able to update portions of the page with ajax without duplication.
