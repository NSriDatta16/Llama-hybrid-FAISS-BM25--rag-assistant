[site]: stackoverflow
[post_id]: 4205046
[parent_id]: 4204849
[tags]: 
In terms of the Java Language Specification there is an interesting point to note about the use of long and double : For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64 bit value from one write, and the second 32 bits from another write. Writes and reads of volatile long and double values are always atomic. Writes to and reads of references are always atomic, regardless of whether they are implemented as 32 or 64 bit values. VM implementors are encouraged to avoid splitting their 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications. Clearly this makes using a long or double in your looping variable less efficient than an int in the Java memory model, but implementations may vary in performance.
