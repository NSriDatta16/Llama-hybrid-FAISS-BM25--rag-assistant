[site]: stackoverflow
[post_id]: 2310512
[parent_id]: 2310498
[tags]: 
0 isn't cached as the implementation interprets a cached value of 0 as "cached value not yet initialised". The alternative would have been to use a java.lang.Integer , whereby null implied that the value was not yet cached. However, this would have meant an additional storage overhead. Regarding the probability of a String's hash code being computed as 0 I would say the probability is quite low and can happen in the following cases: The String is empty (although recomputing this hash code each time is effectively O(1)). An overflow occurs whereby the final computed hash code is 0 ( e.g. Integer.MAX_VALUE + h(c1) + h(c2) + ... h(cn) == 0 ). The String contains only Unicode character 0. Very unlikely as this is a control character with no meaning apart from in the "paper tape world" (!): From Wikipedia : Code 0 (ASCII code name NUL) is a special case. In paper tape, it is the case when there are no holes. It is convenient to treat this as a fill character without meaning otherwise .
