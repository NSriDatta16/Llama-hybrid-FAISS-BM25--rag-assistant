[site]: crossvalidated
[post_id]: 9161
[parent_id]: 9104
[tags]: 
The terminology is probably not used consistently, so the following is only how I understand the original question. From my understanding, the normal CIs you computed are not what was asked for. Each set of bootstrap replicates gives you one confidence interval, not many. The way to compute different CI-types from the results of a set of bootstrap replicates is as follows: B Since I want to compare the calculations against the results from package boot , I first define a function that will be called for each replicate. Its arguments are the original sample, and an index vector specifying the cases for a single replicate. It returns $M^{\star}$, the plug-in estimate for $\mu$, as well as $S_{M}^{2\star}$, the plug-in estimate for the variance of the mean $\sigma_{M}^{2}$. The latter will be required only for the bootstrap $t$-CI. > getM library(boot) # for boot(), boot.ci() > bOut boot.ci(bOut, conf=0.95, type=c("basic", "perc", "norm", "stud")) BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS Based on 999 bootstrap replicates CALL : boot.ci(boot.out = bOut, conf = 0.95, type = c("basic", "perc", "norm", "stud")) Intervals : Level Normal Basic Studentized Percentile 95% ( 95.6, 106.0 ) ( 95.7, 106.2 ) ( 95.4, 106.2 ) ( 95.4, 106.0 ) Calculations and Intervals on Original Scale Without using package boot you can simply use replicate() to get a set of bootstrap replicates. boots But let's stick with the results from boot.ci() to have a reference. boots The basic, percentile, and $t$-CI rely on the empirical distribution of bootstrap estimates. To get the $\alpha/2$ and $1 - \alpha/2$ quantiles, we find the corresponding indices to the sorted vector of bootstrap estimates (note that boot.ci() will do a more complicated interpolation to find the empirical quantiles when the indices are not natural numbers). (idx (ciBasic (ciPerc For the $t$-CI, we need the bootstrap $t^{\star}$ estimates to calculate the critical $t$-values. For the standard normal CI, the critical value will just be the $z$-value from the standard normal distribution. # standard normal CI with bias correction > zCrit (ciNorm tStar tCrit (ciT In order to estimate the coverage probabilities of these CI-types, you will have to run this simulation many times. Just wrap the code into a function, return a list with the CI-results and run it with replicate() like demonstrated in this gist .
