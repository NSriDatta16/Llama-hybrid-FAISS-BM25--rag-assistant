[site]: stackoverflow
[post_id]: 5038076
[parent_id]: 1945142
[tags]: 
From deployments in the wild, I've found the following devices: Devices that limit to 16 MiB of java heap (bitmaps are nearly unlimited). Devices that limit to 16 MiB of (java heap + native bitmap storage) Devices that limit to 24 MiB of java heap (bitmaps are nearly unlimited). Devices that limit to 24 MiB of (java heap + native bitmap storage) 24 MiB tends to be the high res devices, and can be detected with Runtime.getRuntime().maxMemory(). There's also 32MiB devices now, and some of the rooted phones have 64MiB by default. Previously, I confused my self several times trying to work out what was happening. I think all devices count bitmaps into the heap limit. But it's wildly difficult to make any sweeping generalizations about the android fleet. This is a VERY nasty issue on Android, and very confusing. This limit and it's behaviors are poorly documented, complicated, and extremely non-intuitive. They also vary across devices and OS versions, and have several known bugs. Part of the problem is that the limits are not precise - due to heap fragmentation, you will hit OOM well before the actual limit and must conservatively leave a meg or two of buffer. Even worse, I've got several devices where there is a native segfault (100% a bug in Android itself) that occurs before you get the java OOM exception, making it doubly important to never reach the limit since you can't even catch the native crash. For more details on my investigations, check out this post . In the same post, I explain how to measure usage against the limit and avoid crashes. The size of the java heap is Runtime.getRuntime().totalMemory(). There is no easy way to measure the size of the native bitmap storage. The overall native heap can be measure with Debug.getNativeHeapAllocatedSize(), but only the bitmaps count toward the limit (i think).
