[site]: stackoverflow
[post_id]: 4099921
[parent_id]: 
[tags]: 
LINQ merging two lists(full outer join on composite keys)

I have two lists IEnumerable grapefruit = citrusList.Where(x => x.IsSmall == false); IEnumerable tangerines = citrusList.Where(x => x.IsSmall == true); I want to put my all of Citrus in a PackingContainer, but I want to first make tangelos-- a combination of grapefruit and tangerine-- from my grapefruits and tangerines where the Citrus.Color = orange, Citrus.flavor = very tangy, Citrus.Texture = grainy and the Citrus.State = ripe Right now I have nested foreach loops that check foreach (Citrus fruit in grapefruit) { foreach (Citrus fruitToo in tangerines) { PackingContainer container = new PackingContainer(); if (fruit.Color == fruitToo.Color && fruit.Flavor == fruitToo.Flavor && fruit.Texture == fruitToo.Texture && fruit.State == fruitToo.State) { Tangelo tangy = new Tangelo(fruit.Color, fruit.Flavor, fruit.Texture, fruit.State, "A tangelo", new Decimal(0.75); container.Add(tangy); } } } But I'm sure there's a better way to do this. I want to essentially do a full outer join (union all grapefruit and tangerines, but make tangelos out of the intersection). My end goal is to have a PackingContainer that has some grapefruit, some tangerines, and some tangelos in it. I'm sure there's a more elegant way to do that in LINQ. ...but I can't figure it out from http://msdn.microsoft.com/en-us/library/bb907099.aspx and http://msdn.microsoft.com/en-us/library/bb384063.aspx and it's not exactly a Union because I'm modifying intersecting members (http://msdn.microsoft.com/en-us/library/bb341731.aspx) Little help?
