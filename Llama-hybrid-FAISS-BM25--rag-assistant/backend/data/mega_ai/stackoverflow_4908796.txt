[site]: stackoverflow
[post_id]: 4908796
[parent_id]: 3796505
[tags]: 
I would suggest using a combination of the last two proposed implementations. They adhere to RESTful representation, they put authorization at the appropriate level (controllers), and it is a scalable implementation. REST is, essentially, about accessing nouns with verbs . So you want Agents and Customers to perform actions (verbs) in relation to Tickets, Users, and Events (nouns). In order to accurately represent these nouns you should have a controller for each. Customers can then identify the resource they are looking for by the URL, http://example.com/events/22 . From here you can use Rails' routing to represent context for various resources, ie http://example.com/events/22/tickets by doing something like: resource :events do resource :tickets end By adhering to a RESTful architecture, you are buying into the end to end principle . The paradigm for representing objects needs to be only responsible for that. It shouldn't try to authenticate. That isn't its job. Authorization should happen in the controllers. I would highly recommend looking into gems like CanCan or Declarative Authorization that set all of this up for you. Finally, this model scalable. By keeping authorization separate from the representation of your resources you only have to use it if you need it. This keeps your application light, flexible, and simple.
