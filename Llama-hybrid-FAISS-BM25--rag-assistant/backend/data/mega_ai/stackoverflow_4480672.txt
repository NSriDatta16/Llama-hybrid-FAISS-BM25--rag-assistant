[site]: stackoverflow
[post_id]: 4480672
[parent_id]: 4479122
[tags]: 
In utils_http.c you have the following function: static int handle_tcp(const struct tcphdr *tcp, int len) { char buf[PCAP_SNAPLEN]; memcpy(buf, tcp + 1, len - sizeof(*tcp)); DEBUG("DANY TCPDs tcp string: %s",buf); if (0 == handle_http(buf, len - sizeof(*tcp))) return 0; return 1; } This is making the assumption that the TCP payload always starts 20 bytes after the beginning of the TCP header (always 20 because sizeof(*tcp) == 20 ). This doesn't take into account any TCP options. If you receive a packet with TCP options (which are very common), handle_http() will have the binary-encoded TCP options at the beginning of its buffer which might be what you're seeing. Try something like this instead: static int handle_tcp(const struct tcphdr *tcp, int len) { char buf[PCAP_SNAPLEN]; memcpy(buf, (void*)tcp + tcp->doff*4, len - tcp->doff*4); DEBUG("DANY TCPDs tcp string: %s",buf); if (0 == handle_http(buf, len - tcp->doff*4)) return 0; return 1; } Or better yet, I have no idea why you're constantly making dozens of copies of your buffer every chance you get. You can just pass pointers around unless I'm missing something: static int handle_tcp(const struct tcphdr *tcp, int len) { return handle_http((void*)tcp + tcp->doff*4, len - tcp->doff*4); }
