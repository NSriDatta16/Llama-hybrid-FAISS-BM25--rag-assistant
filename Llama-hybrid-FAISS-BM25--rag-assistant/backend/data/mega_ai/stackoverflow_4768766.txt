[site]: stackoverflow
[post_id]: 4768766
[parent_id]: 4768690
[tags]: 
Most socket programming applications talk to the TCP socket API that's roughly standardized between operating systems. If you just want to write a simple server and visualize the clients talking to your server running in your process that's pretty easy. However, your process can't see the socket connections talking to other processes on your machine with the typical socket API. If you want to get access to all IPs the entire machine is talking too you'll have to use a lower level API. That's not standardized between OS. For Windows I'd look at Winsock API to see if you can find how to look at the tcp/ip stack of the OS. It gets more complex because TCP connections ride on top of IP packets. At what level do you want to look at? Just TCP, or all protocols that also ride on top of IP. ARP, UDP, TCP, ICMP to name a view standard ones. If you're just learning then doing just a simple server, and all the connections talking to that server in your process is much simpler. Going lower is going to be jumping into the deep end quickly. Not that I'm saying you shouldn't this. Would you like to keep it simple and stay with the connections your process is talking to, or would you like to go into the deep dark Window's forest? Choose your adventure. Edit: Better option for lower level access is WinPcap with a C# wrapper. That will let you get the raw packet information. Even let you put your PC in promiscuous mode and sniff all traffic on your subnet not just your PC.
