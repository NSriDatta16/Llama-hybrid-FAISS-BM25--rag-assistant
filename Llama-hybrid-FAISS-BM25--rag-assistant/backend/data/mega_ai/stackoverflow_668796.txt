[site]: stackoverflow
[post_id]: 668796
[parent_id]: 135535
[tags]: 
I would argue that OOP suits those who think in 'objects', where an object consists of data as well as the functions that operate on that data. If you tend to think of functions and the data they operate on as separate things, then you are a procedural programmer. If you tend to think of functions and the data they operate on as being connected, then you are an object-oriented programmer. I'd caution against going out and learning about patterns . In order to do object-oriented programming well, you need to teach yourself to think like an object-oriented programmer. You'll need to get to the point where you understand and can name the benefits of: Encapsulation Classes vs instances/objects Inheritance and polymorphism It will help you to be a better programmer only in the sense that the more styles of programming a programmer knows, the more range in his repertoire for solving problems and writing elegant code. You cannot go off and write all your code object-oriented and automatically have good code, but if you really understand how OOP works, and you're not just copy-pasting some popular design patterns of the day, then you can write some pretty good code, especially when writing a large application.
