[site]: datascience
[post_id]: 121887
[parent_id]: 
[tags]: 
CNN Model Outputting All Zero's

I'm pretty new to machine learning and am having trouble with creating my first TensorFlow convolutional neural network. I'm using datasets from http://etlcdb.db.aist.go.jp/ and trying to get my network to classify handwritten Japanese kanji. After training, I ended up with a testing accuracy of 0.93 and a validation accuracy of 0.94. However, for every testing input I pass into my network, I'm getting an output of all 0's, even with inputs from the original dataset. Where did I go wrong? I'm passing in images that have already been preprocessed and normalized. Thank you so much for your help. Below is the relevant code: creating dataset ---------------------------------------------------------- IMG_HEIGHT = 92 IMG_WIDTH = 92 BATCH_SIZE = 10 training_set = keras.preprocessing.image_dataset_from_directory( IMAGES_PATH, labels="inferred", label_mode="int", color_mode="grayscale", batch_size=BATCH_SIZE, image_size=(IMG_HEIGHT, IMG_WIDTH), shuffle=True, seed=420, validation_split=0.10, subset="training" ) validation_set = keras.preprocessing.image_dataset_from_directory( IMAGES_PATH, labels="inferred", label_mode="int", color_mode="grayscale", batch_size=BATCH_SIZE, image_size=(IMG_HEIGHT, IMG_WIDTH), shuffle=True, seed=420, validation_split=0.10, subset="validation" ) my model ------------------------------------------------------------------ model = Sequential() model.add(Conv2D(16, (3, 3), 1, activation='relu', input_shape=(92, 92, 1))) model.add(BatchNormalization()) model.add(PReLU()) model.add(MaxPooling2D()) model.add(Dropout(0.1)) model.add(Conv2D(32, (3, 3), 1, activation='relu')) model.add(BatchNormalization()) model.add(PReLU()) model.add(MaxPooling2D()) model.add(Dropout(0.1)) model.add(Flatten()) model.add(Dense(6000, activation='relu')) model.add(Dropout(0.3)) model.add(Dense(3040, activation='sigmoid')) model.compile("adam", loss=tf.losses.SparseCategoricalCrossentropy(), metrics=['accuracy']) prediction script -------------------------------------------------------- im = cv2.imread(IMAGE_PATH) im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY) im = np.atleast_3d(im) im = tf.image.resize(im, [92, 92]) im = np.expand_dims(im, 0) model = keras.models.load_model(MODEL_PATH) output = model.predict(im) print("guesses") for num in sorted(output[0]): if (num > 0.5): print(chr(int(class_keys[num], 16))) print("best guess") print(np.argmax(output[0])) print(chr(int(class_keys[np.argmax(output)], 16))) ```
