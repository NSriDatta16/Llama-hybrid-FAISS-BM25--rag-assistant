[site]: stackoverflow
[post_id]: 2497172
[parent_id]: 2497134
[tags]: 
Several reasons: Java's collection classes provides a higher level interface than arrays. Arrays have a fixed size. Collections (see ArrayList) have a flexible size. Efficiently implementing a complicated data structures (e.g., hash tables) on top of raw arrays is a demanding task. The standard HashMap gives you that for free. There are different implementation you can choose from for the same set of services: ArrayList vs. LinkedList, HashMap vs. TreeMap, synchronized, etc. Finally, arrays allow covariance: setting an element of an array is not guaranteed to succeed due to typing errors that are detectable only at run time. Generics prevent this problem in arrays. Take a look at this fragment that illustrates the covariance problem: String[] strings = new String[10]; Object[] objects = strings; objects[0] = new Date(); //
