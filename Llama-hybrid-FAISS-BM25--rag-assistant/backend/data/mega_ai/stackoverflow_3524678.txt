[site]: stackoverflow
[post_id]: 3524678
[parent_id]: 3521681
[tags]: 
What if you had two session beans? One with the injected EntityManager that can leverage JTA, and the other is your current session bean. I am currently putting together a series on my blog using a session bean as the REST service using EclipseLink & Glass Fish v3: Part 1 - The Database Model Part 2 - Mapping the Database Model to JPA Entities Part 3 - Mapping JPA Entities to XML using JAXB Part 4 - The RESTful Service Below is how I inject the EntityManager on my session bean that is serving as my REST service: package org.example.customer; import javax.ejb.LocalBean; import javax.ejb.Stateless; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.PersistenceContextType; import javax.ws.rs.Path; import org.eclipse.persistence.rest.JPASingleKeyResource; @Stateless @LocalBean @Path("/customers") public class CustomerService { @PersistenceContext(unitName="CustomerService", type=PersistenceContextType.TRANSACTION) EntityManager entityManager; } You can link your session beans using the @EJB annotation: package org.example; import javax.ejb.EJB; import javax.ejb.LocalBean; import javax.ejb.Stateless; import javax.naming.Context; import javax.naming.InitialContext; @Stateless @LocalBean @EJB(name = "someName", beanInterface = CustomerService.class) public class OtherSessionBean { public Customer read(long id) { try { Context ctx = new InitialContext(); CustomerService customerService = (CustomerService) ctx.lookup("java:comp/env/someName"); return customerService.read(id); } catch(Exception e) { throw new RuntimeException(e); } } }
