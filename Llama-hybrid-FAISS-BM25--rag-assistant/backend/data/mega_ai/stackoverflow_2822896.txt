[site]: stackoverflow
[post_id]: 2822896
[parent_id]: 2822535
[tags]: 
Assuming you're using JScript via the Windows Scripting Host (and not JavaScript from a browser) you can get the value of a specific key using the WScript.RegRead method: // MyScript.js var key = 'HKEY_CURRENT_USER\\SessionInformation\\ProgramCount' , wsh = WScript.CreateObject('WScript.Shell') , val = wsh.RegRead(key); WScript.Echo('You are currently running ' + val + ' programs.'); If you actually need to search for a key or value based on some conditions rather than a known registry key then you can to implement your own recursive search algorithm where registry values of type "REG_SZ" are leaf nodes. As an exercise to get more familiar with JScript on the Windows Scripting Host, I've made a small interface to the registry that does exactly this. The example included in the project shows how to perform such a registry search in a WSF script: // Search the registry and gather 20 DisplayVersion values. var reg = new Registry() , rootKey = 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products' , keyRegex = /Products\\(.*?)\\InstallProperties\\DisplayVersion$/ , valRegex = /^1\./ , maxResults = 20 , uids = []; reg.find(rootKey, function(path, value) { var keyMatch = keyRegex.exec(path); if (keyMatch) { if (valRegex.exec(value)) { uids.push(keyMatch[1] + '\t=\t' + value); if (uids.length >= maxResults) { return false; } // Stop searching } } return true; // Keep searching. }); WScript.Echo(uids.join("\n")); Note that, as @Robert Harvey points out, this could take a really long time if the root key is too deeply connected. Simple testing takes only a few seconds on the key I chose but your mileage may vary; of course, no warranty or fitness for a purpose, don't blame me if your computer blows up.
