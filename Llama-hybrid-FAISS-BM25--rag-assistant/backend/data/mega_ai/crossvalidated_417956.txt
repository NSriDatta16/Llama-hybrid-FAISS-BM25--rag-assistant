[site]: crossvalidated
[post_id]: 417956
[parent_id]: 417517
[tags]: 
RNNs are most commonly used as density models over some space of sequences. To be more precise, if we have some sequence $X = x_1, x_2, \ldots, x_k$ then our model describes the distribution $$P(X) = \prod_{i=1}^k p(x_i | x_{ (which is valid by the product rule). More specifically, our RNN models each conditional term $p(x_i | x_{ as $x_i \sim \mathcal{N}(\mu, \sigma^2 = \text{RNN}(x_{ in the continuous case, or as is more common in language modeling, $x_i \sim \text{Cat}(p = \text{RNN}(x_{ . I'm not so sure since each route is discreet As the above examples show, RNNs can be used for both discrete and continuous valued sequences. how would I decided what part of the sequence is designated input and which as output for training. An RNN density model doesn't have an input or output in any conventional sense. Rather, you train by maximizing the log-likelihood, which nicely decomposes as $$\log P(X) = \sum_i \log p(x_i | x_{ predict that the next location Just a note on this: generally, we prefer to model distributions over sequences rather than predict a single sequence. The reason for this is that regressing to a single mean sequence often results in unnatural or undesireable trajectories -- consider a car approaching a T-intersection, where it can either go left or right. But the mean trajectory is to go straight, where there is no road -- clearly there's no point in regressing such a solution. What an RNN density model gives you is the ability to sample sequences from $P(x_{\geq i} | x_{ , or to find the mode of such a distribution via beam search. The mode doesn't suffer from such problems as the mean often does, and it's probably what you want.
