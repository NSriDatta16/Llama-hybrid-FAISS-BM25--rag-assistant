[site]: stackoverflow
[post_id]: 2838725
[parent_id]: 2838661
[tags]: 
My understanding is that a data access layer does not actually abstract the database, but rather makes database operations and query building easier. For example, data access layers usually have APIs very similar to SQL syntax that still require knowledge of the database's structure in order to write: $Users->select('name,email,datejoined')->where('rank > 0')->limit(10); Data abstraction layers are usually full blown ORM's (Object-Relational Mappers) that theoretically prevent the need to understand any underlying database structure or have any knowledge of SQL. The syntax might be something like this: Factory::find('Users', 10)->filter('rank > 0'); And all the objects might be fully populated with all the fields, possibly joined with any parent or child objects if you set it that way. However, this abstraction comes with a price. I personally find ORM's like doctrine or propel to be unnecessary and inefficient. In most cases a simple data access layer will do fine, with manual SQL for anything that requires special attention, instead of having to destroy your application's performance for some syntactic sugar. This area is a pretty heated debate so I won't go into it anymore. If you meant data base abstraction layer, then it would be something along the lines of PDO, so that your code can be used for a larger number of database vendors. PDO works with MySQL, PostgreSQL, and mysqli among others, I believe.
