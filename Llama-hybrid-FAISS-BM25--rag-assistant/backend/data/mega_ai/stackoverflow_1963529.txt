[site]: stackoverflow
[post_id]: 1963529
[parent_id]: 1963507
[tags]: 
It would be easier to make suggestions if you provided example code and data. Accessing the dictionary is unlikely to be a problem as that operation is O(1) on average, and O(N) amortized worst case . It's possible that the built-in hashing functions are experiencing collisions for your data. If you're having problems with has the built-in hashing function, you can provide your own. Python's dictionary implementation reduces the average complexity of dictionary lookups to O(1) by requiring that key objects provide a "hash" function. Such a hash function takes the information in a key object and uses it to produce an integer, called a hash value. This hash value is then used to determine which "bucket" this (key, value) pair should be placed into. You can overwrite the __hash__ method in your class to implement a custom hash function like this: def __hash__(self): return hash(str(self)) Depending on what your data actually looks like, you might be able to come up with a faster hash function that has fewer collisions than the standard function. However, this is unlikely. See the Python Wiki page on Dictionary Keys for more information.
