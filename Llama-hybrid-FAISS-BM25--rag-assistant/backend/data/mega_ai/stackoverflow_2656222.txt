[site]: stackoverflow
[post_id]: 2656222
[parent_id]: 2464824
[tags]: 
To summarize the problem: It seems you want N different behaviors without having N controllers . You don't want to tightly couple the views and the controllers (no 1 1 relationship), but the you want the controller to have strong and varied control over the behavior of each view . Let me state this differently: It seems you want N different behaviors without having N objects . You don't want to tightly couple the A objects and B objects (no 1 1 relationship), but the you want B object to have varied tight control over the behavior of each A object . Here's how I see these 2 issues: This isn't a problem of MVC , its a classic software problem: you either need N objects to have N different behaviors, or you need to parameterize the behaviors so that you can distill out commonality (e.g. the approach Anurag suggested) to have less than N separate objects and/or resort to a giant case statement. :-) This one isn't a problem of MVC , but rather its one of the trade-offs. MVC has us decouple the M, V, and C code to ease future changes (e.g. changing or adding views). But the trade-off isn't free, the components necessarily have to have less knowledge and control of each other. Either you give up on the controller having tight control over the views (no N different kinds of behaviors) or you give on the segregation between the C and V (e.g. allow 1 1 tightly coupled views-controllers). Certainly, there has been great success with MVC in decoupling the Ms from the Vs and Cs, but less success in decoupling the Vs and Cs from each other. I think today's responsive interfaces call for coupling views and controllers, or started differently, its not worth the effort and complexity to strongly isolate views and controllers. This modified M(VC) approach has worked much better for me in the real world.
