[site]: crossvalidated
[post_id]: 376712
[parent_id]: 310647
[tags]: 
You'll have to make a distinction between industry/business-inspired titles such as "data scientist", "ML engineer", and "AI expert", and the actual scientists who work in laboratories and invent the tools that all the former make use of. Also you must understand the difference between "algorithm prototyping", i.e. developing and testing a low level routine from scratch and "model deployment into production", i.e. using packaged low-level routines (possibly written in Matlab, C, or Fortran) and calling them from a high level interface such as python for an engineering task. With those things in mind, the claim of Andrew Ng that Matlab/Octave is widely used in algorithm prototyping should make more sense now. You won't find a company asking for a ML engineer who can use Matlab toolboxes and deploy models into production. The reason for that is that DS/ML job roles will never require any actual algorithm prototyping, they will only involve high level model deployment. You'll be using scikit-learn to train a SVM or Random Forest with a single line of code and you don't even need to know how it works. However, if you dig deeper and find the people who wrote scikit-learn, or the people who wrote the tools used by the people who wrote scikit-learn, you will eventually stumble into some people who prototype their algorithms in Matlab. Those Matlab programmers will usually a very academic/scientific mindset and are required to have a deep understanding of what they're doing. If this is not your chosen career path and you just want to work as a DS or ML engineer in the industry then you shouldn't worry about knowing Matlab/Octave. To answer your questions precisely: 1. No. The DS/ML industry does not involve low level algorithm prototyping (an exception to this could be working for companies such as NASA, Airbus, or Boeing; they use Matlab in production). 2. numpy/pandas are actually based off Matlab/Octave and most DS tools such as Spyder or Pycharm try to emulate the behaviour of Matlab. When it comes to syntax and code readability, Matlab's linear algebra capabilities are incomparable. For what concerns to performance, all Matlab, R, and numpy/pandas use open source lower-level routines written in Fortran or C (such as BLAS, LAPACK, FFTW), but Matlab has accelerated for-loops, runs on top of Java, and is significantly faster. The bottom line is that every tool has its purpose. Matlab is perfect for prototyping algorithms and designing low-level routines. R is perfect for prototyping high level stochastic processes. Python is perfect for deploying models in production.
