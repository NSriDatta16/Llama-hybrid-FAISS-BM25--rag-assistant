[site]: stackoverflow
[post_id]: 2656512
[parent_id]: 
[tags]: 
Binding Contents of a ListBox to Selected Item from Another Listbox w/JSF & Managed Beans

I currently have a JSF application that uses two listboxes. The first, say ListBox1, contains a list of manufacturers; each option comes from the database (via a method getManufacturers in a class called QueryUtil), is populated dynamically, and its value is an integer ID. This part works so far. My goal is to populate a second listbox, say ListBox2, with a list of products sold by the manufacturer. This list of products will come from the database as well (products are linked to a manufacturer via a foreign key relationship, via a method getProducts in my QueryUtil class). How do I go about doing this? Please bear in mind that I've been working with JSF for under 24 hours; I'm willing to accept the fact that I'm missing something very rudimentary. Again, I've been able to populate the list of manufacturers just fine; unfortunately, adding the Products component gives me java.lang.IllegalArgumentException: argument type mismatch faces-config.xml ProductsBean com.nieltown.ProductsBean request manufacturers java.util.ArrayList #{manufacturers} selectedManufacturer java.lang.Integer #{selectedManufacturer} products java.util.ArrayList #{products} selectedProduct java.lang.Integer #{selectedProducts} com.nieltown.ProductsBean public class ProductsBean { private List manufacturers; private List products; private Integer selectedManufacturer; private Integer selectedProduct; public ProductsBean() {} public Integer getSelectedManufacturer(){ return selectedManufacturer; } public void setSelectedManufacturer(Integer m){ selectedManufacturer = m; } public Integer getSelectedProduct(){ return selectedProduct; } public void setSelectedProduct(Integer p){ selectedProduct = p; } public List getManufacturers(){ if(manufacturers == null){ SelectItem option; plans = new ArrayList (); QueryUtil qu = new QueryUtil(); Map manufacturersMap = qu.getManufacturers(); for(Map.Entry entry : manufacturersMap.entrySet()){ option = new SelectItem(entry.getKey(),entry.getValue()); manufacturers.add(option); } } return manufacturers; } public void setManufacturers(List l){ manufacturers = l; } public List getProducts(){ if(products == null){ SelectItem option; products = new ArrayList (); if(selectedPlan != null){ PMTQueryUtil pqu = new PMTQueryUtil(); Map productsMap = pqu.getProducts(); for(Map.Entry entry : productsMap.entrySet()){ option = new SelectItem(entry.getKey(),entry.getValue()); products.add(option); } } } return products; } public void setProducts(List l){ products = l; } } JSP fragment
