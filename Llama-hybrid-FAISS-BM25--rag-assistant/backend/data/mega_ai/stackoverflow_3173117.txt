[site]: stackoverflow
[post_id]: 3173117
[parent_id]: 3173058
[tags]: 
Yes, but on a smaller level, they're not blueprints for an entire application, but for problems you typically encounter while you build an application. For example, when you want to create instances of different objects depending on a string. You might try a long series of ifs, later notice that's inefficient attempt to do it through your language's reflection capabilities, then notice that's inflexible and come up with an associative list that maps strings different functions creating instances of different classes. This final solution works great and is pretty elegant, so you'll use similar techniques when you encounter similar problems in the future without trying all the dead-ends first. Congratulations, you just invented a design pattern. In 1994, the "Gang of Four" (Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides) had the idea to collect these kinds of recurring patterns and publish them in a book they called "Design Patterns". The advantage of knowing those patterns are, of course, that you can put a name to the techniques you use (making it easier to discuss class design with other people on a higher level) and that other programmers aware of design patterns will name their constructs similarly (so you'll recognize them in their code).
