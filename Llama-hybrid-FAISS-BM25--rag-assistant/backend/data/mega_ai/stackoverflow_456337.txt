[site]: stackoverflow
[post_id]: 456337
[parent_id]: 456216
[tags]: 
Objectively, how do you know that the use of classes is not the cause of the application being large to begin with? Take any large program/application that was not written in an OO language (e.g. C, COBOL, even plain SQL) and you should be able to witness that code size is not directly attributed to language paradigm. For every number of well-designed, highly-refined, reusable C# or Java components, there are also an equal number of well-designed, highly-refined, reusable C DLLs. Conversely, there are equal numbers of horrible, bloated code. The point is, good programmers are able to refine their system designs regardless of language/platform. With regards to OOP, at least for me, it brings to the table a "potential" - a view of the programming world abit closer to our real world. We all know our world and this universe of matter are full of objects composed of smaller objects . Keep zooming in all the way from galatical star systems right down to the molecule, atom, and sub-atomic particles, it is truly amazing how vastly different matter are made of the same tiny particles combined in various patterns. Look at our own biology even, it is mind-boggling sometimes to think 60% of our bodies is actually just water when broken down to its finest. Yet look at all the various systems and organs in place burning with chemistry to keep us running and alive. When we learn to understand the simplicity (oh really... ha ha) of the building blocks that form the real-world systems we see in every-day nature, we should then be able to understand that designing and building extremely complicated or sophisticated systems ought to start with small components that do very little themselves. And by slowly combining and meshing them together into ever larger components can we obtain more functionality and capability. Until we reach the desired system we envisioned. The (proper) use of classes is to break down a system into its finest. As possible. So that you may look at something at a time and a particular level of abstraction and not be overwhelmed by purposes and logic that is not dealing with your present area of concern. Whenever you design a system, think of your own anatomy; think how you would design the human body. Whenever you design a system, think about starting a new company ; what are the major divisions, the departments you need to operate the business. Who are the type of staff required to run those departments. The various equipment they need to use and interact with to carry out their jobs. How do you break down the business operations into its finest to allow yourself it understand it better? When you understand the basic principle that some object is simply made up of smaller objects, you will be on your way to creating highly-reusable cells or molecules.
