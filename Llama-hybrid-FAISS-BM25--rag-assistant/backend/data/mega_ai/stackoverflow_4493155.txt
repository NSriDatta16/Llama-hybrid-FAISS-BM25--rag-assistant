[site]: stackoverflow
[post_id]: 4493155
[parent_id]: 
[tags]: 
Projection Matrix in Apple's iPhone OpenGLES 2.0 Template Project

Background: I am trying to learn OpenGLES 2.0 for the iPhone and have been stumped by the template project that Apple provides in xCode. The default project shows a 2d square, but I want to experiment with adding vertexes with varying depths on the z axis. In Apple's default OpenGL project, they draw a 2d square using only x and y coordinates passed to the vertex shader. In order to experiment with placing vertices in 3d space, I added a z value to the vertex data in the sample project. Then I changed the size parameter in the glVertexAttribPointer method from 2 to 3. I changed the z values on the vertices in the hope that it would cause the square to appear tilted backwards when I ran the program. The problem is that it still shows up as the same 2d square. From my reading, I believe this is caused by the projection matrix being set to Orthographic instead of Perspective. Question: How do I change the projection matrix from Orthographic to Perspective using OpenGLES 2.0 in Apple's template OpenGL project? I have tried: glMatrixMode(GL_PROJECTION); glLoadIdentity(); glFrustumf(-0.5, 0.5, -0.5, 0.5, 1, 10); But it didn't change the result. I also tried adding something like this to the vertex shader program: mat4 projectionMatrix = { 2.0/320.0, 0.0, 0.0, -1.0, 0.0, 2.0/480.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0}; gl_Position *= projectionMatrix; But that didn't work either. Is the method for setting the projection matrix different for OpenGLES 2.0 that it was for 1.0. I am thinking maybe the stuff I am trying is not compatible with 2.0. Thanks in advance. Mike Update Thanks for your help John. I really appreciate it. I tried adding a depth buffer based on your suggestion by adding the following code to the createFramebuffer method in my EAGL view, but still no change. // Create depth render buffer and allocate backing store. glGenRenderbuffers(1, &depthRenderbuffer); glBindRenderbuffer(GL_RENDERBUFFER, depthRenderbuffer); glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, framebufferWidth, framebufferHeight); glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depthRenderbuffer); And if I add the following code to my render method: glMatrixMode(GL_PROJECTION); glLoadIdentity(); glFrustumf(-0.5, 0.5, -0.5, 0.5, 1, 10); Xcode throws an exception. Any thoughts?
