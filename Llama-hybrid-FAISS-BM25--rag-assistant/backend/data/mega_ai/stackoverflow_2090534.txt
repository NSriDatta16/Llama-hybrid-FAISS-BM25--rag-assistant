[site]: stackoverflow
[post_id]: 2090534
[parent_id]: 2090479
[tags]: 
unittest does deep black magic -- if you choose to use it to run your unit-tests (I do, since this way I can use a very powerful battery of test runners &c integrated into the build system at my workplace, but there are definitely worthwhile alternatives), you'd better play by its rules. In this case, I'd simply have EditProfileTestCase derive from LoginTestCase (rather than directly from unittest.TestCase ). If there are some parts of LoginTestCase that you do want to also test in the different environment of EditProfileTestCase , and others that you don't, it's a simple matter to refactor LoginTestCase into those two parts (possibly using multiple inheritance) and if some things need to happen slightly differently in the two cases, factor them out into auxiliary "hook methods" (in a "Template Method" design pattern) -- I use all of these approaches often to diminish boilerplate and increase reuse in the copious unit tests I always write (if I have unit-test coverage
