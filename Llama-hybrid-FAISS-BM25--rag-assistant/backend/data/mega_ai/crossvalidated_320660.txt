[site]: crossvalidated
[post_id]: 320660
[parent_id]: 
[tags]: 
Is LinearDiscriminantAnalysis legit for classifying images?

this was moved from SO, hope this is a better place to ask :) on this context: LDA = LinearDiscriminantAnalysis I tried classifying images' descriptors with SVM SVC linear kernel which gave bad results. I moved to SVM SVC polynomial kernel which gives nice results but horrifying run-time, so I turned to LDA which gives OK-ish results but an excellent run-time. Does it make sense that SVC linear is bad, where LDA which is also linear is fine? How can I improve the results of LDA? I can't use too much features due to memory issues. (what I tried so far was changing the descriptors, kind of randomly :( ) Most important: How can I know if my classification is good? 30%? 50% 90% Since I don't use Neural Network, and my fit is short (less than an hour on home PC), what is the success rate I'm looking for to be near the top for this method? Code snippet: X = np.array(sift.compute(...)) clf = [LinearDiscriminantAnalysis(solver = 'lsqr') clf.fit(X,y) #X,y are the feature vector & class_id vector ... clf.score(tst_X,tst_relevant_labels) #check if the fit predicted the labels (class_id) correctly Since this was suggested as too broad I'll try to specify. What kind of answer I'm looking (mostly answers for 2nd question): Change solver parameters to ... (for example I know 'svd' deals better with more features) Do a specific manipulation on data (for example - should I use PCA ?) Can't be improved but sklearn has another module that is better suited for this...
