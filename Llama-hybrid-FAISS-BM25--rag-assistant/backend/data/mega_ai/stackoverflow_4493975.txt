[site]: stackoverflow
[post_id]: 4493975
[parent_id]: 4493510
[tags]: 
Yes, the intent is probably to force a refresh of the browser cache. However, I do not recommend this approach : Many proxies (and possibly some browsers) simply will not cache anything with a query string, regardless of Cache-Control headers. You're shooting yourself in the foot if you include a superfluous query string â€“ you'll needlessly consume your own bandwidth sending images that should be cached, but aren't. Depending on how you configure your server, user agents will periodically make a request for cached resources, with a If-Modified-Since and/or If-None-Match header. If the client's cache is up to date, the server responds with 304 Not Modified and stops; otherwise it responds with a normal 200 OK and sends the new content. You do not have to change a resource's file name in order for client caches to be updated when the resource changes. Trying to get clever with a query string only serves to defeat caching mechanisms. That said, if you do optimize caching by setting an Expires date a year out (and if the Last Modified date of the resource is long ago), user agents may check for updates infrequently. If this is unacceptable to you, you have two options: either reduce the amount of time before the resource expires (so that the browser will issue a GET request and you can respond with 304 or 200 as appropriate), or use "URL fingerprinting," where a random token is included in the path , instead of in the query string. For example: /img/a03f/image.png instead of /img/image.png?a03f This way, your resources are still cached by proxies. You'll probably want to look in to using mod_rewrite to allow you to include a token in the path. Of course, you need to be able to change all references to this URL whenever you change the resource. For further reading, I highly recommend Google's page speed best practices , specifically the section on optimizing caching .
