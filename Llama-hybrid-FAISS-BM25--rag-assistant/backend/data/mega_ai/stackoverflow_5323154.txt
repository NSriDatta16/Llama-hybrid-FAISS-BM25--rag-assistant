[site]: stackoverflow
[post_id]: 5323154
[parent_id]: 
[tags]: 
Which kind of data organization using C arrays makes fastest code and why?

Given following data, what is the best way to organize an array of elements so that the fastest random access will be possible? Each element has some int number, a name of 3 characters with '\0' at the end, and a floating point value . I see two possible methods to organize and access such array: First: typedef struct { int num; char name[4]; float val; } t_Element; t_Element array[900000000]; //random access: num = array[i].num; name = array[i].name; val = array[i].val; //sequential access: some_cycle: num = array[i].num i++; Second: #define NUMS 0 #define NAMES 1 #define VALS 2 #define SIZE (VALS+1) int array[SIZE][900000000]; //random access: num = array[NUMS][i]; name = (char*) array[NAMES][i]; val = (float) array[VALS][i]; //sequential access: p_array_nums = &array[NUMS][i]; some_cycle: num = *p_array_nums; p_array_nums++; My question is, what method is faster and why? My first thought was the second method makes fastest code and allows fastest block copy, but I doubt whether it saves any sensitive number of CPU instructions in comparison to the first method?
