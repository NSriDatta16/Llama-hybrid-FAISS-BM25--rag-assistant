[site]: stackoverflow
[post_id]: 5443035
[parent_id]: 5440381
[tags]: 
Actually, there is quite some room for improvement. First: You should add a random salt to the hashing algorithm as to protect against pre-computation attacks. (search for rainbow table ) Second: you should fetch the user_password value from the DB and do the comparison on the PHP side. Important Statements that invoke PASSWORD() may be recorded in server logs or in a history file such as ~/.mysql_history, which means that passwords may be read by anyone having read access to that information. See Section 5.3.2, “Password Security in MySQL”. Source: http://dev.mysql.com/doc/refman/5.1/en/encryption-functions.html#function_password Third: Do not use MD5 it's a nice hashing algorithm but considered broken for security purposes. If you use PHP 5.3 or later, use crypt , with CRYPT_BLOWFISH. CRYPT_BLOWFISH in PHP is an implementation of the Bcrypt hash. Bcrypt is based on the Blowfish block cipher, making use of it's expensive key setup to slow the algorithm down. Also: don't use LIMIT in your query, instead put a UNIQUE constraint on the user_contact_email . Using LIMIT is a trick that could mask duplicate user-emails and cause unexpected results when a duplicate email somehow gets entered. And finally: Why don't you use a standard library . Security tends to be a lot more complicated and with more invisible screw up possibilities than most programmers could tackle alone, using a standard library is almost always easiest and most (if not the only) secure option available. (also read: Help me make my password storage safe )
