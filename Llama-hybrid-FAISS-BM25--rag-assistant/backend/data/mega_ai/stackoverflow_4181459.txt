[site]: stackoverflow
[post_id]: 4181459
[parent_id]: 4181372
[tags]: 
You're using the wrong thing -- regex_match is intended to check whether a (single) regex matches the entirety of a sequence of characters. As such, you need to either specify a regex that matches the whole input, or use something else. For your situation, it probably makes the most sense to just modify the regex as you've already done (group it and add a Kleene star). If you wanted to iterate over the individual terms of the polynomial, you'd probably want to use something like a regex_token_iterator . Edit: Of course, since you're embedding this into C++, you also have to double all your backslashes. Looking at it, I'm also a little confused about the regex you're using -- it doesn't look to me like it should really work quite right. Just for example, it seems to require a "+", "-" or "^" at the beginning of a term, but the first term won't normally have that. I'm also somewhat uncertain why there would be a "^" at the beginning of a term. Since the exponent is normally omitted when it's zero, it's probably better to allow it to be omitted. Taking those into account, I get something like: "[-+]?(\d*)x(\^([0-9])*)". Incorporating that into some code, we can get something like this: #include #include #include #include int main() { std::string poly = "4x^2+3x^1+2x"; std::tr1::regex term("[-+]?(\\d*)x(\\^[0-9])*"); std::copy(std::tr1::sregex_token_iterator(poly.begin(), poly.end(), term), std::tr1::sregex_token_iterator(), std::ostream_iterator (std::cout, "\n")); return 0; } At least for me, that prints out each term individually: 4x^2 +3x^1 +2x Note that for the moment, I've just printed out each complete term, and modified your input to show off the ability to recognize a term that doesn't include a power (explicitly, anyway). Edit: to collect the results into a vector instead of sending them to std::cout , you'd do something like this: #include #include #include #include int main() { std::string poly = "4x^2+3x^1+2x"; std::tr1::regex term("[-+]?(\\d*)x(\\^[0-9])*"); std::vector terms; std::copy(std::tr1::sregex_token_iterator(poly.begin(), poly.end(), term), std::tr1::sregex_token_iterator(), std::back_inserter(terms)); // Now terms[0] is the first term, terms[1] the second, and so on. return 0; }
