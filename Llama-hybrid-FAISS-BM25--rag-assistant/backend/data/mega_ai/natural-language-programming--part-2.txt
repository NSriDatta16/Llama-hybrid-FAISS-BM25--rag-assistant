d high-level programming language. Repeating the previous step until you have no sentences left undefined. During this process each of sentences can be classified to belong to a section of the document to be produced in HTML or Latex format to form the final natural-language program. Testing the meaning of each sentence by executing its code using testing objects. Providing a library of procedure calls (in the underlying high-level language) which are needed in the code definitions of some low-level-sentence meanings. Providing a title, author data and compiling the sentences into an HTML or LaTeX file. Publishing the natural-language program as a webpage on the Internet or as a PDF file compiled from the LaTeX document. Publication value of natural-language programs and documents A natural-language program is a precise formal description of some procedure that its author created. It is human readable and it can also be read by a suitable software agent. For example, a web page in an NLP format can be read by a software personal assistant agent to a person and she or he can ask the agent to execute some sentences, i.e. carry out some task or answer a question. There is a reader agent available for English interpretation of HTML based NLP documents that a person can run on her personal computer . Contribution of natural-language programs to machine knowledge An ontology class is a natural-language program that is not a concept in the sense as humans use concepts. Concepts in an NLP are examples (samples) of generic human concepts. Each sentence in a natural-language program is either (1) stating a relationship in a world model or (2) carries out an action in the environment or (3) carries out a computational procedure or (4) invokes an answering mechanism in response to a question. A set of NLP sentences, with associated ontology defined, can also be used as a pseudo code that does not provide the details in any underlying high level programming language. In such an application the sentences used become high level abstractions (conceptualisations) of computing procedures that are computer language and machine independent. AI in natural language programming Researchers have started to experiment with natural language programming environments that use plain language prompts and then use AI (specifically large language models) to turn natural language into formal code. For example Spatial Pixel created a natural language programming environment to turn natural language into P5.js code through OpenAI's API. In 2021 OpenAI developed a natural language programming environment for their programming large language model called Codex. See also Controlled natural language Context-free language Domain-specific language (or DSL) End-user programming Knowledge representation Natural-language processing Source-code generation Very high-level programming language Vibe coding, a method of performing natural language programming using a large language model Programming languages with English-like syntax AppleScript Attempto Controlled English COBOL ClearTalk FLOW-MATIC HyperTalk Inform 7 JOSS SenseTalk Software AG Transcript Structured Query Language (or SQL) xTalk Programming languages with other natural language-like vocabulary or syntax Non-English-based programming languages References Bibliography Books Natural Language Programming of Agents and Robotic Devices: publishing for agents and humans in sEnglish by S M Veres, ISBN 978-0-9558417-0-5, London, June 2008. Dijkstra, Edsger W. (1979). "On the foolishness of "natural language programming"". Program Construction. Lecture Notes in Computer Science. Vol. 69. pp. 51–53. doi:10.1007/bfb0014656. ISBN 3-540-09251-X. Lieberman, Henry; Liu, Hugo (2006). "Feasibility Studies for Programming in Natural Language". End User Development. Human-Computer Interaction Series. Vol. 9. pp. 459–473. doi:10.1007/1-4020-5386-x_20. ISBN 978-1-4020-4220-1. Halpern, Mark (1990). "Natural Language and Redundancy