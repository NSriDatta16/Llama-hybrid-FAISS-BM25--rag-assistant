[site]: stackoverflow
[post_id]: 4208277
[parent_id]: 4207267
[tags]: 
First I'd try to place as much of the formatting as possible in the SQL queries if possible. Things like date format etc. definitely should be handled in SQL. Out top of my head a module I know and which could be used for your purpose is Data::FormValidator . Although is is mainly aimed at validating CGI parameters, it has the functionality you need: you can defined filters and constraints and chain them in various ways. Doesn't mean there no other modules for you purpose, I just don't know. Or you can do something what you already hinted at. You could define some sort of command classes and chain them on the various data inputs. I'd do something along these lines: package MyDataProcessor; use Moose; has 'Transformations' => ( traits => ['Array'], is => 'rw', isa => 'ArrayRef[MyTransformer]', handles => { add_transformer => 'push', } ); has 'input' => (is => 'rw', isa => 'Str'); sub apply_transforms { } package MyRegexTransformer; use Moose; extends 'MyTransformer'; has 'Regex' => (is => 'rw', isa => 'Str'); has 'Replacement' => (is => 'rw', isa => 'Str'); sub transform { } # some other transformers # # somewhere else # # my $processor = MyDataProcessor->new(input => 'Hello transform me'); my $tr = MyRegexTransformer->new(Regex => 'Hello', Replacement => 'Hi'); $processor->add_transformer($tr); #... $processor->apply_transforms;
