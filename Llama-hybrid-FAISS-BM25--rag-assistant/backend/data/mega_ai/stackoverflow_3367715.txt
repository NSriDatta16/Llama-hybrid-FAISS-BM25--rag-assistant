[site]: stackoverflow
[post_id]: 3367715
[parent_id]: 3365340
[tags]: 
The other answers have made the point that you can write utility functions to do this for you, and that's a good idea where you need it. But I thought I'd point out an important point: the STL is designed around algorithmic efficiency. Nearly all operations with the STL have a standard-mandated big-O efficiency requirement. If vector had a contains() member, it would certainly be O(n) to call, since vector is a simple contiguous list. Since it is also convenient, it might encourage programmers to use it regularly, even on large datasets, encouraging the design of applications with poor algorithmic performance. In the case of contains() , if it's important to look up if a container holds a certain element, with the added guarantee that all the elements are unique, std::set is almost certainly a better choice, with O(log n) efficiency lookups, or even O(1) for std::unordered_set . So my personal view: learn all the containers and features the STL offers, and you'll find while it is terse, it encourages a more efficient programming style. You ask in the question if you're missing something, and I would say yes - you want to think more carefully about the container you use. I use set instead of a vector regularly these days.
