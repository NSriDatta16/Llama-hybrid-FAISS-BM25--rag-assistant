[site]: datascience
[post_id]: 38454
[parent_id]: 38447
[tags]: 
I assume your situation is like this: You receive the first input, and try to predict the second. Then, you receive the true second input and try to predict the third, using both the first and second, and so on.. I think the approach of training 5 neural networks is the most over complicated since you would have to do everything 5 times, build 5 train sets and test sets, train 5 networks and then evaluate 5 networks. About using RNN, with each input you feed to the network it's hidden state will change, i.e. after you enter the second input the hidden state will change from the previous state, so the output will be different. Regarding the optimization, Theano and PyTorch include implementations of RNN so you don't have to worry about it. Finally, since you have a maximum size for the input, maybe you could try training a regular NN with an input size of five times the size of your inputs, and use paddings (like zeros or another value that could not be present in the real inputs) to fill the input when it does not contain the five elements. Hope this can help, but as the other solution said, you can not know which solution will work better, since it highly depends on your data, but there are solutions that can be faster and easier to implement.
