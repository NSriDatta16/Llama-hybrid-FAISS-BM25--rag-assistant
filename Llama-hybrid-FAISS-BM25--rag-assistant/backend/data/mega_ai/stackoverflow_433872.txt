[site]: stackoverflow
[post_id]: 433872
[parent_id]: 433850
[tags]: 
char * aString = "This is a string."; It's making a pointer aString point to a statically allocated char array containing "This is a string." . The string is not writable, even though the type of the pointer might suggest you could write to it. See the answer in the link below, for reasons to avoid it and how you can do better. char aString[] = "This is a string."; It's creating an array having the type char[18] . Even though you tell it with the declarator that aString has a type char[] , it's really defining an array with a complete type - that is, with a defined length for that array. That's because it's directly initialized, and the compiler can deduce the size of the array. The array is writable. You can freely change characters in it. I tried to make the difference clear in this answer: C++ strings: [] vs. * int someNumber; It's an integer variable created on the stack. It's not initialized. It has automatic storage duration: Going out of scope (returning from the function, breaking out of the loop...) will free the memory of it. You can of course write to it as much as you want. int * someNumber = new int; It's a pointer which will point to an integer that's dynamically allocated. The int is not initialized. And the memory is not freed when the pointer goes out of scope. That is, when your function returns, the memory will still be there.
