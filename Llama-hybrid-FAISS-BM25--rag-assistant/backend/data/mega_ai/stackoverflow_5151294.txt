[site]: stackoverflow
[post_id]: 5151294
[parent_id]: 5151244
[tags]: 
You can do that in three steps: First check if mouse is pressed down If it is then on mouse move event keep initializing the rectangle with new positions while mouse is being dragged Then on paint event draw the rectangle. (It will be raised for almost every mouse event, depends mouse refresh rate and dpi) You can do somthing like this (in your Form ): public class Form1 { Rectangle mRect; public Form1() { InitializeComponents(); //Improves prformance and reduces flickering this.DoubleBuffered = true; } //Initiate rectangle with mouse down event protected override void OnMouseDown(MouseEventArgs e) { mRect = new Rectangle(e.X, e.Y, 0, 0); this.Invalidate(); } //check if mouse is down and being draged, then draw rectangle protected override void OnMouseMove(MouseEventArgs e) { if( e.Button == MouseButtons.Left) { mRect = new Rectangle(mRect.Left, mRect.Top, e.X - mRect.Left, e.Y - mRect.Top); this.Invalidate(); } } //draw the rectangle on paint event protected override void OnPaint(PaintEventArgs e) { //Draw a rectangle with 2pixel wide line using(Pen pen = new Pen(Color.Red, 2)) { e.Graphics.DrawRectangle(pen, mRect); } } } later if you want to check if Buttons (shown in diagram) are in rectangle or not , you can do that by checking the Button's region and check if they lie in your drawn rectangle.
