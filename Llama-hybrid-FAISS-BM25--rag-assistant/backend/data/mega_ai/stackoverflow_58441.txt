[site]: stackoverflow
[post_id]: 58441
[parent_id]: 58431
[tags]: 
For pure elegance, a typical recursive functional-language solution is quite nice. This isn't in an actual language syntax but you get the idea (it's also hardcoded to use comma separator): join([]) = "" join([x]) = "x" join([x, rest]) = "x," + join(rest) In reality you would write this in a more generic way, to reuse the same algorithm but abstract away the data type (doesn't have to be strings) and the operation (doesn't have to be concatenation with a comma in the middle). Then it usually gets called 'reduce', and many functional languages have this built in, e.g. multiplying all numbers in a list, in Lisp: (reduce #'* '(1 2 3 4 5)) => 120
