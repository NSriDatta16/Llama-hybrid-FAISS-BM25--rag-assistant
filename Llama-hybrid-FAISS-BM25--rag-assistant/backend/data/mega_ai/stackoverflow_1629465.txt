[site]: stackoverflow
[post_id]: 1629465
[parent_id]: 1629391
[tags]: 
You said: I don't want a cryptographic algorithm as it this needs to be a performant operation. Well, I understand your need for speed, but I think you need to consider drawbacks from your approach. If you just need to create hash for urls, you should stick with it and don't to write a new algorithm, where you'll need to deal with collisions, for instance. So you could have a Dictionary to work as a cache to your urls. So, when you get a new address, you first do a lookup in that list and, if doesn't find a match, hash it and storage for future usage. Following this line, you could give MD5 a try: public static void Main(string[] args) { foreach (string url in new string[]{ "http://a3.twimg.com/profile_images/130500759/lowres_profilepic.jpg", "http://a1.twimg.com/profile_images/58079916/lowres_profilepic.jpg" }) { Console.WriteLine(HashIt(url)); } } private static string HashIt(string url) { Uri path = new Uri(new Uri(url), "."); MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); byte[] data = md5.ComputeHash( Encoding.ASCII.GetBytes(path.OriginalString)); return Convert.ToBase64String(data); } You'll get: rEoztCAXVyy0AP/6H7w3TQ== 0idVyXLs6sCP/XLBXwtCXA==
