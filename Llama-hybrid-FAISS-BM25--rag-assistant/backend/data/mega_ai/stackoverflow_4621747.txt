[site]: stackoverflow
[post_id]: 4621747
[parent_id]: 
[tags]: 
How to display a JSON error message?

I'm currently developing a tumblr theme and have built a jQuery JSON thingamabob that uses the Tumblr API to do the following: The user would click on the "post type" link (e.g. Video Posts), at which stage jQuery would use JSON to grab all the posts that's related to that type and then dynamically display them in a designated area. Now everything works absolutely peachy, except that with Tumblr being Tumblr and their servers taking a knock every now and then, the Tumblr API thingy is sometimes offline. Now I can't foresee when this function will be down, which is why I want to display some generic error message if JSON (for whatever reason) was unable to load the post. You'll see I've already written some code to show an error message when jQuery can't find any posts related to that post type BUT it doesn't cover any server errors. Note: I sometimes get this error: Failed to load resource: the server responded with a status of 503 (Service Temporarily Unavailable) It is for this 503 Error message that I need to write some code, but I'm slightly clueless :) Here's the jQuery JSON code: $('ul.right li').find('a').click(function() { var postType = this.className; var count = 0; byCategory(postType); return false; function byCategory(postType, callback) { $.getJSON('{URL}/api/read/json?type=' + postType + '&callback=?', function(data) { var article = []; $.each(data.posts, function(i, item) { // i = index // item = data for a particular post switch(item.type) { case 'photo': article[i] = ' ' + ' ' + ' '; count = 1; break; case 'video': article[i] = ' ' + ' ' + ' ' + ' ' + item['video-player'] + ' ' + ' '; count = 1; break; case 'audio': if (use_IE == true) { article[i] = ' ' + ' ' + ' ' + item['id3-artist'] +' - ' + item['id3-title'] + ' ' + ' '; } else { article[i] = ' ' + ' ' + ' ' + item['id3-artist'] +' - ' + item['id3-title'] + ' ' + item['audio-player'] + ' ' + ' '; }; count = 1; break; case 'regular': article[i] = ' ' + ' ' + item['regular-title'] + ' ' + item['regular-body'] + ' '; count = 1; break; case 'quote': article[i] = ' ' + ' ' + item['quote-text'] + ' - ' + item['quote-source'] + ' '; count = 1; break; case 'conversation': article[i] = ' ' + ' ' + item['conversation-title'] + ' '; count = 1; break; case 'link': article[i] = ' ' + ' ' + item['link-text'] + ' '; count = 1; break; default: alert('No Entries Found.'); }; }) // end each if (!(count == 0)) { $('#content_right') .hide('fast') .html(' Displaying ' + postType + ' Posts Only ' + article.join('')) .slideDown('fast') } else { $('#content_right') .hide('fast') .html(' Hmmm, currently there are no ' + postType + ' posts to display ') .slideDown('fast') } // end getJSON }); // end byCategory } }); If you'd like to see the demo in action, check out Elegantem but do note that everything might work absolutely fine for you (or not), depending on Tumblr's temperament. Update Okay, so after following jmorts answer underneath as close to the letter as 2am allows, I've churned out the following code without success - there's no alert popping up. Myabe I'm a muppet, maybe I'm just scheleeeepy but if you jedi folks can take another peek I'd really appreciate it :) $('ul.right li').find('a').click(function() { var postType = this.className; var count = 0; byCategory(postType); return false; function byCategory(postType, callback) { $.getJSON('{URL}/api/read/json?type=' + postType + '&callback=?', function(data, textStatus, xhr) { // main callback function if(xhr.status == 500 || xhr.status == 404 || xhr.status == 503) { yourErrorHandler(data, textStatus, xhr); // success } else { yourCallbackToRunIfSuccessful(data); // failed } } ); function yourCallbackToRunIfSuccessful(data) { var article = []; $.each(data.posts, function(i, item) { // i = index // item = data for a particular post switch(item.type) { case 'photo': article[i] = ' ' + ' ' + ' '; count = 1; break; case 'video': article[i] = ' ' + ' ' + ' ' + ' ' + item['video-player'] + ' ' + ' '; count = 1; break; case 'audio': if (use_IE == true) { article[i] = ' ' + ' ' + ' ' + item['id3-artist'] +' - ' + item['id3-title'] + ' ' + ' '; } else { article[i] = ' ' + ' ' + ' ' + item['id3-artist'] +' - ' + item['id3-title'] + ' ' + item['audio-player'] + ' ' + ' '; }; count = 1; break; case 'regular': article[i] = ' ' + ' ' + item['regular-title'] + ' ' + item['regular-body'] + ' '; count = 1; break; case 'quote': article[i] = ' ' + ' ' + item['quote-text'] + ' - ' + item['quote-source'] + ' '; count = 1; break; case 'conversation': article[i] = ' ' + ' ' + item['conversation-title'] + ' '; count = 1; break; case 'link': article[i] = ' ' + ' ' + item['link-text'] + ' '; count = 1; break; default: alert('No Entries Found.'); }; }) // end each if (!(count == 0)) { $('#content_right') .hide('fast') .html(' Displaying ' + postType + ' Posts Only ' + article.join('')) .slideDown('fast') } else { $('#content_right') .hide('fast') .html(' Hmmm, currently there are no ' + postType + ' posts to display ') .slideDown('fast') } // end getJSON }; // end byCategory function yourErrorHandler(data,textStatus,xhr) { alert("Server returned status code " + xhr.status + ". Try again later."); } } });
