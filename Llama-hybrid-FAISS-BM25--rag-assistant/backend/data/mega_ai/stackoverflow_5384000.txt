[site]: stackoverflow
[post_id]: 5384000
[parent_id]: 5382404
[tags]: 
To answer your question: Case 1: The compiler will check if the preprocessor constant is set or not, if not define it and then check the #pragma o≈Ñce directive. This is most likely a hash lookup on the string "SOME_HEADER_H" to know if it's defined or not before doing another hash lookup on the current file name (probably the __ FILE __ constant set by the preprocessor). So if the file has never been read, we have two hash lookups and two hash saves, if the file has been read just a single hash lookup. Case 2: This is obviously the same thing as Case 1 but in opposite order. So the only thing we can compare is the length of the hash keys to use as lookup. Depending on the path to the current header file, i.e. the length of the path, the hash lookup for the #pragma once directive might be more expensive to calculate. If the file name is "C:\dude.h", it's shorter than "SOME_HEADER_H". So I guess in summary. No. There's no special case where Case 1 would be more beneficial than Case 2 or vice versa. At least not yell Heureka over ;) Cheers
