[site]: stackoverflow
[post_id]: 4533690
[parent_id]: 4533636
[tags]: 
My suggestion is to let MyArray implement the interface java.lang.Iterable and create an instance of an iterator per iterator() call (as an anonymous class). Then you can use an instance of MyArray directly in a foreach construct: public class MyArray implements Iterable { // ... // Only arr is needed now as an instance variable. // int start; // int end; int[] arr; // myIterator it; /** * From interface Iterable. */ public Iterator iterator() { return new Iterator () { // The next array position to return int pos = 0; public boolean hasNext() { return pos Update: According to BertF's comment I updated my code to make it clear, that the only instance variable for class MyArray is now arr . The state for the iterator is now inside the anonymous Iterator implementation. So you can create multiple iterator instances which don't interfere each other.
