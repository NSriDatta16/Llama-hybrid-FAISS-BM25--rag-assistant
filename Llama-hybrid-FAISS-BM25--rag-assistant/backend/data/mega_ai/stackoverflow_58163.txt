[site]: stackoverflow
[post_id]: 58163
[parent_id]: 
[tags]: 
When can/should you go whole hog with the ORM approach?

It seems to me that introducing an ORM tool is supposed to make your architecture cleaner, but for efficiency I've found myself bypassing it and iterating over a JDBC Result Set on occasion. This leads to an uncoordinated tangle of artifacts instead of a cleaner architecture. Is this because I'm applying the tool in an invalid Context, or is it deeper than that? When can/should you go whole hog with the ORM approach? Any insight would be greatly appreciated. A little of background: In my environment I have about 50 client computers and 1 reasonably powerful SQL Server. I have a desktop application in which all 50 clients are accessing the data at all times. The project's Data Model has gone through a number of reorganizations for various reasons including clarity, efficiency, etc. My Data Model's history JDBC calls directly DAO + POJO without relations between Pojos (basically wrapping the JDBC). Added Relations between POJOs implementing Lazy Loading, but just hiding the inter-DAO calls Jumped onto the Hibernate bandwagon after seeing how "simple" it made data access (it made inter POJO relations trivial) and because it could decrease the number of round trips to the database when working with many related entities. Since it was a desktop application keeping Sessions open long term was a nightmare so it ended up causing a whole lot of issues Stepped back to a partial DAO/Hibernate approach that allows me to make direct JDBC calls behind the DAO curtain while at the same time using Hibernate.
