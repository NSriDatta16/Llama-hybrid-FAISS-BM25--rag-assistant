[site]: stackoverflow
[post_id]: 3272062
[parent_id]: 3272019
[tags]: 
The Art of UNIX Programming, Chapter 4. Modularity, Orthogonality, Page 89: Orthogonality Orthogonality is one of the most important properties that can help make even complex designs compact. In a purely orthogonal design, operations do not have side effects; each action (whether it's an API call, a macro invocation, or a language operation ) changes just one thing without affecting others. There is one and only one way to change each property of whatever system you are controlling. Programming Language Pragmatics, Chapter 6, Page 228: Orthogonality means that features can be used in any combination, that the combinations all make sense, and that the meaning of a given feature is consistent, regardless of the other features with which it is combined . On Lisp, 5.2 Orthogonality: An orthogonal language is one in which you can express a lot by combining a small number of operators in a lot of different ways. I think an orthogonal programming language would be one where each of its features have minimal or no side effects , so they can be used without thinking about how that usage will affect other features. I borrow this from the definition of an orthogonal API. In Java you'd have to evaluate for example if there is a combination of keywords/constructs that could affect each other when used simultaneously on an identifier. For example when applying public and static to a method, they do not interfere with each other, so these two are orthogonal (no side effects besides what the keyword is intended to do) You'd have to do that to all its features to prove the orthogonality. That is one way to go about it. I do not think there exists a clear cut is or is not orthogonal in this matter either.
