[site]: stackoverflow
[post_id]: 3800369
[parent_id]: 3800305
[tags]: 
There are a couple of ways I might tackle this. First; I might decide to store all this in the session object. I am assuming here that the models are quite large and so I wouldn't want them stored on the view and passed back each time I go to the next page. Second; I might store them in the database and if the wizard didn't complete then delete them as part of a background process. The one thing I wouldn't do is pass the complex object to each view. The view should really need to know anything about any other view in a restful world and so I'd be inclined not to do it. Of course that does mean you need to decide a storage place for the data. If I had a Large objcect then I'd choose the database and if was fairly small then I'd choose the session object. As you have already found, having all the data for each object in each view can be problematic. However, if you are determined to do this the View way then here is what I'd do; Create a partial view which deals only with each object in the complex model. On each view, include all three, or more, of the partial views. For each partial view which is not an active participant in the view, place it within a div that is hidden. At least then when you change a property, or add one, you simply set it in the partial view once and not three times. Also if there is an error, you can unhide the divs and see if the data is coming in. Also each field should then have the id of ModelName.Property so that the controller knows where the property is. Then in the controller you simply do, and this off the cuff; [HttpPost] public ActionResult MyAction1(ComplexObjectModel complexModel) {
