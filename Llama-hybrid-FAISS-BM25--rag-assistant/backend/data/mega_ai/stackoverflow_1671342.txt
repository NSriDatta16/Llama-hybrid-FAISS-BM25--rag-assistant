[site]: stackoverflow
[post_id]: 1671342
[parent_id]: 1669730
[tags]: 
A crash course in politics for engineers... Despite all the mission-statement baloney meant to sound noble and emphasize community support, the real purpose of every business is return on investment or, equivalently, maximizing shareholder value . If it's a government agency, it's kind of still the same question but the legal owners will have no direct influence and instead you will have proxy owners, such as higher agencies or powerful individual officials. Decisions, however, are almost always made by agents , and so the principal-agent problem (also called the agency dilemma ) appears; the agents (the management) will make a decision in their interest, and not necessarily according to the shareholder's interest as is theoretically required. In a government agency this is almost 100% of the consideration. Sadly, this stirs in all the Dilbert and Parkinson's Law complexities. The best you can conclude is that decisions will be justified on the basis of risk, cost, and benefit, but will tend to be made on the basis of what credit and blame is in store for the agent and understood by the agent, which is a narrow risk consideration of questionable value to the principal but at least an identifiable one. So, we should now apply this to the language question. Your manager is likely to avoid threats, risks, scandals, and controversies. His application of the principals's concerns will be mainly through the constraints of budgets and expectations. Here are some examples that should be mostly self-explanatory. If you want to use Java or PHP: Everyone is doing it this way This is the industry-standard approach for this type of problem This is the low-risk approach Similar systems have been done many times in Java/PHP (That's the "no one ever got fired for buying IBM" argument.) If you want to use Ruby: Ruby is in the Tiobe top-ten (not quite an industry standard, so this is the best you can do) PHP and Java are higher-cost technologies (he probably has a budget as an attempt to mitigate the principal-agent problem) PHP and Java are going to be out of fashion "soon" (maybe not, but phrased as a "risk of appearing to stupidly use old tech', and implying the lack of later credit and recognition) Ruby is an advanced language with powerful abstractions for cost-effective development (a weak argument for the agent, but offers the possibility of credit. The least effective of all the arguments.) If you want to use Clojure: You better prototype the system on weekends and evenings and present it as a solved problem. Emphasize parallel Java / Clojure development ("if necessary the entire system can be written in Clojure Java") Make all the Java arguments and then say something about "the best of both worlds"
