[site]: stackoverflow
[post_id]: 5691312
[parent_id]: 5691224
[tags]: 
I'd say that your current approach (a bunch of similar helper methods) is as good as you'll get. Some things are inelegant, and there's not much you can do about it. The risk of trying to combine the methods (along the lines of @leonbloy's answer) is that you replace static type safety with runtime type safety; i.e. ClassCastExceptions when a typecast fails ... or worse. From a linguistic perspective, what is needed is a way for an application to "decorate" an existing class hierarchy with an extra method (or methods), and have the methods called by polymorphic dispatching, much as you do with ordinary instance methods. This can be simulated using the Decorator pattern, but it requires some fairly heavyweight infrastructure ... if the class hierarchy doesn't have the hooks to support the pattern built in.
