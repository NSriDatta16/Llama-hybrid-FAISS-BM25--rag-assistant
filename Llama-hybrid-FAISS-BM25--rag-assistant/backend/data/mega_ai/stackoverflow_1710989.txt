[site]: stackoverflow
[post_id]: 1710989
[parent_id]: 1710936
[tags]: 
Your question is a little unclear. I'm assuming this scenario: table: ads id category ad_text -- -------- --------------------------- 1 pets sample text 2 family sample ad If you are making one search of ads, then searching multiple tables on each search is slower than searching one table. HOWEVER, if you're proposing to break "ads" into multiple tables according to "category", leaving you with table names like pets-ads family-ads programmer-ads And, programatically, you know you're looking for programmer-ads so you can just go search the programmer-ads table, then breaking them out is faster. Barely. Breaking them out, though, has many drawbacks. You'll need: some cute code to know which table to search. a new table each time you create a new category to rename a table if you decide a category name is wrong Given the limited info we have, I would strongly advise one table with a category column, then go ahead and normalize that out into its own table. Slap an index on that column. Databases are built to handle tons of rows of data organized correctly, so don't worry about that so much.
