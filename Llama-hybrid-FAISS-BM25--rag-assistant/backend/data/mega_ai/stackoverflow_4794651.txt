[site]: stackoverflow
[post_id]: 4794651
[parent_id]: 4794486
[tags]: 
First thumb of rule, decouple the Domain layer from the ASP.NET specifics/View. A lot of people create a class library for the Domain layer, that way it is guaranteed that the Page/View related code does not get blended with it. So you would have a domain layer, where you have classes such as User, Comment, etc... and those classes would talk to the database. I usually have a DbUser class where all the database interaction happens, and DbUser inherits DbQuery which creates the connection for you. That way I can keep database interaction code completely to the Db{ClassName} class and DbQuery. It can really help if you want to keep the code really organized. Simple scenario: When I get a page request to view a profile of a specific user, I simply do User.GetUser(id); where id is the user id of the user. The User class has a static method GetUser, which creates a new instance of DbUser and calls the getUser method there. getUser method within the DbUser creates a connection and a query to the database, then it returns an instance of User and voila, you get it in your hands. I hope my answer helps you in the right direction though it may be a bit off topic. UPDATE: By decoupling the Domain layer from the website then you have more options, such as re-using the class library for another project that interacts to the same database.
