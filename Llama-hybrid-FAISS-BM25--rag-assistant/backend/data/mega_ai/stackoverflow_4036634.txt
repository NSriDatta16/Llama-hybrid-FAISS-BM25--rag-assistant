[site]: stackoverflow
[post_id]: 4036634
[parent_id]: 4016767
[tags]: 
This took alot of research - the key to finding an answer is the term filter. I came across the term by digging through the NHibernate source code starting with AddJoin in ANSIJoinFragment.cs - the code supported additional conditions on the join so I figured it was possible. Anyway, here's the revised code that utilizes filter (entity class remains the same). Repository: IList foundParents = new List (); var criteria1 = DetachedCriteria.For () .Add(Restrictions.Eq("ParentId", parentId)) .CreateCriteria("Children", JoinType.LeftOuterJoin); Session.EnableFilter("dateFilter") .SetParameter("startDate", startDate) .SetParameter("endDate", endDate); foundParents = Session .CreateMultiCriteria() .Add (criteria1) .SetResultTransformer(new DistinctRootEntityResultTransformer()) .List()[0] as List ; I also had to modify my mapping for Parent by adding filter and filter-def elements. ... ... Also, one word of warning for anyone that runs into this problem and doesn't use filters. If you decide to return the Parent entity without the populated children when the original query with the where clause yields no records, any code that hits the set of children will cause NHibernate to load the entire table.
