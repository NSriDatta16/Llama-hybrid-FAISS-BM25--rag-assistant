[site]: stackoverflow
[post_id]: 1491044
[parent_id]: 1489908
[tags]: 
S#arp Architecture includes scaffolding generator using T4. It generates model, views, controllers, and tests from the template model definition. You get full CRUD. Since it uses T4 (Visual Studio template language I suppose) you can extend default templates as you want. Here's an example of the template: EntityScaffoldingDetails entityScaffoldingDetails = new EntityScaffoldingDetails("Organization.Worker"); /* * Property names should be PascalCase. * Do not include a property for Id as it will be included automatically. */ entityScaffoldingDetails.EntityProperties.Add( new EntityProperty("FirstName", "string", "Joe", "[NotNull, NotEmpty]", true) ); entityScaffoldingDetails.EntityProperties.Add( new EntityProperty("LastName", "string", "Smith", "[NotNull, NotEmpty]", true) ); entityScaffoldingDetails.EntityProperties.Add( new EntityProperty("BirthDate", "DateTime", DateTime.Parse("1/1/1975")) ); entityScaffoldingDetails.EntityProperties.Add( new EntityProperty("Manager", "Employee", null, "[NotNull]") ); /////////////////////////////////////////////////// // The first parameter should reflect the root directory of your solution //ScaffoldingGenerator generator = new ScaffoldingGenerator( //@"D:\Work\Project\", "Orders", entityScaffoldingDetails); // Uncomment this line when you're ready for the scaffolding generator to fire...be sure to recomment after it completes to avoid accidental generating! //generator.Run(); One small addition: I would not recommend using it as is, because, for example, I'd prefer controllers to work with ViewModel, not entities. And I don't use scaffolding much. But it is pretty flexible, though you may need to learn T4.
