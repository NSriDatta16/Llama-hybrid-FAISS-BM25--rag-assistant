[site]: stackoverflow
[post_id]: 392718
[parent_id]: 392587
[tags]: 
Just an additional point, since we have "shared code" in my shop as well. We found out this is very much a packaging issue : Whatever code your are producing or tool you are using, what you should have is a common build tool able to package your sources into a "delivery component", with everything used to actually execute the code, but also the documentation (compressed), and the source (compressed). The main interest into having a such a "delivery package unit" is to have as less files to deploy as possible , in order to ease the download of those units. The build process can very well be managed by Maven or any other (ant/nant) tool you want. When some audit team want to examine all our projects, we just deploy on their post the same packages we deploy on a production machine, except they will un-compressed the source files and do their work. Since our source files also includes whatever files are needed to compile them (like for instance eclipse files ), they even can re-compile those projects in their development environment). That way: Developers will not be forced to use this repository. The barrier to entry must be as low as possible to encourage participation, or it will be ignored : it is just a script to execute to get the "delivery module" with everything in it they need (a maven repository can be used for that too) We are a risk-averse, Microsoft shop : you can use any repository you want Some of my fellow devs care about writing quality, reliable software, some don't : this has nothing to do with the quality of code written in these packages modules We're better at writing processes than following them : the only process involved in this is the packaging process, and it can be fairly automated Don't assume best practices : you are not forced to apply any kind of static code analysis before packaging executable and source files.
