[site]: stackoverflow
[post_id]: 2132122
[parent_id]: 2132058
[tags]: 
I think you want to use unset() //assuming $to contains the key in $users that needs to be removed //from the array unset($users[$to]); But as $to contains an array of keys to the element rather than a single key to the element, you would need to write your own functions to do what you want. The function that does what you want is below, and will remove the element of the given array which has the address in $keys. /** * Removes the element with the keys in the array $keys * * @param haystack the array that contains the keys and values * @param keys the array of keys that define the element to remove * @return the new array */ function array_remove_bykeys( array $haystack, array $keys ){ //check if element couldn't be found if ( empty($keys) ){ return $haystack; } $key = array_shift($keys); if ( is_array($haystack[$key]) ){ $haystack[$key] = array_remove_bykeys($haystack[$key], $keys); }else if ( isset($haystack[$key]) ){ unset($haystack[$key]); } return $haystack; } The other method would be to delete all the keys with the value you were looking for. /** * Removes all elements from that array that has the value $needle * @param $haystack the origanal array * @param $needle the value to search for * @return a new array with the value removed */ function array_remove_recursive( array $haystack, $needle ){ foreach( $haystack as $key => $value ) { if( is_array($value) ) { $haystack[$key] = array_remove_recursive($value, $needle); } else if ( $value === $needle ){ unset($haystack[$key]); } } return $haystack; } For completeness (Although defiantly not recommended), here is a eval version: $keys = array(...);//an array of keys //$arr is the variable name that contains the value that you want to remove eval ('unset($arr[\''.implode('\'][\'', $keys).'\']);');
