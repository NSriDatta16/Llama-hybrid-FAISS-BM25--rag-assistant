[site]: stackoverflow
[post_id]: 3862545
[parent_id]: 
[tags]: 
Django - What's a good way to handle manytomany with intermediary table in forms and views

Suppose I have the following models - class Item(models.Model): name = models.CharField(max_length=150) value = models.DecimalField(max_digits=12,decimal_places=2) class Organization(models.Model): name = models.CharField(max_length=150) items = models.ManyToManyField(Item, through='Customizable') class Customizable(models.Model): organization = models.ForeignKey(Organization) item = models.ForeignKey (Item) value = models.DecimalField(max_digits=12,decimal_places=2) More often than not, when items are "assigned" to an organization , they will have the same value as originally recorded in the related Item object. But in certain cases, an item assigned to an organization may have an overridden value (hence the intermediary model). Since overriding the original value happens rarely (but it does happen) I want to allow the user to simply select desired items from a list of Item instances to assign them to an organization instance. The user will then have the option of overriding individual values later after bulk assignment is complete. So I have the following simple ModelForm - class AssignItemsForm(forms.ModelForm): items = forms.ModelMultipleChoiceField(queryset=Item.objects.all(),required=False,widget=forms.CheckboxSelectMultiple) class Meta: model = Organization exclude = ('name',) Now since I have a through model, a simple form.save() won't work. I need to (i) save Customizable instances corresponding to the items selected by the user and (ii) make sure the persisted Customizable instances have the proper value taken from the corresponding value taken from the item instance related by foreignkey . I am trying to handle it in a view (but my mind is blocked) - def assign_items(request, oid): organization = Organization.objects.get(id=oid) if request.method == 'POST': form = AssignItemsForm(data=request.POST, instance=organization) if form.is_valid(): current_organization = form.save(commit=False) # #placeholder to save Customizable instances here # return HttpResponseRedirect(reverse('redirect-someplace-else')) else: form = AssignItemsForm(instance=organization,) return render_to_response("assign_items.html", {"form": form,}, context_instance=RequestContext(request))
