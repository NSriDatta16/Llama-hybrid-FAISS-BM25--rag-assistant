[site]: stackoverflow
[post_id]: 1979175
[parent_id]: 1979036
[tags]: 
The Target Management has long wanted integrated RSE (Remote Systems Explorer) with CDT (C/C++ Development Tooling). A first bug was opened in 2004 ( bug 65471 ), and a first crude implementation was proposed in 2006 ( bug 137839 ). In 2009, a proposal to move the RSE " RemoteCDTLaunch " feature into CDT was added. Right now, the official source of information for using RSE with CDT would be this Wiki page . Extract: There is two very different kinds of setup for remote debugging: Have the Debugger run on the remote system, and Have the Debugger run on the local system, as a cross debugger, with some kind of thin agent on the remote. The first, " remote debugging " case, can be addressed with CDT alone: typically, compilation will happen on the remote host, and all tools need to be available remotely including the debugger. An NFS or Samba mount can be used to make the remote sources visible locally for static analysis and editing. The make command is changed into " ssh remotehost make -C remoteDir " and the debug command is changed into " ssh remotehost gdb ". See bug 30094 comment 13 for more info. For the second, " cross debugging " case, there are multiple options but they all have one prerequisite in common: you need a cross toolchain installed locally . That is, your compiler runs locally (e.g. on Windows) and produces output that the remote (e.g. Linux) system can execute. Similarly, your debugger runs locally (e.g. gdbppc ) and is capable of debugging the remote system. Such a cross toolchain is available from commercial vendors, or you can build one yourself. See Wikipedia:Cross-compilation for a starting point. Regarding the Remote build, however, things are less clear: some manual process is possible (see this thread ), but with issue to integrate that with the Problem view. We are using "Make Targets" View where "targets" are set up to compile remotely using ssh . Seems to be more convinient then to use Build Configuration option. the official approach is Adding Remote Build and Remote File System Support to CDT , written in 2006 and which may have been integrated to CDT by now. Hopefully, that can be used as a first illustration for what you are looking for.
