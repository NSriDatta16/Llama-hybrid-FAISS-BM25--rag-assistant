[site]: stackoverflow
[post_id]: 5671443
[parent_id]: 1197593
[tags]: 
I used Objective-C categories to add an NSManagedObject class method called firstInManagedObjectContext: . Source Code // NSManagedObject+Additions.h @interface NSManagedObject (Acani) + (NSString *)entityName; + (NSEntityDescription *)entityInManagedObjectContext:(NSManagedObjectContext *)context; + (NSManagedObject *)firstInManagedObjectContext:(NSManagedObjectContext *)context; @end // NSManagedObject+Additions.m #import "NSManagedObject+Additions.h" @implementation NSManagedObject (Acani) + (NSString *)entityName { return NSStringFromClass([self class]); } + (NSEntityDescription *)entityInManagedObjectContext:(NSManagedObjectContext *)context { return [NSEntityDescription entityForName:self.entityName inManagedObjectContext:context]; } + (NSManagedObject *)firstInManagedObjectContext:(NSManagedObjectContext *)context { NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init]; [fetchRequest setEntity:[self entityInManagedObjectContext:context]]; [fetchRequest setFetchLimit:1]; NSError *error; NSArray *fetchedObjects = [context executeFetchRequest:fetchRequest error:&error]; [fetchRequest release]; if (fetchedObjects == nil) { NSLog(@"Fetch sender error %@, %@", error, [error userInfo]); return nil; } else if ([fetchedObjects count] > 0) { return [fetchedObjects objectAtIndex:0]; } return nil; } @end Usage Add these files to your project and be sure to link them to your target. Then, #import "NSManagedObject+Additions.h" in the .m files where you use the firstInManagedObjectContext: class method. Call it from any concrete (not abstract) subclass of NSManagedObjectContext . Just pass it the NSManagedObjectContext *context from which to fetch the managed object. The method detects the (NSString *)entityName from the name of the class on which it's called. Just remember to cast the result for a clean build (without warnings). I'm using this for a managed object class of which I know I only have one saved instance. If you have more than one saved instance, you may want to add an NSSortDescriptor as @Craig McMahon suggests. You could also try to sort by objectID instead of accountCreatedDate if all objects are created on the same device. I'm not sure, however, if the object IDs are ordered. Example Imagine you have an Event object that descends from NSManagedObjectContext . You could do: Event *event = (Event *)[Event firstInManagedObjectContext:context]; Blocks After reading the Pragmatic Studio's iOS 4 Blocks Tutorial , I realized that this code could be improved and made even more modular by adding another function, call it + fetch and adding a NSFetchRequestBlock (which would take the fetchRequest as its argument) & NSFetchRequestFailureBlock as arguments to customize the fetch request and the handling of the fetch request error, respectively. I challenge you to tackle that! :)
