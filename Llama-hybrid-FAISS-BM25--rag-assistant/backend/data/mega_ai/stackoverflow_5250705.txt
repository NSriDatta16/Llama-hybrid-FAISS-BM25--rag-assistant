[site]: stackoverflow
[post_id]: 5250705
[parent_id]: 4643822
[tags]: 
data annotations like RequiredAttribute and DisplayAttribute etc do not propagated to the generated client side files when using Silverlight 4 and WCF. This is one solution for the problem... Create a class library with a model (Model.dll) sample public partial class Person: INotifyPropertyChanged { private Guid IDField; private string NameField; private string LastNameField; private int AgeField; private string EmailField; /// /// ID of an Object /// public Guid ID { get { return IDField; } set { if (value != IDField) { Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = "ID" }); IDField = value; OnPropertyChanged("ID"); } } } /// /// Name of a person /// [Required] public string Name { get { return NameField; } set { if (value != NameField) { Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = "Name" }); NameField = value; OnPropertyChanged("Name"); } } } /// /// LastName of a person /// [Required] public string LastName { get { return LastNameField; } set { if (value != LastNameField) { Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = "LastName" }); LastNameField = value; OnPropertyChanged("LastName"); } } } /// /// Age of a person /// [Range(0,120)] //[Required] public int Age { get { return AgeField; } set { if (value != AgeField) { Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = "Age" }); AgeField = value; OnPropertyChanged("Age"); } } } [RegularBLOCKED EXPRESSION] public string Email { get { return EmailField; } set { if (value != EmailField) { Validator.ValidateProperty(value, new ValidationContext(this, null, null) { MemberName = "Email" }); EmailField = value; OnPropertyChanged("Email"); } } } public event PropertyChangedEventHandler PropertyChanged; /// /// Raises a property changed notification for the specified property name. /// /// The name of the property that changed. protected virtual void OnPropertyChanged(string propName) { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(propName)); } } } In a services project reference this class library a sample of services could be ... [ServiceContract] public interface IPersonService { [OperationContract] List GetPersons(); [OperationContract] Person GetPersonByID(Guid ID); [OperationContract] void EditPerson(Person PersonField); } ///////////////// public class PersonService : IPersonService { private List Persons; public PersonService() { Persons = new List (); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Albert", LastName = "Pujols" , Age = 31, Email = "albert-p@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Alex", LastName = "Rodriguez", Age = 36, Email = "alex-r@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Evan", LastName = "Longoria", Age = 25, Email = "evan-l@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Joey", LastName = "Votto", Age = 25, Email = "joey-v@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Miguel", LastName = "Cabrera", Age = 27, Email = "miguel-c@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Kendry", LastName = "Morales", Age = 26, Email = "kendry-m@mlb.com" }); Persons.Add(new Person { ID = Guid.NewGuid(), Name = "Alexei", LastName = "Ramirez", Age = 28, Email = "miguel-c@mlb.com" }); } public List GetPersons() { return Persons; } public Person GetPersonByID(Guid ID) { return (from sel in Persons where sel.ID == ID select sel).First(); } public void EditPerson(Person PersonField) { Person Person = (from sel in Persons where sel.ID == PersonField.ID select sel).First(); Person = PersonField; } } Create a silverlight class library (SL.Model.dll) (this library have the sample model created in Model.dll) in this class library add existing Item as link and add the model item that have Model.dll in Silverlight Application reference the SL.Model.dll when the services reference is create view that reuse types is cheked (It is deafault option) sample of page ... xaml code of control ... public partial class MainPage : UserControl { private PersonServiceClient Client; private EndpointAddress AddressService = new EndpointAddress(new Uri("http://localhost:3589/PersonService.svc")); public MainPage() { InitializeComponent(); Client = new PersonServiceClient(new BasicHttpBinding(), AddressService); Client.GetPersonsAsync(); Client.GetPersonsCompleted += new EventHandler (Client_GetPersonsCompleted); } void Client_GetPersonsCompleted(object sender, GetPersonsCompletedEventArgs e) { ObservableCollection PersonItems = e.Result; dataGrid1.ItemsSource = PersonItems; } private void dataGrid1_SelectionChanged(object sender, SelectionChangedEventArgs e) { DataContext = e.AddedItems[0]; } }
