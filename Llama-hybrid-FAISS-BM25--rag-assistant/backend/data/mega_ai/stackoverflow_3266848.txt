[site]: stackoverflow
[post_id]: 3266848
[parent_id]: 3265218
[tags]: 
Well, if you know the format will be consistent then something like this will work: def add_data(node, name, value): if '-' not in name: node[name] = value else: key = name[:name.index('-')] node_index = int(name[len(key) + 1:name.index('.')]) node.setdefault(key, []) if node_index >= len(node[key]): node[key].append({}) add_data(node[key][node_index], name[name.index('.') + 1:], value) Then to use it, just do something like this: root_node = {} for data in formdata: add_data(root_node, data['formname'], data['formvalue']) The function makes the following assumptions: The - character is used to specify which node of a particular node type, and is followed by a number. The . character separates nodes in the tree, and always follows the index number. The form data will always go in order. (paragraph-0, paragraph-1, paragraph-2) instead of (paragraph-1, paragraph-0, paragraph-3). So, here's the code with comments explaining it: def add_data(node, name, value): # We're at a parent node (ex: paragraph-0), so we need to drill down until # we find a leaf node if '-' in name: key = name[:name.index('-')] node_index = int(name[len(key) + 1:name.index('.')]) # Initialize the parent node if needed by giving it a dict to store it's # information nodes node.setdefault(key, []) if node_index >= len(node[key]): node[key].append({}) # Drill down the tree by calling this function again, making this # parent node the root add_data(node[key][node_index], name[name.index('.') + 1:], value) # We're at a leaf node, so just add it to the parent node's information # ex: The first formdata item would make the root_node dict look like # { 'name': 'Roel Kramer' } else: node[name] = value Here's a working example: http://pastebin.com/wpMPXs1r
