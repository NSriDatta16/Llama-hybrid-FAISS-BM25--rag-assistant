[site]: datascience
[post_id]: 13804
[parent_id]: 9582
[tags]: 
I agree with @thebiro - you could start by classifying a sample of the comments as being either opposed to or in support of the policy. If you only need basic for/against classification, you can do binary classification (e.g. against = 0, for = 1). If you need specify the degree to which a statement is for or against the policy, then you could define a scale that indicates the degree to which a comment supports the policy (e.g. strongly against = -3, strongly for = 3). Once you have chosen your scale and manually classified your sample comments, you have a dataset that you can use to train a model. Once you have your training data, you need to come up with a numerical representation of each comment. There are too many possible approaches to enumerate here, but some basic concepts are bag of words and word vectors(aka word embeddings). This Kaggle tutorial may help explain those concepts. Finally, you need to train a model that takes the numerical representation of each comment as an input and outputs a sentiment score (0 or 1 for binary or a number on your scale). You have a lot of choices for the type of model you use. If you are working in Python, you can use one of the supervised learning methods in Scikit-learn. Scikit-learn also has a tutorial on working with text. You train your model on the sample you manually classified (Something like model.fit(training_data_inputs) in Scikit-learn) and then predict the output for the rest of your dataset ( model.predict(test_data_inputs) in Scikit-learn). Some people are also using neural networks for sentiment analysis. Keras is a great Python library for building neural networks and has sentiment analysis examples available on Github.
