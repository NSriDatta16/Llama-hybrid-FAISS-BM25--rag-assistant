[site]: stackoverflow
[post_id]: 3514776
[parent_id]: 3514691
[tags]: 
You're asking the wrong question again :) The better question is "how do I build an application that lets me change the data storage implementation?" If you apply the repository pattern and properly interface it you can build interchangable persistence layers. So you could start with one implementation and change it as-needed wihtout needing to re-engineer the business or application layers. Once you have a repository interface you could try implementations in a lot of differnt approaches: Flat File - You could persist the data as XML, and provided that it's not a lot of data you could store the full contents in-memory (just read the file at startup, write the file at shutdown). With in-memory XML you can get very high throughput without concern for database indexes, etc. Distributable DB - SQLite or SQL Compact work great; they offer many DB benefits, and require no installation Local DB - SQL Express is a good middle-ground between a lightweight and full-featured DB. Access, when used carefully, can suffice. The main benefit is that it's included with MS Office (although not installed by default), and some IT groups are more comfortable having Access installed on machines than SQL Express. Full DB - MySql, SQL Server, PostGreSQL, et al. Given your specific requirements I would advise you towards an XML-based flat file--with the only condition being that you are OK with the memory-usage of the application directly correlating to the size of the file (since your data is text, even with the weight of XML, this would take a lot of entries to become very large). Here's the pros/cons--listed by your requirements: Cons No limit on amount of data entered. using in-memory XML would mean your application would not scale. It could easily handle a 10MB data-file, 100MB shouldn't be an issue (unless your system is low on RAM), above that you have to seriously question "can I afford this much memory?". Pros Single user per application. No concurrent activity or multiple users. XML can be read into memory and held by the process (AppDomain, really). It's perfectly suited for single-user scenarios where concurrency is a very narrow concern. Allow user entries/data to be exported to an external file that can be easily shared between applications/users. XML is perfect for exporting, and also easy to import to Excel, databases, etc... Allows for user queries to display customers based on different combinations of customer information/job site information. Linq-to-XML is your friend :D The data will never be viewed or manipulated outside of the application. ....then holding it entirely in-memory doesn't cause any issues The program will be running almost always, minimized to the task bar. so loading the XML at startup, and writing at shutdown will be acceptible (if the file is very large it could take a while) Startup time is not very important, however I would like the queries to be considerably fast Reading the XML would be relatively slow at startup; but when it's loaded in-memory it will be hard to beat. Any given DB will require that the DB engine be started, that interop/cross-process/cross-network calls be made, that the results be loaded from disk (if not cached by the engine), etc...
