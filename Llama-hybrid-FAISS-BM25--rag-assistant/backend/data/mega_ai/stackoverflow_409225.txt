[site]: stackoverflow
[post_id]: 409225
[parent_id]: 407980
[tags]: 
Standard Internet Help Forum Caveat: I may not fully understand what you're trying to do. I'm not sure your idea fits in with PHPs request/response cycle. Traditionally (CGI, mod_php), the life-cycle of a PHP request looks something like User makes an HTTP Request for a PHP page The PHP page (and all included files) are turned into opt-code The opt-code is executed Once the cycle is complete, everything is thrown away This was one of the reasons PHP did so well in the market with less experienced programmers. Even the most horrendously coded application could only hang a server for the life-cycle of a request. There are some parallels with HTTP; PHP is (sort of) built such that each request knows nothing about any other request. I'm lest familiar with the fast-cgi deployment techniques (used in Zend Platform, for example), but as I understand it multiple PHP processes will hang out in memory to handle requests, and then there's some magic voodoo going to that will kill off and re-spawn processes as needed. The larger point of all this is, the idea of keeping track of where PHP objects are in memory by reference count doesn't make sense with PHPs request model, which is why you're not finding much out there. Caching in PHP userland means using a separate programmable system, along the lines of memcached or the APC to handle the details of memory management for you. Caching is abstracted into a simple key/value pair storage system. That said, if you press forward with your approach, I'd be interested in seeing the end results :)
