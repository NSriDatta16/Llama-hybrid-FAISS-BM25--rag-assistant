[site]: stackoverflow
[post_id]: 1209086
[parent_id]: 1208987
[tags]: 
The only way to add text to a DrawingGroup would be through GlyphRunDrawing . This is a very low-level class. I would not recommend it to the average user. There is a better way to go about this: you have your baseball diamond set up as a background image, why not simply place text on top of the image? Change your root-level Grid to a Viewbox. Place your Grid inside the Viewbox. Second, add a new class file to your project, called "SelectableTextblock." Here is the code-behind for that class: public class SelectableTextBlock : TextBlock { public bool IsSelected { get { return (bool)this.GetValue(IsSelectedProperty); } set { this.SetValue(IsSelectedProperty, value); } } public static readonly DependencyProperty IsSelectedProperty = DependencyProperty.Register("IsSelected", typeof(bool), typeof(SelectableTextBlock), new PropertyMetadata(false, IsSelectedPropertyChanged)); static void IsSelectedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e) { SelectableTextBlock textBlock = obj as SelectableTextBlock; textBlock.Background = (bool)e.NewValue ? new SolidColorBrush(Color.FromArgb(200, 255, 255, 255)) : Brushes.Transparent; } protected override void OnMouseDown(MouseButtonEventArgs e) { IsSelected = !IsSelected; base.OnMouseDown(e); } } Quite simply, this just declares a DependencyProperty that can be either selected or unselected. It acts as a toggle: when you click it, you select the text; click it again and it becomes unselected. Now, declare the local namespace in your XAML, and then add a SelectableTextBlock for each position in your diamond: 1st Base Here is the end result: 1st Base
