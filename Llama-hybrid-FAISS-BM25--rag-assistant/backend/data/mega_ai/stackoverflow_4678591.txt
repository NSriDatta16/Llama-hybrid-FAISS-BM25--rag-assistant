[site]: stackoverflow
[post_id]: 4678591
[parent_id]: 
[tags]: 
How to structure my objects to clean up my controller code

I am trying to build an object to represent a ridiculously large form for a project I am working on. http://www.flickr.com/photos/namtax/5351091239/ I didnt want to build all the fields into one large object as I didnt think this was a good way to do things, so I have structured the model as so - One contact object. One work object - linked to the contact one to one. One travel object - linked to the contact one to one. One address object - linked to the contact one to many. One emergency contact object - linked to the contact one to many. Here is the sample code for one of these relationships - written in CF9 ORM property name="work" fieldtype="one-to-one" cfc="work" mappedby="contact"; The issue here is that it causes the saveContact function in my controller to be large and code smelly due to all the possible options you can choose in the form. Here is a rough translation of the code VARIABLES.contact = contactService.getContact(form.iContactId); contactService.set(contact:contact,argumentCollection:form); contact = contactService.save(contact); if(_emergencyContactService.userIsSubmittingAnEmergencyContact(form)){ VARIABLES.emergencyContact = _emergencyContactService.getEmergencyContact(contact); emergencyContactService.setEmergencyContact(emergencyContact,form); if(! contact.hasEmergencyContact()){ contact.setEmergencyContact(emergencyContact); emergencyContact.addarrContacts(contact); } _emergencyContactService.save(emergencyContact); } // Repeat this logic to check if work object, travel object or address object have been selected in the form also, get and set accordingly. I then repeat the if statement shown above for emergency contact, to check whether the work object, travel object or address object have been selected in the form also. If so, get and set the object, then link the contact object where necessary. This doesnt seem efficient to me, especially as I need to repeat all this logic on another controller method as well. Is there a better way to structure my objects, or a better way to handle my controller code? Thanks.
