[site]: stackoverflow
[post_id]: 4237373
[parent_id]: 4237319
[tags]: 
A thorough and well-designed class structure is extremely important in adhering to object-oriented design principles. Here are just a few reasons to consider breaking related code up into separate classes: It creates a division of labor and segregates differential tasks. This is sometimes explained as the Single Responsibility Principle , which says that every object (class) should have a single responsibility and focus on completing a single task. Encapsulation also quickly becomes an important principle here, basically meaning that data is bundled with the methods that are responsible for operating on that data. This also helps to reduce the opportunities for bugs to creep into your code. It can help promote code reuse . It's often much easier to take an existing class with code that you've already written and integrate it into another application than if that code was scattered throughout the application. Why rewrite the same code over and over? A well-designed class structure can create a logical hierarchy that makes your code easier to understand and conceptualize, as well as making your application easier to maintain in the long run. It's the same reason why we organize files on our computer into folders, and everything else in our lives (or at least we try).
