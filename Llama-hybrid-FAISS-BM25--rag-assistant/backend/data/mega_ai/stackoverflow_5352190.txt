[site]: stackoverflow
[post_id]: 5352190
[parent_id]: 5352021
[tags]: 
If you use Generics.Collections.TObjectList and there's no need for casting. Performance should be fine for the usage that you describe. Inserting is more demanding than adding to the end because you need to shift the items after the insertion point up the list. So long as you avoid SetLength(A, Length(A)+1) and opt for a more sensible allocation strategy dynamic arrays are equivalent to all of the TList like classes. On occasions I have had problems with performance and memory fragmentation when trying to maintain large lists as contiguous blocks of memory. Then I have resorted to a sub-allocation scheme. But since your lists contain object references which are essentially pointers, you already have implicit sub-allocation. It's all somewhat speculative and you really need to measure â€“ otherwise we can only guess.
