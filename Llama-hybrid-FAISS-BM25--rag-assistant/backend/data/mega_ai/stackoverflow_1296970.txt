[site]: stackoverflow
[post_id]: 1296970
[parent_id]: 1263760
[tags]: 
I am answering my own question, because there were no other answers First, the global variable inProgress , used as semaphor / mutex to protect critical section, and while (prevDataLength !== xhr.responseText.length) { ... } loop is not needed at all. According to William's answer to Are mutexes needed in JavaScript? StackOverflow question: Javascript is defined as a reentrant language which means there is no threading exposed to the user, there may be threads in the implementation. Functions like setTimeout() and asynchronous callbacks need to wait for the script engine to sleep before they're able to run. This agrees with description in "Document Object Model (DOM) Level 3 Events W3C Specification" , chapter 1. "Document Object Model Events", section 1.2 "Event dispatch and DOM event flow", last paragraph: The DOM event model is reentrant. Event listeners may perform actions that cause additional events to be dispatched. Such events are handled in a synchronous manner, the event propagation that causes the event listener to be triggered will resume only after the event dispatch of the new event is completed. That means that everything that happens in an event must be finished before the next event will be processed. Second, global variables prevDataLength and nextReadPos could (and probably should) be added as additional extra properties to XmlHttpRequest object . Alternate solution would be to use closures to have private / static variables, as described somewhat in Private Members in JavaScript by Douglas Crockford, and in Example 3: Encapsulating Related Functionality in comp.lang.javascript FAQ notes :: Javascript Closures.
