[site]: stackoverflow
[post_id]: 4696204
[parent_id]: 4691094
[tags]: 
perfect! guess I needed to ask this question so I could answer myself :-) the solution is based on some amazing snippet i found for detecting presence of point in polygon. this is 2d function, but hey... so is my canvas - silly me. here it is, complete and cross-browser: קובייה var isIE = false isIE = true body { padding: 2px; font-family: arial; } canvas { border:1px solid black; background:white; cursor:default; } .move { cursor:move; } div, td, input { font-size:15px; } .header { font-size:22px; font-weight:bold; margin-bottom:10px; } .subHeader { font-size:16px; } .tblHeader { background:#003f00; color:white; font-weight:bold; font-size:24px; border:0px; } .info { background:lightyellow; border:1px solid black; font-size:15px; width:350px; } .opac { /* opacity: .85; filter: alpha(opacity=85); -ms-filter: "alpha(opacity=85)"; -khtml-opacity: .85; -moz-opacity: .85; */ } .btn { color: black; display: inline-block; width:100px; border: 2px outset #ddd; text-decoration:none; padding:2px; background: #ddd; text-align:center; font-family: arial; font-size:12px; font-weight:bold; } .btn_hover { color: blue; } .btn_down { border: 2px inset #ddd; } // cube code shared by Eric Pascarello var sideLength = 50; var width = 600; var height = 450; var center = new Point(width/2, height/2) var perspective = sideLength * 16; var xzRotation = -Math.PI/2; var yzRotation = 0; var xyRotation = 0; var isColored = true; var cube, calcCube, lgth var canvas, ctx, animation var mouse = new Point(0,0); var absMouse = new Point(0,0) var clickedMouse = new Point(0,0) var posCanvas var clickRGB = [248, 128, 23] // orange = #F88017 var clickRGB = [255,192,203] // pink var arrPolygons = [] var arrSortedIndex /** cube stuff **/ function rotate(bForce) { if (!bForce && (this.last_xyRotation == xyRotation && this.last_xzRotation == xzRotation && this.last_yzRotation == yzRotation || !dragCube) ) { return } var drawStyle = getRadioValue("drawStyle") // color, bw, or trans if (drawStyle=="trans") { $("chkWire").disabled = true $("chkWire").checked = true } else { $("chkWire").disabled = false } // rotate cube into calcCube. also set colors. for (var i=0; i calcCube.sides[j].avgZ) { var temp = calcCube.sides[i].avgZ calcCube.sides[i].avgZ = calcCube.sides[j].avgZ calcCube.sides[j].avgZ = temp var temp = arrSortedIndex[i] arrSortedIndex[i] = arrSortedIndex[j] arrSortedIndex[j] = temp } } } // draw all sides ctx.clearRect (0,0, width, height); for (var i=0; i =0; i--) { if (isPointInPoly(calcCube.sides[arrSortedIndex[i]].polygon, inside)) { dragCube.side = arrSortedIndex[i] break; } } /* ctx.beginPath() ctx.arc(inside.x, inside.y, 1, 0, Math.PI*2, false); ctx.stroke(); */ } function mouseUp(e) { if (dragCube && !dragCube.moved) { var index = dragCube.side if (index>=0) { cube.sides[index].clickState = !cube.sides[index].clickState rotate(true) } } dragCube = null removeClass ($("cv"), "move") } /** buttons **/ function addClass(objElement, strClass) { if (!objElement) return; if (objElement.className) { removeClass(objElement, strClass); objElement.className += ' '+strClass; } else { objElement.className = strClass; } } function removeClass(objElement, strClass) { if (!objElement) return; if (objElement.className) { var arrList = objElement.className.split(' '); var strClassUpper = strClass.toUpperCase(); for (var i = 0; i קובייה גיררו את הקוביה עם העכבר על מנת לסובב אותה. ליחצו על פאה על מנת לסמן אותה. צבעוני שחור לבן שקוף מסגרת oh... and I don't mind much for the doctype, but thanks for commenting.
