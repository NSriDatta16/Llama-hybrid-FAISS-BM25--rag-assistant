[site]: stackoverflow
[post_id]: 233881
[parent_id]: 
[tags]: 
Spring + Tiles2 + Freemarker - integrate via Freemarker Servlet or via Spring's FreeMarkerViewResolver?

I was strugling today trying to migrate from Freemarker to Tiles2 + Freemarker. My freemarker templates use macros that come from spring.ftl. If I provide a fremarker servlet in web.xml, my model is visible to freemarker, but specific spring variables (naturally) are not populated into the model as springs FreemarkerView is responsible for that. If I configure a separate DispatcherServlet for specific url (say "/tpl/*") and configure freemarker resolver as default view resolver for that servlet and provide UrlFilenameViewController as default controller, special spring variables do get populated to model, but my own model is not visible: it is bound as a request attribute. I can access my model via ${Request.mymodel.myvar} but this way I have to change all my freemarker templates and I see something smelly in the idea. Now my solution was to extend UrlFilenameViewController and add my model from request to ModelAndView: protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) { ModelAndView mav = super.handleRequestInternal(request, response); HashMap map = new HashMap (); Enumeration attributes = request.getAttributeNames(); while(attributes.hasMoreElements()) { String attribute = attributes.nextElement(); if("model".equals(attribute)) { logger.debug("FreemarkerViewController.handleRequestInternal: putting attribute to model: " + attribute + "=" + request.getAttribute(attribute)); map.put(attribute, request.getAttribute(attribute)); } } logger.debug("FreemarkerViewController.handleRequestInternal: VIEW: " + mav.getViewName()); return new ModelAndView(mav.getViewName(), map); } But this solution is somewhat smelly too - if I add something to the model in my business controllers, I have to add it here. Is there an elegant solution for my problem?
