[site]: stackoverflow
[post_id]: 739320
[parent_id]: 739311
[tags]: 
It's really hard to tell without actually being able to see the code, but you should probably just consider importing the items that each module uses, in that module. It's not unusual to have a long list of imports - here's an example from my own website: # standard import inspect import linecache import neo_cgi import neo_cs import neo_util import os import random import sys import time from _apache import SERVER_RETURN from mod_python import apache from mod_python import util from mod_python.util import FieldStorage from os.path import dirname, isfile, join, splitext # set up path pydir = dirname(__file__) if pydir not in sys.path: sys.path.append(pydir) # things I wrote import auth import handlers.accounts, handlers.publish, handlers.standard import logger import markup import programs import summarize from auth import check_auth from common import hdf_iterate, load_hdf_cgi_vars, load_hdf_common_vars from common import hdf_insert_value, hdf_insert_list, hdf_insert_dict from handlers import chain, farm, opt from handlers import URIPrefixFilter from handlers.standard import TabBarHandler and I'm sure a lot of larger modules have even longer lists. In your case, maybe have a Settings module with a singleton object (or with the settings as module properties) and do import Settings or whatever.
