[site]: crossvalidated
[post_id]: 236388
[parent_id]: 232522
[tags]: 
In case anybody new in statistics stumble upon, here is summary of steps followed to address the use case. Pre-processing & Attribute selection. Pre processing involves data clean up like handling missing values in data set, conversion of continuous values into discrete values etc. In our case, we converted the Age into suitable age groups, This is to avoid too many possible prediction based on the Age value. Attribute Selection: Weka GUI offers good support for Attribute selection. You need to supply original dataset with necessary pre processing steps. Then apply various methods like use "BestFirst" or "rank". The output is set of attributes which you should consider for prediction. Useful link - http://machinelearningmastery.com/feature-selection-to-improve-accuracy-and-decrease-training-time/ Classification Algorithm selection: In this case, we wanted to predict a discrete class value i.e weather customer will Buy a vehicle or Not? And if he is gonna Buy, then what is the probability of purchase. Hence its a supervised learning case,with known response variable (Buy or Not-Buy) Since old sales data is available, hence it falls in category of "Rule-based reasoning" methods providing explicit knowledge model (Old sales data), which can be expressed by formal rules or not, to be applied for further prediction. So we decided to go with decision tree, we chose random Tree algorithm assuming random data distribution. Now we chose Cross Validation option to ensure that model built is tested on available data. So java code looks like, String [] agrTraning = {"-t","traningData.arff","-d","treemodel.model"}; RandomTree.runClassifier(new RandomTree(), agrTraning); //to predict by applying model over test data. above model is applied over test data testData.arff to predict output String [] agrTest = {"-l","treemodel.model","-T","testData.arff","-p","1-8","-distribution"}; RandomTree.runClassifier(new RandomTree(), agrTest); 3.To determine probable possible month in which new set of customer may be interested in buying. Here we had two predictions to be done, one is car model prediction and second month prediction.In WEKA GUI under "Cluster" tab, there are multiple algorithm which can be applied on data set & select one with lower value of "sum of squared errors" (Even though some claim that lower value of SSE does not guarantee accuracy of predictions since this SSE is for given trained data & est data may be altogether different than it) Sinnce we could get lower SSE for KNN, hence we applied same to predict the model IBk i = new IBk(); String [] agrTraning = {"-K","1", "-W" ,"0", "-A", "weka.core.neighboursearch.LinearNNSearch -A \"weka.core.EuclideanDistance -R first-last\"","-t","model_predict_traindata.arff","-d","KNNmodel.model"}; i.runClassifier(new IBk(), agrTraning); //to predict by applying model over test data. above model is applied over test data testData.arff to predict output String [] agrTest = {"-l","KNNmodel.model","-T","predict_model_test_data.arff","-p","0","-distribution"}; i.runClassifier(new IBk(), agrTest); We also felt that MEKA which has multiple class variable is better option to predict Model & time. But we are yet to get satisfactory results on "time prediction". Also a good link describing how to approach such problems https://www.ibm.com/developerworks/library/os-weka2/ Hope this helps someone!
