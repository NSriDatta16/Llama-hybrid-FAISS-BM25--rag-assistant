[site]: stackoverflow
[post_id]: 3626326
[parent_id]: 3625819
[tags]: 
I'd say it doesnt matter too much how you layout your application folderwise. Having files is a necessity and it has some impact on the application. Address that impact. It's not how you layout your folders, it's why. Find some ideas below. For security, you should put only those scripts into the webroot that are actually supposed to be directly servable to the world. Also, if you have files created during runtime, make sure those dont get overwritten when you deploy/update your application to your server. Whether you address that in your deployment routine or by the folder layout is up to you. For performance, take into account that including files/code that are/is not needed for a particular request will unneccessarily slow down your app. So does having many include_paths to search in. Make sure PHP can find the files it needs fast. For maintainability, use common sense. There is no rule that you have to have one file per class. There is also no rule that you have to follow PEAR file layout. PEAR is a widespread convention and a reasonable one, but throw your files into a single folder if it makes sense for this particular application. IMO, an application is not the files, it's the code within. It's much more important to have your code well organized than your files. Having a messy file layout is much less an issue than having a messy architecture.
