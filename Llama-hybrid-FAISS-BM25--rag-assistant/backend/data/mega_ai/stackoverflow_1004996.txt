[site]: stackoverflow
[post_id]: 1004996
[parent_id]: 1004974
[tags]: 
I would create a VIEW for several reasons A) A well constructed view does tend to perform faster than a query, though with query optimization you may not notice much of a difference. B) It keeps knowledge of the database structure within the database itself - adding a good layer of abstraction (as a side note, consider using a stored procedure rather than an inline query - this also keeps database knowledge within the database itself) C) If you do need to make a structural change to the database, you can keep the view consistent without needing to rebuild your code. AMENDMENT I'm going to amend this answer in light of some of the comments so as to clarify some points ... It is absolutely true that a standard view does not provide any real performance gain over a query. A standard view is materialized at run time which essentially makes it no different than a convenient way to execute a query of the same structure. An index view, however, is materialized immediately and the results are persisted in physical storage. As with any design decision, the use of an indexed view should be carefully considered. There is no free lunch; the penalty you pay for use of indexed views comes in the form of additional storage requirements and overhead associated with maintaining the view when there are any changes to the underlying database. These are best used in instances of commonly used complex joining and aggregation of data from multiple tables and in cases in which data is accessed far more frequently than it is changed. I also concur with comments regarding structural changes - addition of new columns will not affect the view. If, however, data is moved, normalized, archived, etc it can be a good way to insulate such changes from the application. These situations are RARE and the same results can be attained through the use of stored procedures rather than a view.
