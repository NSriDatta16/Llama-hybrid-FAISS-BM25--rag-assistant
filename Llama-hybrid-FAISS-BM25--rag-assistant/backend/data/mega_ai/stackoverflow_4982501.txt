[site]: stackoverflow
[post_id]: 4982501
[parent_id]: 4982466
[tags]: 
Your analysis is incorrect. Both of these are memory leaks. What you are doing is allocating a new copy of the object, assigning the value to the member, and then discarding the pointer to the allocated memory without freeing that memory. It is a memory leak in both cases. Now, consider the following code: class MemberType { public: MemberType() { std::cout This code will print both different types of constructors. Note that it did not take any initialization code at all for the member to be initialized in the default manner. Hence your new statement (or even an assignment without new) would be unnecessary in the default initialization case. When initializing members using a constructor other than the default constructor, the proper way to do this is with an initializer list. (The initializer list is what is happening with ": member_(5)" in the example. Please see the C++ FAQ on constructors for more information about constructing objects in C++.
