[site]: stackoverflow
[post_id]: 3453035
[parent_id]: 3435956
[tags]: 
Here is an example of how you could implement the web service dictionary in a MVVM fashion. It has three parts: The ObservablePropertyBacking class, a backing for properties (of T) that also implements IObservable The MyViewModel class. It contains a property CurrentText which uses an ObservablePropertyBacking as backing storage. It also observes the value of this property and uses it to call the dictionary web service. The MainView.xaml which contains a TextBox. Its Text property is two-way bound to the CurrentText property on the view model. MyViewModel.cs: class MyViewModel: INotifyPropertyChanged { #region INotifyPropertyChanged implementation public event PropertyChangedEventHandler PropertyChanged; private void RaisePropertyChanged(string p) { if (PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(p)); } #endregion public MyViewModel() { SetupProperties(); } #region CurrentText /* We use a special class for backing of the CurrentText property. This object * holds the value of the property and also dispatches each change in an observable * sequence, i.e. it implements IObservable . */ private ObservablePropertyBacking _textInput; public string CurrentText { get { return _textInput.Value; } set { if (value == _textInput.Value) { return; } _textInput.Value = value; RaisePropertyChanged("CurrentText"); } } #endregion /* Create property backing storage and subscribe UpdateDictionary to the observable * sequence. Since UpdateDictionary calls a web service, we throttle the sequence. */ private void SetupProperties() { _textInput = new ObservablePropertyBacking (); _textInput.Throttle(TimeSpan.FromSeconds(1)).Subscribe(UpdateDictionary); } private void UpdateDictionary(string text) { Debug.WriteLine(text); } } ObservablePropertyBacking.cs: public class ObservablePropertyBacking : IObservable { private Subject _innerObservable = new Subject (); private T _value; public T Value { get { return _value; } set { _value = value; _innerObservable.OnNext(value); } } public IDisposable Subscribe(IObserver observer) { return _innerObservable .DistinctUntilChanged() .AsObservable() .Subscribe(observer); } } MainPage.xaml:
