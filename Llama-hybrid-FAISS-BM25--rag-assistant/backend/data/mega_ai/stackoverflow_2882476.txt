[site]: stackoverflow
[post_id]: 2882476
[parent_id]: 2882162
[tags]: 
Depends on your development, testing and maintenance cycles. Also on the size and location of the development team (and of course organization). If you support several versions of the database you might need even more environments. In real world I found the following approach rather satisfying: single central database/application for testing purposes, gets all the changes by various developers periodically merged into it local copies for development (so you are free to drop and reload the whole database) upgrade scripts are maintained for any changes to schema, auxiliary and sample data sets Here are some further points: If two developers (two teams) are working on changes that can affect each other then they should complete their tasks independently and then integrate/merge and test. For this it is much better to have separate development environments (unless they have to work together in which case I consider them to be a part of the same team; still they can work on their own copies of the database and share it if necessary) If they work on the changes that do not influence each other they could work on the main server. Or on their own local copies of the database. So, developing on the local copy has all the benefits with no risk in a general case (when you support multiple versions of the system and maintain upgrade scripts anyway). Still it is great if you can share test cases so ability to dump/restore the database easily and quickly is a big plus. EDIT: All of the above assume that having a copy on the local machine of the whole system for testing purposes is feasible (size, performance, licenses, etc).
