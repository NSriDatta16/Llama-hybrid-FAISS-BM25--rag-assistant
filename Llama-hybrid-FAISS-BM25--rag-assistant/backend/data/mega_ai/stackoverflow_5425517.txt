[site]: stackoverflow
[post_id]: 5425517
[parent_id]: 5410244
[tags]: 
If you choose to program in Python: You could use the pygame package to easily capture keyboard events. The library was built to write games, but would probably give you the functionality that you are looking for with keydown/keyup events. It also handles mouse events and (since it is intended for games) has the ability to do graphics/text. The documentation is really good and it is cross platform. A possible downside is that you have to have a "screen" and it has to have focus. Here is a small example: import pygame def main(): """ Pygame Example """ pygame.init() screen = pygame.display.set_mode((200, 200)) app_running = True while app_running: # Get all key/mouse events from system. events = pygame.event.get() # Loop thru each event... for e in events: # Handle when the program is killed. if e.type == pygame.QUIT: app_running = False break # Handle key events. elif e.type == pygame.KEYDOWN: # Exit if escape is pressed. if e.key == pygame.K_ESCAPE: app_running = False # Do something when the right arrow # is pressed. elif e.key == pygame.K_RIGHT: print "right arrow pressed" # Do something when the left arrow # is pressed. elif e.key == pygame.K_LEFT: print "left arrow pressed" # and so on ... # Fill the screen to blank it. #screen.fill(mycolor) # Write someting to the screen to display. #screen.blit(some_image, some_position) # Flip to display. #screen.flip() pygame.quit() if __name__ == '__main__': main() If you are using a version of Windows you could use the msvcrt library but the event handling is not as nice as pygame : instead of events, you have to deal with raw keyboard output and it is a little less intuitive. Here is a small code snippet from Robert Gillies on ActiveState : import msvcrt def funkeypress(): """ Waits for the user to press any key including function keys. Returns the ascii code for the key or the scancode for the function key. """ while 1: if msvcrt.kbhit(): # Key pressed? a = ord(msvcrt.getch()) # get first byte of keyscan code if a == 0 or a == 224: # is it a function key? b = ord(msvcrt.getch()) # get next byte of key scan code x = a + (b*256) # cook it. return x # return cooked scancode else: return a # else return ascii code
