[site]: stackoverflow
[post_id]: 827146
[parent_id]: 825486
[tags]: 
Instead of a TStringList I would recommend using DeCAL's (on sf.net) DMap to store the items in memory. You could specify the phone is the key and store a Record/Class structure containing the rest of the record. So your Record class will be: TPhoneData = class number: string; access_count: integer; added: TDateTime. ... end; Then in code: procedure TSomeClass.RegisterPhone(number, phoneData); begin //FStore created in Constructor as FStore := DMap.Create; FStore.putPair([number, phoneData]) end; ... procedure TSoemClass.GetPhoneAndIncrement(number); var Iter: DIterator; lPhoneData: TPhoneData; begin Iter := FStore.locate([number]); if atEnd(Iter) then raise Exception.CreateFmt('Number %s not found',[number]) else begin lPhoneData := GetObject(Iter) as TPhoneData; lPhoneData.access_count = lPhoneData.access_count + 1; //no need to save back to FStore as it holds a pointer to lPhoneData end; end; DMap implements a red/black tree so the data structure sorts the keys for you for free. You can also use a DHashMap for the same affect and (arguably) increased speed. DeCAL is one of my favourite data structure libraries and would recommend anybody doing in-memory storage operations to have a look. Hope that helps
