[site]: stackoverflow
[post_id]: 4594242
[parent_id]: 4252003
[tags]: 
I'd probably go with something like this as an underlying data structure. -- (UI1) = UniqueIndex1 Book (Id (PK), Name) Verse (Id (PK), BookId (FK / UI1), ChapterNo (UI1), ParagraphNo (UI1), VerseNo (UI1), VerseText) Commentator (Id (PK), Name) Comment (Id (PK), VerseId (FK), CommentatorId (FK), CommentText) CommentOnComment (Id (PK), CommentorId (FK), CommentId (FK), CommentText) It doesn't make a lot of sense to split Chapter/Paragraph/Verse out to their own tables, since each will just be an integer value. Commentators would be able to comment on a verse that had already been entered without the need to re-enter the text themselves. Having comments on comments hints at some sort of on-going dialog, so you'd probably want to add some way of identifying the order in which these were made (e.g. record creation date / sequence no.). I've assumed that you're not looking for "comments on the comments on comments", which is tree-like and requires a self-referential table. If you want to provide a mechanism for easily referencing the verse (1,1,1,1 as suggested) this should be mapped at data-entry to the appropriate Id from the Verse table. You would have to be mindful of the Id assigned to each Book, in this case. Cross-Edition Comparisons? If your app will allow commenting on / comparison of different Editions, you could put Edition as an table alongside Book: Edition (Id (PK), Name) Book (Id (PK), Name) Verse (Id (PK), EditionId (FK / UI1), BookId (FK / UI1), ChapterNo (UI1), ParagraphNo (UI1), VerseNo (UI1), VerseText) I'm no expert when it comes to the differences between editions of the bible, but you would be able to readily identify the same passage in different editions by filtering on BookId, CapterNo, ParagraphNo, VerseNo, if that is your wont. Hope this helps, Brett.
