[site]: crossvalidated
[post_id]: 294710
[parent_id]: 294706
[tags]: 
Yes. The second format fits a straight-forward classification problem. We have multiple classes(Red/Yellow/Green/Blue) and text based features. There are two main components needed in order to creat a model that can predict class based on text. 1) Transforming the text into numeric representation(vectoring/space embedding). Tf-Idf is a common way accomplishing this, and word2vec has a powerful API with a lot of text features extraction capabilities. 2) Fitting a classifier(decision tree for example) to the transformed text based on the given labels.(preferably one that support probabilities assignment) There are many ways accomplishing these two tasks and if you know Python - Sklearn got you covered. For further reading look into document classification . According to your comment - if you do wish to predict multiple numeric values based on the text features them i would use the following logic. If multiple predicted variables are independent of each other - use multiple regressions, one for each color. If they are dependent - find the color that you can predict best, and use this model prediction(along with other text based features) to predict next model color. If your first model preforms well, then you wont be creating too much noise when moving to the second(and then to the third, forth.. ) If your first model performance is bad, you can try clustering the colors space(4 dimensional) and treating the clustered space as a classification problem. If you decide following this line, you need to make sure that the cluster sizes meets you prediction accuracy demand. Say you predict its cluster A, it could mean a lot of different color values, depends on cluster size. I had some success with the hierarchical prediction(feeding one model prediction as a feature to the next). But the setup was somewhat different. Hope this helps.
