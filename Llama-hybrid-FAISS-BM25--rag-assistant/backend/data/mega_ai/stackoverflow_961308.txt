[site]: stackoverflow
[post_id]: 961308
[parent_id]: 961250
[tags]: 
Spend a couple weeks studying Cal Henderson's Building Scalable Web Sites , Theo Schlossnagle's Scalable Internet Architectures , and of course the site you've already found, Todd Hoff's excellent highscalability.com . At a minimum you'll understand the tradeoffs between (A) and (B) and be able to make a better decision. Also spend time looking at Amazon Web Services , especially their EC2 (Elastic Cloud Computing) and S3 (Simple Storage System). A group at my company just deployed a web application on the Amazon infrastructure and it was dramatically simpler than trying to run it on their own physical hardware. If you're still at an early ideation stage and just want to work out your ideas and run small experiments, (A) would work well. But once you decide you want to deploy a small-scale trial leading into a full scale product, you absolutely need to follow (B). When you start to shift into (B) mode, I'd suggest you use AWS to save nearly all the effort and capital expenditure in setting up your own infrastructure. Use some of the time you'll save using AWS to thoroughly learn (B) and apply the lessons. Then if you succeed, your scalable architecture will allow you to rent as many AWS machine-hours as you need. If you don't succeed, you'll have learned a lot of very useful things to apply to your next startup idea (or job). Keep in mind this isn't an either-or choice too. Once you understand the basic principles behind scaling, you'll be able to start out along path (B) with something simple, while at the same time have the comfort in knowing how you'll progress to the next step. Danga has some very interesting presentations along these lines. Take a look at this one , and you'll see how they started off with just one machine, shifted to an app server machine and a database machine, to three app servers and a database machine, and so.
