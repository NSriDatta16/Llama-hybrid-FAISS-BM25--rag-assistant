[site]: stackoverflow
[post_id]: 4130251
[parent_id]: 4129965
[tags]: 
Everyone's got different ideas of what's top-notch, as there are fundamental design trade-offs with no correct answer (e.g. performance, memory usage, maintainability, reusability/generality, simplicity, clarity, concision, portability...), and one programmer's idea of elegance is another's pompous over-engineering, and yet another's over-simplistic amateurism... :-/. Boost code is good, but complicated by a different balance of concerns than most application code: generally portability, performance & memory usage, generality, elegance of usage, and minimising misusage are prioritised massively above simplicity, clarity or concision of implementation. I think you're better off picking some code that does something you're interested in, then in your passion to change it you'll learn see the implications of the design compromises, good and bad. A smaller project where you can rearchitect the solution and experiment with alternatives is great. No substitute for experience.
