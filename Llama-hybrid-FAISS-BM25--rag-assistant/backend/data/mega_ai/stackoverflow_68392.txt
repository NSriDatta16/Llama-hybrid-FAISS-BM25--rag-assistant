[site]: stackoverflow
[post_id]: 68392
[parent_id]: 66446
[tags]: 
JOGL is probably the only option worth considering. Notice that there are at least two options for integrating it into an SWT application. There's a GLCanvas that belongs to SWT and a GLCanvas that belongs to AWT. The one in SWT is not feature complete and is not really maintained. It's much better to use the AWT GLCanvas inside a SWT_AWT container. Some code from a recent project: import org.eclipse.swt.*; import org.eclipse.swt.layout.*; import org.eclipse.swt.widgets.*; import javax.media.opengl.*; import javax.media.opengl.glu.*; import org.eclipse.swt.awt.SWT_AWT; import org.eclipse.swt.events.*; public class Main implements GLEventListener { public static void main(String[] args) { Display display = new Display(); Main main = new Main(); main.runMain(display); display.dispose(); } void runMain(Display display) { final Shell shell = new Shell(display); shell.setText("Q*bert 3D - OpenGL Exercise"); GridLayout gridLayout = new GridLayout(); gridLayout.marginHeight = 0; gridLayout.marginWidth = 0; shell.setLayout(gridLayout); // this allows us to set particular properties for the GLCanvas GLCapabilities glCapabilities = new GLCapabilities(); glCapabilities.setDoubleBuffered(true); glCapabilities.setHardwareAccelerated(true); // instantiate the canvas final GLCanvas canvas = new GLCanvas(glCapabilities); // we can't use the default Composite because using the AWT bridge // requires that it have the property of SWT.EMBEDDED Composite composite = new Composite(shell, SWT.EMBEDDED); GridData ld = new GridData(GridData.FILL_BOTH); composite.setLayoutData(ld); // set the internal layout so our canvas fills the whole control FillLayout clayout = new FillLayout(); composite.setLayout(clayout); // create the special frame bridge to AWT java.awt.Frame glFrame = SWT_AWT.new_Frame(composite); // we need the listener so we get the GL events canvas.addGLEventListener(this); // finally, add our canvas as a child of the frame glFrame.add(canvas); // show it all shell.open(); // the event loop. while (!shell.isDisposed ()) { if (!display.readAndDispatch ()) display.sleep (); } }
