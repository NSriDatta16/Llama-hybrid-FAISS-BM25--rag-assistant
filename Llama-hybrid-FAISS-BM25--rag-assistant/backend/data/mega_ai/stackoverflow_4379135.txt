[site]: stackoverflow
[post_id]: 4379135
[parent_id]: 
[tags]: 
Data Architecture

Lately, our EF architecture has migrated to this. I'm looking for suggestions on how to best change it (or not). We have a "Data" project which contains our DataModel.EDMX file along with a Context.cs class which returns our entities object: public static DataModelEntities getContext() { return new DataModelEntities(); } We then create a "Business" project which contains almost a duplicate of the classes that the EF generates. For example, if we have a customer table, we create a CustomerBO class to hold the properties: public class CustomerBO { public int customerId {get;set;} public string firstName {get;set;} public string lastName {get;set;} public int orderCount {get;set;} } We could in theory use the Customer class created by the EF, but we don't because it usually contains a lot of extra stuff if we end up serializing it and passing it over the wire. Inside our CustomerBO class, we have methods for retrieval/saving of our data. For example, a getCustomerList method: public static List getCustomers() { using (var context = Context.getContext()) { var lst = from c in context.Customers select c; // Wrap the EF results to a List return toCustomerList(lst); } } /// Wraps a queryable object to a List private static List toCustomerList(IEnumerable queryCustomerData) { var data = from c in queryCustomerData select new CustomerBO() { customerId = c.customerId, firstName = c.firstName, lastName = c.lastName, orderCount = c.CustomerOrders.Count() }; return data.ToList(); } We always make sure to use the toCustomerList method to return ALL data back to the GUI. It assures us that any custom properties will be set, such as orderCount and doesn't require the developer to remember to add those custom properties to the main EF query. Overall, the design is solid and has solved numerous problems that we've bumped into over the years. However, there is one particular problem area that bothers me. We call our layer "Business" yet we have some semblance of "query" logic in them. Would there be a better way to architect this to be in-line with an established pattern and still achieve the same result?
