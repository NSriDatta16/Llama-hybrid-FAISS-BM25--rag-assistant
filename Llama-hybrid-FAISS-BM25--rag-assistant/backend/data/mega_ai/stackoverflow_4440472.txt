[site]: stackoverflow
[post_id]: 4440472
[parent_id]: 4440409
[tags]: 
A Hasher object would be redundant to the hashCode() method in the Object class. If you want to effect the nature of the hashing, you should override the hashCode() method defined on Object . Just be sure to override equals(Object) as well, since these two should always go together. A HashSet or other similar data structure will use the objects hashCode() method to get a hash value to determine bin storage. It will then use equals() to compare that object to other objects in the same bin to determine equality. The hash code generated needs to be unique to that specific class of object. This can be ensured simply by overriding the hashCode() method and doesn't need to change from implementation to implementation. A Hasher object would just obfuscate and serve no additional purpose. I couldn't think of a single use case where multiple hash codes would be needed for storage in different data structures.
