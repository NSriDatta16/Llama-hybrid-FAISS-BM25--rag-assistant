[site]: stackoverflow
[post_id]: 631860
[parent_id]: 631131
[tags]: 
I've worked in that environment and it became a real nightmare. We had a main application which was managed by one team and others managed the client specific customizations. THe problem then became that multiple clients got customization that were simliar but not exactly the same (although they could have been if anyone every looked at what other clients are doing before they design their own). Since the team that did the main application that applied to everybody was paid for by the company and not the individual clients, we never had enough people there to generalize specific client needs so that other could use them when the need arose and so created 20 different custom solutions to do the same thing. Further, as client deadlines tended to be sooner than the general team could handle (there were only two of them out of 100 developers), even when something would make a good generization, it was handled in the client database to meet the dealines. Soon there was such a big mess that refactoring the database to fix design flaws became impossible because there were so many different possible applications that could be affected, no one dared to try to refactor. Then what would happen would be a fix was put into place for a specific problem but the old method would stay there and each client would choose a differnt way to implement even the things in the main application database. Organizational changes to try to add a design team to this mess after it was created then caused an almost comlete halt the work that could be accomplished because none of the new work met the new design standards without a complete rewrite of the existing site (that of course the clients didn't want to pay for as the current version worked just fine to them). Stay very far away from this model!
