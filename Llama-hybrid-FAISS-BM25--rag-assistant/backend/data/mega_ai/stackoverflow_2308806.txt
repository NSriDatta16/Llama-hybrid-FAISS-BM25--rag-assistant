[site]: stackoverflow
[post_id]: 2308806
[parent_id]: 2308786
[tags]: 
I've always used abstract classes as a road-map for derived classes. A lot of times I'll have a series of classes that will all be similar and will be able to share functionality but they'll all be dissimilar enough that they need their own class. So the base class is not fully functional and it has a few methods that are designed for that particular class. So by declaring it abstract, you put the functionality in the namespace for general usage, but you are still able to confine its usage to that set of classes. Interfaces (to me) are nothing more than a blueprint. I've never NEEDED an interface, but when publishing an extendable API or making a framework within an organization, interfaces are good blueprints for how extendable classes should behave. It helps define a standard within the namespace for the functionality that is expected of a particular set of objects. I would say neither is specifically necessary, but they are tremendously helpful in segregating your code and defining how it should be used and/or extended.
