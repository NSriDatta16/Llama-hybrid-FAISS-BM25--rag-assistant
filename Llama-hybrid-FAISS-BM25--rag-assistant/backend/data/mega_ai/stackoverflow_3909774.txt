[site]: stackoverflow
[post_id]: 3909774
[parent_id]: 3909711
[tags]: 
The problem is that, every time you add to a vector, it might need to expand its internal memory . If it does so, it allocates a new piece of storage, copies everything over, and deletes the old one, invalidating iterators and pointers to all of its objects. As solution to your problem you could either avoid reallocation by reserving enough space upfront ( nodes.reserve(42) ) turn nodes into a std::list (which doesn't invalidate iterators or pointers to elements not directly affected by changes) store indexes instead of pointers. Besides your problem, but still worth mentioning: The legal use of identifiers starting with underlines is rather limited. Yours is legal, but if you don't know the exact rules, you might want to avoid using them. Your comparison operator doesn't tell that it won't change its left argument. Also, operators treating their operands equally (i.e. not modifying them, as opposed to, say, += ), are usually best implemented as free functions, rather than as member functions.
