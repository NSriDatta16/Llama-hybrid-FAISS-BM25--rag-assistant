[site]: stackoverflow
[post_id]: 1592620
[parent_id]: 1592608
[tags]: 
Updated Answer 2016: The winner of the PHC (Password Hashing Competion) was Argon2 . Hashing passwords with Argon2 is the best practice as of 2016. PHC ran from 2013 to 2015 as an open competitionâ€”the same kind of process as NIST's AES and SHA-3 competitions, and the most effective way to develop a crypto standard. We received 24 candidates, including many excellent designs, and selected one winner, Argon2, an algorithm designed by Alex Biryukov, Daniel Dinu, and Dmitry Khovratovich from University of Luxembourg. We recommend that use you use Argon2 rather than legacy algorithms. The reference implementation is available on GitHub . Updated Answer 2012: The original answer I gave below was once considered to be a best practice. However, advances in hash-computing technology have rendered these schemes vulnerable. Going forward, the only secure password hashing schemes are iterative hashes such as bcrypt and PBKDF2 . For a full discussion, see Jeff Atwood's analysis . Original Answer 2009: I recommend first prepending a salt value to your password, followed by hashing the resultant string with a reasonably strong hashing function like SHA256 . This secures against the obvious (plain text passwords) and the not so obvious (attack using Rainbow tables ). Keep in mind that if you store passwords in this way, you will not be able to retrieve a user's lost password. They'll only be able to reset passwords. This is because you'll be using a one way hash . But this limitation is generally worth the tradeoff for a more secure password storage system. Even if your database is compromised, your user's passwords will still be exceedingly difficult and probably unpractical to recover by a would be attacker.
