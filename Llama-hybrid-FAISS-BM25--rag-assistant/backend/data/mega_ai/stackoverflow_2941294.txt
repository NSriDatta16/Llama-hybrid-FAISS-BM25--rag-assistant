[site]: stackoverflow
[post_id]: 2941294
[parent_id]: 2912550
[tags]: 
There are many correct ways to organize a DDD application's solution, so be open to experiments. I changed my personal solution layout few times. I think the details depend on technology you use, but overall organization stay quite the same. One solution per bounded context One Domain project containing the model (entities, value objects, repository interfaces etc.) One Domain.Persistence (or DataAccess) project containing NHibernate mappings, repository implementations and NHibernate-specific types. If you have serious plans of having more than one persistence layer, you can name them Domain.Persistence.. One Application project containing the application layer code (services) Any number of UI or Windows Service projects Take a look at my DDDSample.Net project. It contains many variants of DDD solution for the same problem. I've just described the most typical simple one, but there are more complicated, specifically: A model with several layers A CQRS system An Event Sourcing CQRS system Hope that helps.
