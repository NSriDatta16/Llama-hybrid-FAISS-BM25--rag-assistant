[site]: stackoverflow
[post_id]: 1493330
[parent_id]: 1483892
[tags]: 
Sorry, but you're doing it wrong. People should have the following security guideline tattooed on the inside of their eyelids: Never keep plain text passwords in memory. The reason the WPF/Silverlight PasswordBox doesn't expose a DP for the Password property is security related. If WPF/Silverlight were to keep a DP for Password it would require the framework to keep the password itself unencrypted in memory. Which is considered quite a troublesome security attack vector. The PasswordBox uses encrypted memory (of sorts) and the only way to access the password is through the CLR property. I would suggest that when accessing the PasswordBox.Password CLR property you'd refrain from placing it in any variable or as a value for any property. Keeping your password in plain text on the client machine RAM is a security no-no. So get rid of that public string Password { get; set; } you've got up there. When accessing PasswordBox.Password , just get it out and ship it to the server ASAP. Don't keep the value of the password around and don't treat it as you would any other client machine text. Don't keep clear text passwords in memory. I know this breaks the MVVM pattern, but you shouldn't ever bind to PasswordBox.Password Attached DP, store your password in the ViewModel or any other similar shenanigans. If you're looking for an over-architected solution, here's one: 1. Create the IHavePassword interface with one method that returns the password clear text. 2. Have your UserControl implement a IHavePassword interface. 3. Register the UserControl instance with your IoC as implementing the IHavePassword interface. 4. When a server request requiring your password is taking place, call your IoC for the IHavePassword implementation and only than get the much coveted password. Just my take on it. -- Justin
