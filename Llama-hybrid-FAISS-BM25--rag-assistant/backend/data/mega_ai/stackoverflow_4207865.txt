[site]: stackoverflow
[post_id]: 4207865
[parent_id]: 4207696
[tags]: 
Stack and recursion is overkill for this problem. Just store each digit into a string and then reverse it before output. You need to work out how to call reverse with the string members for this to work. for_each can be used to output each element of the string. For extra credit (by virtue of conciseness and expressiveness), insert the number directly into an ostringstream and use that as the basis for your reversible string . My stringstream version of this code is 5 lines long. Logic is: declare stringstream declare int with value output int to stringstream create string from stringstream output the result digit by digit using for_each . You can sum the digits using accumulate on the string, provide you account for the fact that int('1') != 1 . That's an extra two lines, to sum the digits and output the result. The point is not that doing this via stack or recursion is BAD, it's just that once you get more familiar with the STL there are typically more elegant ways to do a job than the obvious. Implementing this using stack, recursion and any other ways you can think of makes a simple homework into a great real-world learning experience. Here's the accumulate code to sum the members of a string consisting of decimal digits, for example: #include #include std::string intString("654321"); int sum = accumulate(intString.begin(), intString.end(), 0) - (intString.size() * int('0')); EDIT: here's the full code, for comparative purposes: ostringstream intStream; int value(123456); intStream
