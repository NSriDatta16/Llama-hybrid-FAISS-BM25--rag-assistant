[site]: crossvalidated
[post_id]: 465028
[parent_id]: 
[tags]: 
Identify suitable scoring metric for food prediction

I am using GridSearchCV to find the best parameter that help me tune XGBoost for a food prediction algorithm. I am struggling to identify the best scoring metric that would result in the best profit (sales margin minus wastage costs) as this is ultimately what I am looking for. In running the script below and plugging it into the data (I reserved some data for testing only), I noticed that a higher R Square seems to be better than a lower RMSE in obtaining a higher profit. But I am struggling to find an explanation which will help me guide to the best scoring method. Here some infos on the situation: It costs me 6 USD to produce the product and 9 USD to sell, so my margin is 3 USD. Therefore my wastage is 6 USD multiplied by (production minus sales quantities), whereas my earnings are sales quantities multiplied by 3. Example: I produce 100, sell 70, waste 30 my earnings are 70*3 - 30*6 = 30 So I have an imbalance between sales and wastage. Main Question: Which scoring metric puts a higher penalty weight on the over-prediction? My current code: My current code: X = consumption[feature_names] y = consumption['Meal1'] data_dmatrix = xgb.DMatrix(data=X,label=y) # Create the parameter grid: gbm_param_grid gbm_param_grid = { 'min_child_weight':[1, 2], 'gamma': [0.05,0.06], 'reg_alpha':range(1, 2), 'colsample_bytree': [0.22, 0.23], 'n_estimators': range(28, 29), 'max_depth': range(3, 8), 'reg_alpha':range(1, 2), 'reg_lambda':range(1, 2), 'subsample': [0.7,0.8,0.9], 'learning_rate': [0.1,0.2], } fixed_params = {'objective':'reg:squarederror','booster':'gbtree' } # Instantiate the regressor: gbm gbm = xgb.XGBRegressor(**fixed_params) # Perform grid search: grid_mse grid_mse = GridSearchCV(estimator=gbm, param_grid=gbm_param_grid, scoring="r2", cv=5, verbose=1) # Fit grid_mse to the data grid_mse.fit(X,y) # Print the best parameters and lowest RMSE print("Best parameters found: ", grid_mse.best_params_) print("Lowest Score found: ", np.sqrt(np.abs(grid_mse.best_score_)))
