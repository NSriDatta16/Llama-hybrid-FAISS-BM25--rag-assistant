[site]: stackoverflow
[post_id]: 2102434
[parent_id]: 2101393
[tags]: 
The C standard document has an example that explains exactly the behavior of this type of construct (6.8.4.2/7 "The switch statement"): EXAMPLE In the artiÔ¨Åcial program fragment switch (expr) { int i = 4; f(i); case 0: i = 17; /* falls through into default code */ default: printf("%d\n", i); } the object whose identifier is i exists with automatic storage duration (within the block) but is never initialized, and thus if the controlling expression has a nonzero value, the call to the printf function will access an indeterminate value. Similarly, the call to the function f cannot be reached. So even though this is permitted, it's easily one of those "just because you can doesn't mean you should" situations. The construct is confusing and can easily lead to using an uninitialized variable since it can be very unclear whether and where the initialization occurs.
