[site]: crossvalidated
[post_id]: 188799
[parent_id]: 
[tags]: 
Using ML approaches to build a recommender engine for sales team

I work at a startup as a developer, but I wanted to help out our sales team with running some ML algorithms on the data. A bit of context: Most of our revenue comes from ad purchases, so in a nutshell, we have a sales team that approaches our leads to sell them ads. I wanted to make this process more efficient by building a recommendation engine that would make predictions about the likelihood of different leads buying our ads. I thought about it this way: Let's say, we have the following data from past sales efforts: {(x 1 , y 1 ), ..., (x n , y n )}, where x represents the sales leads and y is from a binary set of {0,1}, where 1 indicates that the lead converted and 0 denotes that she didn’t. And each sales lead has the following feature vector for x i in R d : x i = {x 1 , x 2 ,...,x d } Now, every time we're given a new x k and we'd like to find the corresponding y k for it. I thought it's a classical supervised learning problem and we can apply a discriminative approach (e.g. kNN, SVM, etc.) to solve it. Does that make sense to you so far or you’d suggest a completely different approach? One issue that I personally have with it is that, well it makes sense that the y for our data is binary, since those leads either converted or not. However, I think it makes more sense to product probabilistic values of y going forward, as that would be more benefitial to the sales team. I just don't know how to do that though, since this way there's a clear divide between the format of the past y values ({0,1}) and future ys that we're trying to predict.
