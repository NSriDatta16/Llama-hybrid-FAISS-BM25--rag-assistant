[site]: stackoverflow
[post_id]: 2172081
[parent_id]: 2171715
[tags]: 
This question is quite amusing since Design Patterns originate in C++. The GoF book (Gamma, Johnson, Helm, Vlissides) in Introduction : The purpose of this book is to record experience in designing object-oriented software as design patterns . Each design pattern systematically names, explains, and evaluates an important and recurring design in object-oriented systems. Our goal is to capture design experience in a form that people can use effectively. To this end we have documented some of the most important design patterns and present them as a catalog. and then in What is a Design Pattern : Although design patterns describe object-oriented designs, they are based on practical solutions that have been implemented in mainstream object-oriented programming languages like Smalltalk and C++ rather than procedural languages (Pascal, C, Ada) or more dynamic object-oriented languages (CLOS, Dylan, Self). We chose Smalltalk and C++ for pragmatic reasons: Our day-to-day experience has been in these languages, and they are increasingly popular. Also, Design Patterns have been criticized on the grounds that they're mere idioms, glorified to hide the fact. The critics (sorry, no sources) say that DPs just make up for lack of direct language support. That's definitely right at least to a certain degree: see how Scala's built-in support for Singleton obviates public static getInstance() , or recall that Visitor just simulates double dispatch. I think that the notion of DPs as implementation idioms is just as useful as the usual interpretation (capital D esign). First, we need to recognize that different languages call for different approaches, and the high-brow position of DPs certainly doesn't help. Second, common vocabulary of implementation techniques, specific for each language, is as important as a, possibly cross-language, vocabulary of design approaches.
