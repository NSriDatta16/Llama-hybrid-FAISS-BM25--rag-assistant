[site]: stackoverflow
[post_id]: 4413405
[parent_id]: 
[tags]: 
Is there a way to ensure atomicity with an operation in C?

I want this statement (within the body of the if statement) to be atomic: if(I2C1STATbits.P || cmd_buffer_ptr >= CMD_BUFFER_SIZE - 1) cmd_buff_full = 1; // should be atomic My processor (dsPIC33F) supports atomic bit set and clear. It also supports atomic writes for 16-bit registers and memory locations; these are single cycle. How can I be sure the operation will be implemented in an atomic fashion - is there a way to force the compiler to do this? In my case I'm fairly sure it will compile to be atomic, but I don't want it to change in future if I, for example, change some other code and it reorganises things, or if I update the compiler. For example, is there an atomic keyword? I'm working with GCC v3.23 - more specifically, MPLAB C30, a modified closed source version of GCC. I am working on a microcontroller, which has only interrupts; there is no concept of threads. The only possible problem with atomicity is that an interrupt may be triggered in the middle of a write over two cycles, if that is even possible.
