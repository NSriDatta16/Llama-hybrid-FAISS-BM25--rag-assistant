[site]: stackoverflow
[post_id]: 476142
[parent_id]: 
[tags]: 
The OLE way of doing drag&drop in wxPython

I have wxPython app which is running on MS Windows and I'd like it to support drag&drop between its instances (so the user opens my app 3 times and drags data from one instance to another). The simple drag&drop in wxPython works that way: User initiates drag : The source window packs necessary data in wx.DataObject(), creates new wx.DropSource, sets its data and calls dropSource.DoDragDrop() User drops data onto target window : The drop target calls library function GetData() which transfers actual data to its wx.DataObject instance and finally - dataObject.GetData() unpacks the actual data. I'd like to have some more sophisticated drag&drop which would allow user to choose what data is dragged after he drops. Scenario of my dreams : User initiates drag : Only some pointer to the source window is packed (some function or object). User drops data onto target window : Nice dialog is displayed which asks user which drag&drop mode he chooses (like - dragging only song title, or song title and the artists name or whole album of the dragged artist). Users chooses drag&drop mode : Drop target calls some function on the dragged data object, which then retrieves data from the drag source and transfers it to the drop target. The scenario of my dreams seems doable in MS Windows, but the docs for wxWidgets and wxPython are pretty complex and ambigious. Not all wx.DataObject classes are available in wxPython (only wx.PySimpleDataObject), so I'd like someone to share his experience with such approach. Can such behaviour be implemented in wxPython without having to code it directly in winAPI? EDIT: Toni Ru≈æa gave an answer with working drag&drop example, but that's not exactly the scenario of my dreams . His code manipulates data when it's dropped (the HandleDrop() shows popup menu), but data is prepared when drag is initiated (in On_ElementDrag() ). In my application there should be three different drag&drop modes, and some of them require time-consuming data preparation. That's why I want to postpone data retrieval to the moment user drops data and chooses (potentially costly) d&d mode. And for memory protection issue - I want to use OLE mechanisms for inter-process communication, like MS Office does. You can copy Excel diagram and paste it into MS-Word where it will behave like an image (well, sort of). Since it works I believe it can be done in winAPI. I just don't know if I can code it in wxPython.
