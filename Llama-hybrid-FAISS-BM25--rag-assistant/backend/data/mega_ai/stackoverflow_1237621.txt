[site]: stackoverflow
[post_id]: 1237621
[parent_id]: 
[tags]: 
WCF service with XML based storage. Concurrency issues?

I programmed a simple WCF service that stores messages sent by users and sends these messages to the intended user when asked for. For now, the persistence is implemented by creating username .xml files with the following structure: ... It is possible for more than one user to send a message to the same recipient at the same time, possibly causing the xml file to be updated concurrently. The WCF service is currently implemented with basicHttp binding, without any provisions for concurrent access. What concurrency risks are there? How should I deal with them? A ReadWrite lock on the xml file being accessed? Currently the service runs with 5 users at the most, this may grow up to 50, but no more. EDIT: As stated above the client will instantiate a new service class with every call it makes. (InstanceContext is PerCall, ConcurrencyMode irrelevant) This is inherent to the use of basicHttpBinding with default settings on the service. The code below: public class SomeWCFService:ISomeServiceContract { ClassThatTriesToHoldSomeInfo useless; public SomeWCFService() { useless=new ClassThatTriesToHoldSomeInfo(); } #region Implementation of ISomeServiceContract public void IncrementUseless() { useless.Counter++; } #endregion } behaves is if it were written: public class SomeWCFService:ISomeServiceContract { ClassThatTriesToHoldSomeInfo useless; public SomeWCFService() {} #region Implementation of ISomeServiceContract public void IncrementUseless() { useless=new ClassThatTriesToHoldSomeInfo(); useless.Counter++; } #endregion } So concurrency is never an issue until you try to access some externally stored data as in a database or in a file. The downside is that you cannot store any data between method calls of the service unless you store it externally.
