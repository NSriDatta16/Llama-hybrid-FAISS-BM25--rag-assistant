[site]: stackoverflow
[post_id]: 4090100
[parent_id]: 4089975
[tags]: 
Key-value pairs in std::map are sorted by keys - it's easy to sum the values pointed by keys smaller or larger than some value even with a for loop (if you do not want to use or learn to use STL algorithms). For keys lower than some value : std::map map; map[...] = ...; int count = 0, sum = 0; for (std::map ::const_iterator it = map.begin(); it != map.end() && it->first second; } // check for count == 0 int avg = sum / count; // do note integer division, change if appropriate For average of keys larger than value, use map.rbegin() (of type std::map ::const_reverse_iterator ), map.rend() and > . edit: STL algorithms might make the code shorter (where its used, that is). For example, to calculate the average of keys below value . int ipsum(int p1, const std::pair & p2) { return p1 + p2.second; } ... std::map map; int sum = std::accumulate(map.begin(), map.lower_bound(value), 0, ipsum);
