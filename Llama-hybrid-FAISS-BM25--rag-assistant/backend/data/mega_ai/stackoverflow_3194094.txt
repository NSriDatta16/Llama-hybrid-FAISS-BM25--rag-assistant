[site]: stackoverflow
[post_id]: 3194094
[parent_id]: 228723
[tags]: 
If you're willing to take your astronaut's helmet off for a minute, below is a lightweight logger I've written for Silverlight, for client-side logging (for use mainly with WCF operations but could be for any errors). It was originally used in Monotouch for iPhone apps, and has been adapted for IsolateStorage . You can use the Read method to display in a textbox if needed. Tested in SL4. /// /// A lightweight logging class for Silverlight. /// public class Log { /// /// The log file to write to. Defaults to "dd-mm-yyyy.log" e.g. "13-01-2010.log" /// public static string LogFilename { get; set; } /// /// Whether to appendthe calling method to the start of the log line. /// public static bool UseStackFrame { get; set; } static Log() { LogFilename = string.Format("{0}.log", DateTime.Today.ToString("dd-MM-yyyy")); UseStackFrame = false; } /// /// Reads the entire log file, or returns an empty string if it doesn't exist yet. /// /// public static string ReadLog() { string result = ""; IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForSite(); if (storage.FileExists(LogFilename)) { try { using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream(LogFilename,FileMode.OpenOrCreate,storage)) { using (StreamReader reader = new StreamReader(stream)) { result = reader.ReadToEnd(); } } } catch (IOException) { // Ignore } } return result; } /// /// Writes information (not errors) to the log file. /// /// A format string /// Any arguments for the format string. public static void Info(string format, params object[] args) { WriteLine(LoggingLevel.Info, format, args); } /// /// Writes a warning (non critical error) to the log file /// /// A format string /// Any arguments for the format string. public static void Warn(string format, params object[] args) { WriteLine(LoggingLevel.Warn, format, args); } /// /// Writes a critical or fatal error to the log file. /// /// A format string /// Any arguments for the format string. public static void Fatal(string format, params object[] args) { WriteLine(LoggingLevel.Fatal, format, args); } /// /// Writes the args to the default logging output using the format provided. /// public static void WriteLine(LoggingLevel level, string format, params object[] args) { string message = string.Format(format, args); // Optionally show the calling method if (UseStackFrame) { var name = new StackFrame(2, false).GetMethod().Name; string prefix = string.Format("[{0} - {1}] ", level, name); message = string.Format(prefix + format, args); } Debug.WriteLine(message); WriteToFile(message); } /// /// Writes a line to the current log file. /// /// private static void WriteToFile(string message) { try { IsolatedStorageFile storage = IsolatedStorageFile.GetUserStoreForSite(); bool b = storage.FileExists(LogFilename); using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream(LogFilename,FileMode.Append,storage)) { using (StreamWriter writer = new StreamWriter(stream)) { writer.WriteLine("[{0}] {1}", DateTime.UtcNow.ToString(), message); } } } catch (IOException) { // throw new Catch22Exception(); } } } /// /// The type of error to log. /// public enum LoggingLevel { /// /// A message containing information only. /// Info, /// /// A non-critical warning error message. /// Warn, /// /// A fatal error message. /// Fatal }
