[site]: datascience
[post_id]: 80641
[parent_id]: 80629
[tags]: 
A few thoughts: Defining you own CNN is generally not a great idea. I would consider simplifying to just a few convolutional layers followed by a dense layer. Once you've demonstrated that it learns something, you can add layers to improve the accuracy Also consider using an "out of the box" CNN. For small datasets, ResNet-18 is often a good choice to get things started (and it should be easy to find a keras implementation; you'll just have to provide the number of desired classes, etc.). You are approaching this as a classification problem. But this seems more like a regression problem. For example, it makes more sense to have a loss like $\mathcal{L} = (\text{predicted - expected})^2$ It looks like you're applying two softmax functions, which is a mistake (though if you're just taking the argmax, it probably doesn't matter). In a larger sense, I would recommend working through one of the MNIST tutorials and then swapping out the dataset (and then switching from classification to regression). Jumping in the deep end with a new task on a new dataset will lead to lots of spinning your wheels.
