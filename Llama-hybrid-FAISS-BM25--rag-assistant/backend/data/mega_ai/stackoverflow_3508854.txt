[site]: stackoverflow
[post_id]: 3508854
[parent_id]: 3480736
[tags]: 
Here is my two sense, for what it worth. First I would say, when you start the design of this, think of OOP and how it would apply to entities within the system. Users, User_Role, Roles, Role_Permissions, Accounts, Account_Types, Account_Type_Features, etc. USERS: - Should be allowed to use OpenID as it is gaining traction - The option to select between an ID or UUID for database portability USER ROLES: (not ACCOUNT TYPE ROLES) I would encourage you to be very specific here. For example, where do you draw the line between power user and administrator? What's the difference between ADMIN and OWNER? As long as these are clearly defined (and not blurry), then it will work. If there is any question amongst your user base, pretty soon you will have a convoluted set of roles and permissions. I would keep this to a minimum to keep things clean. Users will figure out how to work with what they are given. In addition, I would change this to USER TYPE ROLES. The roles should apply to the user, not the account. ROLE PERMISSIONS: (not ACCOUNT TYPE PERMISSIONS) This should be changed to ROLE PERMISSIONS. The permissions are extended to a users role, not an account or a user. In my experience the more clear the design, the less room for confusion down the road. Also, avoid ACL like the plague. Make it a simple one-to-one relationship. I have yet to find a reason to implement ACL for any web based system. Other permission based systems are much easier to understand, maintain, and use. There is no sense in complicating the matter. ACCOUNT TYPE FEATURES: Be careful not to obscure the Account Type Permissions and Account Type Features. Your first bullet point uses the word permissions. Change it to features. The account type will activate more advanced / premium features (not permissions). Permission Management: For a stateless application running on the web, sessions are the way to go. The advantage is no roundtrips to the DB to constantly check if a user is authorized. Permission::require() should follow the same parameter definitions as the Sessions though. This will prevent overlap of other subset of permissions. So the call would be something like Permission::require('User Management', 'Add User'); This means it would look for $_SESSION['All Permissions']['User Management']['Add User'] This will prevent ambiguity. Remember SIMPLE is BETTER.
