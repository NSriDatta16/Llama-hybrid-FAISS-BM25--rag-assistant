[site]: stackoverflow
[post_id]: 5156932
[parent_id]: 5156645
[tags]: 
The answer to both questions is yes. However, there is something a bit strange about your example. I've never come across a case where you would use a Thread as a primitive lock. And it what you are doing in the example doesn't seem to achieve anything. If threadObject is the same as Thread.currentThread() , then the call to interrupt() will just set this thread's interrupted flag ... which be noticed in that code fragment. if threadObject is some other Thread object then that thread will be interrupted. But we can't see (here) the code that that thread will be executing, and we don't know if it will be waiting on threadObject . If not the interrupt() and notify() well got to different threads ... The bottom line is that you wouldn't normally use a Thread object as a lock, and you wouldn't normally send use an interrupt() as an ersatz notify(). (Maybe this example is not intended to represent a real use-case.)
