[site]: stackoverflow
[post_id]: 226190
[parent_id]: 110436
[tags]: 
I read the other day about a neat trick to reduce header dependencies: Write a script that will find all #include statements remove one statement at a time and recompiles if compilation fails, add the include statement back in At the end, you'll hopefully end up with the minimum of required includes in your code. You could write a similar script that re-arranges includes to find out if they are self-sufficient, or require other headers to be included before them (include the header first, see if compilation fails, report it). That should go some way to cleaning up your code. Some more notes: Modern compilers (gcc among them) recognize header guards, and optimize in the same way as pragma once would, only opening the file once. pragma once can be problematic when the same file has different names in the filesystem (i.e. with soft-links) gcc supports #pragma once, but calls it "obsolete" pragma once isn't supported by all compilers, and not part of the C standard not only compilers can be problematic. Tools like Incredibuild also have issues with #pragma once
