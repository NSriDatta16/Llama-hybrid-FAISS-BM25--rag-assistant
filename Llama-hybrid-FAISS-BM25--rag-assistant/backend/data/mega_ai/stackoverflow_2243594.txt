[site]: stackoverflow
[post_id]: 2243594
[parent_id]: 2243429
[tags]: 
Dictionaries and arrays contain pointers to objects, but the internal implementation of these classes is not important. What you do need to pay attention to is the ownership of objects. Have a look at http://boredzo.org/cocoa-intro/ , in particular the memory management section which states: If you create an object with a method whose selector contains the word “alloc” or “new”, or with a function whose name contains the word “Create”, then you own it. If you make a copy of an existing object using a method whose selector contains the word “copy”, or from a function whose name contains the word “Copy” (or obtain an object from such a function), then you own the copy. Otherwise, you don't own the object. If you own an object, you are obliged to release it. In your case you are creating the objects using -alloc , so you own the objects and are responsible for them. So, yes, you do need to release them after adding them to the array. NSArray and NSDictionary retain their members, so once you've added an object to an array or dictionary you can safely release it, the object won't be deallocated until the array itself removes the object or is deallocated itself. To make it easier for yourself, you can use the convenience constructors which return autoreleased objects: //note the autorelease when the view controllers are created MyViewController* viewController = [[[MyViewController alloc] initWithNibName:@"myViewController" bundle:nil] autorelease]; NSDictionary *dOne = [NSDictionary dictionaryWithObject:viewController forKey:@"cellVCtr"]; MyViewController *objVCtr1 = [[[MyViewController alloc] initWithNibName:@"myViewController" bundle:nil] autorelease]; NSDictionary* dTwo = [NSDictionary dictionaryWithObject:objVCtr1 forKey:@"cellVCtr"]; MyViewController *objVCtr2 = [[MyViewController alloc] initWithNibName:@"myViewController" bundle:nil]; NSDictionary* dThree = [NSDictionary dictionaryWithObject:objVCtr2 forKey:@"cellVCtr"]; NSArray* arrTbl = [NSArray arrayWithObjects:dOne, dTwo, dThree, nil]; //do something with arrTbl //make sure you retain it if you want to hang on to it
