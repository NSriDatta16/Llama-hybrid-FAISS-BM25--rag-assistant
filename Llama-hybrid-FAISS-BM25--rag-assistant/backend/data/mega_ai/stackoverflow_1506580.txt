[site]: stackoverflow
[post_id]: 1506580
[parent_id]: 1506483
[tags]: 
The best way to answer whether you should cache something or not is the determine if it's actually impacting the performance of your site. With actual metrics. Don't guess. If it's not hurting anything and everything seems responsive, then I would say work on something else until the need arises. "Permature optimization is the root of all evil" has been said a time or two :) If you do choose to cache data, I'm unsure what you mean that everyone will be allowed to see it? If you mean the ASP.NET Caching framework ( HttpContext.Current.Cache ) then this lives in your server memory and is completely volatile (it would be wiped out at any time if memory pressure hits it). So make sure you keep that in mind and always check for null. To use it, you can simply use Cache.Insert() and it has a couple overloads to customize your caching preferences. Now if you are talking about caching something with browser cookies that is another story. Cookies are indeed stored in the browser, and unless you specify HttpOnly for the cookie, it can be read via javascript (which is only a problem if you have an XSS vulnerability somewhere -- because a malicious user can use javascript to "phone-home" users' private cookie data.) So don't put anything private into a cookie unless absolutely necessary, and if you do, you should specify HttpOnly and take appropriate steps to protect your users. You should definitely read more about XSS and other common HTTP security issues if security is a big concern for you. (And it should be :) UPDATED to address the question edit regarding Output Caching: Ok so you were specifically referring to Output Caching. Indeed that book mentions a security hole that I believe was patched before MVC 1 was released. The Authorize attribute should be smart enough to correctly handle Output Cacheing when these 2 attributes are used in conjunction. Perhaps that book was written during a preview release and is no longer relevant. I am quoting the following from Steve Sanderson (author of Pro ASP.NET MVC Framework) Update: Since the Beta release, the [Authorize] filter now does some clever trickery to co-operate with ASP.NET output caching. Specifically, it registers a delegate using HttpCachePolicy.AddValidationCallback(), so that it can intercept future cache hits and tell ASP.NET output caching not to use the cache when [Authorize] would reject the request. This solves the problem of ASP.NET output caching bypassing the [Authorize] filter. If you’re going to write your own authorization filter, be sure to derive it from AuthorizeAttribute so you can inherit this useful behaviour. Note that this doesn’t stop ASP.NET output caching from bypassing any of your other action filters, and it doesn’t add any support for partial caching. If that’s a problem for you then consider using [ActionOutputCache] (below) instead. It would be worthwhile to read his article (and his book, for that matter): http://blog.codeville.net/2008/10/15/partial-output-caching-in-aspnet-mvc/
