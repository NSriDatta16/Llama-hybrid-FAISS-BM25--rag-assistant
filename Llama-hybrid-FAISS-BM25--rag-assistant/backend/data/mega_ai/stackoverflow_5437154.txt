[site]: stackoverflow
[post_id]: 5437154
[parent_id]: 5429988
[tags]: 
As I promised, I have created an example in which there is no UIElements inside ViewModels . First of all, I removed lot of code from your method: public class MainViewModel { public MainViewModel() { //For demonstration this.ViewUIElements = new ObservableCollection { new VisualQueryObject{LabelType = "column", ColumnDiscriptor = new DescriptionModel("Table1", "Column2") }, new VisualQueryObject{LabelType = "controller"}, new VisualQueryObject{LabelType = "value"}, }; } public void UpdateCollection(VisualQueryObject helperVisualQueryObject) { VisualQueryObject visualQueryData = new VisualQueryObject(); //I would remove copying, but maybe it is intended behavior //***Taking a copy of the static DraggedData object to be bound visualQueryData.ColumnDiscriptor = helperVisualQueryObject.ColumnDiscriptor; visualQueryData.ComparedValue = helperVisualQueryObject.ComparedValue; visualQueryData.JoinWithColumnDescriptor = helperVisualQueryObject.JoinWithColumnDescriptor; visualQueryData.LabelType = helperVisualQueryObject.LabelType; visualQueryData.OperatorValue = helperVisualQueryObject.OperatorValue; this.ViewUIElements.Add(visualQueryData); //QueryDesignerModel.QueryDesignHelperCollection.Add(visualQueryData); //I don't know what this method does } public ObservableCollection ViewUIElements { get; private set; } } Then I created the DataTemplateSelector class where I've put if-clauses from the function in your question: public class QueryObjectDateTemplateSelector : DataTemplateSelector { public DataTemplate ColumnTemplate { get; set; } public DataTemplate ControllerTemplate { get; set; } public DataTemplate ValueTemplate { get; set; } public override DataTemplate SelectTemplate(object item, System.Windows.DependencyObject container) { var visualQueryData = item as VisualQueryObject; if (visualQueryData == null) return null; if (visualQueryData.LabelType == "column") return ColumnTemplate; else if (visualQueryData.LabelType == "controller") return ControllerTemplate; else if (visualQueryData.LabelType == "value") return ValueTemplate; else return null; } } And that's almost all. Everything else is in xaml : I have coded only the Column Template, other templates should be rewritten in xaml too. So now you can call this method: ((MainViewModel)this.DataContext).UpdateCollection(DraggedData as VisualQueryObject);
