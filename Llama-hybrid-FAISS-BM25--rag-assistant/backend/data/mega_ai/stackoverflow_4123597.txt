[site]: stackoverflow
[post_id]: 4123597
[parent_id]: 4123174
[tags]: 
You can use the yield statement to create a generator, I think is the most elegant solution: >>> def a(p): ... return p+1 ... >>> def gen(func, k=100): ... for x in range(k): ... yield lambda :func(x) ... >>> for item in gen(a, 100): ... item() ... 1 2 3 4 (...) 100 >>> But as you can see it goes only until 100 because of the range function: >>> range(100) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 4 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6 2, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 8 2, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] >>> You can use gen(a, 101) to solve this: >>> for item in gen(a, 101): ... item() ... 1 2 3 4 5 (...) 101 >>>
