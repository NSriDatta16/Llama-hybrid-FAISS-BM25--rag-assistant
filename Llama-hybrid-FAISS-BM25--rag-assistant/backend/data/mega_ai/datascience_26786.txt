[site]: datascience
[post_id]: 26786
[parent_id]: 26783
[tags]: 
K-means Your data has $7$ dimensions so k-means is worth to try. See the PCA of your data and check if any cluster is visible there as K-means will have a tough time if clusters are not Gaussian. the setup is: Each person is a point in $7D$ space (a $50\times7$ matrix) Apply PCA and inspect it. If different clusters visible then you will have a result Fuzzy C-Means I would suggest soft clustering algorithms. Soft clustering means that output is not binary (each sample belong only to one cluster and does not belong to others) but it assigns a membership score for belongness of each sample to each cluster. It minimizes the same objective function as K-means but with a weight which is calculated in each iteration and can be found here . Libraries usually have this algorithm under the name FCM . K-means Through GMM Another soft version of K-means is called Gaussian Mixture Models in which you try to estimate Gaussian kernels whose superposition describes the data (as you see again the Gaussian distribution of data is crucial here). The setup is: Choose a $k$ as the initial number of clusters and produce $k$ arbitrary Gaussian kernels (i.e. with arbitrary $\mu$ and $\sigma$) Use Expectation Maximization algorithm for updating the new clustering structure at each step. Spectral Clustering Define a Similarity Matrix from the data by any means. For example calculate the distances between points in $7D$ space and reverse that. Or apply a RBF kernel for determining the similarity between them. Then calculate the second eigenvalue-eigenvector pair according to sorted eigenvalues. Use K-means to cluster those elements of eigenvectors. If you have more detailed questions just drop a comment here. Good Luck!
