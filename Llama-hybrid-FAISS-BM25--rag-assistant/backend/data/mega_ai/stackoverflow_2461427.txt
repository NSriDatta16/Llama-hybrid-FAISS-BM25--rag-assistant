[site]: stackoverflow
[post_id]: 2461427
[parent_id]: 2460402
[tags]: 
C# and C++ have deceptively similar syntax, but in reality they are very different languages. As GMan said, maybe it's best if you start from scratch. Taking shortcuts when learning C++ will bite you badly for sure, but anyway, here's a quick list of things to focus on in the beginning: most important: C++ is native, lower level language and it is assuming you know what you are doing. The framework/runtime will not hold your hand and merely slap you if you mess up, weird stuff will happen instead and if you are lucky the OS will terminate you with great prejudice. Be prepared for that and be patient. class and struct syntax - almost the same as C#, but still, there are minor differences the big four: default constructor, copy-constructor, assignment operator and destructor of a class. C# lacks copy-construction and assignment, cloning is the closest thing there. In C# destructors are non-deterministic, might run on a different thread and are generally discouraged in favor of IDisposable; C++ destructors on the other hand are deterministic and very important. stack vs heap allocation - to new or not to new - in C++ there are no value and reference types, no boxing and unboxing, the decision whether to allocate on the stack or on the heap is made per variable. You could have ints allocated on the heap and classes (objects) on the stack. memory management and RAII - C++ lacks garbage collection, you should clean up your own trash. Be aware that there are smart pointers (in boost libraries and also in tr1) that will make memory management almost as easy as in C# templates - don't go deep with templates, as a C++ beginner it's fairly safe to look at them as generics, that should be enough to let you use... STL - know your framework exceptions - if you use them, beware there's no finally in C++, all that work should be done in destructors (see RAII)
