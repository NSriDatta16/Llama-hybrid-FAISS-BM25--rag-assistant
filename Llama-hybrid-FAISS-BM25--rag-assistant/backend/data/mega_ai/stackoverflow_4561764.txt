[site]: stackoverflow
[post_id]: 4561764
[parent_id]: 
[tags]: 
What can I use to sanitize received HTML while retaining basic formatting?

This is a common problem, I'm hoping it's been thoroughly solved for me. In a system I'm doing for a client, we want to accept HTML from untrusted sources (HTML-formatted email and also HTML files), sanitize it so it doesn't have any scripting, links to external resources, and other security/etc. issues; and then display it safely while not losing the basic formatting. E.g., much as an email client would do with HTML-formatted email, but ideally without repeating the 347,821 mistakes that have been made (so far) in that arena. :-) The goal is to end up with something we'd feel comfortable displaying to internal users via an iframe in our own web interface, or via the WebBrowser class in a .Net Windows Forms app (which seems to be no safer, possibly less so), etc. Example below. We recognize that some of this may well muck up the display of the text; that's okay. We'll be sanitizing the HTML on receipt and storing the sanitized version (don't worry about the storage part — SQL injection and the like — we've got that bit covered) . The software will need to run on Windows Server. COM DLL or .Net assembly preferred. FOSS markedly preferred, but not a deal-breaker. What I've found so far: The AntiSamy.Net project (but it appears to no longer be under active development , being over a year behind the main — and active — AntiSamy Java project ) . Some code from our very own Jeff Atwood, circa three years ago (gee, I wonder what he was doing...) . The HTML Agility Pack (used by the AntiSamy.Net project above) , which would give me a robust parser; then I could implement my own logic for walking through the resulting DOM and filtering out anything I didn't whitelist. The agility pack looks really great, but I'd be relying on my own whitelist rather than reusing a wheel that someone's already invented, so that's a ding against it. The Microsoft Anti-XSS library What would you recommend for this task? One of the above? Something else? For example, we want to remove things like: script elements link , img , and such elements that reach out to external resources (probably replace img with the text "[image removed]" or some such) embed , object , applet , audio , video , and other tags that try to create objects onclick and similar DOM0 event handler script code href s on a elements that trigger code (even links we think are okay we may well turn into plaintext that users have to intentionally copy and paste into a browser). __________ (the 722 things I haven't thought of that are the reason I'm looking to leverage something that already exists) So for instance, this HTML: Example Hi there! Here's my nefarious tracker image: would become Example Hi there! Here's my nefarious tracker image: [image removed] (Note we removed the link and the onclick entirely, and replaced the img with a placeholder. This is just a small subset of what we figure we'll need to strip out.)
