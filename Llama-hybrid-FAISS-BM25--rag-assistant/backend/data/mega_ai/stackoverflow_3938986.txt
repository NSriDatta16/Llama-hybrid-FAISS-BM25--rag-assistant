[site]: stackoverflow
[post_id]: 3938986
[parent_id]: 1772212
[tags]: 
If you don't do a repo for the sub parts of the plan, how do you handle loading only the parts you need? If, for example, I wanted to get a list of all the plans in the system and choose one to view in detail you absolutely don't want to return fully populated plan object just to show a summary list. That would kill performance in so many ways. Instead you'd just want a lean plan object and maybe the count of how many areas it had (rather than all the fully populated areas). And, on top of it, you'd want to do all this in a reusable generic fashion. I would lean toward the notion of separate repositories for each prime entity you wanted to work with. Then manage relationships between those through some sort of aggregator. Or, perhaps you pass a list of property references and associated delegates (or expression trees) to each retrieval method on your aggregate root repo to tell it which items to fill. But you still have the issue of 2nd level, third level, 4th level, etc. relationships. Back to the original idea of just needing to show a list of plans and a count of the areas...you wouldn't want to return all the area to just get a count. And that's just retrieval. What if your Plan had 5 Areas and each Area had a series of Envelopes and you decided to add, edit, or delete an Envelope from an Area. How would you walk the tree to figure out what to update when you're at the Plan level? Seems it would make more sense to manipulate an Envelope through and Envelope repo. It seems to me the repo handles data retrieval and another engine/class handles relationship fixup.
