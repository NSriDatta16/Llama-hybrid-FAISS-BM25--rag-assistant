[site]: stackoverflow
[post_id]: 728838
[parent_id]: 728724
[tags]: 
This oughta get you close, in C#: class Program { public class Node { private string _term; private Dictionary > _related = new Dictionary >(); public Node(string term) { _term = term; } public void Add(string phrase, Node previous, string [] phraseRemainder, Dictionary existing) { Node next= null; if (phraseRemainder.Length > 0) { if (!existing.TryGetValue(phraseRemainder[0], out next)) { existing[phraseRemainder[0]] = next = new Node(phraseRemainder[0]); } next.Add(phrase, this, phraseRemainder.Skip(1).ToArray(), existing); } _related.Add(phrase, new KeyValuePair (previous, next)); } } static void Main(string[] args) { string [] sentences = new string [] { "The beautiful sky", "Beautiful sky dream", "beautiful dream" }; Dictionary parsedSentences = new Dictionary (); foreach(string sentence in sentences) { string [] words = sentence.ToLowerInvariant().Split(' '); Node startNode; if (!parsedSentences.TryGetValue(words[0],out startNode)) { parsedSentences[words[0]] = startNode = new Node(words[0]); } if (words.Length > 1) startNode.Add(sentence,null,words.Skip(1).ToArray(),parsedSentences); } } } I took the liberty of assuming you wanted to preserve the actual initial phrase. At the end of this, you'll have a list of words in the phrases, and in each one, a list of phrases that use that word, with references to the next and previous words in each phrase.
