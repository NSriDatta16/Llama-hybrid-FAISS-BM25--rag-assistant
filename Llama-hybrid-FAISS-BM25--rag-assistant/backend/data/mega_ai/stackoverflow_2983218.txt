[site]: stackoverflow
[post_id]: 2983218
[parent_id]: 2983216
[tags]: 
There are three main ways of doing this. The first is to not create memory leaks in the first place. Defensive programming techniques are invaluable here. See this excellent presentation for a summary of this issues, or the relevant chapter in Secure C Coding . I am more familiar with C than C++, but I understand that C++'s smart pointers are useful here. A second approach static analysis , which attempts to detect errors in your source-code. The original tool in this category is lint , which is now sadly outdated. The best tools, as far as I know, are commercial such as coverty . However, some free tools do exist . The third approach is to detect memory leaks at runtime, like INSURE++ does. Valgrind is excellent here and highly recommended. It may help catch bugs you've already introduced. It is especially helpful if you do have a test suite that has good code coverage.
