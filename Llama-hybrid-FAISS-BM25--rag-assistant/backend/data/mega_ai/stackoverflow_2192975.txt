[site]: stackoverflow
[post_id]: 2192975
[parent_id]: 2192658
[tags]: 
In Python 2.6 or newer, use format syntax : '{0:0=#10b}'.format(my_num)[2:] # '00001010' One of the neat things about Python strings is that they are sequences. If all you need to do is iterate through the characters, then there is no need to convert the string to a list. Edit : For steganography, you might be interested in converting a stream of characters into a stream of bits. Here is how you could do that with generators: def str2bits(astr): for char in astr: n=ord(char) for bit in '{0:0=#10b}'.format(n)[2:]: yield int(bit) And to convert a stream of bits back into a stream of characters: def grouper(n, iterable, fillvalue=None): # Source: http://docs.python.org/library/itertools.html#recipes "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx" return itertools.izip_longest(*[iter(iterable)]*n,fillvalue=fillvalue) def bits2str(bits): for b in grouper(8,bits): yield chr(int(''.join(map(str,b)),2)) For example, you could use the above functions like this: for b in str2bits('Hi Zvarberg'): print b, # 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 1 1 1 # To show bits2str is the inverse of str2bits: print ''.join([c for c in bits2str(str2bits('Hi Zvarberg'))]) # Hi Zvarberg Also, SO guru Ned Batchelder does some steganography-related experiments using Python and PIL here . You may be able to find some useful code there. If you find you need more speed (and still want to code this in Python), you may want to look into using numpy .
