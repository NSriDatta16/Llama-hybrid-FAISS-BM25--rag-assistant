[site]: stackoverflow
[post_id]: 1252950
[parent_id]: 1252900
[tags]: 
The way I think of big O notation is how long does it take to complete, which is complexity. For example if you have a bubble sort, as you go to items to be sorted it take approximately n*n operations to complete, which is O(N^2). For binary search, as you increase n in size, you have log2(n) operations to find the value. Since the number of operation is in terms of log then O(log N) for binary search (where log is log of 2). For what you have, has increase you have N number of operations (this is even if you offsetting) as it is increasing in a linear fashion, which is O(N). This is the notation for linear search as it may take n/2 options an average to find a value, it is still O(N). I would look at Wikipedia on O(N) notation . It has a more technical explanation, and more big O notation information.
