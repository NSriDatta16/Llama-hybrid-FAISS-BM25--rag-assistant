[site]: stackoverflow
[post_id]: 5651958
[parent_id]: 1005673
[tags]: 
You should use community , if your module is planned to be distributed to the public, to allow other Magento developers to use your module in their own Magento projects, too. That's what Varien calls a Magento Extension . You should use local instead, if you do not want to distribute to the public, but are developing the module mainly for a specific shop (or maybe your personal use) only. To better understand the difference between the local and the community folder, it helps to know how the Magento Autoloader works: When a class is about to be instantiated in Magento, the Autoloader will search for matching classes in the order given by PHPs include_path . Magento initially sets its include_path in app/Mage.php upon start: : define('DS', DIRECTORY_SEPARATOR); define('PS', PATH_SEPARATOR); define('BP', dirname(dirname(__FILE__))); Mage::register('original_include_path', get_include_path()); : $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'local'; $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'community'; $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'core'; $paths[] = BP . DS . 'lib'; $app_path = implode(PS, $paths); set_include_path($app_path . PS . Mage::registry('original_include_path')); : The Magento Autoloader searches paths in the same order they appear in include_path : 1st /app/code/local/ 2nd /app/code/community/ 3rd /app/code/core/ 4th /lib/ : Assuming you are trying to instantiate a class named Namespace_Module_Block_Hello for example, that would result in having Magentos Autoloader searching the paths given by include_path for a file named Namespace/Module/Block/Hello.php *: 1st /app/code/local/Namespace/Module/Block/Hello.php 2nd /app/code/community/Namespace/Module/Block/Hello.php 3rd /app/code/core/Namespace/Module/Block/Hello.php 4th /lib/Namespace/Module/Block/Hello.php : The first file found will win, i.e. get instantiated. So if the same file exists in local AND community for example, the local one would be instantiated. This allows developers to freely extend/override/overload/ignore classes. * see lib/Varien/Autoload.php::autoload() for name conversion rules
