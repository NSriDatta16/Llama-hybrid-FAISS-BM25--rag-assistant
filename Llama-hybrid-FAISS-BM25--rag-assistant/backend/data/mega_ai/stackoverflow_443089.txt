[site]: stackoverflow
[post_id]: 443089
[parent_id]: 443000
[tags]: 
It sounds like your optimizer needs two kinds of testing: testing the overall effectiveness of the algorithm testing the integrity of your implementation of the algorithm Since the algorithm involves randomization, (1) is difficult to unit-test. Any test of a random process will fail some proportion of the time. You need to know some statistics to understand just how often it should fail. There are ways to trade off between how strict your test is and how often it fails. But there are ways to write unit tests for (2). For example, you could reset the seed to a particular value before running your unit tests. Then the output is deterministic. That would not allow you to assess the average effectiveness of the algorithm, but that's for (1). Such a test would serve as a trip wire: if someone introduced a bug into the code during maintenance, a deterministic unit test might catch the bug. There may be other things that could be unit tested. For example, maybe your algorithm is guaranteed to return values in a certain range no matter what happens with the randomized part. Maybe some value should always be positive, etc. Update : I wrote a chapter about this problem in the book Beautiful Testing. See Chapter 10: Testing a Random Number Generator .
