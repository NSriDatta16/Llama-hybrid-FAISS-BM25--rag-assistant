[site]: crossvalidated
[post_id]: 430994
[parent_id]: 
[tags]: 
Improving a landau-gaussian convoluted fit using ROOT

I am using the landau-gaussian convolution fit (available here - https://root.cern.ch/root/html/tutorials/fit/langaus.C.html ) for my data but I fail to understand the behaviour of the fits. For some chips, it is closer to expectation (figure 1) while for some it is totally off (figure 2). Also, I noticed that the fit somehow worsens drastically when I have more data (comparing figures 1 and 2 with figure 3). I am probably not very good with the concepts of fitting, especially with those of a convoluted landau-gaussian fit and therefore, not able to figure out the reason behind this. I donâ€™t know what I should do in order to improve the fit. Any help in this regard is highly appreciated! :) The code and figures are hereunder: #include "../inc/myheaderfile.h" #include "mylangaus.C" #include "TPaveStats.h" using namespace std; int main(int argc, char** argv) { ifstream histFile; histFile.open("histolist_new.txt"); string histName; int count = 0; string inFileName = argv[1]; TFile *inFile = new TFile(inFileName.c_str()); TFile *outFile = new TFile("langaufit.root", "RECREATE"); while(getline(histFile,histName) && count Get(histName0.c_str()); TH1D *hist1 = (TH1D*)inFile->Get(histName1.c_str()); if(hist0->GetEntries() == 0 || hist1->GetEntries() == 0) continue; /* The Landau * Gaussian parameters: par[0]=Width (scale) parameter of Landau density par[1]=Most Probable (MP, location) parameter of Landau density par[2]=Total area (integral -inf to inf, normalization constant) par[3]=Width (sigma) of convoluted Gaussian function Variables for langaufit call: his histogram to fit fitrange[2] lo and hi boundaries of fit range startvalues[4] reasonable start values for the fit parlimitslo[4] lower parameter limits parlimitshi[4] upper parameter limits fitparams[4] returns the final fit parameters fiterrors[4] returns the final fit errors ChiSqr returns the chi square NDF returns ndf */ /* --------- Hist0 Fit --------- */ // Setting fit range and start values double fr0[2], sv0[4], pllo0[4], plhi0[4]; fr0[0] = 0.; fr0[1] = 200.; sv0[0] = 1.; sv0[1] = 55.; sv0[2] = 50000.0; sv0[3] = 5.; pllo0[0] = 0.5; pllo0[1] = 45.; pllo0[2] = 1.0; pllo0[3] = 1.; plhi0[0] = 3.; plhi0[1] = 65.; plhi0[2] = 100000.0; plhi0[3] = 10.; // Return values double fp0[4], fpe0[4]; double chisqr0; int ndf0; TF1 *fitVAEnergy0 = langaufit(hist0,fr0,sv0,pllo0,plhi0,fp0,fpe0,&chisqr0,&ndf0); double Peak0, FWHM0; langaupro(fp0,Peak0,FWHM0); /* --------- Hist1 Fit --------- */ // Setting fit range and start values double fr1[2], sv1[4], pllo1[4], plhi1[4]; fr1[0] = 0.; fr1[1] = 200.; sv1[0] = 3.; sv1[1] = 40.; sv1[2] = 50000.0; sv1[3] = 5.; pllo1[0] = 0.5; pllo1[1] = 30.; pllo1[2] = 1.0; pllo1[3] = 1.; plhi1[0] = 5.; plhi1[1] = 50.; plhi1[2] = 100000.0; plhi1[3] = 10.; // Return values double fp1[4], fpe1[4]; double chisqr1; int ndf1; TF1 *fitVAEnergy1 = langaufit(hist1,fr1,sv1,pllo1,plhi1,fp1,fpe1,&chisqr1,&ndf1); // https://root.cern.ch/root/html/tutorials/fit/langaus.C.html double Peak1, FWHM1; langaupro(fp1,Peak1,FWHM1); // https://root.cern.ch/root/html/tutorials/fit/langaus.C.html /* --------- Print & Save --------- */ TCanvas *c1 = new TCanvas("c1",histName.c_str(),800,600); // Global style settings gStyle->SetOptStat(1111); gStyle->SetOptFit(111); gStyle->SetLabelSize(0.03,"x"); gStyle->SetLabelSize(0.03,"y"); hist0->SetTitle(histName.c_str()); hist0->SetMaximum((hist0->GetMaximum())*1.1); hist0->Draw("hist"); fitVAEnergy0->SetLineColor(kRed); fitVAEnergy0->Draw("hist same"); hist1->Draw("hist sames"); fitVAEnergy1->SetLineColor(kBlue); fitVAEnergy1->Draw("hist sames"); gPad->Update(); TPaveStats* sb0=(TPaveStats*)hist0->FindObject("stats"); sb0->SetX1NDC(.65); sb0->SetX2NDC(.85); sb0->SetY1NDC(.65); sb0->SetY2NDC(.85); sb0->SetTextColor(kRed); TPaveStats* sb1=(TPaveStats*)hist1->FindObject("stats"); sb1->SetX1NDC(.65); sb1->SetX2NDC(.85); sb1->SetY1NDC(.4); sb1->SetY2NDC(.6); sb1->SetTextColor(kBlue); c1->Print(); outFile->WriteTObject(c1); delete c1; count++; cout cd(); outFile->Write(); outFile->Close(); return 0; } // end of main
