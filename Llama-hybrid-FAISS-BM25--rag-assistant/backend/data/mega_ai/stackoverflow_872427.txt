[site]: stackoverflow
[post_id]: 872427
[parent_id]: 870516
[tags]: 
to avoid further answers like jwp's one, note that, for this project, I absolutely need my program being a standalone executable because it is absolutely impossible to have a python VM on the target platform where the executable will run. I have exactly the same hw available for compiling, so luckly I don't need to cross-compile (but I'd do the development on a more friendly Linux). I'd also like to test if my code compile in Cython from the beginning, not to premature optimize, but just to be sure that I'm not going too far with the use of incompatible features, which would require a painful refactoring if Cython would be seriously needed. If all you're looking for is to have a stand-alone executable, you don't need to run Cython. There are a few good libraries for doing this: py2exe py2app However, to run Python code, you're simply going to have to install an interpreter or virtual machine on the target machine in some form or fashion. The solutions I presented involve merely embedding the interpreter to make it easier to install. In fact, I'm pretty sure (but could be wrong) that Cython won't allow you to build a stand-alone executables. It's mainly meant for creating extensions to the Python interpreter. However, there are a couple of other alternatives. If you have a Java interpreter on the target machine, you can run Jython . There's also a IronPython for .net. However, you will still have to distribute the runtimes for these languages with your project. In short, if you want a stand-alone executable with no dependencies, your only option is pretty much to go with straight C or C++.
