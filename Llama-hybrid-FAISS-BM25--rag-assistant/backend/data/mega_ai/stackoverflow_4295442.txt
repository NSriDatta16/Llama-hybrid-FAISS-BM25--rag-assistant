[site]: stackoverflow
[post_id]: 4295442
[parent_id]: 4295384
[tags]: 
JUST MY correct OPINION's opinion is indeed correct. I can't say why Guido did it this way but I can say why I'm glad that he did. I can look at code and know right away if some expression is accessing the 'b' key in a dict-like object a , the 'b' attribute on the object a , a method being called on or the b index into the sequence a . Python doesn't have to try all of the above options every time there is an attribute lookup . Imagine if every time one indexed into a list, Python had to try three other options first. List intensive programs would drag. Python is slow enough! It means that when I'm writing code, I have to know what I'm doing. I can't just toss objects around and hope that I'll get the information somewhere somehow. I have to know that I want to lookup a key, access an attribute, index a list or call a method. I like it that way because it helps me think clearly about the code that I'm writing. I know what the identifiers are referencing and what attributes and methods I'm expecting the object of those references to support. Of course Guido Van Rossum might have just flipped a coin for all I know (He probably didn't) so you would have to ask him yourself if you really want to know. As for your comment about having to surround these things with try blocks, it probably means that you're not writing very robust code. Generally, you want your code to expect to get some piece of information from a dict-like object, list-like object or a regular object. You should know which way it's going to do it and let anything else raise an exception. The exception to this is that it's OK to conflate attribute access and method calls using the property decorator and more general descriptors. This is only good if the method doesn't take arguments.
