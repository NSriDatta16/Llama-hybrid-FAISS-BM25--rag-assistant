[site]: stackoverflow
[post_id]: 3631191
[parent_id]: 3554965
[tags]: 
I have implemented a chess board for my Silverlight Online Chess system. Here is how I did it. I made a seperate user control for the chess board I added a grid 8x8 onto the control I then added 64 Borders shading each one a different color (dark squares and light squares) Make sure to name each one. Each of the borders were placed on the grid using the Grid.Row and Grid.Col properties. Within each Border I added an Image that will hold the chess piece image. You will have to code some methods around setting the image to the correct chess piece based on your current game state. Each of the Images received the same event (this is important), all 64 call the same piece of code: MouseLeftButtonDown="Image_MouseLeftButtonDown" MouseMove="Image_MouseMove" MouseLeftButtonUp="Image_MouseLeftButtonUp" The idea behind these 3 events is that we record when I click on the image (MouseLeftButtonDown) that gets me the origin of the click, then I call the event as the mouse is moving, that allows me to update the screen as the piece is moving, and the last event I record when I let go of the mouse button (MouseLeftButtonUp), this allows me to get the destination and send the move to my chess engine. Once the move is recorded by the chess engine I just redraw the chess board. private void Image_MouseLeftButtonDown(object sender, MouseButtonEventArgs e) { Image image = (Image)sender; Border border = (Border)image.Parent; image.CaptureMouse(); isMouseCapture = true; mouseXOffset = e.GetPosition(border).X; mouseYOffset = e.GetPosition(border).Y; var chessPiece = (Image) sender; var chessSquare = (Border) chessPiece.Parent; var row = (byte) (Grid.GetRow(chessSquare)); var column = (byte) (Grid.GetColumn(chessSquare) - 1); if (engine.HumanPlayer == ChessPieceColor.White) { SelectionChanged(row, column, false); } else { SelectionChanged((byte)(7 - row), (byte)(7 - column), false); } } SelectionChanged is my own method for recording what source square the user selected. isMouseCapture is also my own variable for recording when the user started draging the piece. private void Image_MouseMove(object sender, MouseEventArgs e) { Image image = (Image)sender; Border border = (Border)image.Parent; if (!currentSource.Selected) { image.ReleaseMouseCapture(); isMouseCapture = false; translateTransform = new TranslateTransform(); translateTransform.X = 0; translateTransform.Y = 0; mouseXOffset = 0; mouseYOffset = 0; } if (isMouseCapture) { translateTransform = new TranslateTransform(); translateTransform.X = e.GetPosition(border).X - mouseXOffset; translateTransform.Y = e.GetPosition(border).Y - mouseYOffset; image.RenderTransform = translateTransform; CalculateSquareSelected((int)translateTransform.X, (int)translateTransform.Y, false); } } In the above CalculareSquareSelected converts the pixels moved to where I think the piece is moving to in the 8x8 chess board. For example say I moved 100 pixels and the chess board square is only 50 pixels than I moved 2 chess board squares. private void Image_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) { if (translateTransform == null) { return; } Image image = (Image)sender; image.ReleaseMouseCapture(); isMouseCapture = false; if (translateTransform.X > 10 || translateTransform.Y > 10 || translateTransform.X If you have any questions feel free to contact me.
