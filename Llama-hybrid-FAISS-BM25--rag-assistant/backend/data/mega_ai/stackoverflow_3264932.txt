[site]: stackoverflow
[post_id]: 3264932
[parent_id]: 3264860
[tags]: 
If you are starting off learning VB6, then start with the latest version (currently v15, in Visual Studio 2017). Never start new learnings on a legacy tech stack. VB 6 generates COM-era code (i.e. predates .Net), and you'll need to somehow acquire the legacy VB 6 IDE in order to rebuild your VB6 codebase. If the components you have written in VB6 are stable, then you can use COM interop to invoke your legacy VB6 components from modern .Net code - i.e. you can deploy and re-use your existing binary components from .Net, until you can phase out all your legacy VB6 code. i.e. I would strongly recommend that at the first possible opportunity that you upgrade your legacy VB6, 8 and 9 code to the latest version (currently 15, in VS 2017) For your VB 8 and 9 code, you should be able to open these projects in the latest version of of Visual Studio (Visual Studio will upgrade the projects). VB 8 would have targeted .Net 2.0 by default, and VB 9 would have targeted .Net 3.5. Again, it is recommended that you change the target version of .Net (currently 4.7) If opening VB 8 / 9 projects in VS 2017 isn't possible, you may be able to use older versions of VS Community Edition or VB Express to do the upgrade in steps. Going forward, I would recommend that you always stay with the most recent tools, as not only will you be guaranteed support, you will also be able to leverage all the new features that each release offers.
