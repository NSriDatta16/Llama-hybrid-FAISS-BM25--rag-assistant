[site]: stackoverflow
[post_id]: 3875603
[parent_id]: 3679436
[tags]: 
Did major edit to associate elements in a more elegant way. Sets are good for grouping Raphael objects, but sets do not create their own elements, so you cannot drag and drop a set, since when you click on the canvas you either select the shape or the text, but never the set (since there is no set element). Here is a simple jsFiddle showing the properties of a set. Note that a set has no x or y properties. From the Raphael documentation : [A set c]reates array-like object to keep and operate couple of elements at once. Warning: it doesn’t create any elements for itself in the page. The simple work around is to make both the text and shape separately draggable. Then move the associated text along with the shape... and the associated shape along with the text. Associating objects like this is simple... create a property. In this case each shape and each text has a property called .pair which is a reference to the associated element. Here's how it's done: var i, ii, tempS, tempT shapes = [ ... ], texts = [ ... ]; for (i = 0, ii = shapes.length; i And then in the drag and drop code, which is the move() , dragger() , and up() functions you have to make sure to deal with both the clicked on element and its associated element. For example here is the pertinent part of the move() function. Note that text can be dealt with in the same way as rectangle (by changing attributes x and y ), so the false condition in each of the Javascript conditional operators below handles both the case for rectangle and for text move = function (dx, dy) { // Move main element var att = this.type == "ellipse" ? {cx: this.ox + dx, cy: this.oy + dy} : {x: this.ox + dx, y: this.oy + dy}; this.attr(att); // Move paired element att = this.pair.type == "ellipse" ? {cx: this.pair.ox + dx, cy: this.pair.oy + dy} : {x: this.pair.ox + dx, y: this.pair.oy + dy}; this.pair.attr(att); ... } And below is the full working code: Working jsFiddle example of draggable text and shapes Raphael.fn.connection = function (obj1, obj2, line, bg) { if (obj1.line && obj1.from && obj1.to) { line = obj1; obj1 = line.from; obj2 = line.to; } var bb1 = obj1.getBBox(), bb2 = obj2.getBBox(), p = [{x: bb1.x + bb1.width / 2, y: bb1.y - 1}, {x: bb1.x + bb1.width / 2, y: bb1.y + bb1.height + 1}, {x: bb1.x - 1, y: bb1.y + bb1.height / 2}, {x: bb1.x + bb1.width + 1, y: bb1.y + bb1.height / 2}, {x: bb2.x + bb2.width / 2, y: bb2.y - 1}, {x: bb2.x + bb2.width / 2, y: bb2.y + bb2.height + 1}, {x: bb2.x - 1, y: bb2.y + bb2.height / 2}, {x: bb2.x + bb2.width + 1, y: bb2.y + bb2.height / 2}], d = {}, dis = []; for (var i = 0; i p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y) && ((i != 1 && j != 4) || p[i].y For completeness here is the code for the linked to jsFiddle for showing the properties of a set : window.onload = function () { var paper = Raphael("canvas", 320, 200), st = paper.set(), propArr = []; st.push( paper.circle(10, 10, 5), paper.circle(30, 10, 5) ); st.attr({fill: "red"}); for(var prop in st) { if (st.hasOwnProperty(prop)) { // handle prop as required propArr.push(prop + " : " + st[prop]); } } alert(propArr.join("\n")); };​ // Output: // 0 : Raphael's object // 1 : Raphael's object // items : Raphael's object,Raphael's object // length : 2 // type : set
