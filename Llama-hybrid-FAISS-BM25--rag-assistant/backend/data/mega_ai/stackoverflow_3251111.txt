[site]: stackoverflow
[post_id]: 3251111
[parent_id]: 3248384
[tags]: 
Asynchronous programming is slightly more complicated because the consequence of making a request is encapsulated in a function instead of following the request statement. But the realtime behavior that the user experiences can be significantly better because they will not see a sluggish server or sluggish network cause the browser to act as though it had crashed. Synchronous programming is disrespectful and should not be employed in applications which are used by people. Douglas Crockford ( YUI Blog ) Alright, buckle your seats, because it's going to be a bumpy ride. More and more people ask about loading scripts dynamically via javascript, it seems to be a hot topic. The main reasons why this became so popular are: client-side modularity easier dependency management error handling performance advantages About modularity : it is obvious that managing client-side dependencies should be handled right on the client-side. If a certain object, module or library is needed we just ask for it and load it dynamically. Error handling : if a resource fails we still get the chance to block only the parts that depend on the affected script, or maybe even give it another try with some delay. Performance has become a competitive edge between websites, it is now a search ranking factor. What dynamic scripts can do is mimic asynchronous behavior as opposed to the default blocking way of how browsers handle scripts. Scripts block other resources, scripts block further parsing of the HTML document, scripts block the UI. Now with dynamic script tags and its cross-browser alternatives you can do real asynchronous requests, and execute dependent code only when they are available. Your scripts will load in-parallel even with other resources and the rendering will be flawless. The reason why some people stick to synchronous scripting is because they are used to it. They think it is the default way, it is the easier way, and some may even think it is the only way. But the only thing we should care about when this needs to be decided concerning an applications's design is the end-user experience . And in this area asynchronous cannot be beaten. The user gets immediate responses (or say promises), and a promise is always better than nothing. A blank screen scares people. Developers shouldn't be lazy to enhance perceived performance . And finally some words about the dirty side. What you should do in order to get it working across browsers: learn to think asynchronously organize your code to be modular organize your code to handle errors and edge cases well enhance progressively always take care of the right amount of feedback
