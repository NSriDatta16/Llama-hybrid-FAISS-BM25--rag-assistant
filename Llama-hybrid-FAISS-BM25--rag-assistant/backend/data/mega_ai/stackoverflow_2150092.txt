[site]: stackoverflow
[post_id]: 2150092
[parent_id]: 2146637
[tags]: 
Yes, you can return entities from projection queries. If you are using a HQL query you can specify a constructor for the given class in the HQL select clause: IList foos = session.CreateQuery( "select new Foo(f.Name, f.Value) from Foo f") .List (); This example requires that the Foo class has a constructor that fits the signature used in the HQL query. I.e: You could also use the AliasToBean ResultTransformer, which automatically maps the values returned from the query to the properties of a given type. This approach requires that the aliases used in the query map directly to properties of the given type. For example: IList foos = session.CreateQuery( "select f.Name as Name, f.Value as Value from Foo f") .SetResultTransformer(Transformers.AliasToBean ()) .List (); To make these examples work, the Foo class could look like this: public class Foo { public Foo() { } public Foo(string name, double value) { Name = name; Value = value; } public virtual string Name { get; set; } public virtual double Value { get; set; } } The class above contains a valid constructor for the first HQL example. It also defines public properties that align with the aliases used in the second HQL query, which makes it possible for the AliasToBean transformer to fill entities of the type Foo from the results of the query. However, from the example that you give, it seems as if you want to return two types of entities from the same projection query. That might be harder to achieve using these methods. I did a couple of quick tests, without any luck. Update: You can use the AliasToBean result transformer with the Criteria API as well as with HQL. The transformer is used in the same way, but the projection query looks a bit different using Criteria. Here is an example that uses a criteria query: IList foos = session.CreateCriteria () .SetProjection(Projections.ProjectionList() .Add(Projections.Property("Name"), "Name") .Add(Projections.Property("Value"), "Value")) .SetResultTransformer(Transformers.AliasToBean ()) .List ();
