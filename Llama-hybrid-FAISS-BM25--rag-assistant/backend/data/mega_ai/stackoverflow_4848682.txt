[site]: stackoverflow
[post_id]: 4848682
[parent_id]: 
[tags]: 
(iphone) uiScrollView sensitivity?

I have 2 questions on uiscrollview. First question: I have imageviews on uiscrollview(at bottom of screen) and let users to drag the image view out of uiscroll view. I place fingers on top of the imageView to drag it out but uiscrollview takes the touch and scrolls. I guess I need to let the imageView gets the touch event first (if the touch event occurred on imageView) If finger direction is almost horizontal, give the touch event to scrollview so that it can scroll, otherwise(finger direction is not horizontal) let the user drag the imageView. (I have scrollView.directionalLockEnabled = YES) I wonder how this can be done? Second Question: User can send the imageView back to uiScrollView by double tapping the imageView. When I do that, the scrollview is not scrollable until I drag out any imageViews in the scrollView. Don't know what's causing this problem.. Below is my code to send the imageView back to uiscrollview. aDragView.userInteractionEnabled = NO; CGPoint contentOffset = self.puzzlePieceScrollView.contentOffset; float x = contentOffset.x; int addIndex = x / widthWithPadding; aDragView.scrollContainerIndex = addIndex; CGRect newFrame; int puzzlePieceCount = 0; [UIView beginAnimations:@"addDragView" context: [aDragView retain]]; for(UIView* subview in [self.puzzlePieceScrollView subviews]) { if([subview isKindOfClass: [DragView class]]) { DragView* dragView = (DragView*)subview; if(dragView.scrollContainerIndex >= addIndex) { dragView.scrollContainerIndex += 1; newFrame = dragView.frame; newFrame.origin.x += widthWithPadding; dragView.frame = newFrame; } ++puzzlePieceCount; } } newFrame = aDragView.frame; newFrame.origin.x = [self getOriginXForScrollIndex: addIndex]; newFrame.origin.y = self.frame.origin.y + upperPadding; aDragView.frame = newFrame; [UIView setAnimationDuration:0.3]; [UIView setAnimationDelegate:self]; [UIView setAnimationDidStopSelector:@selector(animationFinished:finished:context:)]; [UIView commitAnimations]; float newWidth = std::max((puzzlePieceCount+1) * widthWithPadding, [[UIScreen mainScreen] bounds].size.width ); CGSize newContentSize = self.puzzlePieceScrollView.contentSize; newContentSize.width = newWidth; self.puzzlePieceScrollView.contentSize = newContentSize; - (void) animationFinished:(NSString*)animationId finished:(BOOL)finished context:(void*)context { if ([animationId isEqualToString:@"addDragView"]) { DragView* aDragView = (DragView*)context; // add to puzzlePieceScrollView CGPoint p; p = CGPointMake(aDragView.bounds.size.width * 0.5, aDragView.bounds.size.height * 0.5); CGPoint newCenter = [aDragView convertPoint: p toView: self.puzzlePieceScrollView]; aDragView.center = newCenter; [self.puzzlePieceScrollView addSubview: aDragView]; aDragView.userInteractionEnabled = YES; [aDragView release]; } self.puzzlePieceScrollView.userInteractionEnabled = YES; }
