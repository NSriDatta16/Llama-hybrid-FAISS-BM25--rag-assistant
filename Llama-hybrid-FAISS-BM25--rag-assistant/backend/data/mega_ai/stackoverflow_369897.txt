[site]: stackoverflow
[post_id]: 369897
[parent_id]: 
[tags]: 
YAGNI - The Agile practice that must not be named?

As I've increasingly absorbed Agile thinking into the way I work, yagni ("you aren't going to need it") seems to become more and more important. It seems to me to be one of the most effective rules for filtering out misguided priorities and deciding what not to work on next. Yet yagni seems to be a concept that is barely whispered about here at SO. I ran the obligatory search, and it only shows up in one question title - and then in a secondary role. Why is this? Am I overestimating its importance? Disclaimer. To preempt the responses I'm sure I'll get in objection, let me emphasize that yagni is the opposite of quick-and-dirty . It encourages you to focus your precious time and effort on getting the parts you DO need right. Here are some off-the-top ongoing questions one might ask. Are my Unit Tests selected based on user requirements, or framework structure? Am I installing (and testing and maintaining) Unit Tests that are only there because they fall out of the framework? How much of the code generated by my framework have I never looked at (but still might bite me one day, even though yagni)? How much time am I spending working on my tools rather than the user's problem? When pair-programming, the observer's role value often lies in "yagni". Do you use a CRUD tool? Does it allow (nay, encourage) you to use it as an _RU_ tool, or a C__D tool, or are you creating four pieces of code (plus four unit tests) when you only need one or two?
