[site]: stackoverflow
[post_id]: 4256905
[parent_id]: 4255973
[tags]: 
Looking at Cody Gray's answer, I think I can suggest how to combine colors. Converting color wheel to RGB: cyan(0, 255, 255) blue(0, 0, 255) green(0, 255, 0) magenta(255, 0, 255) red(255, 0, 0) yellow(255, 255, 0) Without extra complications, colors can be combined like this: invert both colors, add them together and invert the result (ActionScript): sum(0, 255, 255, 255, 0, 255, "cyan + magenta ="); sum(255, 0, 0, 0, 255, 0, "red + green ="); sum(0, 0, 0, 0, 0, 0, "black + black ="); sum(0, 0, 0, 255, 255, 255, "black + white ="); function sum(c1:int, c2:int, c3:int, b1:int, b2:int, b3:int, m:String):void { c1 = 255 - c1; c2 = 255 - c2; c3 = 255 - c3; b1 = 255 - b1; b2 = 255 - b2; b3 = 255 - b3; var d1:int = c1 + b1; var d2:int = c2 + b2; var d3:int = c3 + b3; d1 = 255 - d1; d2 = 255 - d2; d3 = 255 - d3; d1 = clamp(d1); d2 = clamp(d2); d3 = clamp(d3); trace(m, d1, d2, d3); } function clamp(value:int):int { if (value 255) return 255; return value; } Output: cyan + magenta = 0 0 255 red + green = 0 0 0 black + black = 0 0 0 black + white = 0 0 0 See if that fit for you. Edit: I'm not pretending this is physically correct, it's just an attempt to approximate. The idea of lookup table sounds crazy for me for two reasons: it depends on two arguments, so its size will be very large; and laws of nature are usually continuous with no or rare corner cases. If you can fill lookup table, you should know the algorithm - so just write a function for it.
