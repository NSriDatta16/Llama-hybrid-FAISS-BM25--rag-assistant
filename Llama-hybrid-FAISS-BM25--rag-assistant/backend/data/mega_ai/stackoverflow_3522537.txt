[site]: stackoverflow
[post_id]: 3522537
[parent_id]: 3521695
[tags]: 
For certain classes of very small objects - consider 3D points in a geometry engine - allocating these individually on the heap is a recipe for creating dangling pointers and introducing a vast amount of overhead - however, they are vitally necessary in a lot of calculations So, a common mechanism is to use a flyweight pattern in objects that actually contain a collection of 3D points, like the description of some geometrical entity, and to allow their use on the heap as intermediate results of calculations. Now, that said, extra special care needs to be taken to avoid needless copying of data between the flyweight implementation, e.g. ListOf3DPoints and the heap allocated 3D points that are being used for intermediate results. In general, I've found a number of cases where I have coupled a flyweight pattern with heap allocation capabilities to achieve optimimum results - the flyweight provides persistent storage, the heap allocations let me perform item level manipulations without having to gen up another flyweight
