[site]: crossvalidated
[post_id]: 261645
[parent_id]: 246287
[tags]: 
Semantic segmentation is just extended classification, where you perform classification of each pixel into the n_classes . Let's say your input is an RGB image with size (cols,rows,3) , you pass a batch of such images sized (batch_size, cols, rows, 3) to the CNN. After performing computations in the network graph, you will end up with a choice to have the last convolutional layer to have n_outputs . Binary segmentation (pixelwise yes / no ) Then you have can have n_outputs = 1 and the output shape will be (batch_size, cols, rows, 1) . You later take the sigmoid activation use binary_crossentropy loss. Note that this only works for binary segmentation. MultiClass segmentation (pixelwise probability vector) Then you have n_outputs = n_classes and the output shape will be (batch_size, cols, rows, n_classes) . Now comes the tricky part. You need to apply softmax to each pixel probability vector which generally involves permuting dimensions depending on the deep learning framework you are using. In this case you use categorical_crossentropy as it In Keras you can final_conv_out = Convolution2D(n_classes, 1, 1)(conv9) x = Reshape((n_classes, rows*cols))(final_conv_out) x = Permute((2,1))(x) # seg is a pixelwise probability vector sized (batch_size, rows*cols, n_classes) seg = Activation("softmax")(x)
