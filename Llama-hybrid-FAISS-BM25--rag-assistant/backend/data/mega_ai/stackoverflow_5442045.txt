[site]: stackoverflow
[post_id]: 5442045
[parent_id]: 5441997
[tags]: 
Look into IAsyncResult - there are a lot of resources out there related to this particular pattern, but basically this will allow you to maintain an instance of an object who's role it is to allow you to determine the current state of an operation - or even exclusively call an End method to interrupt an operation. Your method signatures might look something like this, for instance: public IAsyncResult BeginOperation(AsyncCallback callback) public EndOperation(IAsyncResult result) From MSDN : The IAsyncResult interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as IsolatedStorageFileStream.BeginRead, and is passed to methods that conclude an asynchronous operation, such as IsolatedStorageFileStream.EndRead. An IAsyncResult is also passed to the method that is invoked by an AsyncCallback delegate when an asynchronous operation completes. An object that supports the IAsyncResult interface stores state information for an asynchronous operation, and provides a synchronization object to allow threads to be signaled when the operation completes. EDIT: OK, unless I'm missing something then a simple event notification may be all you need here - consider the following usage of a class introduced below: var flickrOperation = new FlickrOperation(); flickrOperation.FlickrPhotoURLsLoaded += delegate(object sender, EventArgs e) { var photoCount = flickrOperation.FlickrPhotoURLs.Count; }; flickrOperation.BeginGetFlickrPhotoURLs(); Now lets define the class, albeit primitive and simply a means to an end in this case. Note, in particular, the declaration an use of FlickrPhotoURLsLoaded - this is the event which is fired upon completed of the operation (as dictated by the completion of the callback loading the URLs): class FlickrOperation { //the result: //ultimately, hide this and expose a read only collection or something public List FlickrPhotoURLs = new List (); //the event: //occurs when all returns photo URLs have been loaded public event EventHandler FlickrPhotoURLsLoaded; public void BeginGetFlickrPhotoURLs() { //perform the flickr call... var getPhotoCollectionCallback = GetFlickrPhotoURLsCallback; flickr.InterestingnessGetListAsync(getPhotoCollectionCallback); } private void GetFlickrPhotoURLsCallback(FlickrResult result) { //perform the url collection from flickr result... FlickrPhotoURLs.Clear(); var photoCollection = (PhotoCollection)result.Result; foreach (Photo photo in photoCollection) { flickrPhotoUrls.Add(photo.MediumUrl); } //check to see if event has any subscribers... if (FlickrPhotoURLsLoaded != null) { //invoke any handlers delegated... FlickrPhotoURLsLoaded(this, new EventArgs()); } } }
