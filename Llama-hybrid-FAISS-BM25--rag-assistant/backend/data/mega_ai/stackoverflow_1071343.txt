[site]: stackoverflow
[post_id]: 1071343
[parent_id]: 1071060
[tags]: 
It all comes down to how "normal" your data structure is. A highly normalized database,by definition, can only have single field for the primary key. In this case, there is little to any reason to use a serial or auto generated number as a PK. The data structure should be designed with with unique entries as PK(tracking people is a problem, there are only so many names). Of course with normalization comes the performance penalty, so the database is de-normalized to make is usable(very common for web apps). With a heavily de-normalized DB, many times it is impossible to get a PK without using every field in the table. Remember that the reason that the structure is de-normalized is to increase the performance. All of the databases that I am familiar with builds an index for every PK. The larger the index, the larger the overhead to maintain the index. Building gigantic indexes will kill the insert and update time performance, making the de-normalization useless(unless its a read-only DB). It also takes longer to search gigantic indices and uses more memory than smaller ones as well. In summery, It is often advantageous for performance reasons to to auto-generate the PK for any table that requires multiple fields to get a unique PK.
