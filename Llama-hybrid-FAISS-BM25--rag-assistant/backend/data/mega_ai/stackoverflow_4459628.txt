[site]: stackoverflow
[post_id]: 4459628
[parent_id]: 4420671
[tags]: 
There are some different classification for algorithms: The way they solve the problems classical algorithms: Divide & Conquer like binary search Greedy Algorithms like finding maximum in list, or maximum job allocation with unweighted job values. Dynamic Programming , like LCS Backtracking , like 8 queen, and all NPC algorithms. Sorting Algorithms , Sorting has specific methodology and used in wide range Linear Programming Graph Algorithms Non classical ones: Random walk Genetic algorithm Markov Chain Approximation Algorithms Neural network, ... But this algorithms are deterministic or non deterministic means for each run on the specific input they will get same result (deterministic) or different result(non deterministic). Also this algorithms have too many different problem in their, and each of problems uses hybrid of all algorithms, for example TSP in euclidean graph can be approximated by using dfs and graph algorithms, and random walk, .... and ATSP (TSP in Asymmetric graphs) can be approximated by combination of Linear Programming and some advance graph algorithms. But there is famous classification for problems and we can extend it to algorithms which is on time complexity (Also memory but this days memory is not concern as time): P NP NPC NPC strong NP Hard co-NP ...
