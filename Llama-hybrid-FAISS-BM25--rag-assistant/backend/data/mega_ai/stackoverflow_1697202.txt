[site]: stackoverflow
[post_id]: 1697202
[parent_id]: 1697153
[tags]: 
I am seeing two possibilities: sqlite and BerkeleyDB. As my use case is clearly not relational, I am tempted to go with BerkeleyDB, however I don't really know how I should use it to store my records, as it only stores key/value pairs. What you are describing is exactly what relational is about, even if you only need one table. SQLite will probably make this very easy to do. EDIT: The relational model doesn't have anything to do with relationships between tables. A relation is a subset of the Cartesian product of other sets. For instance, the cartesian product of the Real numbers, Real Numbers, and Real numbers (Yes, all three the same) produce 3d coordinate space, and you could define a relation upon that space with a formula, say x*y = z . each possible set of coordinates (x0,y0,z0) are either in the relation if they satisfy the given formula, or else they are not. A relational database uses this concept with a few additional requirements. First, and most important, the size of the relation must be finite. The product relation given above doesn't satisfy that requirement, because there are infinitely many 3-tuples that satisfy the formula. There are a number of other considerations that have more to do with what is practical or useful on real computers solving real problems. A better way of thinking about the problem is to think about where each type of persistence mechanism specifically works better than the other. You already recognize that a relational solution makes sense when you have many separate datasets (tables) that must support relationships between them (foreign key constraints), which is almost impossible to enforce with a key-value store. Another real advantage to relational is the way it makes rich, ad-hoc queries possible with the use of proper indexes. This is a consequence of the database layer actually understanding the data that it is representing. A key-value store has it's own set of advantages. One of the more important is the way that key-value stores scale out. It is no consequence that memcached , couchdb , hadoop all use key-value storage, because it is easy to distribute key-value lookup across multiple servers. Another area that key-value storage works well is when the key or value is opaque, such as when the stored item is encrypted, only to be readable by it's owner. To drive this point home, that a Relational database works well even when you just don't need more than one table, consider the following (not original) SELECT t1.actor1 FROM workswith AS t1, workswith AS t2, workswith AS t3, workswith AS t4, workswith AS t5, workswith AS t6 WHERE t1.actor2 = t2.actor1 AND t2.actor2 = t3.actor1 AND t3.actor2 = t4.actor1 AND t4.actor2 = t5.actor1 AND t5.actor2 = t6.actor1 AND t6.actor2 = "Kevin Bacon"; Which, obviously uses a single table: workswith to compute every actor with a bacon number of 6
