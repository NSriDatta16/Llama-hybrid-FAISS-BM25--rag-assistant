[site]: stackoverflow
[post_id]: 3439264
[parent_id]: 3439082
[tags]: 
I think a inspection-based method would potentially be quite fragile and resistant to change. What if you want to use classes from other modules? Why not a object factory? It could be a simple function or a class. Example: class ComputerFactory: def __init__(self): self._classes = {} def register(moniker, creator): """Moniker is a name for the class. Creator is a callable that creates the object for the moniker. """ self._classes[moniker] = creator def create(moniker, *args, **kwargs): return self._classes[moniker](*args, **kwargs) # Example usage fac = ComputerFactory() # Register constructor fac.register("laptop", Laptop) # Laptop class is also a callable (the constructor) # Register construction proxy def sony_laptop_builder(make): return Laptop("Sony") fac.register("laptop", sony_laptop_builder)
