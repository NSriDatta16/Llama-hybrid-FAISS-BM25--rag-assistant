[site]: stackoverflow
[post_id]: 4908297
[parent_id]: 4908103
[tags]: 
In the average business case, no, you will not be creating deep hierarchies of types. However, you will directly use inheritance all the time . Always. An ASP.NET .aspx page with a code-behind inherits from your code-behind class. Your code-behind class itself inherits from the Page class, and you override methods on it. If you don't understand the meaning of override and virtual (both inheritance-related concepts), you are selling yourself short. There are thousands of examples all over the framework where an understanding of inheritance and related concepts will help you organize your understanding of the objects you use on a daily basis. Some of the best to really dig into relate to LINQ and Generics (IEnumerable, IQueryable, ICollection, etc), MVC / Web Forms, and Entity Framework and where you create POCO objects that relate to the business problem you are trying to solve. The short answer is that you need to understand it, even if you are not writing a framework. The passage from the book ( excerpt from page 72 ) is a little embarrassing in how blunt and misleading it is.
