[site]: stackoverflow
[post_id]: 4142806
[parent_id]: 445411
[tags]: 
WOL is a very flexible protocol that can be implemented in multiple different ways. The most common are: Sending a WOL as the payload of an ethernet packet. Sending a WOL as the payload of a UDP packet (for routing across the net). Once it lands on the local network it's passes to all the hosts on the network using the broadcast MAC address. For an Ethernet packet the structure is: Destination MAC: FF:FF:FF:FF:FF:FF (Broadcast) A Magic Packet Payload For a UDP packet the structure is: Destination MAC: FF:FF:FF:FF:FF:FF (Broadcast) UDP Port: 9 A Magic Packet Payload The Magic Payload consists of: The Synchronization Stream: FFFFFFFFFFFF (that's 6 pairs or 6 bytes of FF) 16 copies of the MAC of the computer you're signaling to WOL An optional passphrase of 0, 4, or 6 bytes. To receive WOL packets from the internet (through a firewall/router): Configure router port 9 to forward to IP 255.255.255.255 (Broadcast IP) Set the destination IP: The external IP of the router Note: This can only be achieved using the UDP example because Ethernet packets lack the IP layer necessary for the packet to be routed through the internet. IE, Ethernet packets are the local-network-only option. The issue with sending WOL packets over UDP is security because you have to set the router to enable IP broadcasting (255.255.255.255). Enabling broadcasting over IP is usually considered a bad idea because of the added risk of internal attack within the network (Ping flooding, cache spoofing, etc...). For more info on the protocol including a sample capture see this site . If you want a quick-and-dirty command line tool that generates WOL packets (and you're running on a debian, linux mint, or Ubuntu) you can install a tool that already does this. Just install using the command line with: sudo apt-get install wakeonlan Update: Here's a working example that generates a WakeOnLan packet using the current version of SharpPcap. using System; using System.Collections.Generic; using System.Net.NetworkInformation; using PacketDotNet; using SharpPcap; namespace SharpPcap.Test.Example9 { public class DumpTCP { public static void Main(string[] args) { // Print SharpPcap version string ver = SharpPcap.Version.VersionString; Console.WriteLine("SharpPcap {0}, Example9.SendPacket.cs\n", ver); // Retrieve the device list var devices = CaptureDeviceList.Instance; // If no devices were found print an error if(devices.Count Note: This is a fully functional Wake-On-Lan packet sending console application built on the Example09 that can be found in the SharpPcap source. The libraries used in this example that can't be found in the .NET framework are: using PacketDotNet; This library (.dll) comes packaged with SharpPcap. It is responsible for all of the packet construction and parsing within SharpPcap. This is where the WakeOnLan class resides. Note: The packet construction/parsing code was originally bundled within SharpPcap.dll. It was migrated to its own lib because SharpPcap is meant to be a wrapper for winpcap. Many of its users deal with designing protocols and/or handling raw networking packets. using SharpPcap; SharpPcap contains all of the winpcap(windows)/libpcap(*nix) wrapper code. It's needed to select the interface and send the actual packets across the wire.
