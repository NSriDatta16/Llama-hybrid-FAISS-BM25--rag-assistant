[site]: stackoverflow
[post_id]: 1635844
[parent_id]: 1635793
[tags]: 
Conceptually you have subdivided the third-party jar into two - the property bit and the rest. You replace the property bit with your own stuff and then procede to test the rest. On release you prepare a package including the bit you have tested and the original property stuff which you have not. In taking this approach, what risks have you introduced? That the code you release will not be the code you tested - it's a different JAR, albeit with careful process not a very different JAR - so if you trust yourself to get it right this may be an acceptable risk. That the code you didn't test is broken. This suggests that at least some testing is needed on the real platform. That the tests on Windows give different results from tests on Unix. Again some degree of Unix testing is indicated. I think that your appraoch is pragmatic and that the risks can be mitigated by having at least some tests be executable on Unix. I assume that your Windows-based testing is for ease of development/debugging. I would do this, but I would try to build a regression test suite that I can run on Unix - JUnit tests could run there.
