[site]: stackoverflow
[post_id]: 1552324
[parent_id]: 1552145
[tags]: 
In general, your plan sounds good as far as it goes. I'd tweak it a bit differently from the other posts: create table Measurement( int MeasurementId not null auto_increment, primary key(id) ); create table MeasurementData( int MeasurementId not null, int MeasurementDataEntry not null, double value not null, primary key(MeasurementId, MeasurementDataEntry), constraint fk_data foreign key(MeasurementId) references Measurement(MeasurementId) ) As per LukLed, MeasrementDataEnry would be an ordinal value, starting at 1 and incrementing by one for each "data entry" for that MeasurementId. The compound primary key should be sufficient, as with the probelm stated I see no real need for an extra surrogate key on MeasurementData. Be sure that your solution is sufficient for your problem set. Are other columns required in either table (type of measurement, when it occured, who dunnit)? Are there always the same number of data readings for each Measurement, or can it vary? If so, do you need the number of data measurements stored in the parent table (for quicker retrieval, ad the cost of redundancy?) Will you ever need to update data entries, and will that mess up order? It just seems a bit sparse, and there might be other business rules you'll need to factor in down the road.
