[site]: stackoverflow
[post_id]: 1147096
[parent_id]: 1025134
[tags]: 
OK, there's three things being discussed here: fitting tests onto legacy code, unit testing and acceptance/regression testing, all in C++. First, for taking legacy code and fitting tests to it, I recommend purchasing a copy of "Working Effectively with Legacy Code" by Michael Feathers. Its an awesome book and will teach you that any legacy code can be unit tested! I've used techniques from that book to fit tests onto things that everyone told me couldn't be unit tested, but I did it anyway :-) . Second, for unit testing in C++, I just wrote a 5-part series of blog posts that describe how to do this in detail with Visual Studio: C++ Unit Testing With Boost.Test . Finally, for acceptance/regression testing I've had success useing Fitnesse. This is basically an acceptance test framework that uses a wiki to organize and write the tests. The wiki page is traversed and parsed to turn into calls into a test fixture that you write. The test fixture then mediates between the test, as described by a wiki page, and your production code. I've used this mechanism to perform regression tests on the whole application end-to-end. Combine that with unit tests for the classes you're changing and its a very powerful bug detector mechanism. The regression tests squeeze from above and the unit tests squeeze from below and the bugs are caught in the middle! Its worked great for me. Get the main fitnesse distribution from fitnesse.org You can get C++ test runner for FitNesse from sourceforge . (I'm a developer on that project.) We haven't added the SLIM support yet that is in the main fitnesse wiki, but we do have good support for several fixtures. We're hoping to add SLIM support soon. I have a rudimentary implementation that needs to be finished off.
