[site]: stackoverflow
[post_id]: 4621489
[parent_id]: 4443644
[tags]: 
Got a real shaky start for you! Photoshop has documentation on using javascript vbscript with photoshop dll's: http://www.adobe.com/devnet/photoshop/scripting.html . These same methods are exposed via COM to C# and I wonder if they're available to Objective-C (RedGate and the vs object browser can help if you dabble with it). Don't cringe at the C# code! The point is photoshop exposes dlls which can be worked with. C# ASP.NET exposes photoshop .dll's via COM. I'm new to objective-c and not a vet at C#! I got this code to work on my windows machine in C#. This code cranks up a web page and fires up my version of photoshop cs3 and goes thru my directory of files and creates an "Adobe image gallery". Good luck to you and post back what you find in objective-c...I think objective-c can run native C and I've seen some documentation of working with photoshop in native C...Shoot some code back either way...I'm a semi newbie so if this wasn't what you meant by Photoshop Image I apologize! CDUB PS these are all photoshop methods being exposed, nothing I made up... using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; using GoogleTalkAPILib; using ps = Photoshop; using Photoshop; namespace photoshop { public partial class _Default : System.Web.UI.Page { protected void Page_Load(object sender, EventArgs e) { try { Object ob= null; //works!!!!!! // co.Application.MakePDFPresentation(oaa, "C:\Users\Photoshoptryrescl",ob); //you can also use c# to run a javascript // co.DoJavaScript("hey.js",e,d ); co.MakePhotoGallery(oab, "C:\\photoshopdump", ob); } catch (Exception ex) { Trace.Write(ex.Message.ToString()); } } } } using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; using ps = Photoshop; using Photoshop; using Microsoft.Win32.SafeHandles; using Microsoft.Win32; using Microsoft; namespace photoshop { public delegate void addBlur(); public class Class1 : ApplicationClass, ArtLayer, Document { public Class1() { } public void addBlur() { } public void addBlur1(string sa) { } #region ArtLayer Members public void AdjustBrightnessContrast(int Brightness, int Contrast) { throw new NotImplementedException(); } public void AdjustColorBalance(object Shadows, object Midtones, object Highlights, object PreserveLuminosity) { throw new NotImplementedException(); } public void AdjustCurves(object CurveShape) { throw new NotImplementedException(); } public void AdjustLevels(int InputRangeStart, int InputRangeEnd, double InputRangeGamma, int OutputRangeStart, int OutputRangeEnd) { throw new NotImplementedException(); } public bool AllLocked { get { throw new NotImplementedException(); } set { throw new NotImplementedException(); } } public void ApplyAddNoise(double Amount, PsNoiseDistribution Distribution, bool Monochromatic) { throw new NotImplementedException(); } public void ApplyAverage() { throw new NotImplementedException(); } public void ApplyBlur() { // throw new NotImplementedException(); } public void ApplyBlurMore() { throw new NotImplementedException(); } //etc... these interfaces expose a ton of methods which can be explicity implemented //this isn't them all
