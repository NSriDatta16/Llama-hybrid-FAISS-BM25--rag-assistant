[site]: stackoverflow
[post_id]: 656250
[parent_id]: 178572
[tags]: 
There are several assumptions that I make when answering this question; some are based on the fact that it is a large international organization, and some are based on the fact that the format is for two separate table types. Assumptions based on the fact that it's an international organization: It is probable that each region will need to operate independently -- that is, region A must be able to add customer numbers independently from region B Each region probably uses a different language so to make the identifiers easily type-able by users around the world, it is best to stick to numbers and spaces only. Assumptions based on the fact that there are two tables for which this format will be used: This format may be used by more than the two tables listed, so it should be able to handle an arbitrarily large number of tables. Experienced users should be able to know what type of identifier they are looking at based on information encoded into the identifier itself. It would be nice if identifiers were globally unique within the entire system. Considerations: For a global company, identifiers can be very long if only numerics are used. We should attempt to limit the amount of extraneous information encoded into the identifier as much as possible. Identifiers should be self-verifiable to a limited extent; that is a program should be able to detect a large percent of invalid identifiers without looking anything up at all. This implies a checksum. Proposed format: SSSS0RR0TTC The format proposed is as simple as possible, but no simpler: C The first (rightmost) character will be a checksum of all other characters in the identifier. A simple checksum will do. This will eliminate 90% of all typing errors. If it is decided that this is not enough, then this can be expanded to 2 digits which will eliminate 99% of all typing errors. TT The next N digits represent the table type number. No table type number can contain the digit zero. The next digit is a zero. This zero separates the table type number from the region number. RR The next N digits are the region number. No region numbers can contain a zero. The next digit is a zero. This zero separates the region from the sequence number. SSSS The next N digits are the sequence number. This number can contain zeros. Each set of four numbers are separated by spaces when printed or typed in by convention. Internally they are not separated, but this helps the user transfer them correctly. Examples Assuming: Customer table type=1 Order table table type=2 Region code for US-Alabama=1 Region code for CA-Alberta=43 Region code for Ethopia=924 10 1013 - Customer #1 in Alabama (3 is the checksum: 1 +1 + 1) 10 1024 - Order #1 in Alabama 9259 0304 3016 - customer # 925903 in Alberta, Canada 20 3043 4092 4023 - order number 2030434 in Ethopia Advantages of this approach: 90% of mistyped numbers will be caught There are an unlimited number of table types There are an unlimited number of regions There are an unlimited number of sequential numbers for each table Identifier numbers are globally unique to the system. This is important - a customer number cannot be mistaken for an order number and visa versa. Each region can independently add sequence numbers without a global key Disadvantages Each identifier is at least six characters table types numbers and region numbers cannot contain a zero because the zero is used to separate the sequence number from the region number from the table type number.
