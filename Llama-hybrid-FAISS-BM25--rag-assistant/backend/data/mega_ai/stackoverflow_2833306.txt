[site]: stackoverflow
[post_id]: 2833306
[parent_id]: 
[tags]: 
Creating a REST client API using Reactive Extensions (Rx)

I'm trying to get my head around the right use cases for Reactive Extensions (Rx). The examples that keeps coming up are UI events (drag and drop, drawing), and suggestions that Rx is suitable for asynchronous applications/operations such as web service calls. I'm working on an application where I need to write a tiny client API for a REST service. I need to call four REST end-points, three to get some reference data (Airports, Airlines, and Statuses), and the fourth is the main service that will give you flight times for a given airport. I have created classes exposing the three reference data services, and the methods look something like this: public Observable > GetAirports() public Observable > GetAirlines() public Observable > GetStatuses() public Observable > GetFlights(string airport) In my GetFlights method I want each Flight to hold a reference the Airport it's departing from, and the Airline operating the flight. To do that I need the data from GetAirports and GetAirlines to be available. Each Airport, Airline and Status will be added to a Dictionar (ie.e Dictionary) so that I can easily set the reference when parsing each flight. flight.Airport = _airports[flightNode.Attribute("airport").Value] flight.Airline = _airlines[flightNode.Attribute("airline").Value] flight.Status = _statuses[flightNode.Attribute("status").Value] My current implementation now looks like this: public IObservable > GetFlightsFrom(Airport fromAirport) { var airports = new AirportNamesService().GetAirports(); var airlines = new AirlineNamesService().GetAirlines(); var statuses = new StatusService().GetStautses(); var referenceData = airports .ForkJoin(airlines, (allAirports, allAirlines) => { Airports.AddRange(allAirports); Airlines.AddRange(allAirlines); return new Unit(); }) .ForkJoin(statuses, (nothing, allStatuses) => { Statuses.AddRange(allStatuses); return new Unit(); }); string url = string.Format(_serviceUrl, 1, 7, fromAirport.Code); var flights = from data in referenceData from flight in GetFlightsFrom(url) select flight; return flights; } private IObservable > GetFlightsFrom(string url) { return WebRequestFactory.GetData(new Uri(url), ParseFlightsXml); } The current implementation is based on Sergey's answer, and uses ForkJoin to ensure sequential execution and that I reference data gets loaded before Flights. This implementation is allot more elegant than having to fire a "ReferenceDataLoaded" event like my previous implementation.
