[site]: crossvalidated
[post_id]: 246123
[parent_id]: 246089
[tags]: 
I will try to illustrate the reason behind feature engineering in general, say I would like to analyze images. When we design features, we have to keep in mind that they are a representation of the original data/image. Now, if I know which kind of information matter for the task I have to do, I need the features to reflect this. For instance, if I would like to know the content of an image and I choose as feature the number of pixels in the image, it will not work, obviously. Now, if I choose to use the average intensity of the pixels across patches, I will be able to differentiate between a blue image and a white image. But maybe I want to know if an object is present in the image and this feature will be useless. So, I may consider the intensity gradients between the pixels and look at their variations (but then, I will not be able to say if my image is rather blue or white!). There is no ideal feature, just features that are designed for a specific task and this task is only known from the person designing the entire framework: you! This is why feature engineering is important. However, research on the topic of features design is huge and for most tasks that you are working with, someone has already designed features that are proven to work great and you can just use them as is (or twist them a bit if needed). Most efficient features are based on theories from various mathematical fields and their range of application is somehow narrow. Opposite, classifiers often have a broad range of applications and that's why I think the emphasis is often on them while in studying in academia.
