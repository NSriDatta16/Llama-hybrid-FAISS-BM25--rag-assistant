[site]: stackoverflow
[post_id]: 1066246
[parent_id]: 1042415
[tags]: 
We're not overriding the WM_CTLCOLORSTATIC message. There's no occurrence of this string in our source code and nothing like it in our message handlers. We've worked around this problem by overriding the WM_DRAWITEM message for tab controls to paint their contents with the grey background (standard for dialog boxes without tab controls) rather than the white background (standard for the contents of tab controls). brush = CreateSolidBrush(GetSysColor(COLOR_MENU)); FillRect(lpdis->hDC, &lpdis->rcItem, brush); SetBkColor(lpdis->hDC, GetSysColor(COLOR_MENU)); wtext = ToWideStrdup(c->u.tabcontrol.Tabs[lpdis->itemID].name); rect = lpdis->rcItem; rect.top += DlgMarginY - 1; rect.bottom += DlgMarginY; DrawTextW(lpdis->hDC, wtext, -1, &rect, DT_CENTER | DT_VCENTER); free(wtext); DeleteObject(brush); This is obviously a workaround, not a proper answer to my question. Incidentally, we initialise the "common controls", of which I believe the tab control is one, using code like this...I don't suppose this is related to the issue? #pragma comment(linker, "/manifestdependency:\"type='win32' " \ "name='Microsoft.Windows.Common-Controls' " \ "version='6.0.0.0' " \ "processorArchitecture='*' " \ "publicKeyToken='6595b64144ccf1df' " \ "language='*'\"") ... hCommCtrl = GetModuleHandle("comctl32.dll");` if (hCommCtrl) { ptrInit = (TfcInit_fn) GetProcAddress(hCommCtrl, "InitCommonControlsEx"); if (ptrInit) { data.dwSize = sizeof(INITCOMMONCONTROLSEX); data.dwICC = ctrlClass; if (ptrInit(&data) ) gCommCtrlsInitialized |= ICC_TAB_CLASSES | ICC_BAR_CLASSES; } }
