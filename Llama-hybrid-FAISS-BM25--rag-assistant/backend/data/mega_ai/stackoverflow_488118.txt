[site]: stackoverflow
[post_id]: 488118
[parent_id]: 488071
[tags]: 
Well, there are several potentials - what's considered elegent depends on the usage scenario. Static factory methods, that call into a private constructor. static Thing thingWithFileName(string fileName) Create a different type for one of the parameters, or use a builtin. Rather than a string fileName, you could use a System.IO.FileStream. This is also more type safe, as I can't accidently pass the wrong data into the wrong static method, or field. Pass a second parameter to the constructor, either an enum or a boolean, indicating the intent of the first parameter enum ThingType { FileName, ConnectionString } Thing(string str, ThingType type) ... Subclass Thing, so you have a ConnectionTypeThing and a FileBackedThing Completely eliminate Thing doing it's connection, and have preconnected data sources provided. So you end up with Thing(InputStream dataSource) or something analogous. My "elegance" money goes on either the first or second suggestions, but I'd need more context to be happy with any choice.
