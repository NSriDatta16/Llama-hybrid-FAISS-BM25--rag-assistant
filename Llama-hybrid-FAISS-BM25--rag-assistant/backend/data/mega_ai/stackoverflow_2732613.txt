[site]: stackoverflow
[post_id]: 2732613
[parent_id]: 2732197
[tags]: 
levels :: (Tree a) -> [[a]] levels (Nd x ts) = [[x]] ++ levelshelper ts level2 = (map concat).levels levelshelper :: [Tree a] -> [[a]] levelshelper [] = [] levelshelper xs = (map (\(Nd x ts) -> x) xs) : (levelshelper (extractl xs)) --get the next level's Nd's extractl :: [Tree a] -> [Tree a] extractl [] = [] extractl ((Nd x ts):xs) = ts ++ (extractl xs) My approach turned out being a bit more ham-handed than I wanted. Correct me if I'm wrong, though, since strings are lists of characters, but you're using polymorphic types, is it really so straightforward to to print your results out like specified in the problem? This code produces lists of lists of strings. ***Props to Chris in his more elegant answer for reminding me about the use of concat!!
