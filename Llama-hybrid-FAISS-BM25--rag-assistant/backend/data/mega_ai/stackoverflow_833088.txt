[site]: stackoverflow
[post_id]: 833088
[parent_id]: 833047
[tags]: 
IMO you should be using the Property accessor whenever possible. This is because you don't have to worry about any internal logic that might be available when you have an a property. A good example of where this happens is in the code behind in a Linq DataContext. check this out... [Column(Storage="_ReviewType", DbType="TinyInt NOT NULL")] public byte ReviewType { get { return this._ReviewType; } set { if ((this._ReviewType != value)) { this.OnReviewTypeChanging(value); this.SendPropertyChanging(); this._ReviewType = value; this.SendPropertyChanged("ReviewType"); this.OnReviewTypeChanged(); } } } Notice all that logic in the 'setter'? This is why it's important to start getting into the practice of calling your Properties instead of fields, IMO.
