[site]: stackoverflow
[post_id]: 3181778
[parent_id]: 3150223
[tags]: 
Thanks for your help, I came across named_scope and solved the problem with the following code: Bill model: class Bill "created_at DESC" named_scope :limit, lambda {|*args| {:limit=>(args.first)|| 50}} named_scope :offset, lambda {|*args| {:offset=>(args.first || 10)}} named_scope :paid, :conditions=>"paid IS NOT NULL" named_scope :not_paid, :conditions=>{:paid=>nil} named_scope :test_bill, :conditions => {:test_bill=>true} named_scope :no_test_bill, :conditions => {:test_bill=>false} named_scope :find_via_bill_id, lambda {|*args|{:conditions=>{:id=>(args.first || 210)}}} named_scope :find_via_email, lambda {|*args| {:conditions=>{:buyer_id=>args.first}}} controller: def index logger.debug "The object is #{current_user}" if params[:filterInput] != nil && !params[:filterInput].empty? filter_array = params[:filterInput].split('&') bill_scope = Bill.scoped({}) bill_scope = bill_scope.standard # Filtere via Regexp-Matching die Zahlen der Eingabe heraus filter_array.each do |el| if el =~ /limit\([0-9]+\)/ number = bill_scope = bill_scope.limit(el.scan(/\d+/)[0]) elsif el =~ /offset\([0-9]+\)/ bill_scope = bill_scope.offset(el.scan(/\d+/)[0]) elsif el == 'paid' bill_scope = bill_scope.paid elsif el == 'not_paid' bill_scope = bill_scope.not_paid elsif el == 'test_bill' bill_scope = bill_scope.test_bill elsif el =~ /find_via_bill_id\([0-9]+\)/ bill_scope = bill_scope.find_via_bill_id(el.scan(/\d+/)[0]) elsif el =~ /find_via_email\([A-Za-z0-9.@-]+\)/ email = el.scan(/\([A-Za-z0-9.@-]+\)/)[0] # TODO geht bestimmt auch eleganter durch besseres Matching email = email.gsub("(", "") email = email.gsub(")", "") user = User.find_by_email(email) unless User.find_by_email(email).blank? bill_scope = bill_scope.find_via_email(user.id) end end @bills = bill_scope else @bills = Bill.standard.limit.offset end And in the view: 'index') do %> 40 %> Now you can pass in the tex-field e.g.the following valid expression: paid&limits(20) I know that the controller solution isn't very elegant but for me it was the fastest way to solve this problem.
