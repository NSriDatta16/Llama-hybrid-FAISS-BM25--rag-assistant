[site]: stackoverflow
[post_id]: 3874321
[parent_id]: 3874197
[tags]: 
#!/usr/bin/perl use strict; use warnings; use bigint qw/hex/; for my $id (0 ,1, 2) { my $result = hex("0x00000200A0000000") + ( ( $id & 0xFFFFF ) * 2 ) + ( ( $id / 0x100000 ) * 0x40000000 ); printf "%d: %#016x\n", $id, $result; } The bigint pragma replaces the hex function with a version that can handle numbers that large. It also transparently makes the mathematical operators deal with big ints instead of the ints on the target platform. Note, this only works in Perl 5.10 and later. If you are running an earlier version of Perl 5, you can try this: #!/usr/bin/perl use strict; use warnings; use bigint; use Carp; sub bighex { my $hex = shift; my $part = qr/[0-9a-fA-F]{8}/; croak "$hex is not a 64-bit hex number" unless my ($high, $low) = $hex =~ /^0x($part)($part)$/; return hex("0x$low") + (hex("0x$high") > 32; my $low = $decimal & 0xFFFFFFFF; return sprintf("%08x%08x", $high, $low); } for my $id (0 ,1, 2) { my $result = bighex("0x00000200A0000000"); $result += ( ( $id & 0xFFFFF ) * 2 ) + ( ( $id / 0x100000 ) * 0x40000000 ); print "$id ", to_bighex($result), "\n"; }
