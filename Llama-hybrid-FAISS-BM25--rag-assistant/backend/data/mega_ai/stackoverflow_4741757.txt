[site]: stackoverflow
[post_id]: 4741757
[parent_id]: 
[tags]: 
Use alarmManager and service to perform schedule notification only during specific time period

I'm building an app that will trigger notifications at specific time-intervals during the users waking hours. I have an alarmManager running inside of a service. The service is explicitly started via button click on the main activity and has the alarmManager executing notifications during specific time invervals. How would I go about stopping the notifications during certain hours of the day? I do not want these notification to be fired, for instance, while the user is sleeping. My code that is currently firing notifications at user-set intervals is below (imports removed....this is long enough already): public class FartSmackinChunks extends Service { public Notification scheduleNotification; public AlarmManager alarmScheduleManager; public PendingIntent alarmScheduleIntent; private Boolean autoUpdateBoolean = true; private int intervalsGoneByInt = 0; private Notification notification; public static final int NOTIFICATION_ID = 1; @Override public void onCreate() { // TODO: Actions to perform when service is created. int icon = R.drawable.icon; String tickerText = "INTERVAL FIRED"; long when = System.currentTimeMillis(); scheduleNotification = new Notification(icon, tickerText, when); alarmScheduleManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE); String ALARM_ACTION; ALARM_ACTION = ScheduleAlarmReceiver.ACTION_REFRESH_SCHEDULE_ALARM; Intent intentToFire = new Intent(ALARM_ACTION); alarmScheduleIntent = PendingIntent.getBroadcast(this, 0, intentToFire, 0); } @Override public int onStartCommand(Intent intent, int flags, int startId) { SharedPreferences mySharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); boolean autoUpdateBoolean = mySharedPreferences.getBoolean("storedAutoUpdateBoolean", false); String updateFreq = mySharedPreferences.getString("storedInitialAverageTimeInterval", "00:00:00"); SimpleDateFormat dfInterval = new SimpleDateFormat("hh:mm:ss"); Date intervalTimeAsDateObject = null; long updateFreqMilliLong; try { intervalTimeAsDateObject = dfInterval.parse(updateFreq); } catch (ParseException e) { e.printStackTrace(); } updateFreqMilliLong = intervalTimeAsDateObject.getTime() - 18000000; if (autoUpdateBoolean) { int alarmType = AlarmManager.ELAPSED_REALTIME_WAKEUP; long timetoRefresh = SystemClock.elapsedRealtime() + updateFreqMilliLong; alarmScheduleManager.setInexactRepeating(alarmType, timetoRefresh, updateFreqMilliLong, alarmScheduleIntent); notifications(); } else alarmScheduleManager.cancel(alarmScheduleIntent); return Service.START_NOT_STICKY; }; private void notifications() { **notification stuff in here*** } @Override public IBinder onBind(Intent intent) { // TODO: Replace with service binding implementation. return null; } @Override public void onDestroy() { this.alarmScheduleManager.cancel(alarmScheduleIntent); } } .....and my broadcast receiver implementation here: import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; public class ScheduleAlarmReceiver extends BroadcastReceiver { public static final String ACTION_REFRESH_SCHEDULE_ALARM = "com.application.ACTION_REFRESH_SCHEDULE_ALARM"; @Override public void onReceive(Context context, Intent intent) { Intent startIntent = new Intent(context, SmokerReducerService.class); context.startService(startIntent); } } I'm having a little difficulty wrapping my brain around how this should be implemented. I was thinking to rework this code so that the alarmManager is fired at waketime and stopped at sleepTime, all while inside the service is a Timer that fires the notification method at specific intervals? Is there a better way to go about doing this? Any input would be appreciated. I've been trying to work this out in my head for days now. Thanks EDIT: @anyone who comes across this intending to use a Timer for daily notifications: A timer which runs inside of a service will be paused by the runtime when the device is put to sleep (ie...the user puts the phone in standby). Therefor, using a Timer to fire notifications at specific time intervals won't work correctly within a service because when Android pauses the service, it also pauses the timer, which throws off the interval. The correct way to do this is to use AlarmManager with an array of pending intents to set alarms at specific times during the day. This ensures that even if the phone is put in standby, the notifications (or whatever you want to happen at that time) will still be executed.
