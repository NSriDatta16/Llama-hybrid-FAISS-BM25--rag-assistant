[site]: stackoverflow
[post_id]: 4335475
[parent_id]: 4335313
[tags]: 
OK, I don't really have an answer why you're getting a "null reference exception" - but a few points to throw in, nonetheless: I would use sys.tables instead of sysobjects and having to specify what type of object to query for ALWAYS put your disposable SqlConnection and SqlCommand into using(.....) { ...... } blocks. That way, you won't need any finally {..} blocks, and .NET will take care of properly disposing of those objects when they're no longer needed why do you use a DataSet when you only have a single table inside?? That's just unnecessary overhead - use a DataTable instead! don't open the SqlConnection that early - wait 'til the very last moment, open it, execute query, close it again right away actually, when using the SqlDataAdapter , you don't need to open the SqlConnection yourself at all - the SqlDataAdapter will do that for you (and close it again after it is done reading the data) do not mix the retrieval of the data from the database with the binding to the UI element - this is a very bad practice. From the GetTablesWithUpperCaseName method, you should return something (like a DataTable ) to the caller (the UI) and let the UI handle the binding process along the same lines: that method should not be grabbing stuff from UI elements (like text boxes) itself - pass in those values as method parameters, to get a cleaner code - one that you might actually be able to reuse in another project some day This is how I think your first method ought to look like public DataTable GetTablesWithUpperCaseName(string server, string database, string username, string password) { // Create the datatable DataTable dtListOfTablesWithUppercaseName = new DataTable("tableNames"); SqlConnectionStringBuilder objConnectionString = new SqlConnectionStringBuilder(); objConnectionString.DataSource = server;; objConnectionString.UserID = username; objConnectionString.Password = password; objConnectionString.InitialCatalog = database; // Define the Query against sys.tables - much easier and cleaner! string selectTablesWithUppercaseName = "SELECT NAME FROM sys.tables WHERE UPPER(name) COLLATE Latin1_General_BIN = name COLLATE Latin1_General_BIN AND is_msshipped = 0"; // put your SqlConnection and SqlCommand into using blocks! using (SqlConnection sConnection = new SqlConnection(objConnectionString.ConnectionString)) using (SqlCommand sCommand = new SqlCommand(selectTablesWithUppercaseName, sConnection)) { try { // Create the dataadapter object SqlDataAdapter sDataAdapter = new SqlDataAdapter(selectTablesWithUppercaseName, sConnection); // Fill the datatable - no need to open the connection, the SqlDataAdapter will do that all by itself // (and also close it again after it is done) sDataAdapter.Fill(dtListOfTablesWithUppercaseName); } catch (Exception ex) { //All the exceptions are handled and written in the EventLog. EventLog log = new EventLog("Application"); log.Source = "MFDBAnalyser"; log.WriteEntry(ex.Message); } } // return the data table to the caller return dtListOfTablesWithUppercaseName; }
