[site]: stackoverflow
[post_id]: 3698731
[parent_id]: 
[tags]: 
How to terminate a worker thread correctly in c#

Problem statement I have a worker thread that basically scans a folder, going into the files within it, and then sleeps for a while. The scanning operation might take 2-3 seconds but not much more. I'm looking for a way to stop this thread elegantly. Clarification : I want to stop the thread while it's sleeping , and not while it's scanning . However, the problem is that I do not know what is the current state of the thread. If it's sleeping I want it to exit immediately. If it's scanning, I want it to exit the moment it tries to block. Attempts at a solution At first I was using Sleep and Interrupt. Then I found out that Interrupt doesn't really interrupt the Sleep - it only works when the threads TRIES to go into sleeping. So I switched to Monitor Wait&Pulse. Then I found out that the Pulse only works when I'm actually in the Wait. So now I have a thread which looks like that: while (m_shouldRun) { try { DoSomethingThatTakesSeveralSeconds(); lock (this) { Monitor.Wait(this, 5000); } } catch (ThreadInterruptedException) { m_shouldRun = false; } } And now I need to craft my Stop function. So I started with: public void Stop() { m_shouldRun = false; lock (this) { Monitor.Pulse(this); } thread.Join(); } But this doesn't work because I may be pulsing while the thread works (while it's not waiting). So I added Interrupt: public void Stop() { m_shouldRun = false; thread.Interrupt(); lock (this) { Monitor.Pulse(this); } thread.Join(); } Another option is to use: public void Stop() { m_shouldRun = false; while (!thread.Join(1000)) { lock (this) { Monitor.Pulse(this); } } } The question What is the preferred method? Is there a third method which is preferable?
