[site]: stackoverflow
[post_id]: 1233285
[parent_id]: 1231075
[tags]: 
The problem with your design is not due to the column design in your tables. You can keep the same exact columns you presented in your proposed solution, and get better results, from both a performance and a flexibility perspective. What you need to do is to set up a compound referential constraint between CurrentState and StateValue, and drop the referential constraint between CurrentState and StateType. (I don't see that constraint in your problem statement, but I presume it from your use of "FK".) I've forgotten the syntax for a compound referential constraint (it might be DBMS specific), but it's something like CONSTRAINT ValidState FOREIGNKEY (StateValueId, StateTypeId) REFERENCES StateValue (Id, StateTypeId) This would be in the definiton of CurrentState. Don't worry about the fact that CurrentState doesn't reference StateType. Because StateValue references StateType your constraints will work transitively together. The compound contraint will ensure that you don't store a relationship between State Values and State types in Current state that contradicts the same relationship stored in StateValue. Now you can create a single unique index that ties two of the three foreign keys in CurrentState together. CREATE UNIQUE INDEX CurrentStateIDX on CurrentState (EquipmentId, StateTypeId). If I were doing the design, I would drop the column CurrentState.ID completely. I would then define a compound primary key for CurrentState that lists EquipmentID and StateTypeID. This would cause the DBMS (in most cases) to organize the table optimally for joins, and create the appropriate unique index. CurrentState.ID is going to be rarely used anyway. But if you really like to have an ID column on every table, suit yourself.
