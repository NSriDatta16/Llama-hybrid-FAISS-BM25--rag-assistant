[site]: datascience
[post_id]: 120078
[parent_id]: 120056
[tags]: 
After gaining better understanding of the problem at hand, here is my solution to deep encode my species categories so that the network can learn from them. # Perform deep encoding on species names # Create test data frame containing y and Species test = pd.concat([y, X['Species']], axis=1) # Convert species names to ordinal numbers test['Species_ord'] = pd.Categorical(test['Species'], categories=test['Species'].unique(), ordered=True).codes # Define embedding parameters m = len(test['Species'].unique()) embedding_size = min(50,m+1/2) # Create model structure model = Sequential([ Embedding(input_dim = m, output_dim = embedding_size, input_length = 1, name="embedding"), Flatten(), Dense(32,activation="relu"), Dense(1,activation="relu") ]) # Compile the models model.compile(optimizer=tf.keras.optimizers.Adam(), loss=tf.keras.losses.mae, metrics=['mae']) # Train random.seed(132) model.fit(x = test['Species_ord'], y = test['Age'], epochs = 50, batch_size = 16, verbose = 1) # Grab the new embedded variables for species Species_embedded = model.get_layer('embedding').get_weights() Species_embedded_df = pd.DataFrame(Species_embedded[0]) # Change name of embeddings Species_embedded_df = Species_embedded_df.rename(columns=lambda x: f"Species_encode_{x}") # Add species names to embeddings as ID Species_embedded_df["Species"] = test['Species'].unique() # Save to disk for later use Species_embedded_df.to_csv(dir + "3-Resultats/Tables/Tree_Species_Embeddings.csv", index=False) ```
