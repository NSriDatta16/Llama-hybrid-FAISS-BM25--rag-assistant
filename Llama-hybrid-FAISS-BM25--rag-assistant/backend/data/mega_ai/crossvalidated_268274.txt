[site]: crossvalidated
[post_id]: 268274
[parent_id]: 
[tags]: 
Anomaly/Outlier detection based on user access for a large application

Problem Statement: Find Anomalies/outliers using application access logs in an un-supervised learning environment. Basic use case is to find any anomalies in user access made to a large KMS. Input Data: Data would be created from log file that are in the following format: ts, src_ip, decrypt, user_a, group_b, kms_region, key Where: ts : time in epoch of access Eg: 1489840335 decrypt : is one of the various possible actions. user_a, group_a : are the user and group that did the access kms_region : the region in which the key exists key : the key that was accessed Train Set : This comes under the un-supervised learning and hence we cant have a "normal" training set which the model can learn. Currently the processing might be done nightly, however eventual goal is to do online learning so as to learn new access behaviors as it happens. Example of anomalies: User A suddenly accessing from a different IP: xx.yy No. of access for a given key going up suddenly for a given user,key pair Increased access on a generally quite long weekend Increased access on a Thu (compared to last Thursdays) Unusual sequences of actions for a given user . Eg. read, decrypt, delete in quick succession for all keys for a given user From our research, we have come up with below list of algorithms that are applied to similar problems: ARIMA : This might be good for timeseries predicting, but will it also learn to flag anomalies like #3, #4, sequences of actions(#5) etc? scikit-learn's Novelty and Outlier Detection : Fitting an elliptic envelope and Isolation Forest. Not sure if these will address all 5 use cases above. Neural Networks k-nearest neighbors Clustering-Based Anomaly Detection Techniques: k-Means Clustering etc Parametric Techniques (See Section 7): This might work well on continuous variables, but will it work on discrete features like, is_weekday etc? Any other algorithm, we might have missed. Any feedback on the algorithm / technique to use for the above usecases would be highly appreciated.
