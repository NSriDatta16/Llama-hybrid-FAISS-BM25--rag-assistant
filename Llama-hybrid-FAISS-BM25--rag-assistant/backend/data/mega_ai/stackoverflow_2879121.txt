[site]: stackoverflow
[post_id]: 2879121
[parent_id]: 2879063
[tags]: 
In cases like this, I prefer to use extension methods - as they do a great job of encapsulating this logic for reuse - and a good name can also help make the logic easily discoverable. For example, in projects where I've used L2S in MVC applications, I just create a folder in my Models folder called Extensions - then I drop 'extension' methods in there per model/L2S class/etc (just to keep things organized). Then, for this case I'd create something like so: public static class CategoryExtensions { public static List GetAlphabetizedSubCategories(this Category category) { return category.SubCategories .OrderBy(sc => sc.Name) .ToList(); } } And then, from within my MVC view, for example, if I'm passing in the Category as the Model, I could just do something as simple as: Stuff goes here... That's an MVC example - but you could apply that pretty-much anywhere as the idea is that you're 'decorating' your object with a method that explicitly does what you're after, and you're not making additional copies/etc.
