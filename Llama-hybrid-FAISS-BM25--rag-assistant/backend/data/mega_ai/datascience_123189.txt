[site]: datascience
[post_id]: 123189
[parent_id]: 123181
[tags]: 
When trying to understand vector databases, it is useful to start with the low-dimensional vectors your brain is really good at understanding: map coordinates. Imagine you are Google Maps, and you have a database of every business on the planet; millions and millions of latitude/longitude pairs. Now you want to run a query: "Find restaurants near 38.8977° N, 77.0365° W ". You could calculate the distance of every restaurant to that point using the distance formula you learned in grade school √((x2 – x1)² + (y2 – y1)²) , then sort by the result of the formula. That would be slow though. You would have to do this calculation for every restaurant. What you want is to be able build an index for this query the same way you would build a hash-table index for an exact match query or a b-tree index for an inequality query. Indexes that can do this for points* on a map are called spatial indexes . A database that supports these index types might be called a spatial database, but if you are willing to stretch your brain a little bit you might find applications for this type of index that don't have to do with maps. For example, consider this graph: Suppose you want to know how a particular policy might impact a country, and you think GDP and birthrate are significant factors. You might ask yourself "what other countries are similar in these 2 ways that I have deemed significant". You would be looking for other countries that were your nearest neighbors , not on a physical map, but on the graph. You can extend this idea to 3 dimensions. Maybe you're NASA and you need to find the closest objects in space to a given point. Because you are in 3d, your points will be 3d vectors ( x, y, z ). Maybe you want to do this for a graph, but you have 3 significant factors rather than 2. Again, it's the same principle just with 3d points rather than 2d points. You can extend this further, into 4d, 5d, or 512d graphs. The problem is just that you quit being able to draw those graphs in our 3d reality. The math still works though. One of the AI examples that is easiest to think about with this is facial recognition. You need to reduce a face to a bunch of numerical properties, like eye color, hair color, distance between the eyes, nose size, ear size, skin tone, etc. Then you need to find other faces that are "close" to this one. * or other shapes, like squares or circles NOTE: I have been explaining "distance" as euclidean distance . If you aren't trying to learn too much about vectors, don't worry about it, but there are alternative ways of measuring distance.
