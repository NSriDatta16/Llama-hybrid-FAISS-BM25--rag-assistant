[site]: stackoverflow
[post_id]: 1285542
[parent_id]: 1283555
[tags]: 
There's a way to calculate widths exactly, rather than using Gorilla3D's worst case algorithm . Try this code from http://devzone.zend.com/article/2525-Zend_Pdf-tutorial#comments-2535 I've used it in my application to calculate offsets for right-aligned text and it works /** * Returns the total width in points of the string using the specified font and * size. * * This is not the most efficient way to perform this calculation. I'm * concentrating optimization efforts on the upcoming layout manager class. * Similar calculations exist inside the layout manager class, but widths are * generally calculated only after determining line fragments. * * @link http://devzone.zend.com/article/2525-Zend_Pdf-tutorial#comments-2535 * @param string $string * @param Zend_Pdf_Resource_Font $font * @param float $fontSize Font size in points * @return float */ function widthForStringUsingFontSize($string, $font, $fontSize) { $drawingString = iconv('UTF-8', 'UTF-16BE//IGNORE', $string); $characters = array(); for ($i = 0; $i glyphNumbersForCharacters($characters); $widths = $font->widthsForGlyphs($glyphs); $stringWidth = (array_sum($widths) / $font->getUnitsPerEm()) * $fontSize; return $stringWidth; } With regard to performance, I haven't used this intensively in a script but I can imagine it's slow. I'd suggest writing the PDFs to disk, if possible, so repeat views are very fast, and caching/hard coding data where possible.
