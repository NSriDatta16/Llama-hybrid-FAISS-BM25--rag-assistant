[site]: stackoverflow
[post_id]: 5295680
[parent_id]: 5295639
[tags]: 
From section 6.2.2, Linkages of identifiers , of C99, the definitive source: 1/ An identifier declared in different scopes or in the same scope more than once can be made to refer to the same object or function by a process called linkage. There are three kinds of linkage: external, internal, and none. 2/ In the set of translation units and libraries that constitutes an entire program, each declaration of a particular identifier with external linkage denotes the same object or function. Within one translation unit, each declaration of an identifier with internal linkage denotes the same object or function. Each declaration of an identifier with no linkage denotes a unique entity. 3/ If the declaration of a file scope identifier for an object or a function contains the storage-class specifier static, the identifier has internal linkage. 4/ For an identifier declared with the storage-class specifier extern in a scope in which a prior declaration of that identifier is visible, if the prior declaration specifies internal or external linkage, the linkage of the identifier at the later declaration is the same as the linkage specified at the prior declaration. If no prior declaration is visible, or if the prior declaration specifies no linkage, then the identifier has external linkage. 5/ If the declaration of an identifier for a function has no storage-class specifier, its linkage is determined exactly as if it were declared with the storage-class specifier extern. If the declaration of an identifier for an object has file scope and no storage-class specifier, its linkage is external. 6/ The following identifiers have no linkage: an identifier declared to be anything other than an object or a function; an identifier declared to be a function parameter; a block scope identifier for an object declared without the storage-class specifier extern. 7/ If, within a translation unit, the same identifier appears with both internal and external linkage, the behavior is undefined. Now, tackling your variables one by one: a is covered by part 5 since it's "an identifier for an object [that] has file scope and no storage-class specifier". It therefore has external linkage. b is also covered by part 5 (file scope, no storage-class specifier). Hence external linkage. c is covered by part 3 since it has the static storage-class specifier - it has internal linkage. finally, d is covered by part 6, being a function parameter - it has no linkage.
