[site]: stackoverflow
[post_id]: 392147
[parent_id]: 392097
[tags]: 
If you read the literature on Design Patterns, you will see it is an umbrella term covering at least the following kinds of knowledge: Solutions to common problems Useful programming techniques that every programmer should know, i.e., that should be in common use Workarounds for lossage in commonly used languages (the original Gang of Four book contained many workarounds for lossages in C++ as compared to, say Smalltalk) The other important aspect of design patterns is that they give programmers a common vocabulary for talking about this things. So, to be a design pattern, something has to be shared among the community and to be given an agreed-upon name . To answer your question, you might create a new design pattern , but it is a lot of work first to create something new , then to get the community to agree that it is worthwhile (and what to call it). Certainly new problems will become common, useful new programming techniques will be invented, and new lossages will create needs for new workarounds. But it won't happen very often and to invent new solutions will be a ton of work . The Gang of Four book was almost entirely a codification of existing practice---the major new contribution of the book was the shared vocabulary. It's a worthy contribution but was disappointing to those of us who heard the hype and were hoping for something more than old wine in new bottles. If you want to create new design patterns, leave well-trodden paths . For example, patterns are old news almost everywhere in the object-oriented world. (Though there are probably still opportunities for patterns around multimethod dispatch or prototype-based languages.) By contrast, the functional programmers are still waiting for somebody to identify and name most of the common solutions and good practices. If you are a great thinker and writer, you could have a dramatic impact on that field.
