[site]: stackoverflow
[post_id]: 4338564
[parent_id]: 
[tags]: 
How do I implicitly use a Target to generate an Included file?

I'm a make(1) guy by nature. What I want to do is the equivalent of this make fragment: FILES = generated.cs app.exe : $(FILES) csc -out:$@ $(FILES) generated.cs : echo "// generated file" > $@ That is, $(FILES) contains a list of files, some of which may be generated by other targets within the Makefile. This Just Works. I would like to do the ~same thing with MSBuild. Unfortunately, my attempt has failed: That is, use to include a generated file and have MSBuild deduce that since Generated.cs doesn't exist, it should find some which will generate that file and then execute it. It looks like the only way to do something like this is to add pre-build steps, but that seems like a hack. Are pre-build steps the only way to do this? Or is there some way to make MSBuild act like it has a brain? Update 1 : For reference, this would be the pre-build incantation needed to make it work, and (again) this is something I'd rather avoid if possible: BuildGenerated;$(CompileDependsOn) This would need to occur after the element(s) defining .
