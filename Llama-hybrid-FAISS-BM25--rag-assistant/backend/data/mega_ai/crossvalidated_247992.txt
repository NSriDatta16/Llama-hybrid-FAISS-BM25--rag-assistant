[site]: crossvalidated
[post_id]: 247992
[parent_id]: 
[tags]: 
Stumbling block in creating a new dataset

I am trying to build a dataset with data obtained from scraping media articles and their respective comments. The comments are usually short with an average of around 13 words per comment. I have constructed an R data frame to accomodate Alchemy API results such as concepts, taxonomy, keywords, emotions and sentiment and have limited the number of concepts and keywords to five for each area. I ended up with a data frame having 35 columns that also include an ID and the comment itself so that everything about each comment is in one place. My stumbling block is with how to best store the information related to the article itself. For this I thought not to limit the number of concepts and keywords as I did with comments as in my project I will somehow compare keywords from the articles and comments to find some common grounds. I know that it is not usually acceptable to ask for suggestions but I am really stumped. For example, one article yielded 19 concepts and 30 keywords (with their relevance values the number will double! Of course this can mean that other articles might yield more or less but the number will surely vary. Trying to build a dataset with these dimensions will result in a very wide and very shallow (only one row) dataframe. I thought of using a list and store the all the concepts and all the keywords in a vector containing concept/keyword and repsective relevance score, and then to store the vector in a field in the list or data frame. This would make it a little awkward to look for information during processing and also when visually viewing the dataframe it shows only 1:19 in the field, making it a little hard to inspect. The following is the dput() output of how my empty dataframe's column headings look like: structure(list(commentId = logical(0), comment = logical(0), senti_type = logical(0), senti_score = logical(0), concept_1 = logical(0), c_relevance_1 = logical(0), concept_2 = logical(0), c_relevance_2 = logical(0), concept_3 = logical(0), c_relevance_3 = logical(0), concept_4 = logical(0), c_relevance_4 = logical(0), concept_5 = logical(0), c_relevance_5 = logical(0), taxonomy_1 = logical(0), taxo_score_1 = logical(0), taxonomy_2 = logical(0), taxo_score_2 = logical(0), taxonomy_3 = logical(0), taxo_score_3 = logical(0), keywords_1 = logical(0), kw_relevance_1 = logical(0), keywords_2 = logical(0), kw_relevance_2 = logical(0), keywords_3 = logical(0), kw_relevance_3 = logical(0), keywords_4 = logical(0), kw_relevance_4 = logical(0), keywords_5 = logical(0), kw_relevance_5 = logical(0), emo_anger = logical(0), emo_disgust = logical(0), emo_fear = logical(0), emo_joy = logical(0), emo_sadness = logical(0)), .Names = c("commentId", "comment", "senti_type", "senti_score", "concept_1", "c_relevance_1", "concept_2", "c_relevance_2", "concept_3", "c_relevance_3", "concept_4", "c_relevance_4", "concept_5", "c_relevance_5", "taxonomy_1", "taxo_score_1", "taxonomy_2", "taxo_score_2", "taxonomy_3", "taxo_score_3", "keywords_1", "kw_relevance_1", "keywords_2", "kw_relevance_2", "keywords_3", "kw_relevance_3", "keywords_4", "kw_relevance_4", "keywords_5", "kw_relevance_5", "emo_anger", "emo_disgust", "emo_fear", "emo_joy", "emo_sadness"), class = "data.frame", row.names = integer(0)) Any suggestions as to a suitable way to store this data would all be welcome. Thank you.
