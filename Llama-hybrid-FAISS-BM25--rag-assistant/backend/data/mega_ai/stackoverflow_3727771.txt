[site]: stackoverflow
[post_id]: 3727771
[parent_id]: 3651962
[tags]: 
The program tries to deduce a regex that fits the examples I don't think it's a useful question to ask. You have to know semantically what you need to represent to deduce something. When you write a regex, you have a purpose: accepting urls, accepting emails, extracting tokens from code, etc. I would redefine the question as so: given a knowledge base and a semantic for regular expression, compute the smallest regex. This get a step further, because you have natural language trying explaining a general expression and we all know how it get ambiguous! You have to have some semantic explanation. Without that, the best thing you can do for examples is to compute regex that cover all string from the ok list. Algorithm for coverage: Populate Ok List Populate Not ok List Check for repetitions Check for contradictions ( the same string cannot be in both list ) Create Deterministic Finite Automata (DFA) from Ok List where strings from the list are final states Simplify the DFA by eliminating repetitive states. ([1] 4.4 ) Convert DFA to regular expression. ([1] 3.2.2 ) Test Ok list and Not ok list [1] Introduction to Automata Theory, Language, and Computation. J. Hopcroft, R. Motwani, J.D. Ullman, 2nd Edition, Pearson Education. P.S. I had some experience with genetic programming and I think it's really overhead for your problem. Since the objective function is really light it's better to evaluate with a single processor and this can take a lot of time. To have shorter expression you just need to minimize the DFA. But GA may possibly produce interesting result.
