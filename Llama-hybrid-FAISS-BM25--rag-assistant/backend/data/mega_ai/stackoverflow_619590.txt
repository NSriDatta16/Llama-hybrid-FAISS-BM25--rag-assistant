[site]: stackoverflow
[post_id]: 619590
[parent_id]: 619467
[tags]: 
3.7.4 Dynamic storage duration 2 The library provides default definitions for the global allocation and deallocation functions. Some global allocation and deallocation functions are replaceable (18.5.1). A C++ program shall provide at most one definition of a replaceable allocation or deallocation function. Any such function definition replaces the default version provided in the library (17.6.4.6) [...] 17.6.4.6 Replacement functions A C++ program may provide the definition for any of eight dynamic memory allocation function signatures declared in header (3.7.4, Clause 18): operator new(std::size_t) operator new(std::size_t, const std::nothrow_t&) operator new[](std::size_t) operator new[](std::size_t, const std::nothrow_t&) operator delete(void*) operator delete(void*, const std::nothrow_t&) operator delete[](void*) operator delete[](void*, const std::nothrow_t&) Hope this clarifies what is a legal overload and what isn't. This may be of interest to a few here: #define delete cout Caveat Lector : What I do here is a Bad Thing (TM) to do -- overloading new/delete globally.
