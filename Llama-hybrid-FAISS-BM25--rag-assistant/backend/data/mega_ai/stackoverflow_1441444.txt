[site]: stackoverflow
[post_id]: 1441444
[parent_id]: 1440306
[tags]: 
Like Yacoder said, there is definitely a more elegant way to do this. If, however, you want to go with the dynamic name approach, you should be able to make it work using an attached property like so: namespace ListBoxExample { public static class TagAttach { public static readonly System.Windows.DependencyProperty TagProperty = System.Windows.DependencyProperty.RegisterAttached( "Tag", typeof (string), typeof (TagAttach)); public static void SetTag(System.Windows.UIElement element, string value) { element.SetValue(TagProperty, value); } public static string GetTag(System.Windows.UIElement element) { return (string)element.GetValue(TagProperty); } } } Up Down namespace ListBoxExample { public partial class Window1 { public Window1() { InitializeComponent(); DataContext = new[] { new {Name = "Tom", Position = "Butcher"}, new {Name = "Dick", Position = "Baker"}, new {Name = "Harry", Position = "Candlestick Maker"} }; } private void MoveUpClick(object sender, System.Windows.RoutedEventArgs e) { System.Windows.MessageBox.Show("Up - " + TagAttach.GetTag(sender as System.Windows.UIElement)); } private void MoveDownClick(object sender, System.Windows.RoutedEventArgs e) { System.Windows.MessageBox.Show("Down - " + TagAttach.GetTag(sender as System.Windows.UIElement)); } } }
