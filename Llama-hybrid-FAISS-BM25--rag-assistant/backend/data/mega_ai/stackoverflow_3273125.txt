[site]: stackoverflow
[post_id]: 3273125
[parent_id]: 3272911
[tags]: 
Yes they do the same thing. In addition to clarifying that you are dealing with an instance of the class and distinguishing the field from the parameter, you also get some intellisense goodness when you use this and then hit the dot. Another matter of taste that you may come across is to distinguish the field from the parameter by prefixing an underscore in front of the field and not using this, as in: _name = name; This convention also is useful with Intellisense as you know you will find all of your private fields at the top of the list. Finally, it isn't uncommon at all to use a private setter in your property and eliminate the backing field altogether, as in: public string Name { get; private set; } public Person(string name) { Name = name; } Which would bring us full circle to the this operator, which if used in front of Name (this.Name) would compile to the exact same thing. My personal taste is to not use this, as I find it noisy to do so (and if I needed it to distinguish one thing from another I have surely screwed something else up). Plenty of people who write very elegant code will use it though. HTH, Berryl
