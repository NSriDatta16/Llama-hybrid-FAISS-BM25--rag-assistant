[site]: stackoverflow
[post_id]: 1530683
[parent_id]: 1530610
[tags]: 
Ganesh' answer is spot on. Let me briefly elaborate on the meaning of an "infinite type". dot has this type definition: dot :: (Num a) => [a] -> [a] -> a This means that dot takes two lists of Num elements and returns a Num . Your definition includes this line: x@[xi,xs] `dot` y@[yi,ys] = xi*yi + (xs `dot` ys) Since, as Ganesh points out, [xi,xs] is a list consisting of two elements, xi and xs should be Num s. Same for yi and ys . But then they are passed as arguments to dot : xs `dot` ys This means that xs and ys must be lists of Num s. That leads to a contradiction. Another way to look at this, is to for a moment forget about the type definition of dot . This line, x@[xi,xs] `dot` y@[yi,ys] = xi*yi + (xs `dot` ys) states that dot takes two lists whose elements are appropriate arguments to dot . But the only way for that to make sense, is if these lists are infinitely nested . That is not allowed nor sensible.
