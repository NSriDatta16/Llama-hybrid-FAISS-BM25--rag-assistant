[site]: stackoverflow
[post_id]: 57152
[parent_id]: 
[tags]: 
What's the best way to handle one-to-one relationships in SQL?

Let's say I've got Alpha things that may or may not be or be related to Bravo or Charlie things. These are one-to-one relationships: No Alpha will relate to more than one Bravo. And no Bravo will relate to more than one Alpha. I've got a few goals: a system that's easy to learn and maintain. data integrity enforced within my database. a schema that matches the real-world, logical organization of my data. classes/objects within my programming that map well to database tables (à la Linq to SQL) speedy read and write operations effective use of space (few null fields) I've got three ideas… PK = primary key FK = foreign key NU = nullable One table with many nullalbe fields (flat file)… Alphas -------- PK AlphaId AlphaOne AlphaTwo AlphaThree NU BravoOne NU BravoTwo NU BravoThree NU CharlieOne NU CharlieTwo NU CharlieThree Many tables with zero nullalbe fields… Alphas -------- PK AlphaId AlphaOne AlphaTwo AlphaThree Bravos -------- FK PK AlphaId BravoOne BravoTwo BravoThree Charlies -------- FK PK AlphaId CharlieOne CharlieTwo CharlieThree Best (or worst) of both: Lots of nullalbe foreign keys to many tables… Alphas -------- PK AlphaId AlphaOne AlphaTwo AlphaThree NU FK BravoId NU FK CharlieId Bravos -------- PK BravoId BravoOne BravoTwo BravoThree Charlies -------- PK CharlieId CharlieOne CharlieTwo CharlieThree What if an Alpha must be either Bravo or Charlie, but not both? What if instead of just Bravos and Charlies, Alphas could also be any of Deltas, Echos, Foxtrots, or Golfs, etc…? EDIT: This is a portion of the question: Which is the best database schema for my navigation?
