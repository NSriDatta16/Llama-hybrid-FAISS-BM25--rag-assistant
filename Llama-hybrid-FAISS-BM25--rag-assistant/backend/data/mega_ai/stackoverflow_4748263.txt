[site]: stackoverflow
[post_id]: 4748263
[parent_id]: 4748211
[tags]: 
I don't think there is. I blogged about this topic previously - I think it's a UI flaw in NetBeans that they let you pick them independently of each other. From my blog post: This post from bytes.com does a good job of explaining this: Overriding the hashCode method. The contract for the equals method should really have another line saying you must proceed to override the hashCode method after overriding the equals method. The hashCode method is supported for the benefit of hash based collections. The contract Again from the specs: Whenever it is invoked on the same object more than once during an execution of an application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the equals method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. So equal objects must have equal hashCodes. An easy way to ensure that this condition is always satisfied is to use the same attributes used in determining equality in determining the hashCode. You should now see why it is important to override hashCode every time you override equals. That sentence from the last paragraph sums it up: “ An easy way to ensure that this condition is always satisfied is to use the same attributes used in determining equality in determining the hashCode” .
