[site]: stackoverflow
[post_id]: 119457
[parent_id]: 108389
[tags]: 
The Easy way @cos, For the example you have shown, i would say the easiest way to create this system in C++ would be to not trouble with the reference counting. All you have to do would be to make sure that the program flow first destroys the objects (views) which holds the direct references to the objects (paragraphs) in the collection, before the root Document get destroyed. The Tough Way However if you still want to control the lifetimes by reference tracking, you might have to hold references deeper into the hierarchy such that Paragraph objects holds reverse references to the root Document object such that, only when the last paragraph object gets destroyed will the Document object get destructed. Additionally the paragraph references when used inside the Views class and when passed to other classes, would also have to passed around as reference counted interfaces. Toughness This is too much overhead, compared to the simple scheme i listed in the beginning. It avoids all kinds of object counting overheads and more importantly someone who inherits your program does not get trapped in the reference dependency threads traps that criss cross your system. Alternative Platforms This kind-of tooling might be easier to perform in a platform that supports and promotes this style of programming like .NET or Java. You still have to worry about memory Even with a platform such as this you would still have to ensure your objects get de-referenced in a proper manner. Else outstanding references could eat up your memory in the blink of an eye. So you see, reference counting is not the panacea to good programming practices, though it helps avoid lots of error checks and cleanups, which when applied the whole system considerably eases the programmers task. Recommendation That said, coming back to your original question which gave raise to all the reference counting doubts - Is it ok to expose your objects directly from the collection? Programs cannot exist where all classes / all parts of the program are truly interdependent of each other. No, that would be impossible, as a program is the running manifestation of how your classes / modules interact. The ideal design can only minimize the dependencies and not remove them totally. So my opinion would be, yes it is not a bad practice to expose the references to the objects from your collection, to other objects that need to work with them, provided you do this in a sane manner Ensure that only a few classes / parts of your program can get such references to ensure minimum interdependency. Ensure that the references / pointers passed are interfaces and not concrete objects so that the interdependency is avoided between concrete classes. Ensure that the references are not further passed along deeper into the program. Ensure that the program logic takes care of destroying the dependent objects, before cleaning up the actual objects that satisfy those references.
