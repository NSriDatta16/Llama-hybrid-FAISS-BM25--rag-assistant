[site]: stackoverflow
[post_id]: 1683177
[parent_id]: 1682784
[tags]: 
You are implementing a Comparator . String 's methods, including compareTo throw a NullPointerException if a null is handed in to them, so you should too. Similarly, Comparator throws a ClassCastException if the arguments' types prevent them from being compared. I would recommend you implement these inherited behaviors. class NumericComparator implements Comparator { public int compare(String s1, String s2) { final Double i1; final Double i2; if(s1 == null) { throw new NullPointerException("s1 is null"); // String behavior } try { i1 = Double.parseDouble(s1) } catch (NumberFormatException e) { throw new ClassCastException("s1 incorrect format"); // Comparator behavior } if(s2 == null) { throw new NullPointerException("s2 is null"); // String behavior } try { i2 = Double.parseDouble(s1) } catch (NumberFormatException e) { throw new ClassCastException("s2 incorrect format"); // Comparator behavior } return i1.compareTo(i2); } } You can almost regain the original elegance by extracting a method to do the type checking and conversion. class NumericComparator implements Comparator { public int compare(String s1, String s2) { final Double i1; final Double i2; i1 = parseStringAsDouble(s1, "s1"); i2 = parseStringAsDouble(s2, "s2"); return i1.compareTo(i2); } private double parseStringAsDouble(String s, String name) { Double i; if(s == null) { throw new NullPointerException(name + " is null"); // String behavior } try { i = Double.parseDouble(s1) } catch (NumberFormatException e) { throw new ClassCastException(name + " incorrect format"); // Comparator behavior } return i; } } If you are not particular about the Exception messages, you can lose the "name" parameter. I'm sure you can lose an extra line here or word there by applying little tricks. You say you need to repeat this pattern with three other classes which compare different types of strings and could raise three other exceptions . It's difficult to offer specifics there without seeing the situation, but you may be able to use "Pull Up Method" on a version of my parseStringAsDouble into a common ancestor of NumericComparator that itself implements java's Comparator .
