[site]: stackoverflow
[post_id]: 3337762
[parent_id]: 3337426
[tags]: 
Assuming you already have maven installed in your computer, then download the m2eclipse pluging install it and restart eclipse. Remember the goal of a maven build is to produce and artifact that can be distributed and reused, it's OK if you don't want to make a mvn install before having a somewhat stable version of you "common-project" API, although there is nothing wrong in doing it during development. For your case you can do one of the following: If common-project API is absolutely necessary and will more often than not only be used in the confines of the application-project then build your project as a multi-module project and declare common-project to be a module of your application project . Here is an example of how to do this. If otherwise common-project will be more often than not a shared artifact, then build each project independently having declared the dependencies of both in their pom.xml files eclipse should be able to figure out the dependency between the two. You could develop a partial implementation of common-project first, package it, and then declaring as a dependency in application-project with the system specifying where in the file system it is located, this will tell maven that the dependency is always present and it would not look it up in any repository; although doing a mvn install will be more elegant than this you're trying to avoid that. Regards.
