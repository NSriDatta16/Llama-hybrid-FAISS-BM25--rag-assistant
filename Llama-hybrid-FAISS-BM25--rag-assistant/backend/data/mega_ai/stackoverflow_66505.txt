[site]: stackoverflow
[post_id]: 66505
[parent_id]: 
[tags]: 
How to handle static fields that vary by implementing class

I hit this problem all the time. Suppose I am making a command line interface (Java or C#, the problem is the same I think, I will show C# here). I define an interface ICommand I create an abstract base class CommandBase which implements ICommand, to contain common code. I create several implementation classes, each extending the base class (and by extension the interface). Now - suppose that the interface specifies that all commands implement the Name property and the Execute method... For Name each of my instance classes must return a string that is the name of that command. That string ("HELP", "PRINT" etc) is static to the class concerned. What I would love to be able to do is define: public abstract static const string Name; However (sadly) you cannot define static members in an interface. I have struggled with this issue for years now (pretty much any place I have a family of similar classes) and so will post my own 3 possible solutions below for your votes. However since none of them is ideal I am hoping someone will post a more elegant solution. UPDATE: I can't get the code formatting to work properly (Safari/Mac?). Apologies. The example I am using is trivial. In real life there are sometimes dozens of implementing classes and several fields of this semi-static type (ie static to the implementing class). I forgot to mention - ideally I want to be able to query this information statically: string name = CommandHelp.Name; 2 of my 3 proposed solutions require that the class be instantiated before you can find out this static information which is ugly.
