[site]: datascience
[post_id]: 67407
[parent_id]: 67401
[tags]: 
Scikit uses numpy for pseudo-random number generation. So to fix random state in various scikit calls, you use numpy.random.seed(12345) and then use scikit. You would want to record the random seed when you log the model so you could reproduce the same run later. If your code (or something you call) also uses Python's random number generator, you would set random.seed too. How to set the seed depends on the library. For example I believe most xgboost APIs expose a seed parameter instead. Not sure about catboost. You're also depending on the library even exposing a way to seed any pseudo-random choices it makes. It's possible some library doesn't quite do so. (Or in the case of Spark, sometimes the result can even conceivably depend on order of distributed execution, which is hard to control.)
