[site]: stackoverflow
[post_id]: 4822172
[parent_id]: 4803235
[tags]: 
C does not have runtime-type information (RTTI). So the static type is the runtime type. More precisely this enables the compiler to eliminate the type information altogether from the object-file and generates faster code (no checking during program execution required). For linking the info is in the headers. In C++ RTTI exists only with virtual inheritance/abstract base classes, which is a discouraged idiom due to bad performance (by C++'s standards). In Java (as far as I can recollect) the preferred idiom (at least 7 years ago) was to use a very general interface. This means that there is not much compile-time type information. And of course generics in Java have all Object as static type. So all the information is runtime (with the corresponding overhead). The reason behind that seems to be that static type system are either too rigid (C, Pascal) and need loopholes (void *) or are relatively complex (C++, Haskell). In Haskell the compile type is usually the runtime type except the case of higher order types and the existential type. GHC for some reason (reflection? type class instantiation?) though does not use this for efficiency gains. So the type info is all runtme.
