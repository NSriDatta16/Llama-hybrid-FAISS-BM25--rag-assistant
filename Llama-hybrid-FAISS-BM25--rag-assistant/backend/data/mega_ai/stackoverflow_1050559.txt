[site]: stackoverflow
[post_id]: 1050559
[parent_id]: 1050493
[tags]: 
There needs to be some connection between your code's data structures to the structure of the database. Trying to avoid this for the sake of not mixing application code and data code is not worth the effort - you would need to design both your code and data in the most general possible way. This might be necessary for some applications (design an application that lets users design data structures), but is likely not what you want for many others - Do you really want to have the query the database to learn how your voting tables are structured? how many columns each has? what the names of the columns are?. A good way to go about maintaining a neat and organized application is to maintain a component from which both the table and the application code draw their values. So, for your example, you could design a VoteTypes class with some static final fields. To access the names of the values that actually go into the database, your code would call getAnonVotingTypeName() getIpBasedVotingTypeName() etc.. This way if the names ever changed, you would only need to change them in that one class (and update existing records in the tables, of course).
