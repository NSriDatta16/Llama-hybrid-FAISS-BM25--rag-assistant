[site]: stackoverflow
[post_id]: 2364018
[parent_id]: 2359983
[tags]: 
There are a lot of choices here. First off, I wanted to clarify a little nomenclature... typically your Views or ViewModels contained within your Module assemblies are the things with unsaved changes, not the Module itself . The Module is responsible for instantiating any views necessary at the start and contributing back to the shell during Initialize and that's typically it, so when you attack this problem, you'll want to focus on your views/viewmodels and not the Module classes. Options off the top of my head: Adopt a complimentary framework like Caliburn that has support for application events like this (as well as some MDI events like ViewClosing, that kind of thing). It has builtin support for Prism ( http://caliburn.codeplex.com/ ) Use a composite command . Your views or viewmodels will register themselves with a composite command elsewhere (CloseCommand, which you declare statically for your application) and every open view will have its CanExecute and Execute methods fired so that you can both vote in the closing of the application and also react to it, should it happen anyway. CompositeCommands are a feature of Prism. (See: Commanding Quickstart ) I think those are probably the most elegant. There's a few more options but these live in the best harmony with existing conventions. Hope this helps.
