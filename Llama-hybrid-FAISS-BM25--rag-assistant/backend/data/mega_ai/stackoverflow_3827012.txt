[site]: stackoverflow
[post_id]: 3827012
[parent_id]: 
[tags]: 
What is the difference between these two ViewController Pushes?

What are the differences and the implications of the differences between the boilerplate push provided by apple *detailViewController = [[ alloc] initWithNibName:@" " bundle:nil]; NSManagedObject *selectedObject = [[self fetchedResultsController] objectAtIndexPath:indexPath]; // ... // Pass the selected object to the new view controller. [self.navigationController pushViewController:detailViewController animated:YES]; [detailViewController release]; and this method (from PragProg iphone SDK development Book) cabinet controller is added to interface and @synthesize in implementation: [self.navigationController pushViewController:self.cabinetController animated:YES]; i would chalk it up to the newness of the SDK i am working with versus the book...but that seems really different and seems to imply VERY different ownership, if that is the correct word. My main concern, if the question is too convoluted to answer, is whether or not one of these methods is more memory efficient. EDIT: ok, well, after clearing my vision by posting this question...i don't think there that much of a difference. the boilerplate method allocates memory on demand where the books method makes the cabinet view a property. i think that makes the boilerplate method better somehow...or equal...that part i am still fuzzy on. it seems like both will release just the same but maybe the memory is held earlier using the books method.
