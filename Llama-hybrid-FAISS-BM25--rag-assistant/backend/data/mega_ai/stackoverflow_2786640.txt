[site]: stackoverflow
[post_id]: 2786640
[parent_id]: 2786562
[tags]: 
Why do you find your functions doing 4/5 of the same work? Clearly, you don't have a good abstraction and responsibility segregation. A function should always do one thing, do it right and do it well. Let's take the example of an Average function that calculates the average from an array of integers. A naive implementation would sum up all the elements and then divide them by the number of elements. This division has a problem though, it knows how to sum an array of integers. This violates the above constraint. A better implementation would split the Sum() function from Average() and have Average() use Sum() to obtain the sum of an array of integers. A chorally to the phrase "a function should only do one thing" is "a function should only know how to do one thing. For everything else it may rely on other abstractions (e.g. functions)." What can you gain from a clear abstraction and responsibility segregation? Better composability of your code, it's easier to write new functions No copy&paste coding, spreading potentially buggy code all over your codebase Better readability, a reader is not distracted by implementation details for things that are not directly related to what the function should do Allows for transparent performance optimizations
