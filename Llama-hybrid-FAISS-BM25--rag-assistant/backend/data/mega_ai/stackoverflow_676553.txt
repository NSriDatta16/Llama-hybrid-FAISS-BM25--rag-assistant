[site]: stackoverflow
[post_id]: 676553
[parent_id]: 676545
[tags]: 
One approach would be to write a third proxy application which services the requests, and performs two internal requests to the other two applications, returning whichever result is desired. Alternatively, with mod_perl (or a regular module written in C) you could also install a PerlAccessHandler which could intercept requests, make a subrequest to the first app before letting execution continue into the second app. Here's a rough example of how you'd put that together package MyApache2::MyProxy; use strict; use warnings; use Apache2::RequestRec (); use Apache2::Connection (); use Apache2::Const -compile => qw(FORBIDDEN OK); sub handler { my $r = shift; #prepare a user agent to make the request my $ua = LWP::UserAgent->new; $ua->agent("MyUserAgent/0.1"); #make a request on the app1 domain with the same uri $app1url="http://app1.domain".$r->unparsed_uri(); my $request = HTTP::Request->new(GET => $app1url); my $response = $ua->request($request); #check the outcome of the response if ($response->is_success) { #check $response->content if you like } #tell apache it's ok to continue, falling through to app 2 return Apache2::Const::OK; } 1; Now your app2 vhost can use the handler by doing something like this in its configuration PerlAccessHandler MyApache2::MyProxy
