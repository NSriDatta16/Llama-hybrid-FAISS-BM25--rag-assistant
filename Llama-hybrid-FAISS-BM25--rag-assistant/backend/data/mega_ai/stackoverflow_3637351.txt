[site]: stackoverflow
[post_id]: 3637351
[parent_id]: 3637295
[tags]: 
Quick partial answers; (Is it in C++0x?) Yes. But depends on your compiler's C++0x support too. Some Boost lib which can do this? Boost.Threads . See thread local storage therein. How can I create a static variable which is global to all threads? How can I create a static variable which is local to each thread? How can I create a global variable which is global to all threads? How can I create a global variable which is local to each thread? Note that typically, static refers to duration and global refers to scope. C++0x thread constructors are variadic: You can pass any number (and type) of arguments. All of these are available to your std::thread object. #include int main() { int foo = 42; std::thread t(foo); // copies foo std::thread s(&foo); // pass a pointer t.join(); }
