[site]: stackoverflow
[post_id]: 5432038
[parent_id]: 5431837
[tags]: 
Depending upon how your program your server , you ought to be able to handle a few thousand concurrent TCP sessions. If you pick threading, you might not be able to scale beyond 100-or so clients; each thread brings along enough per-thread storage and scheduling overhead that I really wouldn't want to count on it beyond 50 clients. The new Java NIO framework provides some of the functionality that can be used to scale into hundreds or thousands of simultaneous connections. If the framework uses select(2) under the hood, it ought to be able to do upwards of 1000 simultaneous connections, but if it uses epoll(2) or kqueue or similar constructs, then even beyond 1000 simultaneous connections should be feasible. What you do with those sessions might dictate far smaller numbers of simultaneous connections: streaming video will be more intensive than sending a nice polite "welcome to our network" page.
