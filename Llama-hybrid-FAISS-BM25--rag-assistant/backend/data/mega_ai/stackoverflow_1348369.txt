[site]: stackoverflow
[post_id]: 1348369
[parent_id]: 1348118
[tags]: 
You can remove the x:Key :) This will automatically apply the template when the given type is encountered (probably one of the most powerful and underused features of WPF, imo. This Dr. WPF article goes over DataTemplates pretty well. The section you'll want to pay attention to is " Defining a Default Template for a Given CLR Data Type ". http://www.drwpf.com/blog/Home/tabid/36/EntryID/24/Default.aspx If this doesn't help your situation, you might be able to do something close to what you are looking for using a Style (ItemContainerStyle) and setting the content and header based on the type using a data trigger. The sample below hinges on your ViewModel having a property called "Type" defined pretty much like this (easily put in a base ViewModel if you have one): public Type Type { get { return this.GetType(); } } So as long as you have that, this should allow you to do anything you want. Note I have "A Header!" in a textblock here, but that could easily be anything (icon, etc). I've got it in here two ways... one style applies templates (if you have a significant investment in these already) and the other just uses setters to move the content to the right places. A Header! Begin "A" Content HTH, Anderson
