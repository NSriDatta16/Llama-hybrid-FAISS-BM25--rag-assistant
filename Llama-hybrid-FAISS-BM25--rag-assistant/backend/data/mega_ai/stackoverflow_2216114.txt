[site]: stackoverflow
[post_id]: 2216114
[parent_id]: 2216041
[tags]: 
You have stumbled upon an often complained about behavior with . There are no restrictions on what they can do with the functor, so the answer to your question is no: there is no way to encourage the compiler to elide the copies. It's not (always) the compiler, it's the library implementation . They just like to pass around functors by value (think of std::sort doing a qsort, passing in the functor by value to recursive calls, etc). You have also stumbled upon the exact solution everyone uses: have a functor keep a reference to the state, so all copies refer to the same state when this is desired. I found this ironic: But this makes it impossible to use the "functional" style of immutable objects, and just generally isn't as nice. ...since this whole question is predicated on you having a complicated stateful functor, where creating copies is problematic. If you were using "functional" style immutable objects this would be a non-issue - the extra copies wouldn't be a problem, would they?
