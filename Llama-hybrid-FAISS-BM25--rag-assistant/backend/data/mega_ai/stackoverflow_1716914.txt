[site]: stackoverflow
[post_id]: 1716914
[parent_id]: 1710227
[tags]: 
In my experience, the more database implementations you test with, the sooner you find any places where you have accidentally depended on something which is not portable across databases. If Derby is making your testing faster and easier, then that is a great result, since faster and easier testing encourages more testing. I think that Derby is an excellent choice for testing with, as Derby tries very hard to conform to the SQL standard and to only support the syntax and behaviors that are specified in the standard, so this should help ensure that you are avoiding use of non-standard database features. But I agree that as you get close to deploying your application, you need to be testing it using a configuration which is as close as possible to your intended deployment configuration.
