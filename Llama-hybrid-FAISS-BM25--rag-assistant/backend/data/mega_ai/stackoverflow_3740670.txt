[site]: stackoverflow
[post_id]: 3740670
[parent_id]: 3740374
[tags]: 
Most likely what is happening in your simple example is that malloc happens to use a fresh area of memory that happens to have only zeroes in it at that moment. Actually no, that's compiler specifics. Also, consider such piece of program code: #include int i; int main() { while (i The behaviour of this program is also compiler specifics. But usually a program binary is generated in such a way, that the variable value is set to 0. But since it's not guaranteed, you should always initialize your variables before using them in program code. The same is true for your code. With malloc you get a memory fragment for your variable, but you don't initialize . Therefore you can get unexpected behaviour using this variable, so you should initialise it with a constructor. With a constructor you get a guarantee that at least some fields of the object are set as required, but with malloc you know nothing about the actual values of the fields. Also watch this reference . It is said clearly that malloc does not initialize anything. Also, you should always free memory explicitly after calling malloc, otherwise you will get memory leaks.
