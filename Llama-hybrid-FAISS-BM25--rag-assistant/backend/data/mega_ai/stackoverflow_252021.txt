[site]: stackoverflow
[post_id]: 252021
[parent_id]: 251957
[tags]: 
I prefer using for XML PATH, it provides a nicer way to control your elements etc. See But this is quite tricky /* create table #tablename ( [type] varchar(20), [group] varchar(20), [value] varchar(20) ) insert into #tablename select 'type1','group11','value111' insert into #tablename select 'type1','group11','value112' insert into #tablename select 'type1','group12','value121' insert into #tablename select 'type1','group12','value122' insert into #tablename select 'type2','group21','value211' insert into #tablename select 'type2','group21','value212' insert into #tablename select 'type2','group22','value221' insert into #tablename select 'type2','group22','value222' alter table #tablename add id uniqueidentifier update #tablename set id = newid() */ select [type] as '@name', (select (select [column] from ( select [group] as 'column', tbn1.type, tbn2.[group] from #tablename tbn3 WHERE tbn3.type = tbn1.type and tbn2.[group] = tbn3.[group] union select [value], tbn1.type, tbn2.[group] from #tablename tbn3 WHERE tbn3.type = tbn1.type and tbn2.[group] = tbn3.[group] ) as s for xml path(''),type ) from #tablename tbn2 where tbn2.type = tbn1.type for xml path('row3'), type ) from #tableName tbn1 GROUP BY [type] for xml path('variable'), root('data') gives you what you are asking for I, but elegant and tidy it is not.
