[site]: stackoverflow
[post_id]: 3984573
[parent_id]: 3984427
[tags]: 
Normally, I wouldn't give this much help for homework but, since you've put a fair bit of effort into it already and you're unlikely to find many of us dinosaurs here, I'll help you out. Your problem is here (ignore the things in parentheses on the right, they're just comments to help you out): 200-PROCESS-ONE-RECORD. MOVE NAME-IN TO LEFT-LABEL-OUT MOVE ADDRESS-IN TO LEFT-LABEL-OUT (overwrite) MOVE CITY-STATE-ZIP-IN TO LEFT-LABEL-OUT (overwrite) MOVE SPACES TO BLANK-OUT MOVE NAME-IN TO RIGHT-LABEL-OUT MOVE ADDRESS-IN TO RIGHT-LABEL-OUT (overwrite) MOVE CITY-STATE-ZIP-IN TO RIGHT-LABEL-OUT (overwrite) MOVE SPACES TO BLANK-A-OUT WRITE LABEL-RECORD-OUT (only wrote one line) This is the paragraph that processes one record. What you are doing here is putting three things into both the left and right output sections (so that the first two are being overwritten). What you need is a toggle variable to select whether you're processing a left value or a right value, and the ability to store the left data so you can output them both when you process the right data, something like: WORKING-STORAGE SECTION. 01 ARE-THERE-MORE-RECORDS PIC X(3) VALUE 'YES'. 01 DOING-LEFT PIC X(3) VALUE 'YES'. 01 LEFT-NAME-IN PIC X(20). 01 LEFT-ADDRESS-IN PIC X(20). 01 LEFT-CITY-STATE-ZIP-IN PIC X(20). Then modify your record processing code thus (check the IF syntax, it's been a while since I cut any COBOL code): 200-PROCESS-ONE-RECORD. IF DOING-LEFT = 'YES' THEN PERFORM 201-PROCESS-LEFT-RECORD ELSE PERFORM 202-PROCESS-RIGHT-RECORD. 201-PROCESS-LEFT-RECORD. MOVE NAME-IN TO LEFT-NAME-IN. (just store it) MOVE ADDRESS-IN TO LEFT-ADDRESS-IN. MOVE CITY-STATE-ZIP-IN TO LEFT-CITY-STATE-ZIP. MOVE 'NO' TO DOING-LEFT. (and toggle to right) 202-PROCESS-RIGHT-RECORD. MOVE LEFT-NAME-IN TO LEFT-LABEL-OUT. (first line, both sides) MOVE SPACES TO BLANK-OUT. MOVE NAME-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT. MOVE LEFT-ADDRESS-IN TO LEFT-LABEL-OUT. (second line, both sides) MOVE SPACES TO BLANK-OUT. MOVE ADDRESS-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT. MOVE LEFT-CITY-STATE-ZIP-IN TO LEFT-LABEL-OUT. (third line, both sides) MOVE SPACES TO BLANK-OUT. MOVE CITY-STATE-ZIP-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT. MOVE 'YES' TO DOING-LEFT. (toggle back to left) Then, at the end, after the file has been fully read, you need to detect if you've populated the left data (i.e., there was an odd number of input lines). This will be the case if DOING-LEFT is set to 'NO' . I'll leave that to you but it involves moving the left data and populating the right data with spaces, in a manner very similar to 202-PROCESS-RIGHT-RECORD above (nudge, nudge,wink, wink). And, now that I've had a good look at the desired output, it appears you actually need two copies of each address on both the left and the right. Are you sure that's the way you want to do it since it's a pretty unusual requirement for a mailing label program? In any case, I'll leave all that code in above since it's a good way to do the one-each method of mailing labels but the code you seem to need is much simpler, a very slight variation of the 202-PROCESS-RIGHT-RECORD paragraph. Forget all the extra working storage I mentioned, and just change 200-PROCESS-ONE-RECORD to: 200-PROCESS-ONE-RECORD. MOVE NAME-IN TO LEFT-LABEL-OUT. MOVE SPACES TO BLANK-OUT. MOVE NAME-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT. MOVE ADDRESS-IN TO LEFT-LABEL-OUT. MOVE SPACES TO BLANK-OUT. MOVE ADDRESS-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT. MOVE CITY-STATE-ZIP-IN TO LEFT-LABEL-OUT. MOVE SPACES TO BLANK-OUT. MOVE CITY-STATE-ZIP-IN TO RIGHT-LABEL-OUT. MOVE SPACES TO BLANK-A-OUT. WRITE LABEL-RECORD-OUT.
