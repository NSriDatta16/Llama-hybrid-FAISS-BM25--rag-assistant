[site]: stackoverflow
[post_id]: 4402760
[parent_id]: 4402141
[tags]: 
I would leverage the http pipeline early in the request and send an apporpriate response. My source for answering such questions is: Professional ASP.NET 2.0 Security, Membership, and Role Management An HTTP module might do the trick: Web.config: ... The Actual HTTP Module: /// /// A module for detecting invalid authentication /// /// See "How To Implement IPrincipal" in MSDN public class MyAuthModule : IHttpModule { #region IHttpModule Members void IHttpModule.Dispose() { } void IHttpModule.Init(HttpApplication context) { context.AuthenticateRequest += new EventHandler(context_AuthenticateRequest); } #endregion /// /// Inspect the auth request... /// /// See "How To Implement IPrincipal" in MSDN private void context_AuthenticateRequest(object sender, EventArgs e) { HttpApplication a = (HttpApplication)sender; HttpContext context = a.Context; // Extract the forms authentication cookie string cookieName = FormsAuthentication.FormsCookieName; HttpCookie authCookie = context.Request.Cookies[cookieName]; if (authCookie != null) { FormsAuthenticationTicket authTicket = FormsAuthentication.Decrypt(authCookie.Value); // check if previously authenticated session is now dead if (authTicket != null && authTicket.expired) { // send them a Response indicating that they've expired. } } } } Good luck!
