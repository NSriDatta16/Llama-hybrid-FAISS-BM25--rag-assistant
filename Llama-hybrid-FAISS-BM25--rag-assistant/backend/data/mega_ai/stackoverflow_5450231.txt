[site]: stackoverflow
[post_id]: 5450231
[parent_id]: 
[tags]: 
Java EE i18n and default project structure

I am Python Django devel I want to try Java a little bit. In django I used to do my translation as it follows: from django.utils.translation import ugettext_lazy as _ and then if translation is specified in .po file in locale/en/django.po file _("hello world") Question 1: Is there similar thing in Java? I have found those: gnu.gettext.GettextResource java.util.ResourceBundle Spring 3 MVC i18n and i10n but none of them is what I am looking for I did as in example import java.util.ResourceBundle; import java.util.MissingResourceException; public class i18n { private static ResourceBundle myResources = ResourceBundle.getBundle("messages"); public static String _ (String originalStr) { try { return myResources.getString(originalStr); } catch (MissingResourceException e) { return originalStr; } } } And later import static i18n._; Question 2: But where to put messages.properties file? I would like to have a separate locale directory with those files. translations from whole package and sub-packages locale/messages_en_US.properties locale/messages_en_UK.properties locale/messages_en_AU.properties and so on... Question 3: This part with Exception catching seems not working, do you know why? Question 4: Is there a JavaEE standard for i18n? I thought that java EE should have a standardized app directory layout, i18 and war directory content, but for few days fooling around with java I find it very chaotic. Therefore every sample open source code I am able to find on the Internet is completely different. Starting from Google Wave Protocol project, to end with sample small apps. Question 5: Is there JavaEE coding philosophy or best practices? I found Strategy for Web Applications but developers seems not to care about it. Tests placement, same thing. Everybody have them in different places. Logic like sql queries in templates, WTF...
