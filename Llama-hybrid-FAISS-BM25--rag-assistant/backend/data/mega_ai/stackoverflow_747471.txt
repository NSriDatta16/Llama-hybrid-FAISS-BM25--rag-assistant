[site]: stackoverflow
[post_id]: 747471
[parent_id]: 747382
[tags]: 
If I understand the question well, Mark wants to see an overview of all the last results for each type. Which means that, for every result type, he only wants to see only one row, and that is the Result which has last been added for that type. I think that, the easiest way to achieve this, would be to create an additional class, which we can call 'MyResultOverview' for instance: public class MyResultOverview { public int ResultId {get; set;} public int ResultTypeId {get; set;} public DateTime ResultDate {get; set;} } This class should not be mapped, but NHibernate should be aware that this class exists. Therefore, we'll have to import it: Then, we can create an ICriteria which will populate instances of MyResultOverview (and which will also generate the most efficient SQL Query in order to get this overview). It should look something like this: ICriteria criteria = session.CreateCritera (typeof(MyResult)); criteria.SetProjection (Projections.ProjectionList () .Add (Projections.Property("Id"), "ResultId") .Add (Projections.Property("ResultType"), "ResultType") .Add (Projections.Max("ResultDate"), "ResultDate")); criteria.SetResultTransformer (Transformers.AliasToBean (typeof(MyResultOverview))); IList results = criteria.List (); This should give you a list of MyResultOverview instances which represent the MyResults that you're looking for. Then, in order to retrieve the MyResult itself, you can simply do this by retrieving the MyResult instance for that particalur ResultId that you've retrieved as well. I haven't tested this, nor did i compile it, but this is the path that I would follow to achieve this.
