[site]: stackoverflow
[post_id]: 4274808
[parent_id]: 4274755
[tags]: 
These are the guidelines I personally follow : Prefer forward declarations instead of includes whenever possible. In your case, ClassA contains a ClassB so a #include "ClassB.h" is required. Had the ClassB type only appear in the file by pointer or reference, a forward reference would have been sufficient Make header file "self sufficient" : compilation should never depend on the order of inclusions, and an include file should include / forward declare all it needs to be parsed To ensure that the preceding guideline is respected, always include ClassA.h first in ClassA.cpp , and use an arbitrary ordering for the following includes (I'm using alphabetical sort) Regarding other aspects : #pragma is non standard, prefer include guards Keep in mind that you should never forward declare standard types : if std::string appears in your header file, you have to #include If you end up with a header file which includes a million other files, you might want to look into the pimpl idiom to reduce dependencies (this article also contains several other guidelines regarding header files).
