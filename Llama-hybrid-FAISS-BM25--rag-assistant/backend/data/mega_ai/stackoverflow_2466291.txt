[site]: stackoverflow
[post_id]: 2466291
[parent_id]: 2462007
[tags]: 
What are the standard mechanisms in performing unit testing and writing test cases? There are many .NET testing frameworks. I would recommend you give NUnit or MbUnit. http://www.nunit.org/ http://www.mbunit.com/ MbUnit will come with a test runner, so that might make things easier. I prefer an integrated approach where I can run all my tests right from visual studio, but that requires some significant setup. When using a test runner (such as Gallio which comes with MbUnit) you will be running your unit tests external of your visual studio project. Unit Tests themselves should be located within their own project, generally of the form Fixture. The tests within can be named with differing styles, but the key is to be as descriptive as possible. For example: void when_my_class_is_sent_a_user_it_should_save_it() Also popular [MethodName_StateUnderTest_ExpectedBehavior] Does the methodologies change based on the application nature such as Windows Forms, Web applications etc? The methodology does change based on the applicaiton nature. Fortunately, web forms and win forms are very similar. Unfortunately, they both were designed without testing in mind and tend towards code that is difficult to test properly. What is the best approach to make sure we cover all the scenarios? Test Driven Design (You write the tests, then write the code to make them pass). Code coverage can also be a helpful metric. Any popular books on this? The Art of Unit Testing: With Examples in .Net By Roy Osherove Pragmatic Unit Testing in C# with NUnit Popular tools for performing unit testing? As mentioned above, NUnit & MbUnit. There is also MSTest (comes bundled with VS2008), xUnit and some others. Stongly suggest you go with NUnit or MbUnit though.
