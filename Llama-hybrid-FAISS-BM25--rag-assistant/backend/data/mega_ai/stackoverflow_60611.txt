[site]: stackoverflow
[post_id]: 60611
[parent_id]: 60547
[tags]: 
You don't know for sure that the compiler will do exactly what you expect. The reason is, of course, that a compiler is a peice of software , and is therefore susceptible to bugs. Compiler writers have the advantage of working from a high quality spec, while the rest of us have to figure out what we're making as we go along. However, compiler specs also have bugs, and complex parts with subtle interactions. So, it's not exactly trivial to figure out what the compiler should be doing. Still, once you decide what you think the language spec means, you can write a good, fast, automated test for every nuance. This is where compiler writing has a huge advantage over writing other kinds of software: in testing. Every bug becomes an automated test case, and the test suite can very thorough. Compiler vendors have a lot more budget to invest in verifying the correctness of the compiler than you do (you already have a day job, right?). What does this mean for you? It means that you need to be open to the possibilities of bugs in your compiler, but chances are you won't find any yourself. I would pick a compiler vendor that is not likely to go out of business any time soon, that has a history of high quality in their compilers, and that has demonstrated their ability to service (patch) their products. Compilers seem to get more correct over time, so I'd choose one that's been around a decade or two. Focus your attention on getting your code right. If it's clear and simple , then when you do hit a compiler bug, you won't have to think really hard to decide where the problem lies. Write good unit tests , which will ensure that your code does what you expect it to do.
