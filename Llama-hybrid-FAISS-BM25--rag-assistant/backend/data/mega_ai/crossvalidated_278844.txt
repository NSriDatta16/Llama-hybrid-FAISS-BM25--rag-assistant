[site]: crossvalidated
[post_id]: 278844
[parent_id]: 276882
[tags]: 
The answer to the question seems to be that there is no readily available R package for graph analysis that currently includes clique detection and transitive reduction. (Thanks to user2957945 and Mathias Cardner for their suggestions.) Here is what I ended up doing. I used a mix of two packages: igraph (CRAN) for clique detection relations (CRAN) for transitive reduction I also used DiagrammeR (CRAN), for historical reasons, for displaying the graphs. It turned out that the cost of moving the graphs between the three packages was low compared to the cost of finding a package that did ever everything or implementing transitive reduction in a package that did clique detection. Bear in mind that I was only simplifying a couple of relatively small graphs for display. Using multiple packages may not be so attractive if you need to manipulate many large graphs. I also learned that the clique finding functions I looked at only supported undirected graphs whereas I was working with directed graphs. The obvious definition of clique in a directed graph requires that for every pair of vertices in the clique there are two directed edges going in opposite edges. So you need to find all the bidirectional edges between pairs of vertices, replace each bidirectional edge pair with a single undirected edge, and remove all other edges. Then you can find the same cliques in the transformed, undirected graph. I have included the (inelegant) code I used below in case it is helpful to anyone. Sorry, I can't include my data and don't have time to generate fake data. I use the arules::apriori() to induce rules from data and use the rules as edges of the graph. So any data that you could use as input to arules::apriori() should work with this code. (Whether, there are cliques and redundant edges is another matter.) library(tidyverse) library(arules) library(relations) library(igraph) library(DiagrammeR) # Use arules::apriori() to induce association rules from data frame d. # The rules are constrained to have exactly 1 term (variable=value pair) # on the left hand side (LHS = antecedent) # and right hand side (RHS = consequent) of each rule. # Each rule is interpreted as a directed edge from the LHS to the RHS. # Each variable=value pair that appears in any rule is treated as a vertex # in the graph that represents the logical implication relations # between the vertices. # The confidence parameter allows a few contradicting cases for any rule. # The support parameter means every rule must occur in > 1% of cases. rules_s01_c99
