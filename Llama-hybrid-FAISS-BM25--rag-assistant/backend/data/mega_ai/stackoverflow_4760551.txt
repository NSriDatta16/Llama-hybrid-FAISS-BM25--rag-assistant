[site]: stackoverflow
[post_id]: 4760551
[parent_id]: 
[tags]: 
What's a good pattern to take JSON and assign to various attributes/innerHTML?

For example here, lets pretend we have a program that sends an ajax request to a PHP file, and needs to apply it's values to do things such as: Update form inputs Set checkboxes Update the innerHTML of elements Lets say the below code here does all that, and that's lovely, but it isn't an elegant pattern and maintainability of it is awful if I'm working with more than 10-15 values. The JSON would just simply: {"ID": "1", "gender":"M", .....etc..... } I've made a simple object to save me from having to write the selector a bunch of times when dealing with the form. var dataVars = { phone : $("#Phone1_input"), gender : $("#Gender_input"), birthdate : $("#BirthDate_input"), chk01 : $("#chk01"), chk02 : $("#chk02"), chk03 : $("#chk03") /*Imagine 30 more lines of this*/ } After a successful ajax call to get the data, I assign the form objects one-by-one and have to considder what type of form element I'm updating with hard-coded settings. $.ajax({ url: "./whatever", dataType: "json", type: "post", success: function (data) { dataVars.phone.text(data.ID); //text/innerHTML dataVars.gender.val(data.CreationDate); //Value attribute dataVars.birthdate.val(data.UserName); dataVars.chk01.attr('checked',data.chk01); //Checkbox attribute dataVars.chk02.attr('checked',data.chk02); dataVars.chk03.attr('checked',data.chk03); /*Imagine 30 more lines of this*/ } }); I have the general feeling this is awful, and while I could probably come up with a function that does a lot of checking, I can't help but come up with a lot of different ways to start off a more elegant solution, so really I don't even know what path to take with optimizing this. Should I make that dataVars into an object of functions? Should I make one function to check all the types? Should I change my JSON to be more descriptive? Any thoughts on a best design for this?
