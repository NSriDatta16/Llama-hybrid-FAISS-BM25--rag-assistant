[site]: stackoverflow
[post_id]: 1263078
[parent_id]: 1263018
[tags]: 
I think the best way to look at an interface is: "a list services that will be provided by a class that implements that interface". An example would be ISwitchable, all classes that implement this interface provide a way (that is defined in the interface) to switch. An implementation of ISwitchable could be a button. On the other hand, the base/sub-class relation can be described as: A subclass is a specialization of a base class. So if you have a pet as base class, you can have a dog derive from base since it is a specialization of a pet. You cannot say that a dog provides the pet service. In this example dog class can implement the IBrag interface. I dont agree with some answer here that say "when" something should be an interface or base class. It is part of a modelling process, so it depends on the business objects and the context wether something should be an interface or a base-class.
