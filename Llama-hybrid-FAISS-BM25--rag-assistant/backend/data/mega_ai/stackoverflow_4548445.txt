[site]: stackoverflow
[post_id]: 4548445
[parent_id]: 4023207
[tags]: 
I have implemented my own int-int dictionary, available here (BSD license). In short, I use array.array('i') to store key-value pairs sorted by keys. In fact, instead of one large array, I keep a dictionary of smaller arrays (a key-value pair is stored in the key/65536 th array) in order to speed up shifting during insertion and binary search during retrieval. Each array stores the keys and values in the following way: key0 value0 key1 value1 key2 value2 ... Actually, it is not only an int-int dictionary, but a general object-int dictionary with objects reduced to their hashes. Thus, the hash-int dictionary can be used as a cache of some persistently stored dictionary. There are three possible strategies of handling "key collisions", that is, attempts to assign a different value to the same key. The default strategy allows it. The "deleting" removes the key and marks it as colliding, so that any further attempts to assign a value to it will have no effect. The "shouting" strategy throws an exception during any overwrite attempt and on any further access to any colliding key. Please see my answer to a related question for a differently worded description of my approach.
