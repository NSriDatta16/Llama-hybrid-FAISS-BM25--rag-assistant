[site]: stackoverflow
[post_id]: 2979226
[parent_id]: 2924231
[tags]: 
Your choice of application type will be related both to the technology constraints and the type of user experience you plan to deliver. Rich Client Application: Usually developed as a stand-alone application. Can support disconnected or occasionally connected scenarios. Uses the processing and storage resources of the local machine. Web Application: Can support multiple platforms and browsers. Supports only connected scenarios. Uses the processing and storage resources of the server. I personally favor PyQt in your case for a portable application. The homepage for PyQt is http://www.riverbankcomputing.com/software/pyqt/ PyQt supports the Windows, Linux, UNIX and MacOS/X platforms. PyQt4 is a set of Python bindings for Qt 4 that are dual-licensed under the GPL (version 2 and 3, with additional license exceptions) and a commercial license. There is also PySide by Nokia - new alternative bindings (as of November 2009) with LGPL license that struggle to be API compatible (at least until Qt 4.6) with PyQt4. Tools and docs PyQt Reference Documentation. PyQt4 book: http://www.qtrac.eu/pyqtbook.html The pyuic4 utility is a command line interface to the uic module. Conver xml ui from Qt to python. Qt Designer is a powerful cross-platform GUI layout and forms builder. It allows you to rapidly design and build widgets and dialogs using on-screen forms using the same widgets that will be used in your application. PyQt4 exposes much of the functionality of Qt 4 (From Nokia) to Python, including: A comprehensive set of widgets Flexible layout managers Standard GUI features for applications (menus, toolbars, dock windows) Easy communication between application components (signals and slots) A unified painting system with transparency, anti-aliasing, OpenGL integration and SVG support Internationalization (i18n) support and integration with the Qt Linguist translation tool Etc.
