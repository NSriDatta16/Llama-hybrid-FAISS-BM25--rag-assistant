[site]: stackoverflow
[post_id]: 1407377
[parent_id]: 1390296
[tags]: 
Python, 149 chars (after putting the whole for loop into one semicolon-separated line, which I haven't done here for "readability" purposes): def v(s,t=0,o=1): for c in s: k=c=="@" p=c=="." A=c.isalnum()|p|(c=="_") L=c.isalpha() o&=[A,k|A,L,L|p,L,L,L][t] t+=[1,k,1,p,1,1,0][t] return(t>5)&o Test cases , borrowed from strager's answer : assert v("b@w.org") assert v("r..t@x.tw") assert v("j_r@x.mil") assert not v("b@c@d.org") assert not v("test@%.org") assert not v("j_r@x.c.il") assert not v("@w.org") assert not v("test@org") assert not v("s%p@m.org") assert not v("foo@a%.com") print "Yeah!" Explanation : When iterating over the string, two variables keep getting updated. t keeps the current state: t = 0 : We're at the beginning. t = 1 : We where at the beginning and have found at least one legal character (letter, number, underscore, period) t = 2 : We have found the " @ " t = 3 : We have found at least on legal character (i.e. letter) after the " @ " t = 4 : We have found the period in the domain name t = 5 : We have found one legal character (letter) after the period t = 6 : We have found at least two legal characters after the period o as in "okay" starts as 1 , i.e. true, and is set to 0 as soon as a character is found that is illegal in the current state. Legal characters are: In state 0 : letter, number, underscore, period (change state to 1 in any case) In state 1 : letter, number, underscore, period, at-sign (change state to 2 if " @ " is found) In state 2 : letter (change state to 3 ) In state 3 : letter, period (change state to 4 if period found) In states 4 thru 6 : letter (increment state when in 4 or 5 ) When we have gone all the way through the string, we return whether t==6 ( t>5 is one char less) and o is 1.
