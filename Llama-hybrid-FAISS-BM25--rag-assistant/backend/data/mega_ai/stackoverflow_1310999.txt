[site]: stackoverflow
[post_id]: 1310999
[parent_id]: 1306800
[tags]: 
I would discourage the use of streams and TextWriter/TextReader as an effective means of communication between threads. You would need to have one stream for each "queue", and to ensure valid data is fully written or read, you would need to lock that stream for each write or read operation. A better solution would probably be something like so: Set up a Queue of type string, along with a couple ManualResetEvents. The general idea would be to use thread signaling to allow two threads to communicate without the need for a lock. public static class ThreadTest { public void Main() { long exit = 0; Queue messages = new Queue (); ManualResetEvent signal1 = new ManualResetEvent(); ManualResetEvent signal2 = new ManualResetEvent(); signal2.Set(); Thread writer = new Thread(() => { while (exit == 0) { string value = Console.ReadLine(); if (value == "exit") { Interlocked.Exchange(ref exit, 1); } else { messages.Enqueue(value); Console.WriteLine("Written: " + value); signal1.Set(); } signal2.WaitOne(); } }); Thread reader = new Thread(() => { while (exit == 0) { signal1.WaitOne(); signal2.Reset(); value = messages.Dequeue(); Console.WriteLine("Read: " + value); signal2.Set(); signal1.Reset(); } }); reader.Start(); writer.Start(); } }
