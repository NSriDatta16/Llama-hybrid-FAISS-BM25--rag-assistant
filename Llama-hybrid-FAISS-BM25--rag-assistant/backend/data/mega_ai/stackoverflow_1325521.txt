[site]: stackoverflow
[post_id]: 1325521
[parent_id]: 1325369
[tags]: 
From my experience, the ' most ' standard way of handling actions performed on a Swing GUI is to create ActionListener s and have them handle ActionEvent s directly for the components with which they are registered. It is a simple design and it follows convention with other sorts of GUI events in the Swing framework ( MouseListener / MouseEvent , TableModelListener / TableModelEvent , etc). The Action framework you describe is a powerful tool to allow for sharing of actions between many input methods (ie, having a toolbar button and menu item perform the same action, and therefore sharing the same Object for handling the events triggered by both, etc.). This abstraction is pretty cool, but Sun cautions that it is a bit heavier-weighted than the simple Observers. From the Action JavaDoc: Note that Action implementations tend to be more expensive in terms of storage than a typical ActionListener, which does not offer the benefits of centralized control of functionality and broadcast of property changes. For this reason, you should take care to only use Actions where their benefits are desired, and use simple ActionListeners elsewhere.
