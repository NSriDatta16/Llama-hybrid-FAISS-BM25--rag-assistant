[site]: stackoverflow
[post_id]: 5175434
[parent_id]: 5174735
[tags]: 
This functionality is not provided by WPF, but it can be implemented using some custom coding. I've created 3 ViewModel classes: PreferencesVM - This will be our DataContext. It contains the master list of options which can appear in the ComboBoxes, and also contains a SelectedOptions property, which keeps track of which items are selected in the various ComboBoxes. It also has a Preferences property, which we will bind our ItemsControl.ItemsSource to. PreferenceVM - This represents one ComboBox. It has a SelectedOption property, which ComboBox.SelectedItem is bound to. It also has a reference to PreferencesVM, and a property named Options (ComboBox.ItemsSource is bound to this), which returns the Options on PreferencesVM via a filter which checks if the item may be displayed in the ComboBox. OptionVM - Represents a row in the ComboBox. The following points form the key to the solution: When PreferenceVM.SelectedOption is set (ie a ComboBoxItem is selected), the item is added to the PreferencesVM.AllOptions collection. PreferenceVM handles Preferences.SelectedItems.CollectionChanged, and triggers a refresh by raising PropertyChanged for the Options property. PreferenceVM.Options uses a filter to decide which items to return - which only allows items which are not in PreferencesVM.SelectedOptions, unless they are the SelectedOption. What I've described above might be enough to get you going, but to save you the headache I'll post my code below. PreferencesVM.cs: public class PreferencesVM { public PreferencesVM() { PreferenceVM pref1 = new PreferenceVM(this); PreferenceVM pref2 = new PreferenceVM(this); PreferenceVM pref3 = new PreferenceVM(this); this._preferences.Add(pref1); this._preferences.Add(pref2); this._preferences.Add(pref3); //Only three ComboBoxes, but you can add more here. OptionVM optRed = new OptionVM("Red"); OptionVM optGreen = new OptionVM("Green"); OptionVM optBlue = new OptionVM("Blue"); _allOptions.Add(optRed); _allOptions.Add(optGreen); _allOptions.Add(optBlue); } private ObservableCollection _selectedOptions =new ObservableCollection (); public ObservableCollection SelectedOptions { get { return _selectedOptions; } } private ObservableCollection _allOptions = new ObservableCollection (); public ObservableCollection AllOptions { get { return _allOptions; } } private ObservableCollection _preferences = new ObservableCollection (); public ObservableCollection Preferences { get { return _preferences; } } } PreferenceVM.cs: public class PreferenceVM:INotifyPropertyChanged { private PreferencesVM _preferencesVM; public PreferenceVM(PreferencesVM preferencesVM) { _preferencesVM = preferencesVM; _preferencesVM.SelectedOptions.CollectionChanged += new NotifyCollectionChangedEventHandler(SelectedOptions_CollectionChanged); } void SelectedOptions_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e) { if (this.PropertyChanged != null) this.PropertyChanged(this,new PropertyChangedEventArgs("Options")); } private OptionVM _selectedOption; public OptionVM SelectedOption { get { return _selectedOption; } set { if (value == _selectedOption) return; if (_selectedOption != null) _preferencesVM.SelectedOptions.Remove(_selectedOption); _selectedOption = value; if (_selectedOption != null) _preferencesVM.SelectedOptions.Add(_selectedOption); } } private ObservableCollection _options = new ObservableCollection (); public IEnumerable Options { get { return _preferencesVM.AllOptions.Where(x=>Filter(x)); } } private bool Filter(OptionVM optVM) { if(optVM==_selectedOption) return true; if(_preferencesVM.SelectedOptions.Contains(optVM)) return false; return true; } public event PropertyChangedEventHandler PropertyChanged; } OptionVM.cs: public class OptionVM { private string _name; public string Name { get { return _name; } } public OptionVM(string name) { _name = name; } } MainWindow.xaml.cs: public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); this.DataContext = new PreferencesVM(); } } MainWindow.xaml: **Note that to reduce lines of code, my provided solution only generates 3 ComboBoxes (not 10).
