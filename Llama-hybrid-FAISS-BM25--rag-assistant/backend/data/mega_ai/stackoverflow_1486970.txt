[site]: stackoverflow
[post_id]: 1486970
[parent_id]: 1457479
[tags]: 
I have worked in this space for a number of years. ChrisW's answer is very good. Here is some additional information that may be helpful to people in similar situations. I'm assuming you are offering a premise solution as most of your integration concerns go away if you're hosting your application. If you need to change facilities, and you isolated your telephony logic from your dialog and business logic, the translation shouldn't be too difficult. IVR/PBX integration challenges show up in a number of ways: Telephony: By telephony, I mean first party call control. Features of the phone line. Call arrival information (ANI/DNIS). Assuming you are working at a higher level, like VoiceXML, you still can have a variety of issues. Just some: Data existence. Not all switches provide this data. What's worse, is the data may only be available with certain switch configurations. That configuration may be in conflict with other needs (transfers) of your application or the call center. Data format. Depending on your application, this may or may not be a problem, but the format of the data can vary a bit from switch to switch. Varying transfer types. Depending on the architecture of the surrounding telephony network, your transfer type may need to vary. Usually, the default hook-flash transfer available in VoiceXML will work when transferring to agents or ACDs in a local call center. However, off site/off PBX/PBX-PBX transfers, need to be performed as a supervised(2 step) transfer. Note, the VoiceXML standard doesn't cover this type of transfer. It only covers blind transfers and conferences, but most platforms provide a mechansim to access additional transfer logic. Computer Telephony Integration (CTI): By CTI, I mean first or third party call control through a data integration with the PBX. Features differences. More than most can possibly imagine. It can be really complicated if you are in a call center with an ACD. ACD features can be very different vendor to vendor. Event streams/data formats. Again, they can be very different. On some switches you'll get a rich set of events. In some environments, you can see virtually none. Call tracking. Tracking a call around a switch for a data pop isn't always as easy as getting a call reference id and sticking data in a database using it as a key. On several switches, the ref ids change as the call moves around the system. You'll need to write software to track the transitions and update it against an internal ref id. Oh, and not all switches support ref ids... In summary, you will not only see differences between switches, but same switch different protocols, differences due to class of service/configuration and even per device. On the later, I mean you can see different behavior based on the phone set on the agent's desk (relevant for CTI data pops). There is no single solution that hides all of this and given some of the differences a general purpose solution can't exist. However, a constrained model for specific use cases can be created. It just isn't very easy and requires a lot of experience with switches to create the normalization layer. So now that I've outlined the bigger areas of the problem (yes, there are others :-( ), some advice: Decouple your application logic from your telephony logic. Assume you will need multiple plug in modules for your telephony integration. Avoid switch specific features near your normalization layer. You won't be able to avoid them if you are deploying on agent desktops as call centers expect you will leverage or at least honor their specific ACD configuration (if your calls don't show up correctly in their reports, you risk losing a customer) Pick a primary IVR vendor that supports a wide range of telephony protocols and exposes a rich extended set of transfer features. While the standards...are poor...they are all you have. Write your application in VoiceXML. Be in a position to change IVR vendors if you have a deal on a switch or in a call center that the primary vendor cannot support. There are a variety of CTI protocols. TAPI, JTAPI, TSAPI, CSTA and so on. There isn't a single answer. There are a couple of commercial normalization layers that give you a more consistent API, but the feature and event streams still vary per switch. Either plan on writing to multiple interfaces or paying for a 3rd party API. No easy answer here as the cost for the 3rd party product can be an expensive add-on, but the development effort to implement a wide range of switches can be even more. Partner with a limited set of switch vendors or CTI servers (e.g. Cisco ICM, Genesys T-Server). It limits your market, but minimizes the integration costs. But, that partnership may help you leverage sales and get access to more customers.
