[site]: stackoverflow
[post_id]: 1694824
[parent_id]: 1485669
[tags]: 
Hey I see nobody has answered you, and I just figured out how to do this. Unfortunately you cannot intercept events and forward them to the mapView so something like @interface MapOverlay MKMapView* map; @end @implementation - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { // Do my stuff foo(); bar(); // Forward to the map [map touchesBegan....]; } @end This is what you want to do but it WILL NOT WORK. For some reason you cannot intercept the map's events, nor can you do the reverse and subclass MKMapView and overload it's touch methods. The only way I have found to do this is as follows. Create your MapOverlay view, set it to have a transparent background and disable touches to it. Overlay this on top of your MKMapView. Then do the following Subclass UIWindow with a custom class that will forward all touches to your overlay, either handling the logic as "if the overlay is not hidden, then forward", or in the overlay itself keep state. Anyway it looks like this @implementation CustomWindow - (void)sendEvent:(UIEvent*)event { [super sendEvent:event]; // Forward the event to the overlay } When you are forwarding the event to the overlay, you first check if the touches are inside of your mapView region, then figure out what type of touches they are, then call the correct touch method on your overlay. Good luck!
