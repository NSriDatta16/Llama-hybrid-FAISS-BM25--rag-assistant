[site]: stackoverflow
[post_id]: 5637132
[parent_id]: 
[tags]: 
Front-end/Back-end design: how to absolutely dissociate the back-end from the front-end?

My question is: (is the above|what is) the right way to create a non intrusive front-end? I am explaining my problem with a simplified example. I have a back-end implementing a binary tree: // Back-end struct Node { Label label; Node* r, l; }; I would like now to implement the front-end to print the tree graphically. So my idea is to extend the back-end with graphical properties by wrapping it : // Front-end struct Drawable { uint x, y; }; class Visitor; template struct GNode : public Drawable { T* wrapped; template void accept(V& v); // v.visit(*this); } There is a problem now to create a visitor printing the binary tree: struct Visitor { void visit(GNode & n) { // print the label and a circle around it: ok. if (n.wrapped.l) // l is a Node, not a GNode, I can't use the visitor on it // Problem: how to call this visitor on the node's left child? // the same with n.wrapped.r }; }; As explained in comments, the back-end does not use my extended class. Writing GNode "is-a" Node is not a solution neither since I would have to put the accept() method in the Node class as virtual and override it in GNode but I can't modify the back-end. Then, someone could say too that there is no need to declare accept() in the back-end, downcasting Node* to GNode* would work. Yes it works, but it downcasts... In my case, I have ~10 kinds of nodes (it is a graph), so I am looking for something elegant, flexible, with as few lines of code as possible (hence the wrapper template idea) :) Thank you very much.
