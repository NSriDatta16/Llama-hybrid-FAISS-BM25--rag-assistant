[site]: stackoverflow
[post_id]: 2271085
[parent_id]: 2251340
[tags]: 
Here some test class, as it would have been written with JUnit. // Tests related to the Staff class public class StaffTest { // This test should be successful, as all argument are correct @Test public void testCreateStaffMember() { String name = "John"; String staffId = "0900477A"; String department = "ENG"; String username = "john"; String password = "secret"; new Staff(name, staffId, department, username, password); } // This test should throw an IllegalArgumentException, as the name is required. @Test(expected=IllegalArgumentException.class) public void testCreateStaffMemberNameNull() { String name = null; String staffId = "0900477A"; String department = "ENG"; String username = "john"; String password = "secret"; new Staff(name, staffId, department, username, password); } // This test should throw an IllegalArgumentException, as the name is required. @Test(expected=IllegalArgumentException.class) public void testCreateStaffMemberNameEmpty() { String name = ""; String staffId = "0900477A"; String department = "ENG"; String username = "john"; String password = "secret"; new Staff(name, staffId, department, username, password); } // More constructor test follow // This test should be successful, as all getters, should return the given input values. @Test public void testValidateGetterMethods() { String name = ""; String staffId = "0900477A"; String department = "ENG"; String username = "john"; String password = "secret"; Staff staff = new Staff(name, staffId, department, username, password); Asset.assertEquals(name, staff.getName()); Asset.assertEquals(staffId, staff.getStaffId()); Asset.assertEquals(department, staff.getDepartment()); Asset.assertEquals(username, staff.getUsername()); Asset.assertEquals(password, staff.getPassword()); } // More tests... } // Tests related to the DataStorage class public class DataStorageTest { @Test public void testAddStaffMembers() { DataStorage ds = new DataStorage(); ds.addStaff(createJohn()); ds.addStaff(createAlan()); } // Here you deside, as the designer off the application, what should happen! // Will the second John, override the first John? As they have the same ID? // Or will an exception be thrown, because the staff member with that id // already exists? @Test public void testAddStaffMembersSameName() { DataStorage ds = new DataStorage(); ds.addStaff(createJohn()); ds.addStaff(createJohn()); } Staff createJohn() { String name = "John"; String staffId = "0900477A"; String department = "ENG"; String username = "john"; String password = "secret"; return new Staff(name, staffId, department, username, password); } Staff createAlan() { ... } }
