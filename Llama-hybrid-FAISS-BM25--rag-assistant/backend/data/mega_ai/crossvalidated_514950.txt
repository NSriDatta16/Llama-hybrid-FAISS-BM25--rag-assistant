[site]: crossvalidated
[post_id]: 514950
[parent_id]: 514866
[tags]: 
After some thinking and internet researching, I could finally create the graph I was looking for. From the same link above , where I got the plot_model function, I could get the get_model_data . Being so, I passed some parameters through this function, for instance, the credible level and the factors from the original data. model_data The result is an object from the ggeffects class, as the str function shows - str(model_data) - and the output is a little bit trickier to investigate and to plot (at least to my knowledge). > str(model_data) Classes ‘ggeffects’ and 'data.frame': 20 obs. of 7 variables: $ x : num 1 1 1 1 1 1 1 1 1 1 ... $ predicted : num 0.106 0.133 0.181 0.27 0.302 ... $ conf.low : num 0.058 0.0835 0.1307 0.2245 0.1883 ... $ conf.high : num 0.185 0.192 0.222 0.311 0.449 ... $ response.level: Ord.factor w/ 5 levels "1" group : Factor w/ 2 levels "PL","SG": 1 1 1 1 1 2 2 2 2 2 ... $ group_col : Factor w/ 2 levels "PL","SG": 1 1 1 1 1 2 2 2 2 2 ... > head(model_data) # Predicted probabilities of answer # x = Ordem # Response Level = 1 # Num = PL x | Predicted | group_col | 95% CI ---------------------------------------- 1 | 0.11 | PL | [0.06, 0.19] # Response Level = 2 # Num = PL x | Predicted | group_col | 95% CI ---------------------------------------- 1 | 0.13 | PL | [0.08, 0.19] Therefore, I decided to manually put these data in a "normal" data.frame : model_data Notice that the factor order is a numeric vector ( 1 or 2 ). After investigating the original output, I realized that 1 stands for um-todo , and 2 for todo-um . So I changed that vector in this fashion. model_data$ordem I've tried to do it using the mutate_if , from the dplyr package, but I couldn't. Finally, I've transformed this character string in a factor: model_data$ordem and, after all these steps, I finally could plot the graph the way I was trying to do, with and without credible intervals. g1 % ggplot(aes(x=num, y=Probabilidades, group=Respostas, color=Respostas))+ geom_line()+geom_point()+ facet_wrap(~ordem)+ scale_y_continuous(breaks = seq(from = 0, to = 1.0, by = 0.1), labels = scales::number_format(accuracy = 0.01))+ scale_colour_manual(values=paleta, labels=c("Discordo_Totalmente", "Discordo", "Neutro", "Concordo", "Concordo_Totalmente"))+ labs(x = "Número da anáfora", y = "Probabilidades preditas", fill="Respostas")+ ggtitle("Previsão de probabilidades estimada pelo modelo de regressão ordinal")+ theme_classic()+ guides(colour = guide_legend(reverse=T)) # Apenas organizando a ordem da legenda. g2 % ggplot(aes(x=num, y=Probabilidades, group=Respostas, color=Respostas))+ geom_line(position = position_dodge(0.4))+geom_point(position = position_dodge(0.4))+ geom_errorbar(aes(ymin=lower, ymax=upper), width=0.0, position = position_dodge(0.4))+ facet_wrap(~ordem)+ scale_y_continuous(breaks = seq(from = 0, to = 1.0, by = 0.1), labels = scales::number_format(accuracy = 0.01))+ scale_colour_manual(values=paleta, labels=c("Discordo_Totalmente", "Discordo", "Neutro", "Concordo", "Concordo_Totalmente"))+ labs(x = "Número da anáfora", y = "Probabilidades preditas", fill="Respostas")+ ggtitle("Previsão de probabilidades estimada pelo modelo de regressão ordinal")+ theme_classic()+ guides(colour = guide_legend(reverse=T)) # Apenas organizando a ordem da legenda. grid.arrange(g1, g2, ncol=1) And that's the final result:
