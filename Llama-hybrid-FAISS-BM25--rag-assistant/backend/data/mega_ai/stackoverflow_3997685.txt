[site]: stackoverflow
[post_id]: 3997685
[parent_id]: 3996687
[tags]: 
Create a circle of points and then when the mouse moves (and we are dragging) calculate the nearest point and snap to that point. CircularDrag.xaml CircularDrag.xaml.cs using System; using System.Linq; using System.Collections.Generic; using System.Windows; using System.Windows.Controls; using System.Windows.Input; namespace DraggingBoundaries { public partial class CircularDrag : UserControl { List allowedWheelMarkerPositions; bool isDraggingMarker; public CircularDrag() { InitializeComponent(); } private void UserControl_SizeChanged(object sender, SizeChangedEventArgs e) { var center = new Point(e.NewSize.Width / 2, e.NewSize.Height / 2); var radius = (center.X CreateCirclePath(Point center, double radius) { var result = new List (); for (double angle = 0; angle GetDistance(position, p)) .First(); SetMarkerPosition(closest); } private void SetMarkerPosition(Point closest) { Marker.Margin = new Thickness(closest.X - Marker.Width / 2, closest.Y - Marker.Height / 2, 0, 0); } private double GetDistance(Point a, Point b) { var deltaX = a.X - b.X; var deltaY = a.Y - b.Y; return Math.Sqrt(Math.Pow(deltaX, 2) + Math.Pow(deltaY, 2)); } private void Marker_MouseLeftButtonDown(object sender, MouseButtonEventArgs e) { isDraggingMarker = true; } private void UserControl_MouseLeave(object sender, MouseEventArgs e) { isDraggingMarker = false; } private void UserControl_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) { isDraggingMarker = false; } } }
