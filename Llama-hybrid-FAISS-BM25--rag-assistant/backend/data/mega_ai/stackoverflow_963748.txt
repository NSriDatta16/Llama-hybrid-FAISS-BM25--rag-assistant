[site]: stackoverflow
[post_id]: 963748
[parent_id]: 963645
[tags]: 
The two common options for naming is either after what the method does: theObject.Closing += SaveResults; Or alternatively after what the method handles: theObject.Closing += ClosingHandler; Which is preferable really depends a bit on context. In the first case it is immediately clear what the handler is going to do, which makes the code registering the handler more readable... but looking at the handler SaveResults in isolation it is not going to be necessarily obvious when it is going to be called, unless the event arguments have an obvious name ( ClosingEventArgs or some such). In the second case, the registration is more opaque (okay, so what is going to happen when Closing happens?), but on the other hand, looking at the handler implementation it will be obvious what is going on. I guess the one to choose depends on which of the two you want to be more obvious; the site of the registration, or the implementation of the handler. Or alternatively, you can go for the unholy combination of both methods: theObject.Closing += ClosingHandlerSaveResults; Now both the registration site and the implementation are equally obvious, and neither looks particularly elegant (plus, it probably violates the DRY principle). For the record I prefer the first naming scheme when theObject is contained in a different scope from the implementation of SaveResults , and the second scheme when I am wiring up handlers to events that are all contained within the same class.
