[site]: stackoverflow
[post_id]: 3855751
[parent_id]: 3855508
[tags]: 
This and other similar questions come up often when talking about transitioning from a traditional RDB to a BigTable-like datastore like App Engine's. It's often useful to discuss why the datastore doesn't support unique keys, since it informs the mindset you should be in when thinking about your data storage schemes. The reason unique constraints are not available is because it greatly limits scalability. Like you've said, enforcing the constraint means checking all other entities for that property. Whether you do it manually in your code or the datastore does it automatically behind the scenes, it still needs to happen, and that means lower performance. Some optimizations can be made, but it still needs to happen in one way or another. The answer to your question is, really think about why you need that unique constraint. Secondly, remember that keys do exist in the datastore, and are a great way of enforcing a simple unique constraint. my_user = MyUser(key_name=users.get_current_user().email()) my_user.put() This will guarantee that no MyUser will ever be created with that email ever again, and you can also quickly retrieve the MyUser with that email: my_user = MyUser.get(users.get_current_user().email()) In the python runtime you can also do: my_user = MyUser.get_or_create(key_name=users.get_current_user().email()) Which will insert or retrieve the user with that email. Anything more complex than that will not be scalable though. So really think about whether you need that property to be globally unique, or if there are ways you can remove the need for that unique constraint. Often times you'll find with some small workarounds you didn't need that property to be unique after all.
