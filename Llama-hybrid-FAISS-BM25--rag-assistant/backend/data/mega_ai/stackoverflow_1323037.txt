[site]: stackoverflow
[post_id]: 1323037
[parent_id]: 1322881
[tags]: 
If i understand right, your issue is only because you want to use the same languale localization for name and description in more than one table. In such a scenario, you cannot add the prod_id in the localization table. One more issue in your design is that it cannot handle more than one language localization for the same product elegantly. You could tweak it to work: If name and description are the only fields that require localization, you can do the following. Product(ID, name, description, tanslation_row_id) Product_translations(ID, name, description, lang_id, translation_id) The translation_row_id will be foreign key pointing to Product_translations.ID The translation_id will, however point a parent record in the same table that would serve as a common record for all language specific records. Example Records Product (ID, name, description, translation_row_id) (p1, apples,a red fruit, tr1) (p2, mango, a yellow fruit, tr2) Product_translations (ID, name, description, lang_id, translation_id) (tr1, apples, a red fruit, ENU, null) (tr2, mango, a yellow fruit, null) (tr3, pomme,un fruit rouge, FRA,tr1) (tr4, mangue,a yellow fruit, SPA,tr2) Given a language code, you can extract the name and description values using the foll SQL query select T.name, T.description from product_translations T where T.translation_id = (select T2.ID from Product P,Product_translations T2 where P.translation_row_id = t2.ID ) and T.lang_id = '&langID'; Important Note: I am assuming that the product table has many more attributes that do not need this translation. '&langID' is a parameter for the SQL query that would ask the user the language code of his choice
