[site]: stackoverflow
[post_id]: 2673170
[parent_id]: 2670815
[tags]: 
Righteous! I think I figured it out. Plus I found a nice time-saving macro to boot: http://cocoawithlove.com/2008/11/singletons-appdelegates-and-top-level.html And the modified macro I'm using: http://github.com/taberrr/Objective-C-Optimized-Singleton.git (I like "sharedGameState" over "sharedInstance") Hopefully this will help someone else trying to do the same thing... here's my working NSCoder GameState singleton: GameState.h: #import "SynthesizeSingleton.h" #import "cocos2d.h" @interface GameState : NSObject { NSInteger level, score; Boolean seenInstructions; } @property (readwrite) NSInteger level; @property (readwrite) NSInteger score; @property (readwrite) Boolean seenInstructions; SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(GameState); +(void)loadState; +(void)saveState; @end GameState.m: #import "SynthesizeSingleton.h" #import "GameState.h" #import "Constants.h" @implementation GameState @synthesize level, score, seenInstructions; SYNTHESIZE_SINGLETON_FOR_CLASS(GameState); - (id)init { if((self = [super init])) { self.level = 1; self.score = 0; self.seenInstructions = NO; } return self; } +(void)loadState { @synchronized([GameState class]) { // just in case loadState is called before GameState inits if(!sharedGameState) [GameState sharedGameState]; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *file = [documentsDirectory stringByAppendingPathComponent:kSaveFileName]; Boolean saveFileExists = [[NSFileManager defaultManager] fileExistsAtPath:file]; if(saveFileExists) { // don't need to set the result to anything here since we're just getting initwithCoder to be called. // if you try to overwrite sharedGameState here, an assert will be thrown. [NSKeyedUnarchiver unarchiveObjectWithFile:file]; } } } +(void)saveState { @synchronized([GameState class]) { GameState *state = [GameState sharedGameState]; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *saveFile = [documentsDirectory stringByAppendingPathComponent:kSaveFileName]; [NSKeyedArchiver archiveRootObject:state toFile:saveFile]; } } #pragma mark - #pragma mark NSCoding Protocol Methods -(void)encodeWithCoder:(NSCoder *)coder { [coder encodeInt:self.level forKey:@"level"]; [coder encodeInt:self.score forKey:@"score"]; [coder encodeBool:self.seenInstructions forKey:@"seenInstructions"]; } -(id)initWithCoder:(NSCoder *)coder { self = [super init]; if(self != nil) { self.level = [coder decodeIntForKey:@"level"]; self.score = [coder decodeIntForKey:@"score"]; self.seenInstructions = [coder decodeBoolForKey:@"seenInstructions"]; } return self; } @end Saving: - (void)applicationWillTerminate:(UIApplication *)application { ... [GameState saveState]; ... } Loading: // somewhere in your app, maybe in applicationDidFinishLaunching GameState *state = [GameState sharedGameState]; NSLog(@"sharedGameState: %@", state); [GameState loadState]; If someone sees any issues with this, PLEASE speak up. :) It appears to work fine, though.
