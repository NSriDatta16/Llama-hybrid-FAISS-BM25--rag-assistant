[site]: stackoverflow
[post_id]: 2129811
[parent_id]: 2129766
[tags]: 
Snobbery aside, DataSets can be useful in applications with relatively straightforward business logic and where the developer has some control over the database schema, such that data tables match 1:1 business objects (which in this case are usually comprised of a DataRow). Martin Fowler discusses this very clearly in Patterns of Enterprise Application Architecture ( Amazon link ). DataSets ( Table Module in Fowler's nomenclature) are a good match to a Transaction Script , whereas a Domain Model requires more well defined classes and a mapper to the database (because a 1:1 correlation between business objects and tables is typically not achievable in this situation). DataSets/Table Module have a lot of limitations, but they have advantages in simplicity, especially if you are working in .NET. A pragmatic programmer will assess the requirements of a given application and apply patterns and technologies that fit best, even if they aren't the sexiest. For simple scenarios with straightforward 1:1 mapping to relational data, DataSets don't suck. Often, though, they do, and any programmer that relies on them exclusively is in for trouble in more complicated scenarios.
