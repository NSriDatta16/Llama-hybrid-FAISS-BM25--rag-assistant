[site]: crossvalidated
[post_id]: 236060
[parent_id]: 
[tags]: 
Simulate sampling K values from uniform distribution with replacement

I am trying to reformulate sampling k values from a uniform distribution with replacement as a problem on deciding whether or not the nth value should be included in the sampled set. In other words, I have D possible classes, each with equal probability. I want to construct a binary mask such that there are K non-zero values. I could run a sampling algorithm without replacement that will give me K distinct values, and thus a proper mask. The problem I have is that it's difficult to parallelize that algorithm, specifically on the GPU. Instead, I'm willing to relax the exact number of non-zero values to instead be on average K. If I do that, then I think I can replace sampling from a D-class uniform distribution k times to sampling from a bernoulli distribution D times. The probability of a single sample, K=1, is $p_n = 1/D$, and if I use that to sample from the bernoulli distribution D times, the expected value is 1 non-zero value. In order to compute $K>1$, I want to compute the probability, for each $p_n$ that there is at least 1 success out of $K$ trials. The easiest way to do that is: $q_n = 1 - p_n$ $z(k)_n = P(at\: least\: 1\: success : k)_n = 1 - P(all \; failures : k) = 1 - {q_n}^k$ And then, for each class in D, I sample from a Bernoulli distribution parameterized by $z_n$. Concretely, let's say I have $D=512$, $p_n=1/D$ and I am computing $f(K)=\mathbb{E}\left[{\sum_n^DBernoulli(z(K)_n)}\right]$, for different values of $K$: $f(1) \approx 0.99523$ $f(2) \approx 1.99271$ $f(4) \approx 3.98673$ $f(8) \approx 7.94724$ $f(16) \approx 15.7651$ $f(32) \approx 31.04493$ $f(64) \approx 60.2261$ $f(128) \approx 113.34335$ $f(256) \approx 201.61083$ $f(512) \approx 323.81925$ whereas I'd expect $f(K) = K$. What is going on? Also, the reason I am doing the sampling this way is because I want to extend this approach to sampling from a multinomial distribution instead of a uniform distribution. It's just easier to reason about the uniform distribution.
