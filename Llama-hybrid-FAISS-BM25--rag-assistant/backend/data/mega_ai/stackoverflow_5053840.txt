[site]: stackoverflow
[post_id]: 5053840
[parent_id]: 5053735
[tags]: 
EDIT: OK, I see what you're doing there, I apologize for missing the OUTPUT statement. Based on that information, it seems like the code could break if a record is not inserted into the Client table in the line right before SELECT @Client_GUID = myNewPK FROM @myNewPKTable. If no record is inserted, you would wind up grabbing the GUID from the previous record and when you go to insert that it would cause the PK violation. You might have to check to make sure that records are being inserted into the Client table. ORIGINAL ANSWER: It looks like you're declaring a table: DECLARE @myNewPKTable TABLE (myNewPK UNIQUEIDENTIFIER) But then you never put anything into it, so this statement must return null: SELECT @Client_GUID = myNewPK FROM @myNewPKTable EDIT: Why not just do this? I don't see why the table @myNewPKTable is even being created. SET @Client_GUID = NEWID() EDIT: I think the reason you are getting the primary key violation is because @Client_Bucket_GUID is null. At the beginning of the procedure, there is this code: -- Create a bucket for each agent DECLARE @cbPKTable TABLE (cbPK UNIQUEIDENTIFIER, cbID int) ... DECLARE @Client_Bucket_GUID uniqueidentifier SELECT @Client_Bucket_GUID = cbPK FROM @cbPKTable After this code is run @Client_Bucket_GUID will always be null. Again, you would have to insert records into @cbPKTable if you wanted to get anything out of it. If you're trying to create a new UNIQUEIDENTIFIER and store it in @Client_Bucket_GUID, just use the NEWID() function.
