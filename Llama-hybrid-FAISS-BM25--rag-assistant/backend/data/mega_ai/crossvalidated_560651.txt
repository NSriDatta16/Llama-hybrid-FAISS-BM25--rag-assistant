[site]: crossvalidated
[post_id]: 560651
[parent_id]: 198104
[tags]: 
Numerous packages are available in R for changepoint or breakpoint detection but the majority of them are non-Bayesian. Many such packages are touched in @Jonas Lindel√∏v's blog post: https://lindeloev.github.io/mcp/articles/packages.html . Glad that he also pointed to his site in the answer above. In addition to mcp , bcp is also a popular Bayesian changepoint detection model and it has been actually used to analyze copy-number alteration sequence data--the same use case as your publication. For completeness, I put some quick results here with your sample data: set.seed(1234) variances = runif(1000, 0.01, 0.5) coverages = c() for (i in seq(1:100)) { coverages = c(coverages, rnorm(1, mean=0, sd=variances[i])) } for (i in seq(101:200)) { coverages Here is the bcp output: Another package for Bayesian changepoint detection is Rbeast ( https://github.com/zhaokg/Rbeast , written by me), which handles only time-series or sequence-like data and therefore is not as versatile as mcp or bcp . But it is useful for your use scenario. Rbeast is aimed also to decompose time series into periodic and trend components. Since your sequence contains no periodic/seasonal component, season='none' is set in the code below and only the trend component is fitted: library(Rbeast) out = beast(coverages, season='none') plot(out) Below is the Rbeast output: For each segment, Rbeast fits either a linear (1st order polynomial) or constant (0-th order poly) model; the average order of the polynomials needed to adequately fit the trend is estimated over time and depicted as the Order_t curve in the figure: all close to 0, suggesting an overall flat curve over individual segments. For your sample time series, since we know the segments are constant beforehand, we can enforce this strong prior by setting the min and max order of the segments (polynomial) to both 0: torder.minmax=c(0,0) so that only constant lines are fitted. out = beast(coverages, season='none', torder.minmax=c(0,0) ) plot(out)
