[site]: stackoverflow
[post_id]: 2436415
[parent_id]: 2433504
[tags]: 
Use (id) as the return value type. Objective-C doesn't support covariant declarations. Consider: @interface NSArray:NSObject + (id) array; @end Now, you can call +array on both NSArray and NSMutableArray . The former returns an immutable array and the latter a mutable array. Because of Objective-C's lack of covariant declaration support, if the above were declared as returning (NSArray*) , clients of the subclasses method would have to cast to `(NSMutableArray*). Ugly, fragile, and error prone. Thus, using the generic type is, generally, the most straightforward solution. So... if you are declaring a method that returns an instance of a specific class, typecast explicitly. If you are declaring a method that will be overridden and that override may return a subclass and the fact that it returns a subclass will be exposed to clients, then use (id) . Designated initializers work the same way. An -init* method may return an instance of just about any type, depending on context of implementation (of course). Thus, the return type of initialization methods is covariant and, as a result, you need to use (id) as the return type. No need to file a bug -- there are several already. Note that LLVM now has an instancetype keyword that can be used in place of id in a declaration like the above. It means "this method returns an instance that passes an isKindOfClass: test of the class upon which it was called", effectively.
