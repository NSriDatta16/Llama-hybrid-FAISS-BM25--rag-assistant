[site]: stackoverflow
[post_id]: 2341075
[parent_id]: 2283849
[tags]: 
About C you will not need pure C, unless you are really doing some cutting edge high performance calculation. The Cocoa framework provides solution to many of the common tasks you will face, or at least sufficient tools to build such solutions, without diving into the rough world of low level C. As powerful and fast C might be, it is a very unsafe language, that'll make you write tons of code and spend a lot of time debugging. as others stated, RoR is a framework and PHP is a language. So let me first say something about Ruby, JavaScript, PHP. Ruby Ruby is a wonderful language. Of those mentioned, it is the one that is closest to Objective-C. Like Objective-C, it uses the model of message passing for method calls. There's a wonderful introduction to Ruby online. I read it in a few days and loved it. Unfortunately Ruby is quite slow, and not very easy to deploy. PHP well ... PHP. the advantages: PHP is extremely easy to deploy, which is probably the reason of its success. It has a large and active community that has built up a vast ecosystem. And PHP is very forgiving, so it doesn't require a lot of experience to use it. You probably sense, there must be a "but". Well, instead of going into details, I'd like to quote a friend of mine, who does an awful lot of PHP: "PHP is the rotten flesh among programming languages" . PHP, like every languages, has flaws. But PHP has them to the point, where it invites a behaviour, that has been coined as "PHP bashing" by PHP supporters. This is something that appears quite often, i.e. each time when someone puts to discussion whether PHP is good. Generally, PHP programmers will take side for PHP (which is a reasonable behaviour, assuming that you thoroughly considered your options before choosing your language), and most programmers who know PHP and an alternative, will complain a lot about PHP. I want to avoid this, since you can find enough on that topic on google. >This question deals with the subject in a pleasant and polite way. It doesn't cover the whole subject. The point I want to make is, that you shouldn't use PHP because you think, it'll help you evolve as progammer, or because you think it's a good language. If you choose PHP, you should do so for strategic reasons. And you should use a proper framework, such as symfony or flow3 . Just keep in mind, PHP offers nothing, you can't find in plenty of other languages. JavaScript JavaScript is a beautiful language as well. It is not very far from Ruby. It's object orientation is not as strong as Ruby's, however it is much more suitable for functional approaches , since Ruby is a little inconsistent with high order functions , having several non-interchangable versions of them, that all work a little different. JavaScript is forgiving as well, but maybe more than it should be. Right now and for the foreseable future, JavaScript is very hip, and it's used in more and more areas. With HTML5, CSS3 and WebGL, one will be able to create great apps using JavaScript. However, you'll always have to deal with cross-browser quirks. Also, you're likely to find out that JavaScript has other limitations Of these three, I believe Ruby to be the most elegant and powerful language. If you want to evolve as a programmer, this of all three is the best choice. Haxe I'd like to propose my own candidate though: Haxe . it is an open source language, that is still relatively young and evolving very fast. It is cross-plattform, and can be compiled to many different platforms. Unlike any of the proposed languages (including Objective-C), Haxe is built around a very strong type system, which proves to be unobstructive but very supporting. You can output PHP with Haxe, so basically you can deploy Haxe easily. You can also output JavaScript. I personally use it to target the Flash Player. You can use one single language for a sheer multitude of things. If you do choose this language, then don't hesitate to join the community . Preferably the mailing list or the IRC channel. well, I hope this helped ...
