[site]: stackoverflow
[post_id]: 4420956
[parent_id]: 1237122
[tags]: 
So this thread is all talk and no numbers so lets talk metrics. I ran some test code to get some performance metrics using Visual Studio 2010 and I got these metrics by calculating the average time of either method over 10 test runs with 10 million iterations each in Debug then Release mode (non optimized then optimized): (Debug) Casting Method: ~32 ms Allocation Method: ~26 ms (Release) Casting Method: ~20 ms Allocation Method: ~22 ms What is also interesting is to compare these metrics to similar code with managed C++ only using gcnew and the results are much different. Same setup again. Except comparing the casting method: "IntPtr^ ptr = (IntPtr) i;" vs the allocation method: "IntPtr^ ptr = (IntPtr) i;". (Debug) Casting Method: ~91ms Allocation Method: ~127ms (Release) Casting Method: ~22ms Allocation Method: ~124ms Now if you are scratching your head saying well why is C# so much faster than managed C++ and the answer is it isn't. The most efficient way to use IntPtr is as value type not a reference to a value type. For instance like so "IntPtr ptr = (IntPtr) i;". This would give you ~24ms (Debug more) or (~22 Release mode). See how it was optimized above by the compiler to get the 22ms rather than the 90ms. Conclusion in C#, unless you are looking at REALLY REALLY tight code it doesn't matter. I think with my code in Release it was actually optimizing the cast right out because commenting out the cast gave the same ~22ms. But for the most part compiler has your back on this one in C# well at least VS 2010 does. However, in Managed C++/CLI if you are looking at code with even minimal performance constraints then watch out. The compiler will not automatically optimize gcnew allocations to the casting approach and it's almost 6 times faster... I actually ran into this particular problem in C++/CLI which is what led me to post on this thread when dealing with some real-time audio processing. My code (C#): (My managed C++ code was very similar except I had to write Average() myself and used console to output rather than message boxes). static void Main() { List castTimings = new List (); List allocTimings = new List (); for (int i = 0; i
