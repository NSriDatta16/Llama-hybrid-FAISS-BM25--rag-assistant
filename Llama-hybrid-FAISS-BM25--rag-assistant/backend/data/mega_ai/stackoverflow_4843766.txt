[site]: stackoverflow
[post_id]: 4843766
[parent_id]: 4843746
[tags]: 
edit â€” came back to point out, first and foremost, that this is not a problem that can be solved with a regular expression. It's important to distinguish between JSON notation as a serialized form, and JavaScript object constant notation. This: { x: "hello" } is a perfectly valid JavaScript value (an expression fragment), so that this: var y = { x: "hello" }; gives you exactly the same result as: var y = { "x": "hello" }; In other words, the value of "y" in either of those cases will be exactly the same. Completely, exactly the same, such that it would not be possible to ever tell which of those two constants was used to initialize "y". Now, if what you want to do is translate a string containing JavaScript style "JSON shorthand" without quotes into valid JSON, the only thing to do is parse it and reconstruct the string with quotes around the property names. That is, you will have to either write your own "relaxed" JSON parser than can cope with unquoted identifiers as property names, or else find an off-the-shelf parser that can handle such relaxed syntax. In your case, it looks like once you have the "relaxed" parser available, you're done; there shouldn't be any need for you to translate back. Thankfully, your "invalid" JSON response is completely interpretable by JavaScript itself, so if you trust the data source (and that's a big "if") you should be able to evaluate it with "eval()".
