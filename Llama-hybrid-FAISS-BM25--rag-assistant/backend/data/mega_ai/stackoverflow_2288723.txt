[site]: stackoverflow
[post_id]: 2288723
[parent_id]: 
[tags]: 
Scala Actors: Different behavior on JRE 1.5 and 1.6

My simulation is using actors and Scala 2.8-Snapshot. In Java JRE 1.5 it runs well - all 40 gears (actors) are working simultaneously. Using Java JRE 1.6 only 3 gears are working simultaneously. I tested it with and without GUI: both give same result. My simulation with GUI is available on github: http://github.com/pmeiclx/scala_gear_simulation Maybe you remember to my first problem with actors . After solving these problems I did a GUI for the simulation and I got this new "strange" behavior. Here's the code without GUI: package ch.clx.actorversions import actors.Actor import actors.Actor._ import collection.mutable.ListBuffer case class ReceivedSpeed(gear: Gear) case object StartSync case class SyncGear(controller: GearController, syncSpeed: Int) object ActorVersion { def main(args:Array[String]) = { println("[App] start with creating gears") val gearList = new ListBuffer[Gear]() for (i { println("[Controller] Send commands for syncing to gears!") var speeds = new ListBuffer[Int] nGears.foreach(e => speeds += e.speed) //Calc avg //var avgSpeed = speeds.foldLeft(0)(_ + _) / speeds.length //var avgSpeed = speeds.foldLeft(0) { (x, y) => x + y } / speeds.length syncSpeed = (0/:speeds)(_ + _) / speeds.length //Average over all gear speeds //TODO syncSpeed auf Median ausrichten println("[Controller] calculated syncSpeed: "+syncSpeed) nGears.foreach{e => e.start() e ! SyncGear(this, syncSpeed) } println("[Controller] started all gears") } case ReceivedSpeed(gear: Gear) => { println("[Controller] Syncspeed received by a gear ("+gear.gearId+")") //println("[Controller] mailboxsize: "+self.mailboxSize) syncGears += gear if(syncGears.length == nGears.length) { println("[Controller] all gears are back in town!") System.exit(0) } } case _ => println("[Controller] No match :(") } } } } /** * GEAR */ class Gear(id: Int) extends Actor { private var mySpeed = scala.util.Random.nextInt(1000) private var myController: GearController = null def speed = mySpeed def gearId = id /* Constructor */ println("[Gear ("+id+")] created with speed: "+mySpeed) def act = { loop { react { case SyncGear(controller: GearController, syncSpeed: Int) => { //println("[Gear ("+id+")] activated, try to follow controller command (form mySpeed ("+mySpeed+") to syncspeed ("+syncSpeed+")") myController = controller adjustSpeedTo(syncSpeed) } } } } def adjustSpeedTo(targetSpeed: Int) = { if(targetSpeed > mySpeed) { mySpeed += 1 self ! SyncGear(myController, targetSpeed) }else if(targetSpeed
