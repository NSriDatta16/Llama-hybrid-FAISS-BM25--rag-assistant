[site]: stackoverflow
[post_id]: 4975948
[parent_id]: 4975144
[tags]: 
Names have a funny way of not distributing themselves evenly over the alphabet, so you're probably not going to win by as much as you'd hope by predicting where to look. But a really easy way to cut your search down by an average of two steps is as follows: if the letter is from a to m , binary search for the next letter. Then binary search from the beginning of the list only to the position you just found for the next letter . If the letter is from n to z , binary search for it. Then, again, only search the portion of the list after what you just found. Is this worth saving two steps? Dunno. It's pretty easy to implement, but then again, two steps don't take very long. (Correctly guessing the letter would save you maybe 4 steps at best.) Another possibility is to have bins for each letter to begin with. It starts out already sorted, and if you have to re-sort, you only have to sort within one letter, not the whole list. The downside is that if you need to manipulate the whole list frequently, you have to glue all the bins together.
