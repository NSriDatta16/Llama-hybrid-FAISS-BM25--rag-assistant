[site]: stackoverflow
[post_id]: 2135950
[parent_id]: 2076715
[tags]: 
I'm responding to the SQL solution only. This gives all the paths 3 steps away though it may not be "efficient" for large datasets. The tables "KNOW", "KNOW_1", etc. are all identical and have two fields P1 and P2. It has an entry only if 1) P1 knows P2 or 2) P2 knows P1. The data in P1 and P2 can be arbitrary strings corresponding to each person. This Acccess SQL query should yield all the paths where a knows b knows c knows d without cycles (e.g a knows b knows c knows a). You still need to eliminate duplicates (abcd = dcba), but should be able to do it easily in a second step. The cycles are eliminated by preventing repeats of previous people in the Where statements. SELECT Know.P1, Know.P2, Know_1.P2, Know_2.P2 FROM (Know INNER JOIN Know AS Know_1 ON Know.P2 = Know_1.P1) INNER JOIN Know AS Know_2 ON Know_1.P2 = Know_2.P1 WHERE (((Know_1.P2)<>[Know].[P1]) AND ((Know_2.P2)<>[Know].[P1] And (Know_2.P2)<>[Know].[P2])) ORDER BY Know.P1, Know.P2, Know_1.P2, Know_2.P2; Not as elegant as the previous solutions, but it seems to work OK. We've had some experience with doing similar work with constraint programming and found that the SQL process is faster for certain problems.
