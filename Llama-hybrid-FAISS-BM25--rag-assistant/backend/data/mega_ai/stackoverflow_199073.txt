[site]: stackoverflow
[post_id]: 199073
[parent_id]: 190781
[tags]: 
Ask yourself why you are refactoring the code. Does the code need to be touched? It is easy to break fragile code by improving it. If you decide that the code needs to be changed, having a suite of tests, as others have mentioned, will help a lot. Look at the revision history for the file(s) you are modifying and see if any changes have been made in order to fix bugs, so that you can avoid re-writing those bugs. If you are refactoring the code for performance reasons, keep an eye out for algorithm improvements. If you can change an O(n^2) algorithm to O(n log(n)) in a hot section of code, that can do a lot more for your code than any number of other small changes.
