[site]: stackoverflow
[post_id]: 1839139
[parent_id]: 1835562
[tags]: 
The way I would do it would probably be like this: Note, I'm used to developing Drupal, so I would be able to do a lot of these things pretty fast, since I done sometime similar recently. This might not be the best choice for you. In a module I would create the two content types for this, restaurant and menu_item. Restaurant will probably just be title and another field I would make used for the menu item types. I'm not sure how I would do it, it depends a bit on the what the future of the project would be. I might choose not to make the Restaurant content type or not do anything special to it, and create a table solely for the ordering of the menu item types. Most of the menu item content type can be done through CCK, but I would probably create a table and custom fields for their ordering (this is something I've done a few times so I have snippet for making the js dragable ordering system like what CCK does for ordering fields) . I might also choose to handle the prices myself as well, if I need better control in different cases, like doing exchange calculations etc. For the categories I'd use taxonomy (using taxonomy gives a lot of extra bonuses like SEO). I'd use node reference to bind the menu items to whatever menu they need to be. The rest of the menu items fields is just text fields which CCK would handle nicely. I would use node_api to fetch the menu items for the restaurant nodes, so that with theming, the restaurant node view would be the display of the menu (If this is the main feature, else I'd make a tab for the menu and keep the restaurant details on the node view). With some form_alter I would create an ordering system that's hooked up to whatever system I choose for ordering the categories. I might let admins be able to change the ordering of the menu items themselves in the node display, or create a tab for it. Depends what the client would want. This is a bit developer heavy, as a lot of these things would need to be coded. You could go a very far way just using cck and views, but I would rather create a module for this. The reason is that if the client would want this changed in half a year or come with additional features, I might get a very hard time implementing it. Integrating with cck and views can be very tricky and time consuming, so using a little extra time now, would make it a lot more flexible and extendable. I have also done different things that have some common grounds, so I would be able to C/P a lot of code, that I know well, and just adjust it here and there for some of this stuff. That's also partly the reason for me going this route, as using cck and views alone wouldn't be saving me that much time anyways
