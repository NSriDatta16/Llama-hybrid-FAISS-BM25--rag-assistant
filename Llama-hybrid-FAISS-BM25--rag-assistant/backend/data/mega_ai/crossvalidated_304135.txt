[site]: crossvalidated
[post_id]: 304135
[parent_id]: 304127
[tags]: 
The "true slope" in a normal linear model tells you how much the mean response changes thanks to a one point increase in $x$. By assuming normality and equal variance, all quantiles of the conditional distribution of the response move in line with that. Sometimes, these assumptions are very unrealistic: variance or skewness of the conditional distribution depend on $x$ and thus, its quantiles move at their own speed when increasing $x$. In QR you will immediately see this from very different slope estimates. Since OLS only cares about the mean (i.e. the average quantile), you can't model each quantile separately. There, you are fully relying on the assumption of fixed shape of the conditional distribution when making statements on its quantiles. EDIT: Embed comment and illustrate If you are willing to make that strong assumtions, there is not much point in running QR as you can always calculate conditional quantiles via conditional mean and fixed variance. The "true" slopes of all quantiles will be equal to the true slope of the mean. In a specific sample, of course there will be some random variation. Or you might even detect that your strict assumptions were wrong... Let me illustrate by an example in R. It shows the least squares line (black) and then in red the modelled 20%, 50%, and 80% quantiles of data simulated according to the following linear relationship $$ y = x + x \varepsilon, \quad \varepsilon \sim N(0, 1) \ \text{iid}, $$ so that not only the conditional mean of $y$ depends on $x$ but also the variance. The regression lines of the mean and the median are essentially identical because of the symmetrical conditional distribution. Their slope is 1. The regression line of the 80% quantile is much steeper (slope 1.9), while the regression line of the 20% quantile is almost constant (slope 0.3). This suits well to the extremely unequal variance. Approximately 60% of all values are within the outer red lines. They form a simple, pointwise 60% forecast interval at each value of $x$. The code to generate the picture: library(quantreg) set.seed(3249) n
