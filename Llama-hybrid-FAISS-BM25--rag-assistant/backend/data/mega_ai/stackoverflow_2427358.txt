[site]: stackoverflow
[post_id]: 2427358
[parent_id]: 177514
[tags]: 
I went through the same search. I first tried Smack and then realized it's targeted at c2s (client to server) and didn't have what I need. I looked at Tinder but didn't like the licensing model (also when I looked it was much more raw). I finally looked at Whack and realized it was what I needed - but it's missing a lot (that's why Tinder came about I think). So..my solution? Forked Whack, added some code to abstract out things, and try to make it easier to use: http://github.com/Communitivity/Adirondack I wrote a Scala library based on that to help create external component based agents, see http://github.com/Communitivity/Shellack and http://github.com/Communitivity/MinimalScalaXMPPComponent One of my main goals was to make it easy to write a component quickly. An example of such a component is below: object Main { /** * @param args the command line arguments */ def main(args: Array[String]) :Unit = { new XMPPComponent( new ComponentConfig() { def secret() : String = { "secret.goes.here" } def server() : String = { "communitivity.com" } def subdomain() : String = { "weather" } def name() : String = { "US Weather" } def description() : String = { "Weather component that also supported SPARQL/XMPP" } }, actor { loop { react { case (pkt:Packet, out : Actor) => Console.println("Received packet...\n"+pkt.toXML) pkt match { case message:Message => val reply = new Message() reply.setTo(message.getFrom()) reply.setFrom(message.getTo()) reply.setType(message.getType()) reply.setThread(message.getThread()) reply.setBody("Received '"+message.getBody()+"', tyvm") out ! reply case _ => Console.println("Received something other than Message") } case _ => Console.println("Received something other than (Packet, actor)") } } } ).start } }
