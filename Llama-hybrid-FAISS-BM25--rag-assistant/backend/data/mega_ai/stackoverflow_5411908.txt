[site]: stackoverflow
[post_id]: 5411908
[parent_id]: 
[tags]: 
LValue Error When Trying to Reference Value in C

Here's one that's sure to be fun for someone. So I have an array of objects (in my test/demo code here, I just make them doubles for simplicity) and then I create an array of pointers to these objects. The reason I do this is because I'm going to be swapping the objects, and swapping the objects themselves would be expensive, while swapping their pointers (in the secondary array) is cheap. I have a number of subindexes inside my box data type. Basically, my goal is to be able to maintain contiguous stretches of pointers to objects that the box "owns". To do this, when I transfer from one box to another, I have to perform a number of swaps within the master pointer array. I do this via using the subindex inside my box structure, and it is there that the error occurs... see commented line for error. #include typedef struct box_s { double * TestArrayPointer; } box_t; main () { double * TestArray; double ** TestPointerArray; TestArray = new double [100]; TestPointerArray = new double * [100]; for (unsigned int Counter = 0; Counter I think it's because of the "-1", but I'm not sure why that's not valid, when I do similar things with "+1" in the loops above. P.S. This is the REAL test code. I compile with g++ main.cpp . I didn't pay to careful attention to the comments and casing, just tried to stick with MSDN's suggested casing scheme, so don't judge... it's just a quick&dirty test!! EDIT 1 Here is the working code for whoever cares... PMG I changed this to c++ given the new usage. And Heath I'm giving you credit, though your answer didn't solve the underlying problem. Here is the real solution: #include typedef struct box_s { double ** TestArrayPointer; unsigned int NumberPoints; } box_t; main () { double * TestArray; double ** TestPointerArray; TestArray = new double [100]; TestPointerArray = new double * [100]; for (unsigned int Counter = 0; Counter Note the proper swapping!!
