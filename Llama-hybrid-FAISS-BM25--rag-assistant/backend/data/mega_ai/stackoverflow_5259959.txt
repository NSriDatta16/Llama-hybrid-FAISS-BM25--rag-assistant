[site]: stackoverflow
[post_id]: 5259959
[parent_id]: 5259216
[tags]: 
To get only the annotated properties use XmlAccessType.NONE: @XmlAccessorType(XmlAccessType.NONE) @XmlRootElement class AnnotatedBean extends MyBean { ... } Mapping the 3rd Party Class Using Externalized Metadata You could use the external metadata extension in EclipseLink JAXB (MOXy), I'm the tech lead. It allows you to provide metadata for 3rd party classes. For this example the metadata will look like: To use MOXy you need to add a file named jaxb.properties in with your model classes with the following entry: javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory The following article has instructions on configuring MOXy to work with Jersery: http://bdoughan.blogspot.com/2010/08/creating-restful-web-service-part-35.html Context Resolver - Leveraging the Metadata You would need to use a ContextResolver to get your JAXBContext to leverage the external bindings file. The metadata is specified through a property when the JAXBContext is instantiated: import java.io.InputStream; import java.util.HashMap; import java.util.Map; import javax.ws.rs.Produces; import javax.ws.rs.ext.ContextResolver; import javax.ws.rs.ext.Provider; import javax.xml.bind.JAXBContext; import javax.xml.transform.Source; import javax.xml.transform.stream.StreamSource; import org.eclipse.persistence.jaxb.JAXBContextFactory; @Provider @Produces({"application/xml", "application/json"}) public class AnnotatedBeanContextResolver implements ContextResolver { private JAXBContext jaxbContext; public PurchaseOrderContextResolver() { try { Map properties = new HashMap (1); properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY, new File("src/blog/bindingfile/binding.xml")); jaxbContext = JAXBContext.newInstance(new Class[] {AnnotatedBean.class}, properties); } catch(Exception e) { throw new RuntimeException(e); } } public JAXBContext getContext(Class clazz) { if(AnnotatedBean.class == clazz) { return jaxbContext; } return null; } }
