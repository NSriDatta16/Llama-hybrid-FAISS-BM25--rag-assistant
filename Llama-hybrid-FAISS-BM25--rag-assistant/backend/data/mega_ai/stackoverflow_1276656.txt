[site]: stackoverflow
[post_id]: 1276656
[parent_id]: 1276481
[tags]: 
DDD is really just an elaboration of the design pattern Fowler calls Domain Model in Patterns of Enterprise Application Architecture . In that book, he compares Domain Model to other ways of organizing code, such as Transaction Script , but it is clear that he prefers Domain Model over other alternatives for all but the simplest of applications. I do, too. DDD simply expands greatly on the original concept of a Domain Model and provides tons of guidance on how we should analyze and model our domain in a way that will be beneficial to ourselves as developers. If the Domain in question is complex, then a Domain model (and hence DDD) is a good choice. It doesn't really matter whether the Domain is business-oriented or more technical in nature. In his book Domain-Driven Design , Eric Evans starts by describing how the DDD techniques helped him model a Printed Circuit Board application. That is surely a technical Domain, if any! In my current work, we are using DDD to model an application that deals with Claims-based identity - another very technical Domain. DDD is really just about dealing with complexity in sofware, and this is also the subtitle of Evans' book: "Tackling Complexity in the Heart of Software."
