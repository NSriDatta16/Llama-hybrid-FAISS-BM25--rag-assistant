[site]: stackoverflow
[post_id]: 2011904
[parent_id]: 2011683
[tags]: 
If it's important to place the content in a table, then you could "rotate" your table into a different structure and bind on that structure. Or if it's not important that the data is in a table, you could place the items in divs and float them so they're side-by-side. Edit: Here's what I mean by rotating the data. If your data is currently in a structure like List , where MyDataClass is defined as something like: class MyDataClass { public string Category { get; set; } public string Content { get; set; } public int OtherField { get; set; } } ...then the logical layout when iterating through the structure would look like this: MyDataClass[0]: Category, Content, OtherField MyDataClass[1]: Category, Content, OtherField ... When rotating the data, you'd turn those rows into columns and columns into rows. For example, you could populate a List > with code such as this: var rotated = new List > { new List (), new List (), new List (), }; for each (MyDataClass object in myCollection) { rotated[0].Add(object.Category); rotated[1].Add(object.Content); rotated[2].Add(object.OtherField.ToString("n0")); } Now your data structure looks like this: rotated[0]: MyDataClass[0].Category, MyDataClass[1].Category, ... rotated[1]: MyDataClass[0].Content, MyDataClass[1].Content, ... rotated[2]: MyDataClass[0].OtherField, MyDataClass[1].OtherField, ... Basically, you transform the data into a form that can be dropped right into your table. Edit 2: I actually have to do these sorts of rotations for reports often enough that I made an extension method for IEnumerable that will do the rotation in a somewhat more elegant manner. Here's the extension method: public static class MyCollectionExtensionMethods { public static IEnumerable > Rotate ( this IEnumerable collection, params Func [] valueSelectors) { return valueSelectors.Select(s => collection.Select(i => s(i))); } } And here's how I'd use it: IEnumerable > rotated = data.Rotate( i => i.Category, i => i.Content, i => i.OtherField.ToString("n0"))
