[site]: stackoverflow
[post_id]: 3273008
[parent_id]: 3272289
[tags]: 
I wrote a small class to to create a form based on a DB table, a few years ago. Here is a method to grab all the fields & field types from a database table: public function getDatabaseFields($db_name, $tbl, $ignoredFields) { $db = mysqli_select_db($this->connect, $db_name); $sql = "DESCRIBE $tbl"; $result = mysqli_query($this->connect, $sql); if ($result !== false) { $i = 0; while ($row = mysqli_fetch_array($result, MYSQL_ASSOC)) { if (!in_array($row[Field], $ignoredFields)) { $formItems[$i][lbl] = $row[Field]; $formItems[$i][type] = $row[Type]; $formItems[$i][nul] = $row["Null"]; } $i++; } return $formItems; } else { return false; } } And here is a method to generate forms based on that data: /** * This function gets the details of a table and * creates a form to insert values in that table * $ignoredFields is an array of fields which should not be in the form * $specialFields contain complete fields ready to output, (useful if you need fields not in the table) * $existingData are data that should be displayed in the fields * $options[formTitle] displays a title above the form in a separate * $options[errors][fieldName] display the field's label in bold red letters * $options[hidden][fieldName] set field as hidden and the value is $options[hidden][fieldName][value] * @param $db_name * @param $tbl * @param $ignoredFields * @param $specialFields * @param $existingData * @param $options */ function form_db_table($db_name, $tbl, $ignoredFields, $specialFields, $existingData, $options) { # Get all the database fields that must be filled out. $formItems = $this->getDatabaseFields($db_name, $tbl, $ignoredFields); # Generate the form fields and load them in variables foreach ($formItems as $key=>$value) { # $fieldName is the actual field name in the database. # $fieldLbl is the name displayed in the form before the field $fieldName = $value[lbl]; $pattern = array('/([a-z])([A-Z])/','/[_-]/'); $replacement = array('$1 $2', ' '); $fieldLbl = ucfirst(strtolower(preg_replace($pattern, $replacement, $fieldName))); # if $fieldName is in $options[hidden], an hidden input is created if (is_array($options[hidden])) { if (array_key_exists($fieldName, $options[hidden])) { $val = $options[hidden][$fieldName]; $formEntries .= " "; continue; } } if($value[nul] == "YES") { $mandatory = ""; } else { $mandatory = "*"; $mandatoryFields .= $value[lbl] . ";"; } // from type, decide which form item to use: varchar = ... if (stripos($value[type],"varchar") !== false) { $varcharLimit = substr($value[type], 8, -1); if ($varcharLimit "; } else { $inputItem = " $existingData[$fieldName] "; } } else if (stripos($value[type],"text") !== false) { $inputItem = " $existingData[$fieldName] "; } else if (stripos($value[type],"date") !== false) { $inputItem = " "; } else if (stripos($value[type],"enum") !== false) { $inputItem = " \r\n"; if (isset($existingData[$fieldName])) { $inputItem .= " $existingData[$fieldName] "; } $enumVal = explode(",",substr($value[type], 6, -1)); foreach($enumVal as $key => $value) { $val= trim(str_replace("'", "", $value)); $inputItem .= " $val "; } $inputItem .= " "; } ## !!! COMPLETE THE LIST OF TYPES !!! $error = $options[error][$fieldName]; $formEntries .= " \r\n"; $formEntries .= " \r\n"; $formEntries .= "$fieldLbl$mandatory \r\n$inputItem \r\n"; $formEntries .= " \r\n"; } # Sends the list of mandatory fields if ($mandatoryFields != "") { $mandatoryFields = substr($mandatoryFields, 0, -1); //- Explode to determine which fields can't be blank -\\ $mandatoryFields = " \r\n"; } # Extract special fields - fields and labels ready for output if (is_array($specialFields)) { foreach ($specialFields as $key=>$value) { if($value[where]="before") { $specFieldsBefore .= "$value[openField] $value[lbl] $value[field]\r\n $value[closeField] \r\n"; } else { $specFieldsAfter .= "$value[openField] $value[lbl] $value[field]\r\n $value[closeField] \r\n"; } } } # Error message if (isset($options[errMsg])) { echo " $options[errMsg] "; } # Output the top of the form echo $this->formTag; if (isset($options[formTitle])) { echo "\r\n $options[formTitle] \r\n"; } echo " \r\n"; #output the the actual fields echo $mandatoryFields; echo $specFieldsBefore; echo $formEntries; echo $specFieldsAfter; # Close fieldset, add a validate button and close the form echo " "; echo " "; echo " "; } No doubt there must be more elegant solutions out there, but if the form's purpose is to fill out a database table, it makes it pretty easy to generate a form.
