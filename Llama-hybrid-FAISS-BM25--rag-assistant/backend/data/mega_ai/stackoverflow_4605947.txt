[site]: stackoverflow
[post_id]: 4605947
[parent_id]: 4605408
[tags]: 
I generally hand roll my own datacontexts and data objects as well for Linq to Sql. I'll create a sample datacontext, table object, and retriever method to show my little home made strategy here. We'll say my database name is "Main", my table object will be "dbo.Person" inside of sql. here goes: DataContext representing my databae: internal class MainDataContext : System.Data.Linq.DataContext { private static MappingSource _mappingSource = new AttributeMappingSource(); internal MainDataContext(string connectionString) : base(connectionString, _mappingSource) {} internal Table PersonDtos { get { return GetTable (); } } } Dto representing my table: [Table(Name = "dbo.Person")] internal class PersonDto { private Guid _id; [Column(Storage = "_id", IsPrimaryKey = true)] public Guid Id { get { return _id; } set { _id = value; } } private string _name; [Column(Storage = "_name")] public string Name { get { return _name; } set { _name = value; } } private DateTime _dateCreated; [Column(Storage = "_dateCreated")] public DateTime DateCreated { get { return _dateCreated; } set { _dateCreated = value; } } } Now finally PersonRetriever class: public class PersonRepository { private string _connectionString; public PersonRepository(string connectionString) { _connectionString = connectionString; } string GetPersonName(Guid personId) { using (var db = new MainDataContext(_connectionString)) { string personName = string.Empty; PersonDto person = db.PersonDtos.FirstOrDefault(c => c.Id == personId); if (person != null) { personName = person.Name; } return personName; } } } A few things to note: I declare a static mapping source in the datacontext to pass to the base data context, solely for keeping state when doing pre-compiled linq queries. It is not necessary, there is a base constructor that just takes in a connection string. Also, make sure when declaring your Dtos, that the public property name matches EXACTLY to what your table in the database is. your private member can be named whatever you wish. Hope this helps!
