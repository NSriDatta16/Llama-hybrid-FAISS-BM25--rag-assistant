[site]: stackoverflow
[post_id]: 4430469
[parent_id]: 4430190
[tags]: 
Where a local variable is stored is an implementation detail. Simple local variables are usually stored in the CPU-registers and/or the stack. If they are captured in a closure they'll be rewritten into members in a heap allocated object. That's because the lamda might outlive it's creating functions, and thus the variables it uses must be able to live long enough too. Unlike in C++ in C# the new does not imply a heap allocation . It's just the syntax for calling a constructor. And calling new on a value-type doesn't have the semantics of a placement new either. It has the semantics of constructing an instance somewhere and then copying it into the target variable. In my mental model there are two types of storage: Local storage that can't outlive the return of the function. This includes stack and registers. Global storage that lives until it isn't referenced anymore. This is usually the heap. But in run-times that do escape analysis it might be put on the stack if the runtime proves that no references will survive the function. Your example falls into the first kind of storage since you use a value type.
