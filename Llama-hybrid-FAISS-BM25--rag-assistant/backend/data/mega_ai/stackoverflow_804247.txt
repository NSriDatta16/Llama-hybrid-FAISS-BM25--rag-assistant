[site]: stackoverflow
[post_id]: 804247
[parent_id]: 
[tags]: 
Java: Cyclic generic type relation doesn't allow cast from supertype (javac bug)

I encounter a totally strange behavior of the Java compiler. I can't cast a supertype to a subtype when cyclic generic type relation is involved. JUnit test case to reproduce the problem: public class _SupertypeGenericTest { interface ISpace , A extends IAtom > { } interface IAtom , A extends IAtom > { } static class Space implements ISpace { } static class Atom implements IAtom { } public void test() { ISpace spaceSupertype = new Space(); IAtom atomSupertype = new Atom(); Space space = (Space) spaceSupertype; // cast error Atom atom = (Atom) atomSupertype; // cast error } } Compiler error output: _SupertypeGenericTest.java:33: inconvertible types found : pinetag.data._SupertypeGenericTest.ISpace required: pinetag.data._SupertypeGenericTest.Space Space space = (Space) spaceSupertype; ^ _SupertypeGenericTest.java:34: inconvertible types found : pinetag.data._SupertypeGenericTest.IAtom required: pinetag.data._SupertypeGenericTest.Atom Atom atom = (Atom) atomSupertype; ^ 2 errors Note: I'm using Netbeans latest trunk, bundled Ant, latest Java 6 release. I tried using Ant from command line (Netbeans generates a build.xml file) but it results in same errors. What is wrong? Is there an elegant way solve the problem? The strange thing is: Netbeans doesn't mark errors (not even warnings) in given code. EDIT: No, now I understand nothing ! Eclipse 3.4.1 doesn't mark neither warnings nor errors, and compiles the code without trouble!!! How can this be? I thought, using Ant from command line along with build.xml provided by Netbeans' would be neutral. Am I missing something? EDIT 2: Using JDK7 library and JDK7 code format, netbeans compiles without errors/warnings! (I'm using 1.7.0-ea-b55) EDIT 3: Changed title to indicate that we're dealing with a javac bug.
