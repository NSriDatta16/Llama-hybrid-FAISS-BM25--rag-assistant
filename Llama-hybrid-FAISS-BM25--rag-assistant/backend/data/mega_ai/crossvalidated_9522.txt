[site]: crossvalidated
[post_id]: 9522
[parent_id]: 9500
[tags]: 
As pointed out in the comments, it's because princomp uses $N$ for the divisor, but prcomp and the direct calculation using cov both use $N-1$ instead of $N$. This is mentioned in both the Details section of help(princomp) : Note that the default calculation uses divisor 'N' for the covariance matrix. and the Details section of help(prcomp) : Unlike princomp , variances are computed with the usual divisor N - 1. You can also see this in the source. For example, the snippet of princomp source below shows that $N$ ( n.obs ) is used as the denominator when calculating cv . else if (is.null(covmat)) { dn You can avoid this multiplication by specifying the covmat argument instead of the x argument. princomp(covmat = cov(iris[,1:4]))$sd^2 Update regarding PCA scores: You can set cor = TRUE in your call to princomp in order to perform PCA on the correlation matrix (instead of the covariance matrix). This will cause princomp to $z$-score the data, but it will still use $N$ for the denominator. As as result, princomp(scale(data))$scores and princomp(data, cor = TRUE)$scores will differ by the factor $\sqrt{(N-1)/N}$.
