[site]: stackoverflow
[post_id]: 1723597
[parent_id]: 1723515
[tags]: 
What you need is a push_inserter (i.e. an inserter that performs push es into the queue). As far as I know, there is no such iterator in the STL. What I usually do is sadly fall back to the good old for loop. If you have the courage, you can roll your own iterator, something along these lines: template class push_insert_iterator { public: typedef Container container_type; typedef typename Container::value_type value_type; explicit push_insert_iterator(container_type & c) : container(c) {} // construct with container push_insert_iterator & operator=(const value_type & v) { //push value into the queue container.push(v); return (*this); } push_insert_iterator & operator*() { return (*this); } push_insert_iterator & operator++() { // Do nothing return (*this); } push_insert_iterator operator++(int) { // Do nothing return (*this); } protected: container_type & container; // reference to container }; template inline push_insert_iterator push_inserter(Container & c) { return push_insert_iterator (c); } This is just a draft but you got the idea. Works with any container (or, well, container adapters) with a push method (e.g. queue , stack ).
