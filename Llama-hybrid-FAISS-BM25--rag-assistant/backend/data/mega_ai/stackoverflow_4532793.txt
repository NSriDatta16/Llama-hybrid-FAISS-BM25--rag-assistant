[site]: stackoverflow
[post_id]: 4532793
[parent_id]: 4532770
[tags]: 
else will not execute if there is a break statement in the loop. From the docs : The while statement is used for repeated execution as long as an expression is true: while_stmt ::= "while" expression ":" suite ["else" ":" suite] This repeatedly tests the expression and, if it is true, executes the first suite; if the expression is false (which may be the first time it is tested) the suite of the else clause, if present, is executed and the loop terminates. A break statement executed in the first suite terminates the loop without executing the else clauseâ€™s suite. A continue statement executed in the first suite skips the rest of the suite and goes back to testing the expression. (emphasis mine) This also works for for loops, by the way. It's not often useful, but usually very elegant when it is. I believe the standard use case is when you are searching through a container to find a value: for element in container: if cond(element): break else: # no such element Notice also that after the loop, element will be defined in the global scope, which is convenient. I found it counterintuitive until I heard a good explanation from some mailing list: else suites always execute when a condition has been evaluated to False So if the condition of a while loop is executed and found false, the loop will stop and the else suite will run. break is different because it exits the loop without testing the condition.
