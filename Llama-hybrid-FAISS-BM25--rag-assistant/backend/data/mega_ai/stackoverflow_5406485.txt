[site]: stackoverflow
[post_id]: 5406485
[parent_id]: 5394910
[tags]: 
M Kenyon II Database B just had some changes and data replicated to it (we only read from the data, all new data comes from nightly replication). Ensure that all indexes survived the changes to Database B. If they still exist, check how fragmented they are and reorganize or rebuild as necessary. Indexes can have a huge impact on performance. As far as the report taking far longer to run than your query, there can be many reasons for this. Some tricks for getting SSRS to run faster can be found here: http://www.sqlservercentral.com/Forums/Topic859015-150-1.aspx Edit: Here's the relevant information from the link above. AshMc I recall some time ago we had the same issue where we were passing in the parameters within SSRS to a SQL Dataset and it would slow it all down compared to doing it in SSMS (minutes compared to seconds like your issue). It appeared that when SSRS was passing in the parameter it was possibly recalculating the value and not storing it once and that was it. What I did was declare a new TSQL parameter first within the dataset and set it to equal the SSRS parameter and then use the new parameter like I would in SSMS. eg: DECLARE @X as int SET @X = @SSRSParameter janavarr Thanks AshMc, this one worked for me. However my issue now is that it will only work with a single parameter and the query wonâ€™t run if I want to pass multiple parameter values. ... AshMc I was able to find how I did this previously. I created a Temp table placed the values that we wanted to filter on in it then did an inner join on the main query to it. We only use the SSRS Parameters as a filter on what to put in the temp table. This saved a lot of report run time doing it this way DECLARE @ParameterList TABLE (ValueA Varchar(20)) INSERT INTO @ParameterList select ValueA from TableA where ValueA = @ValueB INNER JOIN @ParameterList ON ValueC = ValueA Hope this helps, --Dubs
