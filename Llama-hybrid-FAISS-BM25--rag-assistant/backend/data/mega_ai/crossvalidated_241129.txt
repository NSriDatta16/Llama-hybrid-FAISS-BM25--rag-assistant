[site]: crossvalidated
[post_id]: 241129
[parent_id]: 241091
[tags]: 
That is a very nice question to deal with the topic of regression. First and foremost it is nescessary to know what you want to know about your curve and imho you are asking if you could extract some basic information about the sinusoid ( a mathematical curve that describes a smooth repetitive oscillation ). The main interest of yours seems to be wether or not the slope of this sinusoid is positive, negative, or 0. Lets produce some data first: library(tidyverse) ## # the linear case ## someData % mutate(y = 5 - 3*x + 10*sin(x) + rnorm(n(), sd = 3)) ggplot(someData, aes(x,y)) + geom_point() Seems wavyy enough to me ;-) - it has a linear component, an intercept, and an oscilating behaviour along the linear component. Here are some approaches to think about: Linear regression You are dealing with linear regression if you assume your coefficients $\vec{\beta}$ to be linear (and it does not matter that the variables themselfes are not), i.e. you are trying to find a solution to $$ y = \beta_0 + \sum\limits_i \beta_i*f(x_i) $$ Lets consider (what we already know) that our $y$ is the function of $$ y = \beta_0 + \beta_1 x + \beta_2 sin(x) $$ Here our $\vec{\beta}$s are linear and thus we can fit a linear model: myLinearModel |t|) #(Intercept) 4.79516 0.20465 23.43 A very good fit, indeed (as related to question 2). It already answers your question 3 about what direction the wave is going ( -2.994 ), i.e. it has a negative slope in the linear component. But for now you cannot say anything about contraction or expansion. We can also plot the fit with the data: ggplot(someData, aes(x,y)) + geom_point() + geom_smooth(method = "lm", formula = y ~ x + sin(x)) Non-linear regression Lets construct some non-linear data someData % mutate(y = 5 - 3*x + 5*sin(x) + 5 * cos(2*x + 2) + rnorm(n(), sd = 1)) ggplot(someData, aes(x,y)) + geom_point() We still can try and fit a linear model myLinearModel |t|) #(Intercept) 5.07889 0.16187 31.376 Still, a good fit, but its seems the cos component is negligible. Now, you can still have your question about the slope of the linear component answered. Yay! But if you would like to inter- or extrapolate some new points you can build different models. E.g. loess ggplot(someData, aes(x,y)) + geom_point() + geom_smooth(method = "lm", formula = y ~ x + sin(x) + cos(x)) + geom_smooth(method = "loess", col = "red", span = 0.1) With a small span you actually can very well use it for interpolation - but the low the span the greater the overfitting! Another form of non-linear models can be used in general optimization procedures, e.g.: nonLinear I will not go into detail here; there is soooo much to say and think about it and it all depends on your data. And I will not dare to start with Decision Trees or Neural Networks for regression. (Because if you have a hammer everything seems like a nail) Fourier Transform What else? Well, how about some stuff from signal processing where wavyy functions are everywhere! Using fft you could segment your function into a series of sinusoids like here: fftin In this frequency plot we can see many small frequencies. Lets remove them and see how our new function fits the data. fftcut We can even cut out more and still have a smooth curve. fftcut Enough of magic :-). To answer your questions you can work with a linear model. Even expansion and contraction can be modelled, albeit not without addiotional data wrangling. Peaks of your functions can be derived on a piece of paper after you compute your coefficients in a linear model.
