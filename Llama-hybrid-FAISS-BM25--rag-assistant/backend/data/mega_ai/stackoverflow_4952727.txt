[site]: stackoverflow
[post_id]: 4952727
[parent_id]: 4952616
[tags]: 
Very much so, all you need to do is use a callback to set the value of self.dimensions: class ShippingProfile 0, :height => 0, :depth => 0} end def set_dimensions self.dimensions = { :width => self.width || self.dimensions[:width], :height => self.height || self.dimensions[:height], :depth => self.depth || self.dimensions[:depth], } end end You need to use self.foo || self.dimensions[:foo] to ensure that you preserve any existing values already set in the hash. Why? Your dimension attributes (I'm assuming) aren't being persisted in the database - you're using attr_accessor, rather than setting them up as fields in your table. As an aside, I think you're going about your model design the wrong way. By storing the dimensions as a hash in the database, not only do you lose the ability to query based on those attributes, but you add a level of fragility you don't need. If you are storing your individual dimension attributes as separate fields, then you're introducing redundancy and complexity. You would be better served by having the three attributes as fields in your database (if you aren't already), then generating the dimensions hash on the fly when it's needed: class ShippingProfile self.width, :height => self.height, :depth => self.depth } end end This way, you retain the functionality and gain some flexibility.
