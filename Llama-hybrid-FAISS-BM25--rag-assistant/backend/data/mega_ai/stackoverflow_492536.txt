[site]: stackoverflow
[post_id]: 492536
[parent_id]: 490420
[tags]: 
In c# usage of TryParse instead of Parse for value types to avoid exceptions like FormatException, OverflowException etc, of course to avoid writing the try block for the same. Bad code string numberText = "123"; // or any other invalid value public int GetNumber(string numberText) { try { int myInt = int.Parse(numberText); return myInt; } catch (FormatException) { //log the error if required return 0; } catch (OverflowException) { return 0; } } Good code (if you don't want to handle errors) string numberText = "123"; // or any other invalid value public int GetNumber(string numberText, int defaultReturnValue) { int myInt; return ( int.TryParse(numberText, out myInt) ) ? myInt : defaultReturnValue; } You can do the same for almost all the value types e.g: Boolean.TryParse, Int16.TryParse, decimal.TryParse etc
