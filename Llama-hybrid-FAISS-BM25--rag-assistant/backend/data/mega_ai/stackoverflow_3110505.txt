[site]: stackoverflow
[post_id]: 3110505
[parent_id]: 3109796
[tags]: 
Using DES (64-bit which is faster that rijndael) it takes me less than 5s to process a 112Mb File. Have you tried it ? Nevertheless, you gave me a funny idea : Encrypt half of the block of your input file and keep the other half cleartext. (You'll get 2 files ... and you must forget about security obviously) It cut down the processing time by ~40% and you can adjust the ratio encrypted/cleartext blocks to gain time : private static void EncryptData(String inName, String outName, byte[] desKey, byte[] desIV) { //Create the file streams to handle the input and output files. FileStream fin = new FileStream(inName, FileMode.Open, FileAccess.Read); FileStream fout = new FileStream(outName, FileMode.OpenOrCreate, FileAccess.Write); FileStream foutclear = new FileStream(outName + ".clear", FileMode.OpenOrCreate, FileAccess.Write); fout.SetLength(0); //Create variables to help with read and write. byte[] bin = new byte[4096]; //This is intermediate storage for the encryption. long rdlen = 0; //This is the total number of bytes written. long totlen = fin.Length; //This is the total length of the input file. int len; //This is the number of bytes to be written at a time. System.Security.Cryptography.SymmetricAlgorithm des = SymmetricAlgorithm.Create("DES"); // Using DES CryptoStream encStream = new CryptoStream(fout, des.CreateEncryptor(desKey, desIV), CryptoStreamMode.Write); Console.WriteLine("Encrypting..."); //Read from the input file, then encrypt and write to the output file. while (rdlen
