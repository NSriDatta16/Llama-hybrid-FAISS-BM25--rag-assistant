[site]: stackoverflow
[post_id]: 4666079
[parent_id]: 4057698
[tags]: 
set face_rect frame while passing parameters for setImageRIO CGRect face_rect; // Draw results on the iamge for(int i = 0; i total; i++) { NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init]; // Calc the rect of faces CvRect cvrect = *(CvRect*)cvGetSeqElem(faces, i); face_rect = CGContextConvertRectToDeviceSpace(contextRef, CGRectMake(cvrect.x * scale, cvrect.y * scale, cvrect.width * scale, cvrect.height * scale)); CGContextStrokeRect(contextRef, face_rect); [pool release]; } cvClearMemStorage(storage); cvSetImageROI(image, cvRect(face_rect.origin.x,face_rect.origin.y,face_rect.size.width,face_rect.size.height)); CvSeq *eye = cvHaarDetectObjects(small_image, cascade, storage,1.1, 3, 0, cvSize(10, 10)); for(int i=0;i total;i++) { NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init]; CvRect cvrect= *(CvRect*)cvGetSeqElem(eye, i); CGRect eyes_rect; CGContextSetRGBStrokeColor(contextRef, 1.1, 1.0, 0.0, 0.5); //left eye detection eyes_rect = CGContextConvertRectToDeviceSpace(contextRef, CGRectMake((cvrect.x *scale + 20), (cvrect.y * scale)+(cvrect.height - 30 ) , cvrect.width - 30, 40 )); CGContextStrokeRect(contextRef, eyes_rect); //right eye detection CGRect eyes_Right = CGContextConvertRectToDeviceSpace(contextRef, CGRectMake((cvrect.x *scale + cvrect.width+ 10), (cvrect.y * scale)+(cvrect.height - 30 ) , cvrect.width - 30, 40 )); CGContextStrokeRect(contextRef, eyes_Right); [pool release]; }
