[site]: stackoverflow
[post_id]: 5447537
[parent_id]: 5447535
[tags]: 
public function t():type { if(xxx)return xxx; //don't return anything } so something like: private function derp():void{ } private function derp2():int{ } private function derp3():Boolean{ } etc its always good practice to define the return type, and return an indicator variable if false (i.e return -1 for number), but if its really necessary you can do this: public function t() { if(xxx)return xxx; //don't return anything } don't specify a return type at all, and either it will return xxx or undefined , but I highly encourage using a return type. But since flash runs on virtual memory it can basically adapt to your return type so it makes it a little flexible so you can return what ever. EDIT: public function t() { if(true){ return xxx; //xxx can by of any type } return NaN } EDIT: so lets say you want the condition with a return type of int you would have public function t():int { if(true){ return xxx; //where xxx != -1 } return -1 } this when we get back any number other then negative 1 we know the condition was true, but if we get -1 the condition was false. But if you numbers are any real numbers, use NaN keyword: public function t():Number { if(true){ return xxx; //where xxx != -1 } return NaN } this way if you get NaN back it means your condition was false I should also mention that when your dealing with NaN use the isNaN() to determine if the return type was NaN or not: example: if(isNaN(t()) == true){ //if condition in function t() was false; }
