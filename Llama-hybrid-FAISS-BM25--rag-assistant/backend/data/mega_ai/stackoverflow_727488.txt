[site]: stackoverflow
[post_id]: 727488
[parent_id]: 715626
[tags]: 
I had a similar problem where I could only validate parts of my XML document. I came up with this method here: private void ValidateSubnode(XmlNode node, XmlSchema schema) { XmlTextReader reader = new XmlTextReader(node.OuterXml, XmlNodeType.Element, null); XmlReaderSettings settings = new XmlReaderSettings(); settings.ConformanceLevel = ConformanceLevel.Fragment; settings.Schemas.Add(schema); settings.ValidationType = ValidationType.Schema; settings.ValidationEventHandler += new ValidationEventHandler(XSDValidationEventHandler); using (XmlReader validationReader = XmlReader.Create(reader, settings)) { while (validationReader.Read()) { } } } private void XSDValidationEventHandler(object sender, ValidationEventArgs args) { errors.AppendFormat("XSD - Severity {0} - {1}", args.Severity.ToString(), args.Message); } Basically, I pass it an XmlNode (which I select from the entire XmlDocument by means of .SelectSingleNode), and an XML schema which I load from an embedded resource XSD inside my app. Any validation errors that might occur are being stuffed into a "errors" string builder, which I then read out at the end, to see if there were any errors recorded, or not. Works for me - your mileage may vary :-)
