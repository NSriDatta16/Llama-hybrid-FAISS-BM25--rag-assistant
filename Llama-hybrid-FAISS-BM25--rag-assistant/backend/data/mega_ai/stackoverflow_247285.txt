[site]: stackoverflow
[post_id]: 247285
[parent_id]: 247086
[tags]: 
Directives are suggestion on how you could do things to improve the overall quality or productivity or even both of the end product. They are in no ways laws to be obeyed less you get smitten in a flash by the god of proper coding practice. Here's my compromise on the take and I found it quite useful and productive. Usually the hardest part to get right are the requirements and right behind it the usability of your class, API, package... Then is the actual implementation. Write your interfaces (they will change, but will go a long way in knowing WHAT has to be done) Write a simple program to use the interfaces (them stupid main). This goes a long way in determining the HOW it is going to be used (go back to 1 as often as needed) Write tests on the interface (The bit I integrated from TDD, again go back to 1 as often as needed) write the actual code behind the interfaces write tests on the classes and the actual implementation, use a coverage tool to make sure you do not forget weid execution paths So, yes I write tests before coding but never before I figured out what needs to be done with a certain level of details. These are usually high level tests and only treat the whole as a black box. Usually will remain as integration tests and will not change much once the interfaces have stabilized. Then I write a bunch of tests (unit tests) on the implementation behind it, these will be much more detailed and will change often as the implementation evolves, as it get's optimized and expanded. Is this strictly speaking TDD ? Extreme ? Agile...? whatever... ? I don't know, and frankly I don't care. It works for me . I adjust it as needs go and as my understanding of software development practice evolve. my 2 cent
