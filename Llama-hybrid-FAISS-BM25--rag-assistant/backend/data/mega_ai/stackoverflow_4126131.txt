[site]: stackoverflow
[post_id]: 4126131
[parent_id]: 4126029
[tags]: 
Hmm, that's a kind of fun problem. I can think of a few solutions: You could do a bit of guesswork depending on the relationships between the R-G-B values (for example, if one color is very dominant you guess that one, but if there's a bit of other color you get more and more likely to guess the combination of those two emitted colors, if all three are close to equal then guess white, grey, or black depending on how high the average of the three values is, if two are high and the other is low guess the combinatoin of the two, etc. etc.) You could go for a more learning approach where you set some initial guesses (as above) and then improve on those based on feedback from users. Unfortunately this problem is relatively subjective (although the question is not!) as people's perception of color varies widely between culture and even gender (see Randall Munroe's "study" on it ). If you want a specific subset of RGB values (like the ones that are given constants in Java or C# you can iterate through each and compare, finally returning some default value if it's not equal to any of them). [EDIT] Ahh! Colorblind users eh? Have you considered creating a setting which lets the user specify which colors they have trouble differentiating? If you did that you could let them know that something is "20% Redder than Green" (if, for instance, they had red-green colorblindness, which is most common). That would be pretty simple. They select a pixel, and you follow this pseudocode: if( userColorTrouble == RedGreen ) { int redVal = colorInQuestion.GetRed(); int greenVal = colorInQuestion.GetGreen(); if( redVal > greenVal ) { return "The color is " + (double)redVal / (redVal + greenVal) - .5d + "% redder than green"; } else { return "The color is " + (double)greenVal / (redVal + greenVal) - .5d + "% greener than red"; } } That could be a simpler, and more useful solution.
