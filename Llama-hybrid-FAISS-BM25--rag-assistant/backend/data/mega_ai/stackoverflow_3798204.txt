[site]: stackoverflow
[post_id]: 3798204
[parent_id]: 3797001
[tags]: 
I think that the proper answer is - it depends :-) If your controller is really dumb and consisted of "one liners" there is no need to test it as there is nothing (or almost nothing) to be broken. From what you've said it's your case. And remember that you should test controllers in isolation so your models should be mocked and it takes some time/code. Testing views are much trickier because you are suppose to test the layer alone - so you have to mockup all the models / controllers - it's the principle of unit testing. So I would vote for unit testing models only. You have almost all logic there so your test code coverage is high. And writing RSpec's for model is dead simple. BUT - apart from unit testing you really should go for integration testing. Cucumber is great for that. In the integration tests you tests all layers at once and not in isolation. And Cucumber tests can be discussed with your customer because they are human readable. It is really great source of clarification - when you write integration test you will often find edge cases that are not specified (aka "what the app should do if the user clicks there?"). So my humble recommendation is simple: RSpec for unit testing on models, Cucumber for integration testing
