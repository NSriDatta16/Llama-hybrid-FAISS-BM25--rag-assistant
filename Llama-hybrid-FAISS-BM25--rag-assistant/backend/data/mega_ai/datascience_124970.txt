[site]: datascience
[post_id]: 124970
[parent_id]: 
[tags]: 
How do I achieve MAE < 8 using ResNet50 on this dataset?

I've been up all night trying to achieve MAE https://people.ee.ethz.ch/~timofter/publications/Agustsson-FG-2017.pdf It is for an online class I am taking, the autograder checks if MAE as you can guess less than 8 and I can't get past it. The best I got is 12.9. Can you look at my code and perhaps tip me on what parameters I need to change to hit the bar? import pandas as pd import tensorflow as tf from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout from tensorflow.keras.applications.resnet50 import ResNet50 from tensorflow.keras.optimizers import Adam from tensorflow.keras.models import Sequential from tensorflow.keras.regularizers import l2 def load_train(path): train_datagen = ImageDataGenerator( horizontal_flip=True, vertical_flip=False, rescale=1/255., rotation_range=20, width_shift_range=0.2, height_shift_range=0.2, zoom_range=0.2, brightness_range=[0.8, 1.2], shear_range=0.2, validation_split=0.2 ) train_generator = train_datagen.flow_from_dataframe( pd.read_csv(f"{path}/labels.csv"), directory=f"{path}/final_files", x_col='file_name', y_col='real_age', target_size=(224, 224), batch_size=32, class_mode='raw', subset='training', seed=1234 ) print('LOAD TRAIN') return train_generator def load_test(path): test_datagen = ImageDataGenerator( rescale=1/255., validation_split=0.2 ) test_generator = test_datagen.flow_from_dataframe( pd.read_csv(f"{path}/labels.csv"), directory=f"{path}/final_files", x_col='file_name', y_col='real_age', target_size=(224, 224), batch_size=32, class_mode='raw', subset='validation' ) print('LOAD TEST') return test_generator def create_model(input_shape): base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape) # Unfreeze the top layers of the model for layer in base_model.layers[:-15]: layer.trainable = False model = Sequential() model.add(base_model) model.add(GlobalAveragePooling2D()) model.add(Dense(1024, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(1024, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(1)) initial_learning_rate = 0.001 lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay( initial_learning_rate, decay_steps=100000, decay_rate=0.96, staircase=True ) model.compile(optimizer=Adam(learning_rate=lr_schedule), loss='mean_squared_error', metrics=['mae']) print('CREATE MODEL') return model def train_model(model, train_generator, test_generator, epochs=20, steps_per_epoch=None, validation_steps=None): history = model.fit( train_generator, steps_per_epoch=steps_per_epoch, epochs=epochs, validation_data=test_generator, validation_steps=validation_steps, shuffle=True, verbose=2 ) print('TRAIN MODEL') return history # Example usage: # train_generator = load_train('/path/to/train/data') # test_generator = load_test('/path/to/test/data') # model = create_model(input_shape=(224, 224, 3)) # trained_model = train_model(model, train_generator, test_generator, steps_per_epoch=100, validation_steps=50)
