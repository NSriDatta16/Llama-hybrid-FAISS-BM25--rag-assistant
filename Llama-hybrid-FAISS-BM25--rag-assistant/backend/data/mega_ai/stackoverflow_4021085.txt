[site]: stackoverflow
[post_id]: 4021085
[parent_id]: 4020994
[tags]: 
From the perspective of your program, all command line arguments are strings, and you have to decide whether they represent file names or not yourself. There are only two bytes that cannot appear in a file name on Unix: 0x00 and 0x2F ( NUL and / ). [I really mean bytes . Except for HFS+, Unix file systems are completely oblivious to character encoding, although sensible people use UTF-8, of course.] Shell redirections don't appear in argv at all. There is a convention, though: treat each element of argv (except argv[0] of course) that does not begin with a dash as the name of a file to process, in the order that they appear. You do NOT have to do any unquoting operations; just pass them to fopen (or open ) as is. If the string "-" appears as an element of argv , process standard input at that point until exhausted, then continue looping over argv . And if the string "--" appears in argv , treat everything after that point as a file name, whether or not it begins with a dash. (Including subsequent appearances of "-" or "--" ). There may be a handy library module or even a language primitive to deal with this stuff for you, depending on what language you're using. For instance, in Perl, you just write for (<>) { ... do stuff with $_ ... } and you get everything I said in the "There is a convention..." paragraph for free. (But you said C, so, um, you gotta do most of it yourself. I'm not aware of an argument-processing library for plain C that's worth the space it takes on disk. :-( )
