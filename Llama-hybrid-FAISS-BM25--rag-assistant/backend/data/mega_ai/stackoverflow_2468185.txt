[site]: stackoverflow
[post_id]: 2468185
[parent_id]: 2443790
[tags]: 
Here is how we implement this funcionallity As you can see, we have many Application (Here, it behaves like your website). Moderator, WebMaster and Member, as shown in your mapping, it would be better as a Role. What happens whether you need to add a new "Role". Maybe you have to change all of your model. Each UserApplication (UserWebsite) has its start and end date. And each Application has its own Role. A Bank website needs a Manager role. A Health Insurance Company website needs a Agent role and so on... UPDATE I understand the login/user (part/whole) composition relationship. Before going on, see this answer about Composition versus Aggregation. But what I do not understand is the purpose of the UserApplication and Application classes Think of Application as your website. I work for a big Health Insurance Company where we have many modules (Each module (Application) has its own website). But some Users , not all, can use each module. It explains why i define UserApplication. role's role in this login process None. It just gives an UserApplication a role. I can use the financial module, which defines the following roles: Manager, Customer and Other, where i can play the role of Manager. But i can assign you a Temporary User (startDate and endDate) as Customer to use the financial module. Application financialModule = new Application(); financialModule.addRole(new Role("Manager")); financialModule.addRole(new Role("Customer")); financialModule.addRole(new Role("Other")); User arthur = new User(new Login("#####", "#####")); arthur.setFirstName("Arthur"); arthur.setLastName("Ronald"); arthur.setEnabled(true); UserApplication financialModuleUser = new UserApplication(new Period(new Date(), null)); financialModuleUser.setUser(arthur); financialModuleUser.addRole(financialModule.getRoleByDescription("Manager")); financialModule.addUserApplication(financialModuleUser); Your website looks like Website myWebsite = new Website(); myWebsite.addRole(new Role("Member")); myWebsite.addRole(new Role("WebMaster")); myWebsite.addRole(new Role("Moderator")); User you = new User(new Login("#####", "#####")); you.setFirstName("FirstName"); you.setLastName("LastName"); you.setEnabled(true); UserApplication myWebsiteUser = new UserApplication(new Period(new Date(), null)); myWebsiteUser.setUser(you); myWebsiteUser.addRole(myWebsite.getRoleByDescription("WebMaster")); myWebsite.addUserApplication(myWebsiteUser); As you can see, WebMaster, Moderator and Member are just roles defined by your website. Nothing else. A good resource about UML and ORM is Java Persistence with Hibernate book.
