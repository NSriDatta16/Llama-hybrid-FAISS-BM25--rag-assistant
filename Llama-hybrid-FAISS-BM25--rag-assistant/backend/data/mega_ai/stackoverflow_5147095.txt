[site]: stackoverflow
[post_id]: 5147095
[parent_id]: 5147005
[tags]: 
Quoting this aptly named article: The definitive TableAdapters + Transactions blog post . if you are working with plural operations inside one TransactionScope, i.e. “GetData” and “Update” both inside a single TransactionScope, or two Update’s within a TransactionScope, you will effectively open two SqlConnections to the single database, and thus unnecessarily promote the transaction from LTM to MSDTC. As a best practice, ALWAYS wrap only a singular operation inside a TransactionScope. Should you choose to wrap multiple operations inside a single TransactionScope, you must in that case manage connection lifetime yourself by extending the partial class definition. In other words, the following code will cause the transaction to promote – using (TransactionScope tsc = new TransactionScope()) { tableAdap.GetData() ; //Do your transactional work. tableAdap.Update() ; tsc.Complete() ; } But the following code is just fine – using (TransactionScope tsc = new TransactionScope()) { tableAdap.OpenConnection() ; tableAdap.GetData() ; //Do your transactional work. tableAdap.Update() ; tableAdap.CloseConnection() ; tsc.Complete() ; } So you only need one TransactionScope , but with some caveats. Here is the gist, but I encourage you to read through the blog post. TableAdapters aren't the most suitable data access methodology for high-integrity transactional systems. If you need more reliablity you should probably write your operation as a stored procedure, and execute it from you C# code.
