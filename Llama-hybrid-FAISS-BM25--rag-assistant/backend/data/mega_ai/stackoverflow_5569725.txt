[site]: stackoverflow
[post_id]: 5569725
[parent_id]: 5569666
[tags]: 
My guess is the book makes this point because it's trying to encourage you to choose a more descriptive name for your class. There's no "naming convention" to follow here; that's the problem you fell into in the first place. Any universal naming convention won't be able to consider the specific class and choose the best name for it. Expressivity is more important than following a naming convention. Calling a class a "Manager" or a "Processor" doesn't say very much about it and what it does to a person who is reading your code for the first time. If you really can't think of anything better, there's nothing inherently wrong with naming a class ConnectionManager . But I'd at least name it after the type of collections that it manages. Or maybe how it manages those collections. Or why it manages those collections. Also consider that following "one-size-fits-all" rules rarely helped anyone to write better code (at least, not better in the sense of "more understandable" or "more expressive). I tend to postfix the names of all my native wrapper classes with Manager . For example, I might have classes called DwmManager , or VisualStylesManager . In that very specific case, it does mean something to me. If I see a class named Manager in my code base, I know it wraps a bunch of closely-related functionality. You have to make the decision on a case-by-case basis, understanding what you're ultimately trying to accomplish. If you read Code Complete and missed the part about writing code that's clear and understandable (and therefore maintainable), you might have missed the point.
