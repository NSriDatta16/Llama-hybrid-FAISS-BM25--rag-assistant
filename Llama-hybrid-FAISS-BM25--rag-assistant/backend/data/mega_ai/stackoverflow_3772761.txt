[site]: stackoverflow
[post_id]: 3772761
[parent_id]: 3772623
[tags]: 
If you really must have an answer returned from the function synchronously, you can use a synchronous XMLHttpRequest instead of the normal asynchronous one (the ‘A’ in AJAX): function email_exists(email) { var result= null; $.ajax({ url: 'ajax/email.php', data: {email: email}, cache: false, async: false, // boo! success: function(data) { result= data; } }); return result=='1'; } However this is strongly discouraged as it will make the browser hang up whilst it is waiting for the answer, which is quite user-unfriendly. (nb: also, pass an object to data to let jQuery cope with the formatting for you. Otherwise, you would need to do 'email='+encodeURIComponent(email) explicitly.) You can't have a function that synchronously returns a value from an asynchronous action, or vice versa (you would need threads or co-routines to do that, and JavaScript has neither). Instead, embrace asynchronous programming and have the result returned to a passed-in callback: $('#email').bind('change', function() { check_email($('#email').val(), function(exists) { if (exists) $('#error_email').text('Email exists').show(); }); }); function check_email(email, callback) { $.ajax({ url: 'ajax/email.php', data: {email: email}, cache: false, success: function(data) { callback(data=='1'); } }); }
