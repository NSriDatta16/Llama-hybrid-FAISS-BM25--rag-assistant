[site]: stackoverflow
[post_id]: 3926240
[parent_id]: 3924733
[tags]: 
I think this should be self-explanatory: class Program { // map names in the XML to the names of SessionInfo properties; // you'll need to update this when you add a new property to // the SessionInfo class: private static Dictionary PropertyMap = new Dictionary { {"field1", "StringProperty1"}, {"field2", "IntProperty1"}, {"field3", "BoolProperty1"}, }; // map CLR types to XmlConvert methods; you'll need one entry in // this map for every CLR type SessionInfo uses private static Dictionary > TypeConverterMap = new Dictionary > { { typeof(bool), x => XmlConvert.ToBoolean(x)}, { typeof(int), x => XmlConvert.ToInt32(x)}, { typeof(string), x => x}, }; static void Main(string[] args) { // map SessionInfo's property names to their PropertyInfo objects Dictionary properties = AppDomain.CurrentDomain.GetAssemblies() .SelectMany(x => x.GetExportedTypes()) .Where(x => x.Name == "SessionInfo") .SelectMany(x => x.GetMembers()) .Where(x => x.MemberType == MemberTypes.Property) .Cast () .ToDictionary(x => x.Name); string xml = @" field1 stringProperty field2 123 field3 true "; XmlDocument d = new XmlDocument(); d.LoadXml(xml); SessionInfo s = new SessionInfo(); // populate the object's properties from the values in the XML foreach (XmlElement elm in d.SelectNodes("//row")) { string name = elm.SelectSingleNode("name").InnerText; string value = elm.SelectSingleNode("value").InnerText; // look up the property for the name in the XML and get its // PropertyInfo object PropertyInfo pi = properties[PropertyMap[name]]; // set the property to the value in the XML, using the the converter for // the property's type pi.SetValue(s, TypeConverterMap[pi.PropertyType](value), null); } // and the results: Console.WriteLine(s.StringProperty1); Console.WriteLine(s.IntProperty1); Console.WriteLine(s.BoolProperty1); Console.ReadKey(); }
