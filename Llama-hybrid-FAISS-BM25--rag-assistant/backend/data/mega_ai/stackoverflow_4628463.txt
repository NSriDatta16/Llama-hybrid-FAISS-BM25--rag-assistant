[site]: stackoverflow
[post_id]: 4628463
[parent_id]: 4628294
[tags]: 
I've struggled with this kind of issue myself and don't have an answer that I feel is solid, but here a tentative way of thinking. I observe two kinds of Unit tests There are tests where exercise the public Interface, these are very important if we are to refactor with confidence, they prove that we honour our contract to our clients. These tests are best served by a hand-crafted reusable mock which deals with a small subset of test data. There are "coverage" tests. These tend to be to prove that our implementation behaves correctly when dependencies misbehave. These I think need on the fly mocks to provoke particular implementation paths.
