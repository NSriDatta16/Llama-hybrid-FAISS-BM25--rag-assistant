[site]: stackoverflow
[post_id]: 3453340
[parent_id]: 3453274
[tags]: 
Here's a method that works on any enumerable but uses only O(N) temporary storage: public static class TakeLastExtension { public static IEnumerable TakeLast (this IEnumerable source, int takeCount) { if (source == null) { throw new ArgumentNullException("source"); } if (takeCount Usage: List l = new List {4, 6, 3, 6, 2, 5, 7}; List lastElements = l.TakeLast(3).ToList(); It works by using a ring buffer of size N to store the elements as it sees them, overwriting old elements with new ones. When the end of the enumerable is reached the ring buffer contains the last N elements.
