[site]: stackoverflow
[post_id]: 4445696
[parent_id]: 4340948
[tags]: 
I ran some experiments and it turns out the assumption in my question is incorrect - multiple tasks created with the TPL do not run on the same thread at the same time. ThreadLocalStorage is safe to use with TPL in .NET 4.0, since a thread can only be used by one task at a time. The assumption that tasks can share threads concurrently was based on an interview I heard about c# 5.0 on DotNetRocks (sorry, I can't remember which show it was) - so my question may (or may not) become relevant soon. My experiment starts a number of tasks, and records how many tasks ran, how long they took, and how many threads were consumed. The code is below if anyone would like to repeat it. class Program { static void Main(string[] args) { int totalThreads = 100; TaskCreationOptions taskCreationOpt = TaskCreationOptions.None; Task task = null; Stopwatch stopwatch = new Stopwatch(); stopwatch.Start(); Task[] allTasks = new Task[totalThreads]; for (int i = 0; i { DoLongRunningWork(); }, taskCreationOpt); allTasks[i] = task; } Task.WaitAll(allTasks); stopwatch.Stop(); Console.WriteLine(String.Format("Completed {0} tasks in {1} milliseconds", totalThreads, stopwatch.ElapsedMilliseconds)); Console.WriteLine(String.Format("Used {0} threads", threadIds.Count)); Console.ReadKey(); } private static List threadIds = new List (); private static object locker = new object(); private static void DoLongRunningWork() { lock (locker) { //Keep a record of the managed thread used. if (!threadIds.Contains(Thread.CurrentThread.ManagedThreadId)) threadIds.Add(Thread.CurrentThread.ManagedThreadId); } Guid g1 = Guid.NewGuid(); Trace.CorrelationManager.ActivityId = g1; Thread.Sleep(3000); Guid g2 = Trace.CorrelationManager.ActivityId; Debug.Assert(g1.Equals(g2)); } } The output (of course this will depend on the machine) was: Completed 100 tasks in 23097 milliseconds Used 23 threads Changing taskCreationOpt to TaskCreationOptions.LongRunning gave different results: Completed 100 tasks in 3458 milliseconds Used 100 threads
