[site]: stackoverflow
[post_id]: 4855398
[parent_id]: 
[tags]: 
NSMutableArray doesn't get populated on view's first appearance

I'm using the Dropbox SDK to fill an array filePaths . However the array is only filled the second time I open the corresponding view. When I open the view for the first time, the array is empty. Does anyone know why this is? Thanks in advance! // DropboxFileViewController.m #import "DropboxFileViewController.h" #import "DropboxViewController.h" #import "DropboxSDK.h" #import @interface DropboxFileViewController () @property (nonatomic, readonly) DBRestClient* restClient; @end @implementation DropboxFileViewController @synthesize dropboxFileView; @synthesize filePaths; - (void)restClient:(DBRestClient*)client loadedMetadata:(DBMetadata*)metadata { //NSArray* validExtensions = [NSArray arrayWithObjects:@"pdf", @"docx", @"doc", nil]; NSMutableArray* newDropboxFilePaths = [NSMutableArray new]; for (DBMetadata* child in metadata.contents) { //NSString* extension = [[child.path pathExtension] lowercaseString]; //if (!child.isDirectory && [validExtensions indexOfObject:extension] != NSNotFound) { [newDropboxFilePaths addObject:child.path]; //} } [filePaths release]; filePaths = newDropboxFilePaths; } /*- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil { self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) { // Custom initialization. } return self; }*/ #pragma mark - #pragma mark Initialization /* - (id)initWithStyle:(UITableViewStyle)style { // Override initWithStyle: if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad. self = [super initWithStyle:style]; if (self) { // Custom initialization. } return self; } */ #pragma mark - #pragma mark View lifecycle - (void)viewDidLoad { [super viewDidLoad]; // Uncomment the following line to display an Edit button in the navigation bar for this view controller. // self.navigationItem.rightBarButtonItem = self.editButtonItem; } - (void)viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; [self.restClient loadMetadata:@"/"]; } - (DBRestClient*)restClient { if (restClient == nil) { restClient = [[DBRestClient alloc] initWithSession:[DBSession sharedSession]]; restClient.delegate = self; } return restClient; } - (void)viewDidAppear:(BOOL)animated { [super viewDidAppear:animated]; [dropboxFileView reloadData]; } /* - (void)viewWillDisappear:(BOOL)animated { [super viewWillDisappear:animated]; } */ /* - (void)viewDidDisappear:(BOOL)animated { [super viewDidDisappear:animated]; } */ /* // Override to allow orientations other than the default portrait orientation. - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation { // Return YES for supported orientations. return (interfaceOrientation == UIInterfaceOrientationPortrait); } */ #pragma mark - #pragma mark Table view data source - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView { // Return the number of sections. return 1; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { // Return the number of rows in the section. return [filePaths count]; //NSLog(@"deze shit wordt geinvoked vriend"); } // Customize the appearance of table view cells. - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { static NSString *CellIdentifier = @"Cell"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier]; if (cell == nil) { cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease]; } // Configure the cell... //NSDictionary *dictionary = [listOfItems objectAtIndex:indexPath.section]; NSUInteger row = [indexPath row]; cell.textLabel.text = [filePaths objectAtIndex:row]; return cell; } /* // Override to support conditional editing of the table view. - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath { // Return NO if you do not want the specified item to be editable. return YES; } */ /* // Override to support editing the table view. - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath { if (editingStyle == UITableViewCellEditingStyleDelete) { // Delete the row from the data source. [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade]; } else if (editingStyle == UITableViewCellEditingStyleInsert) { // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view. } } */ /* // Override to support rearranging the table view. - (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath { } */ /* // Override to support conditional rearranging of the table view. - (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath { // Return NO if you do not want the item to be re-orderable. return YES; } */ #pragma mark - #pragma mark Table view delegate - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath { // Navigation logic may go here. Create and push another view controller. /* *detailViewController = [[ alloc] initWithNibName:@" " bundle:nil]; // ... // Pass the selected object to the new view controller. [self.navigationController pushViewController:detailViewController animated:YES]; [detailViewController release]; */ } #pragma mark - #pragma mark Memory management - (void)didReceiveMemoryWarning { // Releases the view if it doesn't have a superview. [super didReceiveMemoryWarning]; // Relinquish ownership any cached data, images, etc. that aren't in use. } - (void)viewDidUnload { // Relinquish ownership of anything that can be recreated in viewDidLoad or on demand. // For example: self.myOutlet = nil; } - (void)dealloc { [super dealloc]; } @end
