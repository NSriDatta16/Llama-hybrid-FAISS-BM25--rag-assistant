[site]: stackoverflow
[post_id]: 5676823
[parent_id]: 5676533
[tags]: 
In your previous question, you mentioned you wanted from 0 to 50 characters. If that's still the case, here's what you want: /^\S{0,50}$/ /^(?!\s).{0,50}(? As of right now, I think these are the only regexes posted that allow for less than one letter with the first pattern, and less than two letters with the second pattern. Regexes are not a "bad" thing, they're just a specialized tool that isn't suited for every task. If you're trying to validate input in ASP.NET, I would definitely use a RegularExpressionValidator for this particular pattern, because otherwise you'll have to waste your time writing a CustomValidator for a pretty meager performance boost. See my answer to this other question for a little guidance on when and when not to use regex. In this case, the reason I'd use a regex validator has less to do with the pattern itself and more to do with ASP.NET. A RegularExpressionValidator can just be dragged and dropped into your ASPX code, and all you'd have to write would be 10-21 characters of regex. With a CustomValidator, you'd have to write custom validation functions, both in the codebehind and the JavaScript. You might squeeze a little more performance out of it, but think about when validation comes into play: only once per postback. The performance difference is going to be less than a millisecond. It's simply not worth your time as a developer -- to you or your employer. Remember: Hardware is cheap, programmers are expensive , and premature optimization is the root of all evil .
