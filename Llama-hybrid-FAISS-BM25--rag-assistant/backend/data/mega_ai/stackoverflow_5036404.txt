[site]: stackoverflow
[post_id]: 5036404
[parent_id]: 5035704
[tags]: 
a non-static inner class will fulfill all your desires: public class Foo { protected String member; public Foo(String member) { this.member = member; } public class Bar { protected String member; public Bar(String member) { this.member = member; } public void show() { System.out.println("this.member: " + this.member + "; Foo.this.member: " + Foo.this.member); } } public static void main(String[] args) throws javax.mail.MessagingException, java.io.IOException { Foo foo_a = new Foo("a"); Foo foo_b = new Foo("b"); Bar bar_a1 = foo_a.new Bar("1"); Bar bar_a2 = foo_a.new Bar("2"); Bar bar_b1 = foo_b.new Bar("1"); Bar bar_b2 = foo_b.new Bar("2"); bar_a1.show(); bar_a2.show(); bar_b1.show(); bar_b2.show(); } } Well, well, well, (-2 votes later): Firstly, none of the above solutions address the part of the original question that there may not be exactly 1 file shared by all objects. One group of objects may need to share file A, and another group file B, and so forth. The inner class solution above is intended to fulfill exactly that requirement. You instantiate the outer class once per file/group, and you instantiate inner objects for a group from the same outer object. Secondly, static is a poor choice: it is quite likely that the file might need to be specified later during the run-time rather than at program startup. The outer/inner class structure above addresses exactly that issue. You instantiate the outer class whenever you need to. No static initialization is needed (nor any complicated schemes for deferred static initialization). Thirdly, thread paranoia was simply not an issue in this problem (or this solution). It is pretty clear that the file is a read-only, hence immutable, so going all concurrent on the problem will only detract from elegant solutions. Finally, speaking of elegant, this one is, and probably the only one. This update is mostly for someone new who comes and looks at the thread, since the negative voters in this thread will probably get this to -5.
