[site]: stackoverflow
[post_id]: 5745864
[parent_id]: 5745650
[tags]: 
It always depends on the ratio effort / benefit that you are willing to take. You can get an almost 100% code coverage if you are really diligent and thorough. But that might be overkill too, especially when it comes to maintaining those tests. But your idea is good. I've done this a couple of times before with medium applications. This is what you should do: Be sure that you have a well known test data set in the database at the beginning of every test in the test suite (you mentioned that yourself) Since you're using Hibernate, you might also try using HSQLDB as a substitute for Oracle. That way, your tests will run a lot faster. Create lots of independent little test cases covering most of your most valued functionality. You can always allow yourself to have some minor bugs in some remote and unimportant corners of the application. Make sure those test cases all run before the refactoring. Make sure you have a reference system that will not be touched by the refactoring, in order to be able to add new test cases, in case you think of something only later Start refactoring, and while refactoring run all relevant tests that could be broken by the current refactoring step. Run the complete test suite once a night using tools such as jenkins . That should work. If your application is a web application, then I can only recommend selenium . It has a nice jenkins integration and you can create hundreds of test cases by just clicking through your application in the browser (those clicks are recorded and a Java/Groovy/other language test script is generated).
