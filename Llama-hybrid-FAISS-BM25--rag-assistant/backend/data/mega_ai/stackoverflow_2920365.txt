[site]: stackoverflow
[post_id]: 2920365
[parent_id]: 2920275
[tags]: 
Disclaimer : I am not a GCC developer, and therefore this is a complete WAG (wild-ass guess): My guess would be that GCC always exports template definitions, in order to allow the linker to remove duplicate copies of templates. If it were not exported and more than once source file used that template, the entire source for the std::map class would be duplicated within the two files. I think you're really paying more attention to this than it deserves. Exports are an implementation detail in C++. In C, it makes sense to not export internal functions, so that clients don't come to rely on them. But in C++, the exported functions never have to have anything to do with the source code. One version of GCC's std::map might be completely different from another versions' and as a result the two binaries will not be link-compatible. If you absolutely need portability, export a C interface and ignore the C++ specifics that get exported. Any client of your library trying to call such exports or do anything with them deserves to crash and burn for calling obvious internal implementation details. EDIT: Made CW because I'm not 100% positive.
