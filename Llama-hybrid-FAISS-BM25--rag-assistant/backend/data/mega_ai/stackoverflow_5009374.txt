[site]: stackoverflow
[post_id]: 5009374
[parent_id]: 5007707
[tags]: 
Do I increment D whenever a new build is made, whether it's a QA build or an internal-test build (i.e. I'm working on some feature and I'd like to test I haven't broke anything)? Yes, change your process so that D increments with every build (successful or not) rather than with every delivery to QA. It can be quite frustrating having several builds, some working some not and not being able to tell them apart because the failed build is the same id as the good one, well eventually. Then you don't even have to consider if it was on the same day or in the same hour. Is the increment step a task in the automatic build system? I'd have the build system auto increment the build number (D) only. After incrementing, should I commit the version file? How do I avoid having a lot of noise in my version control? I don't want tons of "version incremented" commits. The version control storage is all about recording the detailed noise. I'd have the version update checked in, this can make a reasonable tag visible in SVN of what build the previous changes where included in, have the build system ignore checkins by the build system, or those identified as the version update checkin. Then to view the version history you should have an appropriate tool that allows you to filter the history to show you the view you need, in some cases excluding the version commit tags. If you choose not to commit the version number for each build, then it might be a good idea to maintain the version number in a separate file to avoid accidental updates. What do I do if the build failed? Still increment the version and commit? Still increment the version number, I wouldn't commit the version number unless it was a successful build. You can have a variety of failures outside of source change in version control that don't need to be recorded - build server out of disk, server crash, compiler got all wobbly in the knees building 32 and 64 bit, debug and release aix, linux and windows builds at the same time...
