[site]: stackoverflow
[post_id]: 2549629
[parent_id]: 2549602
[tags]: 
It's difficult for an allocator to have state, since all instances of an allocator had to be 'equivalent' to be used by the standard library (at least portably). From 20.1.5/4 "Allocator requirements": Implementations of containers described in this International Standard are permitted to assume that their Allocator template parameter meets the following two additional requirements beyond those in Table 32. All instances of a given allocator type are required to be interchangeable and always compare equal to each other It then goes on to say: Implementors are encouraged to supply libraries that can accept allocators that encapsulate more general memory models and that support non-equal instances. In such implementations, any requirements imposed on allocators by containers beyond those requirements that appear in Table 32, and the semantics of containers and algorithms when allocator instances compare non-equal, are implementation-defined. So an implementation can be written to allow non-equivalent allocator instances, but then your allocator is dependent in implementation-defined behavior. See this other SO answer for some additional details (and it looks like I need to tend to some promised updating of that answer...)
