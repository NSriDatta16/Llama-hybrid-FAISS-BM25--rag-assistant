[site]: stackoverflow
[post_id]: 1490905
[parent_id]: 1490372
[tags]: 
Maybe I look at it in a more simple way. But we have similar behavior in our applications and we just implement it using a decorator pattern. The decorator takes care of showing the loading UI (in our case it shows right away), and on return makes sure that the UI is removed again. Our invocations look a bit like this: rpc.dosomething( params, Modality.appModal( new AsyncCallback () { public void onSuccess( String pValues ) { ... handle success ... } public void onFailure( Throwable pCause) { ... handle failure .... } })); Modality.appModal returns an AsyncCallback that does the UI part and after success or failure dispatches to the AsyncCallback given as parameter in the invocation. Is it worth going further with code generators ? It is implemented once and used everywhere without further thinking. David
