[site]: stackoverflow
[post_id]: 3325850
[parent_id]: 3325761
[tags]: 
At best, the code in question has unspecified behavior. For the assignment operators, "the order of evaluation of the operands is unspeciﬁed" (C99 §6.5.16/4). If the left operand is evaluated first, the result of f(y++) will be stored in m[0] . If the right operand is evaluated first, the result will be stored in m[1] . As for whether the behavior is undefined, the relevant paragraph is: Between the previous and next sequence point an object shall have its stored value modiﬁed at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored (C99 §6.5/2). If the left side is evaluated first, then we run afoul of the second sentence because the ordering is: The value of y is read on the left side to dereference it The value of y is read on the right side to increment it There is a sequence point after the evaluation of the arguments to the function (so, the side effect of y++ is complete and y is written to) In step 1, the "prior value" of y is read but for a purpose other than "determining the value to be stored." Thus, the behavior is indeed undefined because one valid evaluation order yields undefined behavior.
