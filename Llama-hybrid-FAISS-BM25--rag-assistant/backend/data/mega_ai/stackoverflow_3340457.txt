[site]: stackoverflow
[post_id]: 3340457
[parent_id]: 3340312
[tags]: 
Your approach forward 'one central database object' and 'sub-data is also loaded' seems a direction to good design. However, as this is java in 2010 such problems as data storage and really all related stuff around are already implemented. Whats more you have specifications like JDBC, JPA and JDO and for these specs several implementations like Hibernate, Open JPA, EclipseLink... E.g. JPA and Hibernate is a perfect choice! You will need an xml config file where you define your database configurations( http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html ). You can define your persistent Java Class - DB Table mapping in that xml( http://docs.jboss.org/hibernate/core/3.3/reference/en/html/xml.html ) or also by annotations( http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/ ). You will use Hibernate Session/Entity manager to save your persistence objects state into tables. ( http://docs.jboss.org/hibernate/stable/entitymanager/reference/en/html_single/ ) For Id values: these are generated in most cases, there are several possible approach for the value generation.( http://docs.jboss.org/hibernate/core/3.3/reference/en/html/mapping.html#mapping-declaration-id ) You can stay independent from DB Tables, you can restructure, rename anytime as these can be reconfigured. For more complex changes you should check ( http://docs.jboss.org/hibernate/stable/core/reference/en/html/inheritance.html ) If you change to file storage, no problem as your Java classes are Serializable classes you can save their state anytime into a File independent of the database implementation.( http://java.sun.com/developer/technicalArticles/Programming/serialization/ ) Java World Hibernate Tutorial
