[site]: stackoverflow
[post_id]: 1963160
[parent_id]: 1963117
[tags]: 
Organizing user interface code of any significant size is a problem with surprisingly little written about it, considering that every application has the same problem. There are some techniques that can help: Refactoring - to clean up after the code gets untidy. Model View Controller pattern - to separate concerns. OO Design - use many small, cooperating classes instead of big chunks of code. "On event Do action " - idiom for separating the actions from the views. UML Component models - visualize design concepts above the class level. Dependency Inversion Principle - organize code dependencies. The basic design techniques have been around for quite some time, and are well understood, but applying the techniques on a larger scale is something that seems to be designed individually for each application. One approach that I have seen applied effectively is to separate out the Events, Listeners, Actions, etc into their own classes and either organize them into packages by type, or use a consistent naming convention across packages so that a component and its associated classes are easily identifiable (XDialog, XDialogMouseListener, XDialogCancelAction, etc). Another approach would be to look at some large open source applications (Eclipse, Firefox, ...), and see how they organize their GUI code.
