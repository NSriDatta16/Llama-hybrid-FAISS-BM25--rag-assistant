[site]: stackoverflow
[post_id]: 4924524
[parent_id]: 4924038
[tags]: 
event.getX() returns touch coordinates relative to your view (the button), event.getRawX() returns touch coordinates relative to the display, so I would think the first way is the correct one, if you set the padding of the button , instead of the layout. But you'll still have the "jump" problem because you're supposed to touch the button, not its edge, and the first move will put the edge under your finger. I would try using a GestureDetector , its OnGestureListener has an onScroll() method that gives you the scrolling distance (it does the job of remembering last position and giving a relative motion), so that you can add that value to the padding, that is, you drag 10px => you add 10px of padding. code example: private GestureDetector gd = new GestureDetector(getContext(), new SimpleOnGestureListener() { @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) { setPadding((int)(getPaddingLeft()+distanceX),0,0,0); } @Override public boolean onDown(MotionEvent e) { return true; // else no event will be handled } I would also add some checks to prevent negative or excessive paddings.
