[site]: stackoverflow
[post_id]: 5146802
[parent_id]: 5146671
[tags]: 
What you are referring to is a relatively simple recommendation engine. It would work fine for a small dataset where you are manually assigning the recommendations, where A points to B and B points to C, however its not a very scalable approach. Once you hit any more than a trivial amount of products it becomes too unwieldy to maintain (in my opinion). What you may find serves you better is to use something a little more sophisticated. Take a look at how people use something like Google's Prediction api (http://code.google.com/apis/predict/docs/samples.html#demos) to do just this very sort of prediction. In that case you wouldn't be storing the actual linkage, but rather what users liked what, and then looking at that information to build your recommendations. While the Prediction API isn't a perfect solution for all people, it will give you a pretty easy way to build out a recommendations portion of your site without having to learn machine learning techniques in depth. As for your table structure above, you wouldn't need to duplicate data if you DID do it like that. Instead what I would suggest is that you look for the element you're on in both of the columns in the recommends_table. For example, if you have the following records in "Recommendations_table" list_id_A, list_id_B 1, 2 9, 12 2, 3 You could grab everything related to "2" by using a query that unions, such as: select list_id_A from recommendations_table where list_id_B = 2 union select list_id_B from recommendations_table where list_id_A = 2 Additionally you could add some more sql to make sure you only return unique results. But in the end, how do you populate that information, as that is likely to make more of a difference than anything. If you would to go a step further and use a different technology such as a nosql data store like Cassandra, you could have a column family called recommendations, and your key would be the movie you are viewing. Then the subsequent column names would be the recommended movie ids. In that case you would have something like this for the structure: Key, columns..... Movie A, 4, 5, 67,1, 9,3 Movie B, 3, 4, 1 In that case you would pull all the column names for a particular key and that would be your recommendation list. All of this is really kind of academic without knowing how you plan to populate the data.
