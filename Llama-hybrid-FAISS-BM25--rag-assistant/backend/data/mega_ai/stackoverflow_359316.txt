[site]: stackoverflow
[post_id]: 359316
[parent_id]: 353634
[tags]: 
There are three drawbacks: The whole code will be fully uncompressed in virtual memory, while in a regular EXE or DLL, only the code actually used is loaded in memory. This is especially relevant if only a small portion of the code in your EXE/DLL is used at each run. If there are multiple instances of your DLL and EXE running, their code can't be shared across the instances, so you'll be using more memory. If your EXE/DLL is already in cache, or on a very fast storage medium, or if the CPU you're running on is slow, you will experience reduced startup speed as decompression will still have to take place, and you won't benefit from the reduced size. This is especially true for an EXE that will be invoked multiple times repeatedly. Thus the above drawbacks are more of an issue if your EXE or DLLs contains lots of resources, but otherwise, they may not be much of a factor in practice, given the relative size of executables and available memory, unless you're talking of DLLs used by lots of executables (like system DLLs). To dispell some incorrect information in other answers: UPX will not affect your ability to run on DEP-protected machines. UPX will not affect the ability of major anti-virus software, as they support UPX-compressed executables (as well as other executable compression formats). UPX has been able to use LZMA compression for some time now (7zip's compression algorithm), use the --lzma switch.
