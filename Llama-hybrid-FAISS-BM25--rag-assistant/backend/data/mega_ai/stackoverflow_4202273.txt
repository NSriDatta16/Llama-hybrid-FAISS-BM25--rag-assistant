[site]: stackoverflow
[post_id]: 4202273
[parent_id]: 4202136
[tags]: 
There's a certain sort of linked list where you can greatly simplify the appending, insertion and deletion code, at the cost of a little storage and minimal extra effort in traversing the list. That's because an empty list looks like this: +-------+ +-------+ head -> | dummy | -> | dummy | -> null null Instead of worrying about whether you're appending to (or inserting into) an empty list, or whether your deletion will create an empty list, it's a lot simpler. The initialisation becomes slightly more complex, original on the left, modified on the right as per all the code below. This usually doesn't cause a problem since list creation happens once but insertions and deletions happen a lot. def init (): def init (): head = null head = new node tail = null tail = new node head->next = tail head->prev = null tail->prev = head tail->next = null Compare the classic append (insert is even more complex since you may need to insert before head , in the middle, or after tail ) with the simplified one: def append (node): def append (node): node->next = null node->next = tail if head == null: node->prev = tail->prev head = node tail->prev = node tail = node node->prev = null else: tail->next = node node->prev = tail tail = node The deletion is also greatly simplified since, with a classic linked list, there's a lot of checking to ensure you don't dereference a null pointer: def delete (node): def delete (node): if node == head and node == tail: if node != head and node != tail: head = null node->prev->next = node->next tail = null node->next->prev = node->prev elsif node == head: free node head = head->next head->prev = null elsif node == tail: tail = tail->prev tail->next = null else: node->prev->next = node->next node->next->prev = node->prev free node The code for traversing the list needs to exclude the dummy nodes of course but that's a trivial change: def traverse (head): def traverse (head): node = head node = head->next while node != null: while node != tail: do something with node do something with node node = node->next node = node->next Myself, I'm not a big fan of code like this since it may indicate people are too lazy to understand how the data structures and algorithms work. I'd much rather have the more complex code since it shows an indication that the person can think things through. In any case, this is the sort of thing you only tend to write once.
