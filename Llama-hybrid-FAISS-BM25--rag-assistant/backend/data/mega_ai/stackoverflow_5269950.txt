[site]: stackoverflow
[post_id]: 5269950
[parent_id]: 4620250
[tags]: 
The Dispatcher is a message loop that is tied to the executing thread. It processes the items in its queue when the main thread is idle. In a unit test, that never happens. The thread is busy and then it exits when the test is completed. If you're using Visual Studio to run your tests, you can turn on code coverage highlighting and you'll see that code inside Dispatcher.Invoke() is never called (it will be displayed in red). A DispatcherFrame can be used to trigger the Dispatcher to process queued messages. Add the following helper class to your unit test project: public static class DispatcherHelper { public static void DoEvents() { DispatcherFrame frame = new DispatcherFrame(); Dispatcher.CurrentDispatcher.BeginInvoke(DispatcherPriority.Background, new DispatcherOperationCallback(ExitFrame), frame); Dispatcher.PushFrame(frame); } private static object ExitFrame(object frame) { ((DispatcherFrame)frame).Continue = false; return null; } } At the end of your test (prior to the assertions) call DispatcherHelper.DoEvents(). This will trigger the Dispatcher to process outstanding events, such as the ones that add items to the view model's observable collection. You can then inspect the view model's properties to verify that they were set correctly.
