[site]: stackoverflow
[post_id]: 5434735
[parent_id]: 5434104
[tags]: 
How does the project file get corrupted? In any source control system, you either have to obtain exclusive locks on a file, or accept the need to possibly merge files. The "corruption" may not be as bad as it seems. What is probably happening is that someone on your team is encountering a "merge conflict", where two developers have made different changes to the same line of code, and simply ignoring it. When that happens, the SVN client will place those lines side-by-side in the file with flags indicating which revision each change was made. That will definitely keep any source code or XML file from being parsed the way it was intended. To resolve merge conflicts, you must go in and manually resolve each merge conflict, by selecting which of the two versions of each line you want to use. If this isn't happening, you should be able, by simple virtue of using version control in the first place, to easily find the person(s) who aren't merging properly and educate them. Ignoring red lines in your TortoiseSVN window is a Very Bad Thing. Using version control can take some getting used to in a team environment, but it's a very necessary part of working as a team. Try implementing some of the following development policies: Split up your solution into a few more projects. Every new code file created will require a change to the project file, which can increase occurrences of PMS (Painful Merge Syndrome), especially when your application has only one or two projects. When the creation of new code files slows down as the product matures, you can consider merging the source code back into fewer assemblies. Implement "Continuous Integration", aka "Automated Builds". A CI server like TeamCity can sit around on a box in the corner and wait for team members to check in code. When that happens, it will detect the check-in, grab the latest source, and attempt to build it, optionally also running any unit/integration tests, code coverage, FxCop rule checks, etc that you want. If it fails to complete any of this, or the results are unsatisfactory, the build is "broken", and the team's job from the moment it breaks until the build succeeds again is to "fix" the build by correcting whatever problem the build server found.
