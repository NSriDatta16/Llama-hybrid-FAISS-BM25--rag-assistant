[site]: stackoverflow
[post_id]: 1569580
[parent_id]: 1522188
[tags]: 
Classes can be considered to be fancy types that do things, like validating themselves. abstract class ValidatingType { protected $val; public function __construct($val) { if(!self::isValid($val)) { // complain, perhaps by throwing exception throw new Exception("No, you can't do that!"); } $this->val = $val; } abstract static protected function isValid($val); } We extend ValidatingType to create a validating type. That obliges us to create an isValid method. class ValidatingNumber extends ValidatingType { ... static protected function isValid($val) { return is_numeric($val); } } class ValidatingPrimeNumber extends ValidatingNumber { /* * If your PHP doesn't have late-binding statics, then don't make the abstract * or overridden methods isValid() static. */ static protected function isValid($val) { return parent::isValid($val) or self::isPrime($val); // defined separately } } class ValidatingImage extends ValidatingType { ... static protected function isValid($val) { // figure it out, return boolean } } One advantage of this approach is that you can continue to create new validating types, and you don't get a ballooning Is class. There are more elegant variations on this approach. This is a simple variation. The syntax may require cleaning up.
