[site]: stackoverflow
[post_id]: 4028417
[parent_id]: 
[tags]: 
Initializing class with bad input makes it unusable but object is still existent

If I want to create a new object that needs certain informations like a product id or something like that but the input is bad how can I elegant manage such a case? class Product { function __construct($id) { if(is_invalid_id($id)) { return false; } } } If I initialize it this way I still get an object (since return inside a constructor doesn't return anything). Another way would be to use exceptions which I then can catch but that's kinda unelegant. 3rd option is to use a static function which then checks the input and then returns the object. class Product { static function init($id) { if(is_invalid_id($id)) { return false; } return new self($id); } private function __construct($id) { $this->id = $id; } } $product = Product::init($productId); The problem here is when I try to extend the class. Either I have to create a init() method for every class I extend (even if it is the exact same code) or return new self() always returns an instance of the parent class.
