[site]: stackoverflow
[post_id]: 2601654
[parent_id]: 2601526
[tags]: 
You haven't set up an IS_A relationship between the parent and child classes. You can do this with the base pragma as Ivan suggests, or you can manipulate the @ISA array. Or you can use the parent pragma. @ISA: package SubClass; our @ISA = qw( BaseClass ); parent : package SubClass; use parent qw( BaseClass ); By the way, don't use the indirect object syntax ever. To call your constructor do: my $foo = SubClass->new(); Also, it looks like you aren't using the strict and warnings pragmas. Do so. Always. Finally, if you have multiple packages in one file, it is helpful to enclose each package in a block. Check out perlboot and perltoot , they are handy OOP tutorials in the perldoc. Update: I just noticed that your method calls are broken. You need to find the invoking class or instance in each method. package BaseClass; sub new { bless {}, shift; } # horrible constructor - do not reuse. sub abstract { die "The present situation is abstract"; } sub method { my $self = shift; $self->abstract; } package SubClass; our @ISA = qw( BaseClass ); sub abstract { print "It's alive\n" ); In the script: my $obj = SubClass->new; $obj->method; my $base = BaseClass->new; $base->method; Definitely read the tutorials I linked to. They will help you.
