[site]: stackoverflow
[post_id]: 2154883
[parent_id]: 2154432
[tags]: 
LINQ to XML is one of the areas where VB.NET offers a completely different syntax than C#. You can use the same method chaining, but I prefer the VB.NET LINQ syntax that looks like this: Sub Main() Dim myXml = data img1.jpg 1 img2.jpg 2 Dim fotoElementsQuery = From f In myXml... _ Select f Dim fotoAnonymousTypeQuery = From f In myXml... _ Select f. .Value, f. .Value Dim fotoNamedTypeQuery = From f In myXml... _ Select New Foto With {.Name = f. .Value, .Order = f. .Value} End Sub Public Class Foto Private _name As String Public Property Name() As String Get Return _name End Get Set(ByVal value As String) _name = value End Set End Property Private _order As Integer Public Property Order() As Integer Get Return _order End Get Set(ByVal value As Integer) _order = value End Set End Property End Class This gives you 3 different types of IEnumerable results. fotoElementsQuery will be of type IEnumerable(Of XElement) fotoAnonymousTypeQuery will be of type IEnumerable(Of ) . The elements of the anonymous type will take on the names of the xml elements -- fotoname and fotoorder . fotoNamedTypeQuery will be of type IEnumeragle(Of Foto) The LINQ queries haven't actually executed yet in the above code. In order to get a List (and to execute the query) call either the .ToList() or .ToArray() extension method. Update: The best way to learn about the goodness that is LINQ (and LINQ to XML) in VB.NET is by watching the How Do I Video Series by Beth Massi. http://msdn.microsoft.com/en-us/vbasic/bb466226.aspx#linq
