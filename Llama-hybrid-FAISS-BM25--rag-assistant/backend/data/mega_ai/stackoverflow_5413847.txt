[site]: stackoverflow
[post_id]: 5413847
[parent_id]: 5411502
[tags]: 
(My first pass was a complicated derivation of a natural seeming formula for this. But then I realized that there is a far, far better solution. Which I would have remembered earlier if I had used Complex Analysis in the last 20 years.) The right way to do this is to apply the Cauchy Integral Formula . With this you can map any polygon to any other polygon. If the polygons don't self-intersect, it will send the boundary to the boundary and the interior to the interior. The mapping will also have the excellent property that it is conformal , meaning that angles are preserved. By that I mean that if a pair of curves intersect in your region, then they will be mapped to a pair of curves that intersect at the same angle. (Many of Escher's drawings are based on conformal mappings.) Enough hype. How do you do it? I'll explain it, assuming that you know absolutely nothing about complex analysis. I'll use some Calculus terms, but you should be able to follow my directions even if you don't know any Calculus at all. Since I am assuming so little, the explanation has to be kind of long. I'm sorry for that. Every point (x, y) in the real plane can be viewed as a complex number z = x + iy . We can add and multiply complex numbers using the usual rules of algebra and the fact that i * i = -1 . Furthermore note that 1 = (x + iy) * (x - iy)/(x 2 + y 2 ) so we can divide if we let 1/z = (x - iy)/(x 2 + y 2 ) . We therefore have all of the usual rules of arithmetic. But we can do better than that. We can do Calculus. In particular we can do path integrals around curves. An integral of a function along a curve is a kind of weighted average of that function over the points in that curve. You can read up on how to do it in general. But here is how to do it in this case. Suppose that the starting region has corners P 1 , P 2 , P 3 , P 4 . The path around the region is defined by the four line segments (P 1 , P 2 ), (P 2 , P 3 ), (P 3 , P 4 ), (P 4 , P 1 ) . I'll talk about how to handle the first line segment. The others are similar. The path integral of f(z) over (P 1 , P 2 ) is the integral from 0 to 1 of f((1-s)P 1 + sP 2 )(P 2 - P 1 ) . To evaluate that integral, the easiest thing to do is numerical integration using Simpson's Rule . To do this pick an odd number n and for the values s = 0, 1/n, 2/n, ..., (n-1)/n, 1 assign them weights in the pattern 1, 4, 2, 4, 2, ..., 2, 4, 1 . (The end points are 1, everything else alternates between 4 and 2.) Now for each point calculate f((1-s)P 1 + sP 2 )(P 2 - P 1 ) , multiply by the weight, and add them all together. Then divide by the magic value 3 * (n-1) . The result is approximately your integral. (As n grows, the error in this approximation is O(1/n 4 ) . In your case if you take n = 21 then the approximation should wind up good enough to map pixels to the right pixel, except for some pixels near the boundary. Make it a little larger, and the problematic area will get smaller. Right at the edge you'll want some multiple of the number of pixels on a side to make the error small .) OK, so we can do path integrals. What is the value of that? Well suppose we take a random point z 0 = x + iy somewhere in our region. Suppose that f(z) is defined on the path. Then the Cauchy Integral Formula says that the integral around our region (which is the sum of 4 piecewise integrals that we know how to do) of f(z)/(2 * Ï€ * i * (z - z 0 )) is a really nice function that is going to match our original function on the boundary. I won't get into all of the "really nice" things about it, but what I was saying above about conformal is part of it. Now what function f do we use? Well suppose that our region is being mapped to a region with corners Q 1 , Q 2 , Q 3 , Q 4 . We want the first path piece to map to the second path piece. So we want f((1-s)P 1 + sP 2 ) to be (1-s)Q 1 + sQ 2 . That tells us how to calculate f at all of the points we need to do our integral. Now, you ask, how do you reverse it? That's simple. Just reverse the role of the two polygons, and calculate the reverse transformation! Which brings a really good unit test. You should define a couple of weird regions, pick a point in the middle, and verify that if you map from the first to the second and back again that you wind up close to where you started. If you pass that test, then you probably have made no mistakes. And finally what about my general polygon claim that I made? Well we defined our path as four pieces we traversed linearly. A higher degree polygon just has more pieces to its path, but otherwise the calculation is done in exactly the same way.
