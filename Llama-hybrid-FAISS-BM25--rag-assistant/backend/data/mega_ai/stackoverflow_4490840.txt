[site]: stackoverflow
[post_id]: 4490840
[parent_id]: 4490688
[tags]: 
I would usually prefer what your teacher suggested, simply because it's easier to read and understand what are the conditions to stop the loop. If you have an infinite loop with a return statement it's a little bit more difficult for someone who didn't write the code to go through the code and figure out when the program will hit a return statement. Also I usually don't like early returns in general because it's easy for someone maintaining the code to introduce bugs, for example: int main() { // code added by some other programmer: importantInitialization(); while (true) { OutputMenu(); // code added by some other programmer: Something *st = new Something(); string UserChoice; cin >> UserChoice; // ... if (UserChoice == "a") runA(); else if (UserChoice == "b") runB(); else if (UserChoice == "c") runC(); else if (UserChoice == "d") runD(); else if (UserChoice == "exit") return 0; else if (UserChoice == "help") showHelp(); // code added by some other programmer: delete st; // this would not run on the last loop } // code added by some other programmer: importantCleanUp(); // this would never run } of course that in this particular case it's easy to see the problems, but when maintaining a more complicated function you can see how an early return statement might make it even more prone to lack-of-attention bugs like this.
