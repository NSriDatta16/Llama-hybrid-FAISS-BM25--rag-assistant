[site]: stackoverflow
[post_id]: 5630059
[parent_id]: 
[tags]: 
Rails 3 and Devise: authenticating a user while performing a POST action

Using Rails 3.0.6, Omniauth 0.2.0 and Devise 1.2.1, I'm encountering the following situation: I want to offer users the option to authenticate via Facebook. I have a user system set up using Devise and I can successfully auth using Facebook. I've spent several hours trying to code the behavior I want for one specific situation: user is not logged in user has a site account user authenticates via Facebook I offer the user 2 choices at this point create an account (can be a dummy account with no provided info) link this Facebook authentication with an existing account I'm having trouble with the latter option. The user has already authenticated but I still need him to log in with his site account. I have an action in my AuthenticationsController that will associate this authentication with a logged in user. Devise doesn't seem to offer a way for me to log the user in while staying in the same action, though. This was my first attempt to do this class AuthenticationsController :auth_link_existing_user ... def auth_link_existing_user ... end However, using this method, if the user logs in, they're simply redirected to my site's root page. I know I can change Devise's sign-in redirect, but that will be for all sign-ins. I wanted only this situation to have a separate redirect. After reading through this mailing list question, I tried to extend SessionsController with my own custom behavior: def create resource = warden.authenticate!(:scope => resource_name, :recall => "#{controller_path}#new") set_flash_message(:notice, :signed_in) if is_navigational_format? sign_in(resource_name, resource) if params[:redirect] #new redirect_to params[:redirect].to_sym #new else respond_with resource, :location => redirect_location(resource_name, resource) end end This doesn't work either. I've defined my auth_link_existing_user route to use a POST verb (which seems accurate) and redirects can only be GETs. So now I do have a solution in mind: copy and paste code from Devise's authenticate_user! helper into a new function which can be called within a controller action without redirecting. This seems less than ideal to me because it's duplication of code and increases coupling--a Devise or Warden update that changes this behavior will break my code as well. Has anyone else tried something like this and come up with a more elegant solution? Do you see a simpler way for me to offer this or similar behavior to my users? UPDATE: For anyone who wants to use my dirty solution at the end, this is what I did: def auth_link_existing_user # FROM Devise/sessions/create resource = warden.authenticate!(:scope => :user, :recall => "registrations#auth_new") set_flash_message(:notice, :signed_in) if is_navigational_format? sign_in(:user, resource) # method defined in Ryan Bates' Railscast for Omniauth w/Devise current_user.apply_omniauth(session[:omniauth]) current_user.save end note that this action MUST be placed in your sessions controller. If not, Warden will give you an "invalid email/password" error. It was an incredibly long debugging process to find the source. With this in place, I use a login form to submit to this action after the user has authenticated.
