[site]: stackoverflow
[post_id]: 4786530
[parent_id]: 4785622
[tags]: 
Let me ask you this: how realistic is it that you'd have an application which is constantly adding to a collection and never reading from it ? What's the use of such a collection? (This is not a purely rhetorical question. I could imagine there being uses where, e.g., you only read from the collection on shutdown (for logging) or when requested by the user. I believe these scenarios are fairly rare, though.) This is what your code is simulating. Calling List .Add is going to be lightning-fast in all but the occasional case where the list has to resize its internal array; but this is smoothed out by all the other adds that happen quite quickly. So you're not likely to see a significant amount of contention in this context, especially testing on a personal PC with, e.g., even 8 cores (as you stated you have in a comment somewhere). Maybe you might see more contention on something like a 24-core machine, where many cores can be trying to add to the list literally at the same time. Contention is much more likely to creep in where you read from your collection, esp. in foreach loops (or LINQ queries which amount to foreach loops under the hood) which require locking the entire operation so that you aren't modifying your collection while iterating over it. If you can realistically reproduce this scenario, I believe you will see ConcurrentBag scale much better than your current test is showing. Update : Here is a program I wrote to compare these collections in the scenario I described above (multiple writers, many readers). Running 25 trials with a collection size of 10000 and 8 reader threads, I got the following results: Took 529.0095 ms to add 10000 elements to a List with 8 reader threads. Took 39.5237 ms to add 10000 elements to a ConcurrentBag with 8 reader threads. Took 309.4475 ms to add 10000 elements to a List with 8 reader threads. Took 81.1967 ms to add 10000 elements to a ConcurrentBag with 8 reader threads. Took 228.7669 ms to add 10000 elements to a List with 8 reader threads. Took 164.8376 ms to add 10000 elements to a ConcurrentBag with 8 reader threads. [ ... ] Average list time: 176.072456 ms. Average bag time: 59.603656 ms. So clearly it depends on exactly what you're doing with these collections.
