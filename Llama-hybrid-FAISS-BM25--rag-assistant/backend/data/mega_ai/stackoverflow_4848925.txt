[site]: stackoverflow
[post_id]: 4848925
[parent_id]: 4848768
[tags]: 
It is natural to suggest nesting, but a waste of time unless you need something that can do sparse arrays. A better solution is to create an NSMutableArray and fill it with NSNulls or an NSPointerArray, which allows for nulls via the setCount: method. Then, if you need, say, to be able to handle objects at coordinates (0..3,0..3,0..3), that is 4*4*4 (or 64) slots. From there, turning an (x,y,z) coord into a slot in the array is just a matter of multiplication; (1,2,3) is the object at index (1 + (2 * width) + (3 * width * height)). That simple bit of math avoids a bunch of extra allocations (and the potential that your extra allocations fragment memory). While I'm all for not prematurely optimizing, the math is straightforward whereas the allocation dance is not -- this'll be easier to implement in the first place.
