[site]: stackoverflow
[post_id]: 954867
[parent_id]: 954198
[tags]: 
I wrote a series of extension methods to make it easier to manipulate ADO.NET objects and methods : Create a DbCommand from a DbConnection in one instruction : public static DbCommand CreateCommand(this DbConnection connection, string commandText) { DbCommand command = connection.CreateCommand(); command.CommandText = commandText; return command; } Add a parameter to a DbCommand : public static DbParameter AddParameter(this DbCommand command, string name, DbType dbType) { DbParameter p = AddParameter(command, name, dbType, 0, ParameterDirection.Input); return p; } public static DbParameter AddParameter(this DbCommand command, string name, DbType dbType, object value) { DbParameter p = AddParameter(command, name, dbType, 0, ParameterDirection.Input); p.Value = value; return p; } public static DbParameter AddParameter(this DbCommand command, string name, DbType dbType, int size) { return AddParameter(command, name, dbType, size, ParameterDirection.Input); } public static DbParameter AddParameter(this DbCommand command, string name, DbType dbType, int size, ParameterDirection direction) { DbParameter parameter = command.CreateParameter(); parameter.ParameterName = name; parameter.DbType = dbType; parameter.Direction = direction; parameter.Size = size; command.Parameters.Add(parameter); return parameter; } Access DbDataReader fields by name rather than index : public static DateTime GetDateTime(this DbDataReader reader, string name) { int i = reader.GetOrdinal(name); return reader.GetDateTime(i); } public static decimal GetDecimal(this DbDataReader reader, string name) { int i = reader.GetOrdinal(name); return reader.GetDecimal(i); } public static double GetDouble(this DbDataReader reader, string name) { int i = reader.GetOrdinal(name); return reader.GetDouble(i); } public static string GetString(this DbDataReader reader, string name) { int i = reader.GetOrdinal(name); return reader.GetString(i); } ... Another (unrelated) extension method allows me to perform the DragMove operation (like in WPF) on WinForms forms and controls, see here .
