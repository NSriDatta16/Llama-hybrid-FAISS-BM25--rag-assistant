[site]: stackoverflow
[post_id]: 4669716
[parent_id]: 4669557
[tags]: 
I think your question points to the reason you are finding this difficult. You are trying to solve too much in one place and that becomes overwhelming. You don't want to create a single method to do that. You will want to create several. Start by decomposing the problem into it's constituent parts. Note: I'm not approaching this in an OO fashion to make the answer a bit easier to parse. I would encourage you to think about the design in more detail. Requirement 1: Rolls a type of Die - 4 , 6 , 8 , 10 , or 12 sided Ok - so we need some method similar to: int Roll(int sides); Basically Roll just returns a random value between 1 and sides (inclusive). Requirement 2: Can roll up to ten of this type of Die This would likely be a for loop. Requirement 3: If more than half of the die are 1's, print them a message that they bust and end the program This requirement implies that you are storing the results of each call to Roll in a collection - e.g., a List or an int[] (array of integers). Next it says that you are iterating over that collection and counting the number of rolls that are "1". If count is greater than half the total number of rolls than you end the program. Counting is easy (for loop or foreach would probably be your best bet) and you know how many rolls were made (both by the number of items in the collection and because you had a counter on your for loop when the rolls were made ... so divide and compare. Requirement 4: If any of the die are equal to the type of die rolled, take the highest value from the group. As well as re-roll the die that equaled the value of the type of die rolled. Again - you need to iterate over the result set and perform the operation request. I would not attempt to "optimize" your solution by combining this rule with the previous rule - it will just convolute the solution for no real benefit.
