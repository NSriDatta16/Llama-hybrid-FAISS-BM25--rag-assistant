[site]: stackoverflow
[post_id]: 2604688
[parent_id]: 2523439
[tags]: 
If you pass the vertex normal through to the fragment shader in a "varying" then you will get an interpolated fragment normal. EDIT: You will have to calculate the normals in your application, and pass them into your shader as an attribute for each vertex of your triangle. The usual way to calculate the normal for a triangle is with a cross product. Call the three points making up the triangle P1, P2, and P3. Calculate V1, the vector from P1 to P2. Calculate V2, the vector from P1 to P3. Calculate the cross product of V1 and V2. This will give you the normal to the plane of the triangle. V2 should be "to the left of" V1, or your normal will point "in" instead of "out". See the Wikipedia article on cross products for details. FURTHER EDIT: Right, I understand your problem now. Yes, it's true that with shared vertices you can't really have more than one normal per vertex. The only other thing that I can think of is that maybe a geometry shader could help, because it gets passed all three vertices for a triangle. I don't have any experience with them though.
