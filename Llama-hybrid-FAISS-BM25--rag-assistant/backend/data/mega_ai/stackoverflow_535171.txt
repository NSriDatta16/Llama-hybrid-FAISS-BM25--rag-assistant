[site]: stackoverflow
[post_id]: 535171
[parent_id]: 521640
[tags]: 
I would argue that it doesn't make sense to talk about "an Order that contains only the OrderItems that are not in stock". An "Order" (I presume) represents the complete list of whatever the client ordered; if you're filtering that list you're no longer dealing with an Order per se, you're dealing with a filtered list of OrderItems. I think the question becomes whether you really want to treat Orders as an Aggregate Root , or whether you want to be able to pull arbitrary lists of OrderItems out of your data access layer as well. You've said filtering items after they've come back from the database would be too expensive, but unless you're averaging hundreds or thousands of OrderItems for each order (or there's something else especially intensive about dealing with lots of OrderItems) you may be trying to optimize prematurely and making things more difficult than they need to be. I think if you can leave Order as the aggregate root and filter in your domain logic, your model will be cleaner to work with. If that's genuinely not the case and you need to filter in the database, then you may want to consider having a separate OrderItem repository that would provide queries like "give me all of the OrderItems for this Order that are not in stock". You would then return those as an IList (or IEnumerable ), since they're not a full Order, but rather some filtered collection of OrderItems.
