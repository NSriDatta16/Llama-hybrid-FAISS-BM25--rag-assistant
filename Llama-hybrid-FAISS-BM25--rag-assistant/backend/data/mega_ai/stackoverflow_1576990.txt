[site]: stackoverflow
[post_id]: 1576990
[parent_id]: 1576526
[tags]: 
In our organization we have a continuous integration server (Cruise Control) running the build including Selenium RC tests. The CI server is run as a Windows service (on MS Windows 2003 Server) and Selenium tests are just part of the test suite. That is quite a straightforward setup and frankly I see no reasons for giving up with it. Currently in our setup the Selenium server (and client) is started directly from the tests (however we used to have Selenium as a separate service). In Java code (actually in the super class of all web tests) we do something like: // to start the server RemoteControlConfiguration config = new RemoteControlConfiguration(); config.set(...) // set the serverHost and port ... SeleniumServer server = new SeleniumServer(config); server.start(); // and then to start the client Selenium selenium = new DefaultSelenium(serverHost, port, "*firefox", "http://www.google.com"); selenium.start(); selenium.open("http://www.google.com"); // now the browser should be visible for you (if you run it locally, not as a service) So I would suggest you trying the following (whatever language you are using): Try to run the Selenium server and client from just a standalone application. The browser should show up as a window. Adjust the settings to your needs (browser type, etc.). Try to incorporate the code within your test framework (xUnit or whatever). Run them manually. The result should be the same. Then you can try to have the tests run from the continuous-integration. Run the CI server as a service and let it build your project. The browser wouldn't be visible, but that's not required for the tests to be run, isn't it? NOTE: if you wanted to peep what Selenium is doing, I believe it would be easier on UNIX machine. You could point the tests to use the X-server DISPLAY of your choice - a fake one or a true one connected to some monitor.
