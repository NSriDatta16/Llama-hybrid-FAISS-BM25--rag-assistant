[site]: stackoverflow
[post_id]: 1233486
[parent_id]: 
[tags]: 
How could I refactor this factory-type method and database call to be testable?

I'm trying to learn how to do Unit Testing and Mocking. I understand some of the principles of TDD and basic testing. However, I'm looking at refactoring the below code that was written without tests and am trying to understand how it needs to change in order to make it testable. public class AgentRepository { public Agent Select(int agentId) { Agent tmp = null; using (IDataReader agentInformation = GetAgentFromDatabase(agentId)) { if (agentInformation.Read()) { tmp = new Agent(); tmp.AgentId = int.Parse(agentInformation["AgentId"].ToString()); tmp.FirstName = agentInformation["FirstName"].ToString(); tmp.LastName = agentInformation["LastName"].ToString(); tmp.Address1 = agentInformation["Address1"].ToString(); tmp.Address2 = agentInformation["Address2"].ToString(); tmp.City = agentInformation["City"].ToString(); tmp.State = agentInformation["State"].ToString(); tmp.PostalCode = agentInformation["PostalCode"].ToString(); tmp.PhoneNumber = agentInformation["PhoneNumber"].ToString(); } } return tmp; } private IDataReader GetAgentFromDatabase(int agentId) { SqlCommand cmd = new SqlCommand("SelectAgentById"); cmd.CommandType = CommandType.StoredProcedure; SqlDatabase sqlDb = new SqlDatabase("MyConnectionString"); sqlDb.AddInParameter(cmd, "AgentId", DbType.Int32, agentId); return sqlDb.ExecuteReader(cmd); } } These two methods are in a single class. The database-related code in the GetAgentFromDatabase is related to Enterprise Libraries. How would I be able to go about making this testable? Should I abstract out the GetAgentFromDatabase method into a different class? Should GetAgentFromDatabase return something other than an IDataReader? Any suggestions or pointers to external links would be greatly appreciated.
