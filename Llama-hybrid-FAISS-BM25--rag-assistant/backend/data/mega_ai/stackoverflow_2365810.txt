[site]: stackoverflow
[post_id]: 2365810
[parent_id]: 2365413
[tags]: 
[shrug] A solution should be evaluated by the requirements. If all requirements are satisfied, then everything else is moxy. If all requirements are met, and you are personally dissatisfied with the solution, then perhaps the requirements need re-evaluation. That's about as far as you can take this meta-physical question, because we start getting into things like project management and business :S Ahem, regarding your Euler-Project question, just my two-pence: Consider refactoring to iterative, as opposed to recursive Notice every third term in the series is even? No need to modulo once you are given your starting term For example public const ulong TermLimit = 4000000; public static ulong CalculateSumOfEvenTermsTo (ulong termLimit) { // sum! ulong sum = 0; // initial conditions ulong prevTerm = 1; ulong currTerm = 1; ulong swapTerm = 0; // unroll first even term, [odd + odd = even] swapTerm = currTerm + prevTerm; prevTerm = currTerm; currTerm = swapTerm; // begin iterative sum, for (; currTerm So, perhaps more lines of code, but [practically] guaranteed to be faster. An iterative approach is not as "elegant", but saves recursive method calls and saves stack space. Second, unrolling term generation [that is, explicitly expanding a loop] reduces the number of times you would have had to perform modulus operation and test "is even" conditional. Expanding also reduces the number of times your end conditional [if current term is less than limit] is evaluated. Is it "better", no, it's just "another" solution. Apologies for the C#, not familiar with php, but I am sure you could translate it fairly well. Hope this helps, :) Cheers
