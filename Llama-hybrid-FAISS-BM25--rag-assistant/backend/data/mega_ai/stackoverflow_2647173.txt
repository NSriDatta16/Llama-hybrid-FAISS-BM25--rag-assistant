[site]: stackoverflow
[post_id]: 2647173
[parent_id]: 2647158
[tags]: 
An application should hash its passwords using key derivation function like bcrypt or pbkdf2. Here is more information on secure password storage . ... but sometimes you still need cryptogrpahic functions in a database. You can use pgcrypto to get access to sha256 which is a member of the sha2 family. Keep in mind sha0,sha1 md4, and md5 are very broken and should never be used for password hashes. The following is an alright method of hashing passwords: digest("salt"||"password"||primary_key, "sha256") The salt should be a large randomly generated value. This salt should be protected, because the hashes cannot be broken until the salt is recovered. If you are storing the salt in the database then it can be obtained along with the password hash using sql injection. Concatenating the primary key is used to prevent 2 people from having the same password hash even if they have the same password. Of course this system could be improved, but this is much better than most systems I have seen. Generally it is best to do hashing in your application before it hits the database. This is because querys can show up in logs, and if the database server was owned then they could enable logging to get clear text passwords.
