[site]: stackoverflow
[post_id]: 1841931
[parent_id]: 
[tags]: 
How to properly query a ManyToManyField for all the objects in a list (or another ManyToManyField)?

I'm rather stumped about the best way to build a Django query that checks if all the elements of a ManyToMany field (or a list) are present in another ManyToMany field. As an example, I have several Person s, who can have more than one Specialty. There are also Job s that people can start, but they require one or more Specialty s to be eligible to be started. class Person(models.Model): name = models.CharField() specialties = models.ManyToManyField('Specialty') class Specialty(models.Model): name = models.CharField() class Job(models.Model): required_specialties = models.ManyToManyField('Specialty') A person can start a job only if they have all the specialties that the job requires. So, again for the sake of example, we have three specialties: Coding Singing Dancing And I have a Job that requires the Singing and Dancing specialties. A person with Singing and Dancing specialties can start it, but another with Coding and Singing specialties cannot -- as the Job requires a Person who can both sing and dance. So, now I need a way to find all jobs that a person can take on. This was my way to tackle it, but I'm sure there's a more elegant approach: def jobs_that_person_can_start(person): # we start with all jobs jobs = Job.objects.all() # find all specialties that this person does not have specialties_not_in_person = Specialty.objects.exclude(name__in=[s.name for s in person.specialties]) # and exclude jobs that require them for s in specialties_not_in_person: jobs = jobs.exclude(specialty=s) # the ones left should fill the criteria return jobs.distinct() This is because using Job.objects.filter(specialty__in=person.specialties.all()) will return jobs that match any of the person's specialties, not all of them. Using this query, the job that requires Singing and Dancing would appear for the singing coder, which is not the desired output. I'm hoping this example is not too convoluted. The reason I'm concerned about this is that the Specialties in the system will probably be a lot more, and looping over them doesn't seem like the best way to achieve this. I'm wondering if anyone could lend a scratch to this itch!
