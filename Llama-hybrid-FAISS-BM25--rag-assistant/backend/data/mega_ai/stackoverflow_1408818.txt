[site]: stackoverflow
[post_id]: 1408818
[parent_id]: 
[tags]: 
Getting the keyword arguments actually passed to a Python method

I'm dreaming of a Python method with explicit keyword args: def func(a=None, b=None, c=None): for arg, val in magic_arg_dict.items(): # Where do I get the magic? print '%s: %s' % (arg, val) I want to get a dictionary of only those arguments the caller actually passed into the method, just like **kwargs , but I don't want the caller to be able to pass any old random args, unlike **kwargs . >>> func(b=2) b: 2 >>> func(a=3, c=5) a: 3 c: 5 So: is there such an incantation? In my case, I happen to be able to compare each argument against its default to find the ones that are different, but this is kind of inelegant and gets tedious when you have nine arguments. For bonus points, provide an incantation that can tell me even when the caller passes in a keyword argument assigned its default value: >>> func(a=None) a: None Tricksy! Edit: The (lexical) function signature has to remain intact. It's part of a public API, and the primary worth of the explicit keyword args lies in their documentary value. Just to make things interesting. :)
