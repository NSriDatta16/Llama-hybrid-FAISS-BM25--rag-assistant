[site]: stackoverflow
[post_id]: 758340
[parent_id]: 
[tags]: 
How do I design a sub class with features not available in the base class?

For example suppose I have a class Vehicle and I wish for a subclass ConvertibleVehicle which has extra methods such as foldRoof(), turboMode(), foldFrontSeats() etc. I wish to instantiate as follows Vehicle convertible = new ConvertibleVehicle() so I still have access to common method such as openDoor(), startEngine() etc. How do I designed such a solution? To clarify my two initial solutions, neither of which I am happy with are: Have dummy methods foldRoof(), turboMode(), foldFrontSeats() which I override in ConvertibleVehicle only, leaving them to do nothing in other subclasses Have abstract methods foldRoof(), turboMode(), foldFrontSeats() and force each subclass to provide an implementation even if it will be blank in all instances other than ConvertibleVehicle The above seem slightly convoluted since they both pollute the base class as I add an increasing number of subclasses each with their own unique functions After reading some of the responses perhaps there is some type of fundamental flaw in my design. Suppose I have a class VehicleFleet which takes vehicles and instructs them to drive as follows: public VehicleFleet(Vehicle[] myVehicles) { for (int i=0; i Suppose this works for dozens of subclasses of Vehicle but for ConvertibleVehicle I also want to fold the roof before driving. To do so I subclass VehicleFleet as follows: public ConvertibleVehicleFleet(Vehicle[] myVehicles) { for (int i=0; i This leaves me with a messy function foldRoof() stuck in the base class where it doesn't really belong which is overridden only in the case of ConvertibleVehicle and does nothing in all the other cases. The solution works but seems very inelegant. Does this problem lend itself to a better architecture? I'm using Java although I would hope that a general solution could be found that will work in any object oriented language and that I will not need to rely upon language specific quirks
