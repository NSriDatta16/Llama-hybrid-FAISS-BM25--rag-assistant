[site]: stackoverflow
[post_id]: 5150339
[parent_id]: 
[tags]: 
WSGI: Use AJAX to get a string from a python script

I am delving into WSGI & it is pretty difficult. What I am trying to do is something pretty simple: when I click a link I want to get the string "hello" from a python script & display "hello" in my HTML paragraph element. Now I have made WSGI python scripts that display HTML text, ie, serve a page using WSGI python, but not used Python, AJAX & WSGI together for the above mentioned purpose. Right now what happens is when I click the link in my HTML page, the paragraph element displays "error" not "hello". Where do you think I am going wrong; in python or javascript? Is my python script below correct?: #!/usr/bin/env python from wsgiref.simple_server import make_server from cgi import parse_qs, escape def application(environ, start_response): return [ "hello" ] if __name__ == '__main__': from wsgiref.simple_server import make_server srv = make_server('localhost', 8000, application) srv.serve_forever() Maybe its my Javascript &/or HTML where I am wrong?: abcdef Click it Steps I take to test it: - Run wsgi fake server script - open browser & type http://localhost:8000/test.html - click link in html page & get "error" back My files wsgi.py, aaa.py & test.html are all in the same folder. My Server: import threading import webbrowser import os from wsgiref.simple_server import make_server FILE = 'index.html' PORT = 8000 def test_app(environ, start_response): if environ['REQUEST_METHOD'] == 'POST': try: request_body_size = int(environ['CONTENT_LENGTH']) request_body = environ['wsgi.input'].read(request_body_size) except (TypeError, ValueError): request_body = "0" try: response_body = str(int(request_body) ** 2) except: response_body = "error" status = '200 OK' headers = [('Content-type', 'text/plain')] start_response(status, headers) return [response_body] else: f = environ['PATH_INFO'].split( "?" )[0] f = f[1:len(f)] response_body = open(f).read() status = '200 OK' headers = [('Content-type', 'text/html'), ('Content-Length', str(len(response_body)))] start_response(status, headers) return [response_body] def open_browser(): """Start a browser after waiting for half a second.""" def _open_browser(): webbrowser.open('http://localhost:%s/%s' % (PORT, FILE)) thread = threading.Timer(0.5, _open_browser) thread.start() def start_server(): """Start the server.""" httpd = make_server("", PORT, test_app) httpd.serve_forever() if __name__ == "__main__": open_browser() print "Now serving on Port 8000" start_server()
