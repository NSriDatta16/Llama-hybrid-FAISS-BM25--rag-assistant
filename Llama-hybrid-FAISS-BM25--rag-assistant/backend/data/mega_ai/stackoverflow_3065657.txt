[site]: stackoverflow
[post_id]: 3065657
[parent_id]: 3065602
[tags]: 
Try this: $('#friends-panel').delegate( 'a.buddy', 'click', function() { alert("Loaded"); // ...your code }); ...instead of $('#friends-panel a.buddy').click(function() {... http://api.jquery.com/delegate/ When you call .click(function...) , you are actually calling .bind('click', function...) . If it is set up to run after the DOM loads, it assigns the click handler to existing elements. Elements added dynamically after the DOM is loaded don't benefit from this. Using .delegate() places the click handler on the #friends-panel , and listens for clicks that take place in side of it. When one occurs, it checks to see if it was agains the a.buddy , and if so, fires the handler. Another option would be to simply bind the click() in your success callback before (or after) you append to #friends-panel . To bind the click handler in your success callback, first move the function into a variable: var myfunc = function() { alert("Loaded"); // close #friends-panel $('.subpanel').hide(); $('#friends-panel a.chat').removeClass('active'); // ...and so on } ...then in place of your current click , do this instead: $('#friends-panel a.buddy').click( myfunc ); ...then in your success callback, do this: success: function(data) { if (numOfUsers != data.numOfUsers) { numOfUsers = data.numOfUsers; var list = " Agents "; for (var i = 0; i "+ data.friendlist[i] +" "; } // new version $(list).click( myfunc ).appendTo('#friend-list ul'); // old version // off-topic, no need to create jQuery object-----v // $('#friend-list ul').append($(list)); } setTimeout('getBuddyList(userNameID)', 1000); } EDIT: To assign a function that requires parameter to a click handler, one way is to place the function call inside the callback function. So instead of this: $('#friends-panel a.buddy').click( buddyClick ); you'll do this: // Set up a handler that calls your function------v $('#friends-panel a.buddy').click( function() { buddyClick(parameters) } ); The other method, is to have your buddyClick return a function that uses the parameters passed in, like: // Calling buddyClick actually returns a function // that can use the parameters you passed in var buddyClick = function(parameters) { return function() { alert("Loaded"); // do something with the parameters // ...and so on }; }; // Calling buddyClick returns the function $('#friends-panel a.buddy').click( buddyClick('some_parameter') ); This way, you can call buddyClick , and it will return the function that accepts parameters to be used for the hander. A little more confusing perhaps, but a valid approach. Take your pick. :o)
