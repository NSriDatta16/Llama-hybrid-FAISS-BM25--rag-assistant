[site]: stackoverflow
[post_id]: 2135463
[parent_id]: 2135328
[tags]: 
This is a bit snotty: but Richter in CLR Via C# (page 432) suggests that maybe it's because Exception class hierarchy wasn't implemented very well in .NET: Microsoft's original idea was that System.Exception would be the base type for all exceptions and that two other types, System.SystemException and System.ApplicationException would be the only two types immediately derived from Exception . Furthermore, exceptions thrown by the CLR would be derived from SystemException , and all the application-thrown exceptions would be derived from ApplicationException . This way, developers could write a catch block that catches all application-thrown exceptions. However, ... this rule was not followed very well; some exceptions are immediate derived from Exception ( IsolatedStorageException ), some CLR thrown exceptions are derived form ApplicationException ...So it is all a big mess, and the result is that the SystemException and ApplicationException types have no special meaning at all. At this point, Microsoft would like to remove them from the exception class hierarchy, but they can't because it would break any code that already references these types. This isn't exactly an answer to your query, but I think it is relevant because I think it indicates that there isn't really a good reason why some exception derivatives inherit the way they do. Unfortunately, the Exception class inheritance wasn't all that well thought out & it's sort of a mess.
