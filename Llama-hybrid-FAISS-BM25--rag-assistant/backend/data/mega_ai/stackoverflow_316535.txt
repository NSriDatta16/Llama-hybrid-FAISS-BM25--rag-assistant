[site]: stackoverflow
[post_id]: 316535
[parent_id]: 316265
[tags]: 
The three most influential factors for Eclipse speed are: Using the latest version of Eclipse (2020-06 as on 26 June 2020) Note that David Bala≈æic 's comment (July 2014) contradicts that criteria which was working six years ago: The "same" workspace in Indigo (3.7.2) SR2 loads in 4 seconds, in Kepler SR2 (4.3.2) in 7 seconds and in Luna (4.4.0) in 10 seconds. All are Java EE bundles. Newer versions have more bundled plugins, but still the trend is obvious. (by "same" workspace I mean: same (additionally installed) plugins used, same projects checked out from version control). Launching it with the latest JDK (Java 14 at the time of writing, which does not prevent you to compile in your Eclipse project with any other JDK you want: 1.4.2, 1.5, 1.6 older...) -vm jdk1.6.0_10\jre\bin\client\jvm.dll Configuring the eclipse.ini (see this question for a complete eclipse.ini ) -Xms512m -Xmx4096m [...] The Xmx argument is the amount of memory Eclipse will get (in simple terms). With -Xmx4g , it gets 4 GiB of RAM, etc. Note: Referring to the jvm.dll has advantages: Splash screen coming up sooner. Eclipse.exe in the process list instead of java.exe. Firewalls: Eclipse wants access to the Internet instead of Java. Window management branding issues, especially on Windows and Mac. Dec. 2020, Udo confirms in the comments From version 4.8 (Photon) an up there was a steady speed gain after each version. The main platform was optimized every release to load faster, enable more features for the dark theme and to add more features for newer Java versions of the Java development tools. Especially with-in the last 3 versions, the startup time was increased considerably. There should be a significant increase in start-up time with the newest version of Eclipse 2020-12. In my experience it started a lot faster with each new version. But: There are still plugins which do not follow the new way of using the Eclipse API and are therefore still slow to start. Since the change to Java 11 as the minimum runtime version starting from Eclipse version 2020-09, at least the core system uses the newer features of the JVM. It is up to the providers of the other plugins to upgrade to newer APIs and to use the full power of modern CPUs (e.g. concurrent programming model). See also Giving Eclipse the right number of threads and the appropriate amount of memory: Problem: Eclipse and the Eclipse indexer take up all my resources / CPU % 2024: As noted by dan1st might be happy again in the comments : With newer Java versions, it's also possible to use CDS which can improve startup. This can be done by adding -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=classes.jsa (or similar) to the JVM arguments. True: CDS, or Class Data Sharing , is a feature in the Java Virtual Machine (JVM) aimed at reducing the startup time of Java applications and the amount of memory they consume. It achieves this by allowing a set of classes to be pre-loaded and shared among multiple Java Virtual Machine (JVM) instances running on the same machine. The concept behind CDS is to create a shared archive of classes that can be mapped into memory at runtime, thereby speeding up the class loading process. CDS was introduced in Java 5 (J2SE 5.0) in a basic form and has been gradually improved in subsequent Java releases. The feature Dan mentions, -XX:+AutoCreateSharedArchive , and the use of a specified shared archive file via -XX:SharedArchiveFile= , were significantly enhanced and made more accessible in Java 10 and later versions. Starting with Java 12, the ability to automatically create a shared archive on the first application run (with -XX:+AutoCreateSharedArchive ) simplifies the process, making it more beneficial for applications without needing manual intervention to create the shared class data archive. In the context of speeding up Eclipse or similar Java-based applications, CDS will help with faster startup time, reduced memory footprint and improved performance. Your eclipse.ini file would be (with Java 19 or later): -vmargs -XX:+UseG1GC -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile= /classes.jsa -Xmx4096m Replace with an appropriate path where you want the shared archive to be stored. The JVM will automatically create this archive on the first run and then use it to speed up subsequent startups. Furthermore, in case Lombok is installed in Eclipse, it is necessary to allow the use of CDS with agents by adding the diagnostic VM option -XX:+AllowArchivingWithJavaAgent . In this case, the eclipse.ini would contain something like: -vmargs -XX:+UseG1GC -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile= /classes.jsa -XX:+UnlockDiagnosticVMOptions -XX:+AllowArchivingWithJavaAgent -javaagent:/path/to/the/lombok.jar -Xmx4096m
