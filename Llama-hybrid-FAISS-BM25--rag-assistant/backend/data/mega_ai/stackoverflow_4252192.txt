[site]: stackoverflow
[post_id]: 4252192
[parent_id]: 4251580
[tags]: 
Here is my solution. It tracks the mouseX and mouseY on click and compares it to last position. Finds out which direction the mouse is mainly moving then moves the object there. You may want to add some extra logic to lock the object to the nearest 10th unit or whatever unit size you want to form a snap grid for use in games or organized placement of the object. Update: I went ahead and added a snapNearest function to help control the movement. import flash.events.MouseEvent; import flash.events.Event; dragObj.addEventListener(MouseEvent.MOUSE_DOWN, dragIt); var curX:Number = 0; var curY:Number = 0; var oldX:Number = 0; var oldY:Number = 0; var gridUnit:Number = 25; function dragIt(e:MouseEvent):void { // set x,y on down oldX = mouseX; oldY = mouseY; // add mouse up listener so you know when it is released stage.addEventListener(MouseEvent.MOUSE_UP, dropIt); stage.addEventListener(Event.ENTER_FRAME, moveIt); trace("Start Drag") } function moveIt(e:Event):void { // figure out what the main drag direction is and move the object. curX = mouseX; curY = mouseY; // figure out which is the larger number and subtract the smaller to get diff var xDiff:Number = curX > oldX ? curX - oldX : oldX - curX; var yDiff:Number = curY > oldY ? curY - oldY : oldY - curY; if(xDiff > yDiff) { dragObj.x = snapNearest(mouseX, gridUnit); }else{ dragObj.y = snapNearest(mouseY, gridUnit); } oldX = mouseX; oldY = mouseY; } function dropIt(e:MouseEvent):void { //remove mouse up event stage.removeEventListener(MouseEvent.MOUSE_UP, dropIt); stage.removeEventListener(Event.ENTER_FRAME, moveIt); trace("Stop Drag") } // snap to grid function snapNearest(n:Number, units:Number):Number { var num:Number = n/units ; num = Math.round(num); num *= units; return num; }
