[site]: stackoverflow
[post_id]: 2825896
[parent_id]: 2824428
[tags]: 
If you were using SQL Server uou could do this using a linked-list representation and CTEs. I don't know whether mysql supports CTEs though... SET NOCOUNT ON GO DROP TABLE [Item] GO CREATE TABLE [Item] ( [ItemId] int NOT NULL PRIMARY KEY, [Name] varchar(100) NOT NULL, [PreviousId] int NULL ) GO INSERT [Item] VALUES (6, 'apples', 3) INSERT [Item] VALUES (3, 'orange', 36) INSERT [Item] VALUES (9, 'mango', 100) INSERT [Item] VALUES (100, 'salad', NULL) INSERT [Item] VALUES (36, 'banana', 9) GO ;WITH [LinkedItem] AS ( SELECT [Item].*, 1 AS [OrderValue] FROM [Item] WHERE [Item].[PreviousId] IS NULL UNION ALL SELECT [Item].*, [LinkedItem].[OrderValue] + 1 FROM [Item] INNER JOIN [LinkedItem] ON [LinkedItem].[ItemId] = [Item].[PreviousId] ) SELECT * FROM [LinkedItem] ORDER BY [LinkedItem].[OrderValue] -- Drag orange up two spaces DECLARE @MovingItemId int DECLARE @NewPreviousId int SET @MovingItemId = 3 SET @NewPreviousId = 100 DECLARE @OldPreviousId int SELECT @OldPreviousId = [PreviousId] FROM [Item] WHERE [ItemId] = @MovingItemId UPDATE [Item] SET [PreviousId] = @OldPreviousId WHERE [PreviousId] = @MovingItemId UPDATE [Item] SET [PreviousId] = @MovingItemId WHERE [PreviousId] = @NewPreviousId UPDATE [Item] SET [PreviousId] = @NewPreviousId WHERE [ItemId] = @MovingItemId This produces the following before and after results: 100 salad NULL 1 9 mango 100 2 36 banana 9 3 3 orange 36 4 6 apples 3 5 100 salad NULL 1 3 orange 100 2 9 mango 3 3 36 banana 9 4 6 apples 36 5
