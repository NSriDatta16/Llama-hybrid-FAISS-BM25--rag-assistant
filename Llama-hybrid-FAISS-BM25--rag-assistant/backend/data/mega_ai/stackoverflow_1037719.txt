[site]: stackoverflow
[post_id]: 1037719
[parent_id]: 
[tags]: 
How can I quickly create large (>1gb) text+binary files with "natural" content? (C#)

For purposes of testing compression, I need to be able to create large files, ideally in text, binary, and mixed formats. The content of the files should be neither completely random nor uniform. A binary file with all zeros is no good. A binary file with totally random data is also not good. For text, a file with totally random sequences of ASCII is not good - the text files should have patterns and frequencies that simulate natural language, or source code (XML, C#, etc). Pseudo-real text. The size of each individual file is not critical, but for the set of files, I need the total to be ~8gb. I'd like to keep the number of files at a manageable level, let's say o(10). For creating binary files, I can new a large buffer and do System.Random.NextBytes followed by FileStream.Write in a loop, like this: Int64 bytesRemaining = size; byte[] buffer = new byte[sz]; using (Stream fileStream = new FileStream(Filename, FileMode.Create, FileAccess.Write)) { while (bytesRemaining > 0) { int sizeOfChunkToWrite = (bytesRemaining > buffer.Length) ? buffer.Length : (int)bytesRemaining; if (!zeroes) _rnd.NextBytes(buffer); fileStream.Write(buffer, 0, sizeOfChunkToWrite); bytesRemaining -= sizeOfChunkToWrite; } fileStream.Close(); } With a large enough buffer, let's say 512k, this is relatively fast, even for files over 2 or 3gb. But the content is totally random, which is not what I want. For text files, the approach I have taken is to use Lorem Ipsum , and repeatedly emit it via a StreamWriter into a text file. The content is non-random and non-uniform, but it does has many identical repeated blocks, which is unnatural. Also, because the Lorem Ispum block is so small ( Neither of these is quite satisfactory for me. I have seen the answers to Quickly create large file on a windows system? . Those approaches are very fast, but I think they just fill the file with zeroes, or random data, neither of which is what I want. I have no problem with running an external process like contig or fsutil, if necessary. The tests run on Windows. Rather than create new files, does it make more sense to just use files that already exist in the filesystem? I don't know of any that are sufficiently large. What about starting with a single existing file (maybe c:\windows\Microsoft.NET\Framework\v2.0.50727\Config\enterprisesec.config.cch for a text file) and replicating its content many times? This would work with either a text or binary file. Currently I have an approach that sort of works but it takes too long to run. Has anyone else solved this? Is there a much faster way to write a text file than via StreamWriter? Suggestions? EDIT : I like the idea of a Markov chain to produce a more natural text. Still need to confront the issue of speed, though.
