[site]: stackoverflow
[post_id]: 2990187
[parent_id]: 2990085
[tags]: 
You can find a nice code sample here : Hashtable env = new Hashtable (); env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); env.put(Context.PROVIDER_URL, "ldap://localhost:389/dc=fraglab,dc=net"); env.put(Context.SECURITY_AUTHENTICATION, "simple"); env.put(Context.SECURITY_PRINCIPAL, "cn=admin,dc=fraglab,dc=net"); env.put(Context.SECURITY_CREDENTIALS, "yannis"); DirContext ctx = new InitialDirContext(env); SearchControls searchControls = new SearchControls(); searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE); searchControls.setCountLimit(10); NamingEnumeration namingEnumeration = ctx.search("", "(uid=*)", new Object[]{}, searchControls); while (namingEnumeration.hasMore()) { SearchResult sr = namingEnumeration.next(); System.out.println("DN: " + sr.getName()); System.out.println(sr.getAttributes().get("uid")); System.out.println("Password:" + new String((byte[]) sr.getAttributes().get("userPassword").get())); } ctx.close(); It uses the LDAP Naming Service Provider for the Java Naming and Directory Interface JNDI , and should do what you want with small adaptations (e.g. put the name of you server, at least). The documentation for the ldap provider is quite good, and will help you extend it to your needs.
