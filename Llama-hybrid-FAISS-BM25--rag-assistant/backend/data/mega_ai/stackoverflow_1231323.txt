[site]: stackoverflow
[post_id]: 1231323
[parent_id]: 1231095
[tags]: 
It's possible, but you'll have to define the enum manually. Whether this is good design depends on the amount of different events you are defining, and when. Is it possible to create new event definitions and not have to change your code? In that case, an enum would probably be a bad idea. If the list of event IDs is static and not too big, then an enum would be acceptable, and (in my opinion) even encourageable. Edit: my apologies, the solution I provided was actually the way it's done in LINQ to SQL, not Entity Framework 1.0. Must have been a lack of coffee. The way it's done in EF, is to define a properly typed property in a partial class. For example, I have a column EventType in my database, which I want to map to an enum . I've renamed the property from the default EventType to EventTypeInt , as you can see below: (source: subbot.net ) Then you set the Getter and Setter properties for this column to private (in the property manager window which you probably used to rename EventType). Once that's done and saved, use the following code: public enum EventType { Unknown = 0, Concert = 1, Festival = 2 } public partial class EventCalendar { public EventType EventType { get { return (EventType)EventTypeInt; } set { EventTypeInt = (int)value; } } } Yes, it's tedious. It was a lot more practical in LINQ to SQL models.
