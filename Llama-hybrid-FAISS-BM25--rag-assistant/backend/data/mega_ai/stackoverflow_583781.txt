[site]: stackoverflow
[post_id]: 583781
[parent_id]: 535385
[tags]: 
I've gone through many of problems on your list, so let me spec out how I handle it. I am also OOP addict and find object techniques extremely flexible and powerful yet elegant (if done correctly). MVC - yes, hands down, MVC is a standard for web applications. It is well documented and understandable model. Furthermore, it does on application level what OOP does on class level, that is, it keeps things separated. Nice addition to MVC is Intercepting Filter pattern. It helps to attach filters for pre- and post-processing request and response. Common use is logging requests, benchmarking, access checking, caching, etc. OOP representation of database tables/rows is also possible. I use DAO or ActiveRecord on daily basis. Another approach to ORM issues is Row Data Gateway and Table Data Gateway . Here's example implementation of TDG utilising ArrayAccess interface. HTML templates also can be represented as objects. I use View objects in conjunction with Smarty template engine. I find this technique EXTREMELY flexible, quick, and easy to use. Object representing view should implement __set method so every property gets propagated into Smarty template. Additionally __toString method should be implemented to support views nesting. See example: $s = new View(); $s->template = 'view/status-bar.tpl'; $s->username = "John Doe"; $page = new View(); $page->template = 'view/page.tpl'; $page->statusBar = $s; echo $page; Contents of view/status-bar.tpl : Hello {$username} Contents of view/page.tpl : .... ..... {$statusBar} ... rest of the page ... This way you only need to echo $page and inner view (status bar) will be automatically transformed into HTML. Look at complete implementation here . By the way, using one of Intercepting Filters you can wrap the returned view with HTML footer and header, so you don't have to worry about returning complete page from your controller. The question of whether to use Ajax or not should not be important at time of design. The framework should be flexible enough to support Ajax natively. Form validation is definitely the thing that could be done in OO manner. Build complex validator object using Composite pattern . Composite validator should iterate through form fields and assigned simple validators and give you Yes/No answer. It also should return error messages so you can update the form (via Ajax or page reload). Another handy element is automatic translation class for changing data in db to be suitable for user interface. For example, if you have INT(1) field in db representing boolean state and use checkbox in HTML that results in empty string or "on" in _POST or _GET array you cannot just assign one into another. Having translation service that alters the data to be suitable for View or for db is a clean way of sanitizing data. Also, complexity of translation class does not litter your controller code even during very complex transformations (like the one converting Wiki syntax into HTML). Also i18n problems can be solved using object oriented techniques. I like using __ function (double underscore) to get localised messages. The function instead of performing a lookup and returning message gives me a Proxy object and pre-registers message for later lookup. Once Proxy object is pushed into View AND View is being converted into HTML, i18n backend does look up for all pre-registered messages. This way only one query is run that returns all requested messages. Access controll issues can be addressed using Business Delegate pattern. I described it in my other Stackoverflow answer . Finally, if you would like to play with existing code that is fully object oriented, take look at Tigermouse framework . There are some UML diagrams on the page that may help you understand how things work. Please feel free to take over further development of this project, as I have no more time to work on it. Have a nice hacking!
