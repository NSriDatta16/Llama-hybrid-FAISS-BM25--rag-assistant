[site]: stackoverflow
[post_id]: 3395766
[parent_id]: 3273925
[tags]: 
You can't realy expect that someone can teach you everything you don't know about .NET in a few paragraphs. You can read pretty good example at MSDN http://msdn.microsoft.com/en-us/library/system.security.principal.genericprincipal.aspx and dig through the class and it's derivatives in Reflector - there's nothing spectacularly special about it. Roles are just a string arrray of names for your own use, in your app/server. Having said that, you don't really have to aim at exact GenericPrincipal derrivative at all. Check out HttpContext.Current.Items It's a Hashtable for free use just for the request you are servicing - meaning that at one point you can do say: HttpContext.Current.Items["TokenUser"] = new MyThinUser(anything,I,want,there); and then everythere else in the code just do: var user = HttpContext.Current.Items["TokenUser"] as MyThinUser; and you are done. Store in your new class everything you need/want to pass around from the authentification code to all other functions. Leaves User property intact (so you can peek into it and not have to worry that you changed something). Wihr that you can simplify or complicate your system at will but you keep full independence. For example if you have your own authentification and just a few levels of acces instead of enumerated roles you can just carry good old access level number (enumerated roles carried around as strings are very inefficient anyway). Keep in mind that autogenned samples in VS are usually geared towards some particular scenario. So if you see SQL providers for user management that doesn't mean that you actually have to use it - you can still just call your own sproc to get what you need from your own table in SQL.
