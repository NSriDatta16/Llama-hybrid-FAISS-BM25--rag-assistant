[site]: stackoverflow
[post_id]: 2348613
[parent_id]: 2339026
[tags]: 
In case anyone comes here for the answer, here's one way to do it. I had initial problems with web.config changing some of the HTML tags upon storage, so we use B64 encoding (may not be necessary). Store the saved html markup to an AppSettings key in web.config as Base64 encoding, using this for your setting update function. Add error checking and whatever else you need it to do: 'create configuration object Dim cfg As Configuration cfg = WebConfigurationManager.OpenWebConfiguration("~") 'get reference to appsettings("HTMLstring") Dim HTMLString As KeyValueConfigurationElement = _ CType(cfg.AppSettings.Settings("HTMLstring"), KeyValueConfigurationElement) 'get text entered by user and marked up with HTML tags from FTB1, then 'encode as Base64 so we can store it as XML-safe string in web.config Dim b64String As String = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(FTB1.Text)) 'save new value into web.config If Not HTMLString Is Nothing Then HTMLString.Value = b64String cfg.Save() End If Next, add a Literal control to the aspx markup: To add the saved HTML to the post-edited page, do the following in Page_Load: 'this string of HTML code is stored in web.config as Base64 to preserve XML-unsafe characters that come from FreeTextBox. Dim injectedHTML As String = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(AppSettings("HTMLstring"))) 'the literal control will directly inject this HTML instead of encoding it charHTML.Mode = LiteralMode.PassThrough 'set the value charHTML.Text = injectedHTML Hope this helps. sF
