[site]: stackoverflow
[post_id]: 1090196
[parent_id]: 1090145
[tags]: 
If it ain't broke, don't fix it. I know the feeling that something could be done a lot more simply and elegantly, maybe because you understand the framework better by now or because you learnt some new techniques. But that's really only relevant when you want to extend or change some code, otherwise just let it run if it works. If it doesn't work (i.e. if it's buggy, too slow, eats resources etc.), you should still be fixing it to begin with and hence have little regret just yet. Otherwise, well, what are you worrying about? Beauty in code is so fleeting... ;o) From the other perspective, if you come in to work on somebody else's code, or even your own old code, you shouldn't be surprised to find sub-optimal code. We all do it. In fact, it's an opportunity to feel smug and play the hero when you successfully refactor the old code. Non-optimal code is just part of the job. We should expect it around every corner and always be prepared to refactor old code when we need to touch it. That's only a problem if management doesn't understand it and doesn't allow you the time to do it.
