[site]: stackoverflow
[post_id]: 194068
[parent_id]: 187380
[tags]: 
I think your question is somewhat missing the point. You shouldn't choose, you should learn them both! If you truly are in a position that you can choose the next framework(vm, infrastructure) then you need to decided what to use and can ask a specific question with pros and cons from the perspective of what your application is inteded to do. I have used smalltalk (love it) and ruby (love it). At home or for open source project I can use every language I like, but when doing work I have to adopt. I started to use ruby (at work) because we needed some scripting language that behaved more-or-less equally under solaris,linux and windows(98,2000,xp). Ruby was at that time unknown to average-joe and there didn't exist any rails. But it was easy to sell to everyone involved. (Why not python? the truth ? I once spend a week hunting for a bug that happened when a terminal converted my space to a tab and the intending got messed up). So people started to code more and more in ruby because it was so relaxing, enjoying and not a cloud on the sky. Paul Graham sums it up It's true, certainly, that most people don't choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. and To be attractive to hackers, a language must be good for writing the kinds of programs they want to write. And that means, perhaps surprisingly, that it has to be good for writing throwaway programs. And when were at the Lisp land try to replace LISP with smalltalk Ruby’s libraries, community, and momentum are good So if LISP is still more powerful than Ruby, why not use LISP? The typical objections to programming in LISP are: There aren’t enough libraries. We can’t hire LISP programmers. LISP has gone nowhere in the past 20 years. These aren’t overwhelming objections, but they’re certainly worth considering. and Now, given a choice between a powerful language, and popular language, it may make excellent sense to pick the powerful one. But if the difference in power is minor, being popular has all sorts of nice advantages. In 2005, I’d think long and hard before choosing LISP over Ruby. I’d probably only do it if I needed optimized code, or macros which acted as full-fledged compilers.
