[site]: stackoverflow
[post_id]: 1383867
[parent_id]: 1383754
[tags]: 
The former is an instance variable and creates a something for each instance of SomeClass. It's similar to C's typedef struct { NSObject *something; } SomeClass; The latter declares a global variable that has no real association with SomeClass. In C, it's equivalent to NSObject *something; defined in global scope. Objective-C doesn't really have class variables, so global variables are used (rather, are sometimes used; variables with compilation unit scope and static storage class are what should be used). The cleanest way of defining a "class" variable is to define a static variable in the implementation file. That way, only the class methods can access it and you avoid polluting the global namespace. If you want it publicly available, define accessors. Destroying class variables properly can be tricky. Memory will be reclaimed and open files will be closed automatically when the application exits, but other resources may not be handled so well.
