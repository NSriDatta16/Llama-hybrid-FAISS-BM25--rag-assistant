[site]: stackoverflow
[post_id]: 1851116
[parent_id]: 229472
[tags]: 
I am one of two programmers at a small software firm with VERY non-technical owners ("what's a 'browser'" - seriously asked last week). The advantage is that I can choose for myself on most of these points. Test-Driven-Development - Our owner had a bad experience or something. Mention testing in the wrong way and I'd swear she's acting out of PTSD. Domain-Driven-Design - Yep. Model-Driven-Design/Architecture - Yep. Do you test? - Nope. Testing falls on the sales & support staff and the owners. So nothing gets tested much once it leaves my dev machine. Unit Testing - If I got caught doing it I might get fired. And its seriously the only thing that could get me fired. Integration Testing - See "Do you test?" Acceptance Testing - Well, we have to deploy it sometime, right? Code Reviews - No one else would understand it. I've seen everyone elses. Wish I hadn't. Innovative Technologies (Spring, Hibernate, Wicket, JSF, WS, REST, ...) - Yep. But I get flak for it. I'm the "kid" who doesn't know anything that wasn't invented in the last ten years (despite being 30 and having "Readings in Database Systems" on my desk). Agile - I don't waterfall. But I don't really Agile, either. Pair Programming - You don't want to try to talk to the other "programmer" that works at our company. UML - Nope. But I draw boxes with identifiers in them sometimes on my whiteboard. The bosses like that. Good thing they're not more technically inclined, or I'd probably see more boxes. Domain-specific languages - Nope. Requirement Specification (How?) - Nope. Continous Integration - Nope. Code-Coverage Tools - Nope. Aenemic Domain Model - Yep. Tried it. Most of my situations I don't like it for and don't use it. Communication (Wiki, Mail, IM, Mailinglists, other documents) - Tried, couldn't get coworker buy-in. Our MediaWiki install still has the default logo graphic. Effort estimates - We have to estimate how long every job will take in hours. That is what the client gets billed. And that is what we are expected to spend on the project. We even do this when we are looking at new clients and developing new apps from scratch, as well as when we do bug fixes (yeah, we charge clients for that), feature additions, etc. Team size - 1. And let me say this is not a good way to work. It is much better to be able to bounce ideas of other capable programmers in real time. Meetings - few hours worth a week, sometimes double that and rarely less than that. Half the meetings I do are with clients, have are totally internal. Code metrics - Nope. Static code analysis - Nope. Bug tracking - Not as much as I should.
