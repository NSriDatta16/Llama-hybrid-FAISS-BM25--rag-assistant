[site]: stackoverflow
[post_id]: 4467038
[parent_id]: 
[tags]: 
Is it considered bad form in C++ to put a class declaration containing method definitions in a header file?

I am used to C, where header files usually only contain declarations and not definitions, but C++ seems to encourage the mixing of both, at least with classes. Take this class declaration which could easily be put in a header file. Some of its methods are defined inline, not in the sense of the "inline" keyword, but inline as in within the class declaration itself. Specifically the constructor and four getters/setters. MyClass.h: class MyClass { public: MyClass(int a = 0, int b = 1) : _a(a), _b(b) {}; int getA() { return _a; }; int getB() { return _b; }; void setA(int a) { _a = a; }; void setB(int b) { _b = b; }; void doSomething(); // no definition here; defined in source file void doSomething2(); // no definition here; defined in source file void doSomething3(); // no definition here; defined in source file private: int _a; int _b; }; Is this bad form and should I define the class's methods separately in a source file, leaving only method declarations in the class declaration, or is this perfectly acceptable?
