[site]: stackoverflow
[post_id]: 3138521
[parent_id]: 3138498
[tags]: 
Well, you can set async: false on your AJAX call to make the browser wait for the request to finish before doing anything else, but note that this will 'hang' the browser for the duration of the request. $.ajax({ type: 'POST', async: false, url: '/clientarea/utils/record-time', data: 'teid=' + teid + '&t=' + t }); From the manual: By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. ⚠ WARNING: This answer was posted in 2010 and is now outdated - the XHR specification highlights the following statement: Synchronous XMLHttpRequest outside of workers is in the process of being removed from the web platform as it has detrimental effects to the end user’s experience. (This is a long process that takes many years.) Developers must not pass false for the async argument when current global object is a Window object. User agents are strongly encouraged to warn about such usage in developer tools and may experiment with throwing an "InvalidAccessError" DOMException when it occurs. DevTools in Chrome has recently started warning about it, so this change (which has been coming for some years) could be imminent.
