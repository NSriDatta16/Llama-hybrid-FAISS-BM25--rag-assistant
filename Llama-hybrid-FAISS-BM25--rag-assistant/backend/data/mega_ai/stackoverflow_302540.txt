[site]: stackoverflow
[post_id]: 302540
[parent_id]: 301844
[tags]: 
There are several patterns that are useful for separating UI presentation from UI logic including Model-View-Controller and the various incarnations of Model-View-Presenter (AKA Humble Dialog). Humble Dialog was concocted specifically to make unit testing easier. You should definitely have one of these UI patterns in your design arsenal. But I have found that for simple forms, when the framework supports it, it's quite straightforward to test directly against the real UI controls. I have built quite robust UIs completely test-first in Java Swing and Windows.Forms. I couldn't manage it in SWT or ASP.NET and reverted to MVP. For testing things like this... [Test] public void ShouldCopyFromAvailableToSelectedWhenAddButtonIsCLicked(){ myForm.AvailableList.Items.Add("red"); myForm.AvailableList.Items.Add("yellow"); myForm.AvailableList.Items.Add("blue"); myForm.AvailableList.SelectedIndex = 1; myForm.AddButton.Click(); Assert.That(myForm.AvaiableList.Items.Count, Is.EqualTo(2)); Assert.That(myForm.SelectedList.Items[0], Is.EqualTo("yellow")); } ...working directly against the UI controls works fine. But if you want to start testing mouse moves, keystrokes or drag and drop, you'd be better off choosing a more robust UI pattern like the one suggested by Brian.
