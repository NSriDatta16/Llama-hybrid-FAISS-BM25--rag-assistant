[site]: stackoverflow
[post_id]: 132306
[parent_id]: 132241
[tags]: 
C compilers implement one of several standards. However, having a standard does not mean that all aspects of the language are defined. Duff's device , for example, is a favorite 'hidden' feature that has become so popular that modern compilers have special purpose recognition code to ensure that optimization techniques do not clobber the desired effect of this often used pattern. In general hidden features or language tricks are discouraged as you are running on the razor edge of whichever C standard(s) your compiler uses. Many such tricks do not work from one compiler to another, and often these kinds of features will fail from one version of a compiler suite by a given manufacturer to another version. Various tricks that have broken C code include: Relying on how the compiler lays out structs in memory. Assumptions on endianness of integers/floats. Assumptions on function ABIs. Assumptions on the direction that stack frames grow. Assumptions about order of execution within statements. Assumptions about order of execution of statements in function arguments. Assumptions on the bit size or precision of short, int, long, float and double types. Other problems and issues that arise whenever programmers make assumptions about execution models that are all specified in most C standards as 'compiler dependent' behavior.
