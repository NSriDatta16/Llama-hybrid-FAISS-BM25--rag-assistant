[site]: stackoverflow
[post_id]: 527964
[parent_id]: 527919
[tags]: 
"I drew a diagram of the import dependencies, and I was planning to aggregate classes by layer level." Python must read like English (or any other natural language.) An import is a first-class statement that should have real meaning. Organizing things by "layer level" (whatever that is) should be clear, meaningful and obvious. Do not make arbitrary technical groupings of classes into modules and modules into packages. Make the modules and package obvious and logical so that the list of imports is obvious, simple and logical. "Also, I was considering some modification to the classes so to reduce these dependencies." Reducing the dependencies sounds technical and arbitrary. It may not be, but it sounds that way. Without actual examples, it's impossible to say. Your goal is clarity. Also, the module and package are the stand-alone units of reuse. (Not classes; a class, but itself isn't usually reusable.) Your dependency tree should reflect this. You're aiming for modules that can be imported neatly and cleanly into your application. If you have many closely-related modules (or alternative implementations) then packages can be used, but used sparingly. The Python libraries are relatively flat; and there's some wisdom in that. Edit One-way dependency between layers is an essential feature. This is more about proper software design than it is about Python. You should (1) design in layers, (2) design so that the dependencies are very strict between the layers, and then (3) implement that in Python. The packages may not necessarily fit your layering precisely. The packages may physically be a flat list of directories with the dependencies expressed only via import statements.
