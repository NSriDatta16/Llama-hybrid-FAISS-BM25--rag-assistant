[site]: stackoverflow
[post_id]: 4616583
[parent_id]: 4615599
[tags]: 
See this question . I think you have two options Using a ItemsControl Using an attached property Update A more Dynamic solution using two attached properties. A Resource with the Template is added to the Paragraph (which must have the x:Shared="False" attribute set, otherwise we'll just keep adding the same elements over and over). Then the Source List and the name of the template resource is set as attached properties. In the PropertyChanged callback, a check is made that both properties are set and then a Span element is created for each item in the List. The span elements DataContext is set to the current item to make the Bindings work ParagraphInlineBehavior public class ParagraphInlineBehavior : DependencyObject { public static readonly DependencyProperty TemplateResourceNameProperty = DependencyProperty.RegisterAttached("TemplateResourceName", typeof(string), typeof(ParagraphInlineBehavior), new UIPropertyMetadata(null, OnParagraphInlineChanged)); public static string GetTemplateResourceName(DependencyObject obj) { return (string)obj.GetValue(TemplateResourceNameProperty); } public static void SetTemplateResourceName(DependencyObject obj, string value) { obj.SetValue(TemplateResourceNameProperty, value); } public static readonly DependencyProperty ParagraphInlineSourceProperty = DependencyProperty.RegisterAttached("ParagraphInlineSource", typeof(IEnumerable), typeof(ParagraphInlineBehavior), new UIPropertyMetadata(null, OnParagraphInlineChanged)); public static IEnumerable GetParagraphInlineSource(DependencyObject obj) { return (IEnumerable)obj.GetValue(ParagraphInlineSourceProperty); } public static void SetParagraphInlineSource(DependencyObject obj, IEnumerable value) { obj.SetValue(ParagraphInlineSourceProperty, value); } private static void OnParagraphInlineChanged(DependencyObject d, DependencyPropertyChangedEventArgs e) { Paragraph paragraph = d as Paragraph; IEnumerable inlines = ParagraphInlineBehavior.GetParagraphInlineSource(paragraph); string templateName = ParagraphInlineBehavior.GetTemplateResourceName(paragraph); if (inlines != null && templateName != null) { paragraph.Inlines.Clear(); foreach (var inline in inlines) { ArrayList templateList = paragraph.FindResource(templateName) as ArrayList; Span span = new Span(); span.DataContext = inline; foreach (var templateInline in templateList) { span.Inlines.Add(templateInline as Inline); } paragraph.Inlines.Add(span); } } } }
