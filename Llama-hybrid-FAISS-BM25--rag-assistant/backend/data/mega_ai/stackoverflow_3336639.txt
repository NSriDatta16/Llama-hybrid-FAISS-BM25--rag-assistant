[site]: stackoverflow
[post_id]: 3336639
[parent_id]: 3335277
[tags]: 
Raw sockets behave particularly fizzy with bind() and connect(), but I can't confirm that your issue lies with them. I suggest you follow a more straightforward approach: Sender #include #include #include #include #include #include #include #define DEST "127.0.0.1" int main(int argc, char **argv) { int s; struct sockaddr_in dst_addr; char packet[50]; struct iphdr *ip = (struct iphdr *)packet; if((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) ihl = 5; ip->version = 4; ip->tos = 0; ip->tot_len = htons(40); ip->frag_off = 0; /* NF */ ip->ttl = 64; ip->protocol = IPPROTO_RAW; /* this has to be IPPROTO_RAW */ ip->check = 0; ip->saddr = dst_addr.sin_addr.s_addr; ip->daddr = dst_addr.sin_addr.s_addr; while(42) { sleep(5); if (sendto(s, packet, sizeof(packet), 0, (struct sockaddr *)&dst_addr, (socklen_t)sizeof(dst_addr)) Receiver #include #include #include #include #include #include #include int main(int argc, char **argv) { int s; struct sockaddr_in src_addr; char packet[50]; if ((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) I hope these behave exactly like you want them to. Read man 7 raw for the gory details of why this works and more importantly man 7 packet if you want to extend it. Also, take note that IPPROTO_RAW implies the IP_HDRINCL socket option, which is why we're constructing the ip header ourselves - although the IP checksum and total length are computed and filled in by the kernel, still. edit: In addition, if you wanted a raw socket with which to send valid data to an application like lighttpd, you'd have to match the protocol argument to socket() as well as provide valid values for the IP header fields. A proper ethernet header is not mandatory - the only important field will be filled for you by the kernel stack.
