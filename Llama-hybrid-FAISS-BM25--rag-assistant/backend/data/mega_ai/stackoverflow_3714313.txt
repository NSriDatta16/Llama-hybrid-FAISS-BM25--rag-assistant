[site]: stackoverflow
[post_id]: 3714313
[parent_id]: 3710022
[tags]: 
Be prepared to embrace HTML and code. I have currently converted a couple enterprise applications from MVP to MVC and I loved the experience but there are things to ask yourself. Am I code centric or am I control centric? Do I want to embrace the HTTP protocol (Get,Post, etc) or Do I like the Abstraction of WebForms? Do I like working with HTML or have the resources to build HTML UI? For me the benefits (or negatives depending on your point of view) The UI was completely free to be what it needed to be (no more being bound by Asp.Net Controls) My vocabulary shifted from WebForms to just Web (no more saying DataBind) A larger internet resource became available (I could directly and easily apply large aspects of what PHP, RoR, and DJango developers were doing in my MVC project! Actually using rails.js right now in a project, Awesome!) Once the core of these systems was written, adding features or changing things became trivial. MVC shifts your mind into thinking about the data coming in and going out of your controller. You begin to realize that while UI is important, it is not the crutch that Asp.Net WebForm controls are. Forget the Page Life Cycle, it is still there but you never use it. It is replaced by a super simple MVC pipeline. (PreInit What?!) The MVC Pipeline allows for some great Aspect Oriented Programming opportunities that were difficult to do with the App Block. MVC is a great opportunity to leverage IoC Containers like Unity 2, StructureMap, or Ninject. All the things mentioned above helped me deliver a product faster and better than I could when I was doing MVP with AppBlock. Ultimately moving to Asp.Net MVC was the best decision I could make in my .Net career and it is something that I am glad has arrived to the .Net Framework. And MVC is so cool, I've been able to convert die-hard WebForm MVP guys to MVC believers without them knowing it. Send me an email if you have any specific questions.
