[site]: stackoverflow
[post_id]: 1130617
[parent_id]: 847854
[tags]: 
So the issue, as far as I can tell, is that when the Jabber user on the other end responds. The problem there, at least in part, is that the user is responding to another user on the Jabber server, yet you want the php script to be aware that this response has taken place without holding the connection open (which makes sense since the script is no longer running, probably). One option, albeit a really silly one, is: Have a php script that can broker a connection to the Jabber server for both sending and receiving for the user on your page, Use AJAX to send messages for the user (the AJAX would point to the above script, the script would send the message.) Have a Javascript infinite loop that pings the same script ever 10 seconds or so, checking in to see if there are messages. If there are, they get passed back to the client and output to the user. There are only two issues with the above: 1) If the user isn't connected when the message is transmitted, will the php script still see/get the message? 2) A client side loop that makes ajax requests every 3 seconds would probably be a huge drain. Solution 2: OpenFire jabber server. It comes with a web chat client built in, and it has an addon called Fastpath, which is meant to handle HTML-based chats on the client end (like the "chat with an agent now!" feature on too many support pages.) We use this at work and it is very customizable, can be integrated with other scripts (for instance, if you want a script that fills in the user details from their login, or adds some custom avatar, or whatever), and it (OpenFire) has tons of other extensions and addons that, if this isn't what you want, they probably have what you are looking for.
