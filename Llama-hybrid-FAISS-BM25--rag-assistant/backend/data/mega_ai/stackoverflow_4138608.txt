[site]: stackoverflow
[post_id]: 4138608
[parent_id]: 4138290
[tags]: 
I would start by reading this official Microsoft article on extending the ASP.NET Membership API. It talks about creating extra tables for storing additional information about users. The membership database If you have an existing database which holds all your other website information, you can run the aspnet_regsql.exe tool to generate the necessary user tables. You will then need to modify your web.config and add the SqlMembershipProvider along with your connection string. If you're creating a new project and don't have a database, start with a new MVC project which already has Membership enabled. Your database will be created inside the App_Data folder on first use, and you can take this and attach it to your SQL/SQLEXPRESS server. Then it's just a matter of changing the connection string to use a DB server rather than a local file. Creating additional tables This part is actually quite simple and consists of a few short steps: Create a new table, i.e. UserProfiles Add a uniqueidentifier column as your primary key, and add a foreign key to the aspnet_Users table Add any other fields you want to store (Phone, Address, Gender etc.) If you're using LINQ-to-SQL or the Entity Framework, you can simply drag the tables you need onto the designer, and you'll be ready to query the Membership tables. Here's a little sample on usage Add this snippet to your repository responsible for Profile/Account information. public aspnet_User GetUser() { MembershipUser user = Membership.GetUser(); return db.aspnet_Users.SingleOrDefault(u => u.UserId == user.ProviderUserKey); } Then inside your models, you can get the user and access the other information stored in your UserProfiles table. AccountRepo accountRepo = new AccountRepo(); aspnet_User user = accountRepo.GetUser(); string Address = user.UserProfile.Address; // bingo! And that's pretty much it! This is obviously a simple example, and you should be checking if the user is null and you could also create a class responsible for returning the necessary information about a user, implement caching, etc..
