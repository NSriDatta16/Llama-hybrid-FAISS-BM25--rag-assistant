[site]: stackoverflow
[post_id]: 4541258
[parent_id]: 4540898
[tags]: 
I guess the Proxy suggestion is the best answer, but let me add two considerations: First, to change a public API by adding methods to an interface, methods which depend on classes that didn't exist in previous versions, is in general an abomination (a developer that implements that interface, as yourself, is inevitably lead to trouble). This abomination is rare, and is attenuated by the second consideration: The JDBC API is, of course, a public API. But not very public. I mean that normally its interfaces are to be implemented only by JDBC drivers providers. And in this case it's tolerable the burden of having different implementations for different JDBC versions - see for eg . What I'm aiming to is to discourage you to implement a class that implements/wraps a ResultSet , except for very specific (low level) situations.In general it's bad practice to pass a ResultSet to bussiness layers; in the typical case, the JDBC driver instantiates the ResultSet, the DAO method uses it, but never return it.
