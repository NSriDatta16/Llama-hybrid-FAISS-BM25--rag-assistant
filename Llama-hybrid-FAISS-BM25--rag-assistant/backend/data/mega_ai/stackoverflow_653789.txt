[site]: stackoverflow
[post_id]: 653789
[parent_id]: 
[tags]: 
Elegantly reducing the number of dependencies in ASP.NET MVC controllers

We are developing what is becoming a sizable ASP.NET MVC project and a code smell is starting to raise its head. Every controller has 5 or more dependencies, some of these dependencies are only used for 1 of the action methods on the controller but obviously are created for every instance of the controller. I'm struggling to think of a good way to reduce the number of objects that are created needlessly for 90% of calls. Here are a few ideas I'm toying around with: Splitting the controllers down into smaller, more targeted ones. Currently we have roughly a controller per domain entity, this has led to nice looking URLs which we would like to emulate, meaning we would end up with a much more complicated routing scheme. Passing in an interface wrapping the IoC container. This would mean the objects would only be created when they were explicitly required. However, this just seems like putting lipstick on a pig. Extending the framework in some way to achieve some crazy combination of the two. I feel that others must have come across this same problem; so how did you solve this or did you just live with it because it isn't really that big a problem in your eyes?
