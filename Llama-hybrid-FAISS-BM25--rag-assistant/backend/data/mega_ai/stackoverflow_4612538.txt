[site]: stackoverflow
[post_id]: 4612538
[parent_id]: 4612469
[tags]: 
C# defines several preprocessor directives, which affect the way that your program’s source file is interpreted by the compiler. These directives affect the text of the source file in which they occur, prior to the translation of the program into object code. The term preprocessor directive comes from the fact that these instructions were traditionally handled by a separate compilation phase called the preprocessor. Today’s modern compiler technology no longer requires a separate preprocessing stage to handle the directives, but the name has stuck. The #define directive defines a character sequence called a symbol. The existence or nonexistence of a symbol can be determined by #if or #elif , and is used to control compilation. The #if and #endif directives allow you to conditionally compile a sequence of code based upon whether an expression involving one or more symbols evaluates to true. A symbol is true if it has been defined. It is false otherwise. Thus, if a symbol has been defined by a #define directive, it will evaluate as true. The general form of #if is #if symbol-expression statement sequence #endif If the expression following #if is true, the code that is between it and #endif is compiled. Otherwise, the intervening code is skipped. The #endif directive marks the end of an #if block. A symbol expression can be as simple as just the name of a symbol. You can also use these operators in a symbol expression: ! , == , != , && , and || . Parentheses are also allowed. C# 3.0 A Beginner's Guide By Herbert Schildt (the best book for learning C# IMO)
