[site]: crossvalidated
[post_id]: 118454
[parent_id]: 
[tags]: 
Cost keeps on increasing in Multinomial logistic regression, instead of reducing

I am trying to implement multinomail logistic regression using gradient descent, following http://ufldl.stanford.edu/wiki/index.php/Softmax_Regression My data set has 7 ratings classes from 1 to 7. But after I implemented it the cost in the cost function keeps increasing in each iteration. My costFunction: function [ cost ] = costFunctionMultiNominal( inputX,resultY,weights,lambda) %UNTITLED8 Calculates the cost for gradient descent,assumes inputX has one %additional feature for constant and Weights is a classes X features matrix [rows,cols] = size(inputX); numOfClasses = size(weights,1); summation = 0; for i=1:rows classLevelSummation = 0; %display(size(inputX)); %display(size(weights)); for j=1:numOfClasses multipliedMatrix = inputX(i,:)*weights'; multipliedMatrix = bsxfun(@minus, multipliedMatrix, max(multipliedMatrix)); if resultY(i)==j denominatorSum = 0; for l=1:numOfClasses denominatorSum = denominatorSum + exp(multipliedMatrix(l)); display(denominatorSum); end classLevelSummation = classLevelSummation + multipliedMatrix(j) - log(denominatorSum); end end summation = summation + classLevelSummation; end display(summation); % Adding weight decay WeightSq= 0; for i=1:numOfClasses colSummation = 0; for j=1:cols colSummation = colSummation + weights(i,j)^2; end WeightSq = WeightSq +colSummation; end cost = summation/(-rows) + lambda*WeightSq*0.5; end calculatingPOfJ : function [ result,resultVector ] = calculatePofJMultiNominal( inputX,Weights,j ) %UNTITLED11 Assume inputX is padded with one extra column for constant and %has only one row, resultVector will only be returned if k=-1 and contain %all the probabilties numOfClasses = size(Weights,1); resultVector = zeros(numOfClasses,1); result = 0; denominatorSum = 0; multipliedMatrix = inputX*Weights'; %display(multipliedMatrix); multipliedMatrix = bsxfun(@minus, multipliedMatrix, max(multipliedMatrix)); %display(multipliedMatrix); for l=1:numOfClasses denominatorSum = denominatorSum + exp(multipliedMatrix(l)); end %display(denominatorSum); if j == -1 for k=1:numOfClasses resultVector(k)= exp(multipliedMatrix(k))/(denominatorSum); end else result = exp(multipliedMatrix(j))/(denominatorSum); end end
