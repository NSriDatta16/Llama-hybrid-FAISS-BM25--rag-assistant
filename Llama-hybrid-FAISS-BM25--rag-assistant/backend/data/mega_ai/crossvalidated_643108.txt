[site]: crossvalidated
[post_id]: 643108
[parent_id]: 643092
[tags]: 
This result occurs due to higher positive skewness in the string-count for Alice This type of problem relates to "string-counts", which in turn relate to deterministic finite automata (DFAs) for strings. Your question is closely related to other string-count questions for coin-flipping here and here . The simplest way to understand these problems is to construct a DFA for the "language" of interest in the problem (i.e., the set of strings being counted) and the use this to construct a Markov chain tracking the evolution of the string-states. In the figure below I show the minimised DFA for your problem, with heads represented by the blue arrows and tails represented by the red arrows. There are four different states in the minimised DFA, and the final states of interest for Alice and Bob are at the bottom of the figure. As you can see from the picture, the transitions in the DFA are not symmetric with respect to these final states. I recommend you have a look at this figure and satisfy yourself that it represents the minimised figure for the relevant string-states and transitions in the problem. Formal analysis of string-counts can be conducted here by looking at the Markov chain with these four states and counting the number of times the chain enters the relevant final states (also called "counting states") for the two strings (i.e., the states $\text{HH}$ and $\text{HT}$ ). Assuming that this is a fair coin (i.e., tosses have independent outcomes with equal chance of a head or tail) the transition probability matrix for the string-states in the Markov chain (including state labels) is: $$\mathbf{P} = \begin{bmatrix} & \text{NULL} & \text{H} & \text{HH} & \text{HT} \\ \text{NULL} & \tfrac{1}{2} & \tfrac{1}{2} & 0 & 0 \\ \text{H} & 0 & 0 & \tfrac{1}{2} & \tfrac{1}{2} \\ \text{HH} & 0 & 0 & \tfrac{1}{2} & \tfrac{1}{2} \\ \text{HT} & \tfrac{1}{2} & \tfrac{1}{2} & 0 & 0 \\ \end{bmatrix}.$$ The problem here is to find the probability that the string-count for state $\text{HH}$ is higher/equal/lower than the string-count for state $\text{HT}$ after $n=100$ coin tosses. To determine this we need to find the joint distribution of the string-counts for these two states (i.e., the number of times the chain enters these states) over the stipulated number of transitions in the chain. This can be computed analytically (see below) or we can simulate from the Markov chain to obtain the relevant string-counts (i.e., number of times the chain enters each counting state) over a large number of simulations. It turns out that the expected string-count for each string is the same for both $\text{HH}$ and $\text{HT}$ but their distributions are different, with the former having higher variance and higher positive skewness. By looking at the transitions in the DFA, we can already see why we would get a higher variance in the string-count for the state $\text{HH}$ (Alice) than for the string-count for $\text{HT}$ (Bob). The reason is that the former string has a direct recurring path that means it can occur several times in a row, but if it transitions away to another state it has a longer path, on average, to come back. Contrarily, the latter string has no direct recurring path to occur in consecutive coin-flips but it transitions away to another states that are, on average, closer to it as a return state. In fact, this same phenomenon also leads to a higher skewness in the string-count for the state $\text{HH}$ (Alice) than for the string-count for $\text{HT}$ (Bob). (You can easily confirm this in your own simulations --- the positive skewness for Alice is about ten times the skewness for Bob.) This occurs because the former state tends to get some extreme cases of a high number of recurring consecutive outcomes, whereas the latter state does not. This higher skewness for $\text{HH}$ , coupled with having the same expected value, means that Alice tends to win slightly less often than Bob, but when she wins, she tends to win by more points. Exact computation of outcome probabilities for the game: We can compute the exact joint distribution of the string-counts using recursive computation for the specified Markov chain in R . To avoid arithmetic underflow it is best to conduct computations in log-space for the Markov chain and then convert back to probabilities for the final computations of the distributions and outcome probabilities. In the code below we compute the log-probabilities for all relevant joint states (i.e., the state of the Markov chain and the states of the two string-counts) for each iteration $n=0,1,...,100$ and we also compute the joint and marginal probability distributions for the points. #Set log-probability array N 0) { LOGPROBS[3, a+1, b+1, n+1] 0) { LOGPROBS[4, a+1, b+1, n+1] This now allows us to compute the exact probabilities of the three possible outcomes of the game at $n=100$ (where either Alice wins, Bob wins, or we have a tied game). #Compute outcome probabilities LOGPROBS.WIN b) { LOGPROBS.WIN[1] We see from this computation that there is a 45.76% chance that Alice wins the game, a 48.58% chance that Bob wins the game and a 5.65% chance that the game ends in a tie. This confirms that Bob is more likely to win the game than Alice. We can also plot the marginal distributions of the points for each player and their moments to see the differences. #Compute moments PA
