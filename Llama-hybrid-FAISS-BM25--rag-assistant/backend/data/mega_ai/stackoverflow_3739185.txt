[site]: stackoverflow
[post_id]: 3739185
[parent_id]: 3738940
[tags]: 
I'm not sure just how slow the current implementation is. So it's hard to recommend optimizations without knowing what level of optimization is needed. Given that, however, I might suggest a two-stage approach. Take your string list and compile it into a radix tree , and then save this tree to some custom format (XML might be good enough for your purposes). Then your process startup should consist of reading in the radix tree, and matching. If you want/need to optimize the memory storage of the tree, that can be done as a separate project, but it sounds to me like improving the matching algorithm would be a more efficient use of time. In some ways this is a 'roll your own regex system' idea. Rather similar to the suggestion to use a parser generator. Edit: I've used something similar to this where, as a precompile step, a custom script generates a somewhat optimized structure and saves it to a large char* array. (obviously it can't be too big, but it's another option) The idea is to keep the list there (making maintenance reasonably easy), but having the pre-compilation step speed up the access during runtime.
