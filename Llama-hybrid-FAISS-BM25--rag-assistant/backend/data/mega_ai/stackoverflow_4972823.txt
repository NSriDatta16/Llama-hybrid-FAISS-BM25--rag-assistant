[site]: stackoverflow
[post_id]: 4972823
[parent_id]: 
[tags]: 
Dependecy injection of arguments known at runtime?

I've been using IoC container's for quite some time but today I've found some "pattern" appearing in code over and over again. To give you some background I am now working on web application basically used for data analysis. There is a set of features there, that requires user to pick up what we call QueryTypeContex at the very beginning. Once this query type is chosen other steps may be taken but that all are performed in this specific QueryTypeContex . In the gui the QueryTypeContex pick up is represented as opening new tab with other controls. When user is working with given QueryTypeContex all ajax calls to the server include QueryTypeId that identifies users choice and is used to build QueryTypeContex on the server which then is used for various data retrieval and manipulation. What I've found is that many of our controllers (we use asp.net mvc) that are constructed with Ioc container have one thing in common. There is an action method that looks somewhat like this: public class AttributeController : Controller { public AttributeController(IUsefulService usefulService) { _usefulservice = usefulService; } ActionResult GetAttributes(QueryTypeContex context) { var dataDto = _usefulService.Manipulate(context, currentUser); return JSon(dataDto); } ... } In order to bind QueryTypeContex to action argument we use custom model binder that pulls some information from database. Once the service gets QueryTypeContex as argument it passes it or its properties down to its collaborators in method arguments for instance data access layer. And so there is a factory class that looks like this public interface IDateValueFactory { DateValue CurrentYear(QueryTypeContex context); DateValue RollingMonth(int numberOfMonths, QueryTypeContex context); DateValue RollingQuareter(int numberOfQuarters, QueryTypeContex context); } public class DateValueFactory : IDateValueFactory { public DateValueFactory(IDateValueDb dateValueDb) { _dateValueDb = dateValueDb; } public DateValue CurrentYear(QueryTypeContext context) { var currentYear = _dateValueDb.GetCurrentYear(context.Id); return new DateValue(DateValueType.CurrentYear, currentYear, context); } public DateValue RollingMonth(int numberOfMonths, QueryTypeContex context) { return new DateValue(DateValueType.RollingMonth, numberOfMonths, context); } ... } As you see all of these methods get QueryTypeContex as a parameter more importantly they all get the very same instance of QueryTypeContex during their short life (one web request). So I started to wonder if I could refactor this so that whenever many service class methods require QueryTypeContex as arguments it would be injected via constructor instead of passing the same value over an over again. For example: public interface IDateValueFactory { DateValue CurrentYear(); DateValue RollingMonth(int numberOfMonths); DateValue RollingQuareter(int numberOfQuarters); } public class DateValueFactory : IDateValueFactory { public DateValueFactory(IDateValueDb dateValueDb, QueryTypeContext context) { _dateValueDb = dateValueDb; _context = context; } public DateValue CurrentYear() { var currentYear = _dateValueDb.GetCurrentYear(_context.Id); return new DateValue(DateValueType.CurrentYear, currentYear, _context); } public DateValue RollingMonth(int numberOfMonths) { return new DateValue(DateValueType.RollingMonth, numberOfMonths, _context); } ... } And now the real question: Is this a good idea to to this sort of thing or it violates some design principles i should adhere to ? In order to inject QueryTypeContex instance, builded using information from http request I thought about embedding the QueryTypeId in the uris so it would be available in the RouteData on the server. Then before the controller is constructed I could pull it out, build the QueryTypeContex , create nested IoC container for that request and inject it into the container. Then whenever some class would need QueryTypeContex to perform its job it would simply declare it as constructor argument.
