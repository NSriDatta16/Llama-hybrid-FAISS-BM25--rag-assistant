[site]: crossvalidated
[post_id]: 448711
[parent_id]: 
[tags]: 
Neural network unable to predict

Data (CSV): https://easyupload.io/firqeg I'm trying to predict the last column of this data (binary) from the remaining columns. For this, I'm using neural networks (more to experiment with them at this point). Some code follows, just to be transparent with what I'm doing but I also explain it to make it clear that this is not a coding question as the code works just fine. I'm using python. I've scaled the cells using sklearn preprocessing: min_max_scaler = preprocessing.MinMaxScaler() X_scale = min_max_scaler.fit_transform(X) I've split the data into a training set, validation set and testing set: from sklearn.model_selection import train_test_split X_train, X_val_and_test, Y_train, Y_val_and_test = train_test_split(X_scale, Y, test_size=0.3) X_val, X_test, Y_val, Y_test = train_test_split(X_val_and_test, Y_val_and_test, test_size=0.5) I'm using a model of 2 hidden layers and 32 neurons in each: model = Sequential([ Dense(20, activation='relu', input_shape=(22,)), Dense(20, activation='relu'), Dense(1, activation='sigmoid'),]) model.compile(optimizer='sgd', loss='binary_crossentropy', metrics=['accuracy']) hist = model.fit(X_train, Y_train, batch_size=32, epochs=100, validation_data=(X_val, Y_val)) However the model never reaches any accuracy nor loss: https://prnt.sc/qzxmfe Is the problem that there is missing data? Too many variables per observations? All insight appreciated! EDIT: It's not too many variables as I reduced it to 3 variables that explain it well in a regression and get the same results.
