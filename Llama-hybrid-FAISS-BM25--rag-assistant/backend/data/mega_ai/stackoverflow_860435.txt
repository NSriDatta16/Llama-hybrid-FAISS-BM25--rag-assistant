[site]: stackoverflow
[post_id]: 860435
[parent_id]: 
[tags]: 
Svn organisation problem

I'm not sure how to organise these projects since they all depend on each other. Right now its all in the following structure, which is getting hard to manage -trunk |-bin - compiled common dlls |-lib - static libs for use with common dlls |-src - common dll source code |-include - headers for common dlls |-common.sln - VS 2008 solutions for common dlls |-samples ||-res - resources for samples |||-img |||-snd ||-c++ - c++ samples for common dlls, tends to double up as tests |||-various VS 2008 sample solutions ||-py - python versions for some samples |||-... |-wrappers |-python ||-bin - compiled python extension dll ||-src - source for python wrapper -Apps - actaul programs using common dlls, each with its own dir and solution |-... This has a number of problems: -1 the svn structure is just a bit of a mess, I have no real way to create a bracnh for just one application for example -Making releases for anything is a massive pain due to the file paths used by the app. Eg a python program needs to know where the python extension dll is, and where each of the common dlls is. These paths are very diffrent on svn from what they would be for a release (where they are all likly in a common dir)
