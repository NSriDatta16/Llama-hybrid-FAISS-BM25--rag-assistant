[site]: stackoverflow
[post_id]: 3554813
[parent_id]: 1779894
[tags]: 
A lot of good answers here - I'd like to mention using cgi.server_name , which can be combined with using a custom DNS to specify your dev environment. To get the localhost working, for IIS on Windows, set up hosts file like e.g. this: C:\Windows\System32\drivers\etc\hosts - add entry: 127.0.0.1 myapp.dev.mydomain.com.au Then in IIS map your server to this DNS. Your systest and uat servers might be set up properly in your corp's DNS, such as myapp.systest.mydomain.com.au - systest myapp.uat.mydomain.com.au - uat myapp.mydomain.com.au - production Then, in my application.cfc I have a getEnvironment() that is called on every load for ease of use: // get the environment based on cgi variables - top of application.cfc this.stConfig = THIS.getEnvironment(); //... onApplicationStart if (!stConfig.validEnvironment) { writeOutput("Environment #cgi.server_name# not recognised"); return false; } // ... public struct function getEnvironment () { stConfig=structnew(); stConfig.validEnvironment = 1; switch (cgi.server_name) { // my dev environment case "myapp.dev.mydomain.com.au": { stConfig.env = "dev"; // +++ } // my dev environment case "myapp.systest.mydomain.com.au": { stConfig.env = "systest"; // +++ } // etc } return stConfig; } I will also copy stConfig to the request scope. Now, I've got a lot of other stuff there too, and there's lots of ways to implement the storage of environments, e.g. but basically I find the combination of DNS and cgi.server_name particularly well suited to managing environments. Fwiw, I will include ini files in application.cfc based on the environment name that I use for storing environment specific configurations. I find the getProfileSections() very useful for this, as the config files are very easy to work with. I have one common file that is shared between all environments, and then environment specific ones for those settings that need to be tailored to each environment.
