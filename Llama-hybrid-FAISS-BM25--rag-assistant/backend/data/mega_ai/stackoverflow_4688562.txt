[site]: stackoverflow
[post_id]: 4688562
[parent_id]: 4688479
[tags]: 
Well, it depends with what you mean by "need". If you want to end up with any degree of encapsulation, you shouldn't be exposing public fields. If you want the ability to change the implementation details of how data is stored, or validate any values set on the field, etc - then you need to use properties. The details of the storage are implementation details. They shouldn't affect a caller. If you want to change the names of private variables between versions, that's absolutely fine. If you want to change from storing (say) the start and end points of a view onto a collection to storing the start and count, that's fine - you can do all of that without breaking the public API. Of course there's much more to encapsulation than just using properties instead of public fields, but it's a fundamental starting point IMO. I would strongly urge you to use properties.
