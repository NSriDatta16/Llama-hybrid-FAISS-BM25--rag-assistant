[site]: stackoverflow
[post_id]: 1245229
[parent_id]: 1245173
[tags]: 
Non-real-time solution: If you want to set parameters in a GUI, simulate a model with those parameters, and then display the simulation output in the GUI, there is a good tutorial on blinkdagger.com . One solution they describe is using the SIMSET function to define which workspace the Simulink model interacts with. You should be able to supersede the base workspace so that data is instead sent to and from the workspace of the GUI functions that are calling the Simulink model. Real-time solution As suggested by MikeT , you can use a RuntimeObject . You first have to use the get_param function to get the RuntimeObject from the block: rto = get_param(obj,'RuntimeObject'); Where obj is either a block pathname or a block-object handle. You can get the pathname of the most recently selected block using the GCB function (in which case you can replace obj with gcb ). You can then get the block's output with the following: blockData = rto.OutputPort(1).Data One additional caveat from the documentation: To ensure the Data field contains the correct block output, turn off the Signal storage reuse option (see Signal storage reuse) on the Optimization pane in the Configuration Parameters dialog box. You would likely end up with a loop or a timer routine running in your GUI that would continuously get the output data from the RuntimeObject for as long as the simulation is running. The documentation also states: A run-time object exists only while the model containing the block is running or paused. If the model is stopped, get_param returns an empty handle. When you stop or pause a model, all existing handles for run-time objects become empty. Your loop or timer routine would thus have to keep checking first that the RuntimeObject exists, and either stop (if it doesn't) or get the data from it (if it does). I'm unsure of exactly how to check for existence of a RuntimeObject, but I believe you would either check if the object is empty or if the BlockHandle property of the object is empty: isempty(rto) % Check if the RuntimeObject is empty %OR isempty(rto.BlockHandle) % Check if the BlockHandle property is empty
