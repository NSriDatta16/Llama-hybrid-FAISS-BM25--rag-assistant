[site]: stackoverflow
[post_id]: 1167449
[parent_id]: 1167284
[tags]: 
You can't really change out a class file once it's been loaded, so there's really no way to replace a class at runtime. Note that projects like JavaRebel get around this with some clever use of instrumentation via the javaagent - but even what you can do with that is limited. From the sounds of it you just need to have two parallel implementations in your environment at the same time, and don't need to reload classes at runtime. This can be accomplished pretty easily. Assume your runtime consists of the following files: analyzer.jar - this contains the analyzer / test code from above api.jar - this is the common forward-facing api code, e.g. interfaces api-impl-v1.jar - this is the older version of the implementation api-impl-v2.jar - this is the newer version of the implementation Assume your worker interface code looks like this: package com.example.api; public interface Worker { public Object connectAndDoStuff(); } And that your implementations (both in v1 and v2) look like this: package com.example.impl; import com.example.api.Worker; public class WorkerImpl implements Worker { public Object connectAndDoStuff() { // do stuff - this can be different in v1 and v2 } } Then you can write the analyzer like this: package com.example.analyzer; import com.example.api.Worker; public class Analyzer { // should narrow down exceptions as needed public void analyze() throws Exception { // change these paths as need be File apiImplV1Jar = new File("api-impl-v1.jar"); File apiImplV2Jar = new File("api-impl-v2.jar"); ClassLoader apiImplV1Loader = new URLClassLoader(new URL[] { apiImplV1Jar.toURL() }); ClassLoader apiImplV2Loader = new URLClassLoader(new URL[] { apiImplV2Jar.toURL() }); Worker workerV1 = (Worker) apiImplV1Loader.loadClass("com.example.impl.WorkerImpl") .newInstance(); Worker workerV2 = (Worker) apiImplV2Loader.loadClass("com.example.impl.WorkerImpl"). .newInstance(); Comparator c = new Comparator(workerV1.connectAndDoStuff(), workerV2.connectAndDoStuff()); c.generateReport(); } } To run the analyzer you would then include analyzer.jar and api.jar in the classpath, but leave out the api-impl-v1.jar and api-impl-v2.jar.
