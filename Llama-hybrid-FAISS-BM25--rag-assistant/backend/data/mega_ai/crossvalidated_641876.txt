[site]: crossvalidated
[post_id]: 641876
[parent_id]: 
[tags]: 
How can I determine if a system is equilibrated?

Cross-posted in SCSE and MMSE I am experimenting with a new MCMC protocol and new research. In the context of Monte Carlo simulation, a "state of equilibrium" refers to a condition where the system being simulated has reached a stable configuration or distribution of properties that does not significantly change over time. This state represents a balance or equilibrium between the various forces, interactions, and constraints acting on the system. I wrote the following function to test if a system is equilibrated: import numpy as np def is_equilibrated(data, shave_size=50000): returns = False mid_index = len(data) // 2 first_half = data[:mid_index] second_half = data[mid_index:] decimals = 6 while True: first_auto_corr = np.correlate(first_half, first_half, mode='full') second_auto_corr = np.correlate(second_half, second_half, mode='full') corr1 = np.corrcoef(first_auto_corr, second_auto_corr)[0, 1] print(f"Size {len(first_half)} vs. {len(second_half)}") print(f"corr = {corr1} ") first_half = first_half[shave_size:] second_half = second_half[shave_size:] if corr1 == 1.0: break return returns The function iteratively compares the autocorrelation of two halves of the input data, shortening the dataset at each iteration, until perfect correlation (equilibrium) is achieved between the two halves or until the loop is manually terminated. I wrote this function to check if my simulation data is "matured" enough to analyze, i.e., good enough to computationally extract further information. In other words, it lets me know if I ran the simulation long enough to obtain a useful dataset. The drawback of this algorithm is that it uses autocorrelation computation, which takes a lot of time, irrespective of the programming language used. Can you propose any alternative technique?
