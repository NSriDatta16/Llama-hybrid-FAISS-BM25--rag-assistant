[site]: crossvalidated
[post_id]: 354368
[parent_id]: 
[tags]: 
Create calibration plot with error bars for logistic regression model

I would like to create a calibration plot for a logistic regression model along with 95% confidence intervals for the mean predicted probability in each bin. The plot I'm after along with the code to produce it are below. The particular dataset I'm using is just an example. It is the method that I want to understand. After fitting the logistic regression model each observation has an actual outcome (1 or 0) and a predicted probability (a number between 0 and 1) from the logistic regression model. I binned the observations based on their predicted probability. Any observation with a predicted probability between 0 and 0.1 go in the first bin, observations with a predicted probability in the interval (0.1, 0.2] go in the second bin, ect. Then I calculated the actual proportion of success (1s) and the average predicted probability for observations in each bin. If model calibration is good then these numbers should be similar. I want to calculate 95% confidence intervals for the mean predicted probability in each bin but am not sure I'm doing it correctly. Here is my method: I calculate the confidence intervals using the standard error of each prediction assigned by the model. The standard error of the mean for each bin is just the square root of the sum of the squared standard errors for all the observations in that bin divided by the number of observations in the bin. $$ SE(\overline{y}_i) = \sqrt{\frac{\sum{SE(y)^2}}{n_i}} $$ $i$ is indexing over the bins and the sum is over all observations in each bin. $n_i$ is the number of observations in bin $i$. Am I calculating the confidence intervals correctly? Thanks! library(dplyr) library(tidyr) library(ggplot2) mydata % mutate(predictedprob = plogis(fit), LL = plogis(fit - (1.96 * se.fit)), UL = plogis(fit + (1.96 * se.fit))) %>% mutate(bin = cut(predictedprob, seq(0,1,.1))) df5 % group_by(bin) %>% summarise(n_obs = n(), actual_proportion = mean(admit), mean_fit = mean(fit), se_of_mean_fit = sqrt(sum(se.fit^2)/n())) %>% ungroup() %>% mutate(mean_pp = plogis(mean_fit), mean_pp_lcl = plogis(mean_fit - 1.96*se_of_mean_fit), mean_pp_ucl = plogis(mean_fit + 1.96*se_of_mean_fit)) plot_data % select(bin, actual_proportion, starts_with("mean_pp")) %>% gather("actual_pred", "value", actual_proportion, mean_pp ) %>% mutate(mean_pp_lcl = ifelse(actual_pred == "actual_proportion", NA, mean_pp_lcl)) %>% mutate(mean_pp_ucl = ifelse(actual_pred == "actual_proportion", NA, mean_pp_ucl)) ggplot(plot_data, aes(x = bin, y = value, fill = actual_pred, ymin = mean_pp_lcl, ymax = mean_pp_ucl)) + geom_bar(stat = "identity", position = "dodge", na.rm = T) + geom_errorbar(position = "dodge", color = "grey50")
