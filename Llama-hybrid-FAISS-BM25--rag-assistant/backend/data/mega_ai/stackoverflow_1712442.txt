[site]: stackoverflow
[post_id]: 1712442
[parent_id]: 1712366
[tags]: 
I built a custom Image class for our in-house framework that uses code from Simon Jarvis for the basics of image resizing. You can find the sample code and a tutorial here: http://www.white-hat-web-design.co.uk/articles/php-image-resizing.php Basically the magic for what you want to do comes down to the following methods that I use in our image class (Any class properties are set elsewhere, but you can just hard-code these values if you need to): public function resize($width,$height) { $new_image = imagecreatetruecolor($width, $height); imagecopyresampled($new_image, $this->_image, 0, 0, 0, 0, $width, $height, $this->getWidth(), $this->getHeight()); $this->_image = $new_image; unset($new_image); return $this; } public function resizeToHeight($height) { $ratio = $height / $this->getHeight(); $width = $this->getWidth() * $ratio; $this->resize($width,$height); return $this; } public function resizeToWidth($width) { $ratio = $width / $this->getWidth(); $height = $this->getheight() * $ratio; $this->resize($width,$height); return $this; } public function output() { if($this->_image) { ob_clean(); ob_end_clean(); // Start sending headers header("Pragma: public"); // required header("Expires: 0"); header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); header("Cache-Control: private",false); // required for certain browsers header("Content-Transfer-Encoding: binary"); header("Content-Type: " . $this->_settings['mime']); $function = 'image' . substr($this->_settings['mime'], 6); $function($this->_image); } }
