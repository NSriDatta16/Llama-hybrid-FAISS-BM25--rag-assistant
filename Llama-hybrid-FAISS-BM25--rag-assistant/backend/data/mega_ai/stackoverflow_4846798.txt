[site]: stackoverflow
[post_id]: 4846798
[parent_id]: 
[tags]: 
Why would map be much faster than unordered_map?

I implemented a search caching results that consist of keys of type State (a class with 7 short ints) and values of type Score (a class of 3 doubles.) Using unordered_map was at least 20 times slower than map. Why? Edit: Darn it! My hash function was namespace std { size_t hash ::operator()(State const& s) const { size_t retval = hash ()(s.s[0]); for (int i = 1; i (s.s[i + 1]) (s.s[i])); hash_combine(retval, x); } } } I forgot to return retval , so it was all colliding! I wish unordered_map had a hash_function_quality() function that reports the average number of collisions.
