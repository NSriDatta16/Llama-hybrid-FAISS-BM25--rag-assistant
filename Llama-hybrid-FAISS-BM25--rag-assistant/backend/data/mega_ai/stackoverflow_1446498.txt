[site]: stackoverflow
[post_id]: 1446498
[parent_id]: 581405
[tags]: 
I use delegates to anonymous methods in code because this not require to create methods outside current block of code (everyone knows it). But sometimes there's need to use parametrized delegate to eliminate doubled code and then anonymous methods are useless. I tried solution like this: // somewhere in class body delegate EventHandler d(ComboBox c1, ComboBox c2); // in a method (eg. in contructor) d d1 = delegate(arg1, arg2) // eg. 2 args { return new EventHandler( delegate { // some doing ... } ); }; // And then installation of event handler combo1.SelectionChangeCommitted += d1(combo1, combo2); Problem is to raise this event. When using named methods (eg. using TAB key in VS after typing += which generates named method like eg. combo1_SelectionChangeCommited ), there's always the possibility to run: combo1_SelectionChangeCommited(c1, c2) . To run typed above d1, the one solution I found is Frederik's class EventExtensions . It's good job in my mind. This means, author is on higher level than me in core C# programming. Thus I want to ask him: Frederick, can I use this code officially in my master's thesis I just work on? Announcing author of code fragment course.
