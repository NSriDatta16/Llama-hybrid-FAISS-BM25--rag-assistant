[site]: stackoverflow
[post_id]: 2694841
[parent_id]: 
[tags]: 
What really happens when I use varchar(10) in the sqlite command-line shell?

I'm messing around with SQLite for the first time by working through some of the SQLite documentation. In particular, I'm using Command Line Shell For SQLite and the SoupToNuts SQLite Tutorial on Sourceforge. According to the SQLite datatype documentation , there are only 5 datatypes in SQLite. However, in the two tutorial documents above, I see where the authors use commands such as create table tbl1(one varchar(10), two smallint); create table t1 (t1key INTEGER PRIMARY KEY,data TEXT,num double,timeEnter DATE); which contain datatypes that aren't listed by SQLite, yet these commands work just fine. Additionally, when I ran .dump to see the SQL statements, these datatype specifications are preserved: sqlite> CREATE TABLE Vulnerabilities ( ...> VulnerabilityID unsigned smallint primary key, ...> VulnerabilityName varchar(10), ...> VulnerabilityDescription longtext); sqlite> .dump PRAGMA foreign_keys=OFF; BEGIN TRANSACTION; CREATE TABLE Vulnerabilities ( VulnerabilityID unsigned smallint primary key, VulnerabilityName varchar(10), VulnerabilityDescription longtext); COMMIT; sqlite> So, what gives? Does SQLite keep a reference for any datatype specified in the SQL yet converts it behind the scenes to one of its 5 datatypes? Or is there something else I'm missing?
