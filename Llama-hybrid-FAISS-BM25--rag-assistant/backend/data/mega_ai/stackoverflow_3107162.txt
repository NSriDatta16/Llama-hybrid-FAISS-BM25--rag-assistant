[site]: stackoverflow
[post_id]: 3107162
[parent_id]: 3104493
[tags]: 
In my benchmarks, join is only marginally faster than concatenation with reassignment and only on short lists of strings. Concatenation without reassignment is significantly faster than either. On longer lists, join performs conspicuously worse than concatenation with reassignment, probably because argument passing starts to dominate execution time. 4 strings: Rate .= join . .= 2538071/s -- -4% -18% join 2645503/s 4% -- -15% . 3105590/s 22% 17% -- 1_000 strings: Rate join .= join 152439/s -- -40% .= 253807/s 66% -- So in terms of your question, . beats .= for execution time, though not by enough that it's generally worth worrying about. Readability is almost always more important than performance, and .= is often a more readable form. This is in the general case; as sebthebert's answer demonstrates, . is so much faster than .= in the concatenation-of-constants case that I'd be tempted to treat that as a rule. (The benchmarks, by the way, are basically in the obvious form and I'll prefer not to repeat the code here. The only surprising thing is creating the initial strings from so as to foil constant folding.) D'A
