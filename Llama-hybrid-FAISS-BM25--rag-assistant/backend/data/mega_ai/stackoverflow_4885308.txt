[site]: stackoverflow
[post_id]: 4885308
[parent_id]: 4884800
[tags]: 
I'd be tempted to create a hash from the file name, and use that to ensure load is relatively well balanced to begin with. For a simplified example (in C): hash = 0 for(i = 0; i For something like finding all files in a specific group, ask all servers and combine the replies. For e.g. the first server might return "hello" and "foo", and the second server might return "goodbye" and "bar", so you'd combine these partial lists to get a list of 4 files. Note: I'd assume the application servers cache directory contents to avoid hassling the network storage all the time, so this improves cache efficiency too (as with 10 application servers, each application server only needs to cache 10% of the directory contents data instead of 100% of it). Of course I'd also be tempted to do encryption/decryption on the client so that file data being transferred between the client and the application server (over an untrusted internet?) is encrypted, rather than having "plain text" over the untrusted network and only encrypting data that's transferred between the application server and the network storage (on a trusted network).
