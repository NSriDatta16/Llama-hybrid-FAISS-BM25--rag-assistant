[site]: crossvalidated
[post_id]: 173120
[parent_id]: 173096
[tags]: 
I have tried a similar approach for soccer matches, with moderate success. The input to your network, IMO, should be a vector containing all possible information about the match, if you wanted to predict its outcome, like home team (uniqueID), away team (uID), points or ranking of these teams at the moment of the match, points or mean-points in the last N matches (3, 5, 7, etc), goals scored or mean in the last N matches, and some other probably relevant information. You have to take into account that the more information the algorithm could get about the trends of the teams, the more accuracy you could get from them. It is a particular detail of the software you are using if the teams should be represented by name or uniqueID, depending on the translation between them that the software could do internally. Other approaches relate to model the scored goals for every team, via numeric regression. Using the first approach I can get around 60% to 65% accuracy on the 1,X,2 prediction (home win, tie, away win). One note to take into heavy account is that, due to the nature of the studied domain (chaotic, like weather prediction, economy, etc), it is very possible that a clear and easy win for a big team turns into a defeat, and the opposite too. It is a turbulent domain where classes can not be clearly separated, as I have tried to do via Self-Organizing Maps. In some other domains it's quite easy to project into different regions, but not for sports forecasting. That's what makes betting interesting and risky. Hope to have helped.
