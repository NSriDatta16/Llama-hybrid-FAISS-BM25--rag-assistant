[site]: stackoverflow
[post_id]: 4901060
[parent_id]: 4900302
[tags]: 
Factorize ! It could be like this public void CheckGlobal() { Test(toUOM, keyValuePair.Value.MonthlyInfo, mi => mi.Month1, (mi, val) => mi.Month1 = val); Test(toUOM, keyValuePair.Value.MonthlyInfo, mi => mi.Month2, (mi, val) => mi.Month2 = val); Test(toUOM, keyValuePair.Value.MonthlyInfo, mi => mi.Month3, (mi, val) => mi.Month3 = val); Test(toUOM, keyValuePair.Value.MonthlyInfo, mi => mi.Average, (mi, val) => mi.Average = val); } private void CheckProperty(string toUOM, MonthlyInfoArray monthlyInfoArray, Func getValue, Action setValue) { var fromunit = getValue(monthlyInfoArray[UNIT]); if (unit != "-" && unit != toUOM.ToString()) { string outdata; if (CheckBasic(fromunit, toUOM, getValue(monthlyInfoArray[TOTAL]), out outdata)) { setValue(monthlyInfoArray[TOTAL], outdata); } if (CheckBasic(fromunit, toUOM, getValue(monthlyInfoArray[INCLUDED]), out outdata)) { setValue(monthlyInfoArray[INCLUDED], outdata); } if (CheckBasic(fromunit, toUOM, getValue(monthlyInfoArray[BILLED]), out outdata)) { setValue(monthlyInfoArray[BILLED], outdata); } } } private bool CheckBasic(string formunit, string toUOM, string value, out string sOutdata) { if (value != "-" && !(value.ToString().Equals("0.00"))) { double dOutdata; ConvertDataUnit(value, fromunit, toUOM.ToString(), out dOutdata); sOutdata=dOutdata.ToString("#,###,###.##"); return true; } else { return false; } } You will gain time, and application size ;)
