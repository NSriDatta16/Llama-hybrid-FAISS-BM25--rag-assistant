[site]: stackoverflow
[post_id]: 341235
[parent_id]: 339202
[tags]: 
Usually, the standard conventions are thus: like @grepsedawk said, you'll want to define a constant that contains the root of your project folder and if you can the root of your includes folder: define('APP_ROOT', dirname(__FILE__)); define('INCLUDE_ROOT', APP_ROOT . "/includes"); Note: the constant name needs to be a string! Also, you'll notice I'm using dirname(__FILE__); . If you place your constants definition file in a subdirectory, you can do a dirname(dirname(__FILE__)); , which is the equivalent of a ../ . Now some other caveats. While PATH_SEPARATOR is a cool constant, it is not needed. Windows accepts / or \ in path names, and since Linux only users / as a path separator, go ahead and always use a / instead of mucking up your code with repeated references to PATH_SEPARATOR . Now that you have your root constants defined, what you'll do when you need a configuration file included is a simple: include INCLUDE_ROOT . '/path/to/some/file.php'; You'll probably want your constant definitions (the define(...) 's above) in a bootstrap script in your root directory: www_root/ index.php bootstrap.php The bootstrap will contain the defines (or an include of the constants file), as well as an include of any files that will be required by EVERY page. And finally the last standard convention you may not use, but if you start doing object oriented programming, the most common method (the PEAR standard) is to name your classes by using an _ to separate namespaces: class GlobalNamespace_Namespace_Class //... And then organizing your file structure mapping name spaces to subdirectories (literally replacing all _'s with /'s): include_dir/ GlobalNamespace/ Namespace/ Class.php And using __autoload() functions to load your classes, but that's another question.
