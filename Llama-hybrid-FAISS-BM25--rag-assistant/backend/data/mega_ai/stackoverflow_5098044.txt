[site]: stackoverflow
[post_id]: 5098044
[parent_id]: 5097561
[tags]: 
Keep in mind elisp isn't scheme, or even common lisp. The syntax and semantics are different. For example, defun requires a parameters list surrounded by parentheses. Also, currying isn't really possible in elisp. Fortunately, elisp has builtins for most of what you want to do. For string-prefix you can use the string-prefix-p builtin. For filter , you can use remove-if-not , or remove-if for the inverse. For the currying you can use the apply-partially builtin function. To get a function that matches strings with the prefix "*shell*" , try something like this: (apply-partially 'string-prefix-p "*shell*") You can use it like this: (mapcar (apply-partially 'string-prefix-p "*shell*") '("*shell*" "foo" "*shell* ")) ; results in (t nil t) (require 'cl) ; for remove-if (remove-if (apply-partially 'string-prefix-p "*shell*") '("*shell*" "foo" "*shell* ")) ; results in ("foo")
