[site]: stackoverflow
[post_id]: 3130249
[parent_id]: 3130104
[tags]: 
I say focus on the topics you're having problems getting your head around. Pointers are for the most part the same in C and C++, so pick whatever resource will help you the most. My girlfriend had trouble in pointers when starting out in C++, and she recommends a book called Understanding Pointers in C . What's to get about pointers that's specific to "thinking in C++"? Pointers can be set to NULL (i.e. 0). This can be fabulously useful to model situations where you might have a value. Pointers can be repointed to new objects – as opposed to, say, references, which only get initialized once and cannot be repointed after initialization. Pointers can be implicitly upcast (from derived classes to base classes). Pointers can be explicitly downcast from base classes to derived classes. You can do this with static_cast if you happen to know what the derived class really is! People generally do this with dynamic_cast for the extra runtime sanity check. Pointers can be cast to and from void* if you want to pass a pointer to someone but you don't want them knowing the kind of object that you're pointing to. In other words, pointers can be made opaque. Pointers and arrays are nearly equivalent. Here are some things related to pointers that are unique to C++ vs. C: C++ has the concept of references, which can be used in many of the situations pointers are used in, but are much more difficult to screw up (in terms of dereferencing an invalid address) than pointers. C++ has the concept of pointers to member functions that are a bit different from pointers to functions , which C also has. In C++, you can define your own objects which behave like pointers – i.e. that you can dereference using the * unary operator. C++ libraries use this feature to implement smart pointers , which are a whole category of objects that behave like pointers but which also have some layer of access or ownership management built into them.
