[site]: stackoverflow
[post_id]: 4869241
[parent_id]: 
[tags]: 
I'm building a large scale AJAX app, am I doing this right?

I started building this large scale app, but i want to make sure I'm doing it right and if not, what you would change before I got too deep into it. In short, it's a council agenda app. They can create agendas online via an AJAX app and publish, print, etc. My directory structure is: /css , /images , /js , /templates , and of course, the index.html file. /css contains whatever jQuery plugin CSS, resets.css and main.css . /js contains: app.js , ui.js , functions.js , keyboard-shortcuts.js , mouse-events.js , api-wrapper.js and whatever plugins and jQuery. keyboard-shortcuts.js contains a bunch of, well, keyboard shortcuts like copy, paste, app navigation, etc. This is the same for mouse-events.js . Contains events like drag&drop, sorting, right click menus, etc. ui.js has stuff to render the UI. For example, custom scrollbars, action menu (the File, Edit, etc menu), and re-rendering of UI on resizing, etc. app.js is the beef of it. It has my personal API for interacting with the app. The code so far is: var app = function(){ var _settings = { templatePath: 'templates/' } var api = { /** * resetUI Re-renders the UI. Use in resizing, click, and load events for example. * @returns {object} It re-renders the UI and returns the app() object for chaining */ resetUI: function(){ $('#sidebar,#editor,#preview').css({height:$(window).height()-$('header').outerHeight()-$('footer').outerHeight()+'px'}); $('#preview').jScrollPane(); return this; }, /** * actionMenu opens and closes the action menu at the top of the UI * @param action {string} Can be "open" or "close" and does what it sounds like. If "open" see "item" param * @param item {object} Is only needed for the "open" action. It gives a reference of what item is clicked on * @returns {object} Returns the app() object for chaining. */ actionMenu: function(action,item){ if(action == 'open'){ $('body').bind('click.contextMenus',function() { app().actionMenu('close') }); $(item).addClass('active').find('ol').css({display:'block',top:$(item).outerHeight()+'px'}); } else if(action == 'close'){ $('#menu .active').removeClass('active'); $('#menu > ol > li ol').css({display:'none'}); $('body').unbind('click.contextMenus'); } return this; }, /** * modal() simply takes care of the modals. Lots of params also make it easy. */ modal: function(options){ var defaults = { title: 'Message', content:'', animationSpeed:150, beforeLoad:function(){}, onLoad:function(){}, afterLoad:function(){}, beforeClose:function(){}, onClose:function(){}, afterClose:function(){} } var settings = $.extend({},defaults,options); var modalWrapper = $('#modal-wrapper'); if(typeof options == 'string'){ if(options == 'close'){ $('#modal-buttons [href*=close]').unbind('click.modalClose'); settings.beforeClose.call(this,modalWrapper) modalWrapper.fadeOut(animationSpeed); } } else{ settings.beforeLoad(); $.get(_settings.templatePath+'modal.html',function(html){ var newHTML = $.template(html,{"title":settings.title,"content":settings.content}); $('body').prepend(newHTML).find('#modal-wrapper').css({ left:($(window).width()/2-modalWrapper.outerWidth()/2)+'px', top:($(window).height()/2-modalWrapper.outerHeight()/2)+'px' }).fadeIn(settings.animationSpeed,function(){ settings.afterLoad.call(this,modalWrapper); }); settings.onLoad.call(this,modalWrapper); $('#modal-buttons [href*=close]').bind('click.modalClose',function(){app().modal('close')}); }); } } } return api; } So you can use it like app().modal({title:'Hello World'}) or app().actionMenu('open',this).resetUI() . Etc and more as the app is built out. The functions.js file is simply misc. functions/tasks that don't fall into the other places, such as $.template() which parses my templates (see next paragraph). Lastly for the /js , the api-wrapper.js is a wrapper for make working with the internal API (which is built with CF) easier. It's not the most user friendly API, so I figured for my own sanity and future devs it'd be easier to make it more simple. You get functionality like api().post('agenda'); or api().remove('agenda',124); Also, the last directory, /templates contains .html templates such modal.html . Used for HTML that is taken in chunks that will have just some of the code modified. For example, modal.html looks like (so far): (X) {{title}} {{content}} So, am i on the right path? It's a completely front end app on my end. I just have a CF & M$ SQL DB that i interact with, with an API a backend dev built. Feedback very much appreciated.
