[site]: stackoverflow
[post_id]: 2179266
[parent_id]: 2128708
[tags]: 
Consider the Common Lisp function 'mapcar'. It takes a function and some lists as arguments, and calls the function with arguments pulled from the same position in each list. Do standard libraries typically have a similar function that takes a single list, where each element of the list is a list of arguments for the function? Well, Haskell defines a series of zipWithN -functions which have similar effects to mapcar for constant argument counts. zipWith (\a b -> a + b) [1, 2, 3] [1, 2, 3] => [2, 4, 6] zipWith3 (\a b c -> a + b + c) [1, 2, 3] [1, 2, 3] [4, 5, 6] => [6, 9, 12] Generalizing this concept for a list of lists will result in this (naively implemented) function zipWithMany zipWithMany :: ([a] -> b) -> [[a]] -> [b] zipWithMany f lists | any null lists = [] | otherwise = (f $ map head lists) : zipWithMany f (map tail lists) Example: zipWithMany sum [[1, 2, 3], [1, 2, 3], [1, 2]] => [3, 6]
