[site]: crossvalidated
[post_id]: 205244
[parent_id]: 205220
[tags]: 
A transition matrix determines the movement of a Markov chain when the space over which the chain is defined (the state space) is finite or countable. If the Markov chain is at state $x$, element $(x,y)$ in the transition matrix is the probability of moving to $y$. For example, consider a Markov chain that has only two possible states, $\{0, 1\}$. Then the transition matrix be $P(x, y)$, $$P(x,y) = \left[\begin{array}{cc} 1/2 & 1/2\\ 1/3 & 2/3 \end{array}\right], $$ determines how the Markov chain moves. For example, $P(x=1, y=1) = Pr(y = 1|x = 1) = 2/3$. I am a little unfamiliar with using transition matrixes, but I know you can use R package markovchain to deal with such Markov chains. Read the vignette here for help. My explanation below should answer your second question. Consider the case where the Markov chain can move to infinite states. For example when the state space is $\mathbb{R} = (-\infty, \infty)$ or even $(0,1)$. It is then impossible to write down a transition matrix, since the number of possible states are uncountably infinite. In addition, the probably of going from one state to any other state is exactly 0, due to the infinite size of the state space. Such a space for a Markov chain is called general state space . The transition of the Markov chain over such a state space is instead defined with a Markov transition kernel $P(x, A)$, where $x$ is an element, and $A$ is a measurable set in the state space. You can find some theoretical references for general state space Markov chains here: http://projecteuclid.org/euclid.ps/1099928648 http://www.stat.umn.edu/geyer/8112/notes/markov.pdf https://perso.univ-rennes1.fr/dimitri.petritis/ps/markov.pdf For MCMC, if you are in a general state space, you don't need to necessarily understand what $P(x,A)$ exactly looks like as long as you have an algorithm that tells you exactly how the Markov chain moves from one step to the other. One of the most common MCMC techniques is the Metropolis-Hastings algorithm.
