[site]: stackoverflow
[post_id]: 3248357
[parent_id]: 3247280
[tags]: 
Here are a few of the resources that I've found useful after "getting the hang of" monads: As SuperBloup noted, Brent Yorgey's Typeclassopedia is indispensable (and it does in fact cover arrows). There's a ton of great stuff in Real World Haskell that could be considered "after monads": applicative parsing, monad transformers, and STM, for example. John Hughes's "Generalizing Monads to Arrows" is a great resource that taught me as much about monads as it did about arrows (even though I thought that I already understood monads when I read it). The "Yampa Arcade" paper is a good introduction to Functional Reactive Programming. On type families: I've found working with them easier than reading about them. The vector-space package is one place to start, or you could look at the code from Oleg Kiselyov and Ken Shan's course on Haskell and natural language semantics . Pick a couple of chapters of Chris Okasaki's Purely Functional Data Structures and work through them in detail. Raymond Smullyan's To Mock a Mockingbird is a fantastically accessible introduction to combinatory logic that will change the way you write Haskell. Read GÃ©rard Huet's Functional Pearl on zippers . The code is OCaml, but it's useful (and not too difficult) to be able to translate OCaml to Haskell in your head when working through papers like this. Most importantly, dig into the code of any Hackage libraries you find yourself using. If they're doing something with syntax or idioms or extensions that you don't understand, look it up.
