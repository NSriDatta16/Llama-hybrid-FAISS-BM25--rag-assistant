[site]: crossvalidated
[post_id]: 470709
[parent_id]: 404996
[tags]: 
Adding to the previous answer by Stephan Kolassa: we're developing a Python toolbox for forecasting and have implemented a "na√Øve forecaster" class for that purpose. So with sktime , you could for example run: import numpy as np from sktime.datasets import load_airline from sktime.forecasting.model_selection import temporal_train_test_split from sktime.performance_metrics.forecasting import smape_loss from sktime.forecasting.naive import NaiveForecaster y = load_airline() # time series data y_train, y_test = temporal_train_test_split(y) fh = np.arange(1, len(y_test) + 1) # forecasting horizon forecaster = NaiveForecaster(strategy="last") # random walk forecaster.fit(y_train) y_pred = forecaster.predict(fh) print(smape_loss(y_test, y_pred))
