[site]: stackoverflow
[post_id]: 4466382
[parent_id]: 4407974
[tags]: 
Honestly, GridViews aren't going to provide you with huge performance gains over the other table-related ASP.NET controls. If you write a hierarchical object as follows: public class Employee { [Constructors go here] public int EmployeeID { get; private set; } public string EmployeeName { get; private set; } public List Children { get; private set; } // Or Collection, Array, etc. } You're still going to have to listen for the RowDataBound event, cast your row's DataItem to your child class, and then programatically assign its properties to the GridViewRow. On top of that, you'll have the pleasure of creating a TemplateField in which you close the current and tags (or a or tag, if you're feeling marginally less masochistic), and then embed another GridView inside the table your GridView has already generated. Note that we haven't gotten to the point where you insert, delete, and update. Honestly, if you have the time, try using AJAX (the real stuff, not the AutoPostBack junk). ASP.NET WebMethods can return HTML from ASP.NET controls by calling .RenderControl() , and unless you absolutely need to load the entire grid and all its children in one fell swoop and display all of it to your user, it'll more than likely get you a shorter page load time, and decrease the load on your webserver. If you combine this with jQuery, calling the ASP.NET WebMethods is easy. As someone who's done this both ways, I'd argue that the jQuery/AJAX method is actually easier than writing some honking LINQ statement (or ADO.NET query), building a gigantic business object, and trying to manage all of it in one page load. On the other hand, if you're bound and determined to use ASP.NET for this, I'd highly suggest that you read through the MSDN articles on the RowEditing event. It details some of the finer points to correctly setting and getting the EditIndex, and breaks down its events into tiny functions, which are an absolute necessity for something like this. In addition to what you see there, I'd suggest that you store your collection of business objects in the session and modify them on any row edit/create/delete event, then re-bind your GridView. Using this method, your users would ideally have to click a submit button to actually save any changes. This allows you (and them) to avoid a lot heartache when someone accidentally deletes an item, or updates it with an invalid value.
