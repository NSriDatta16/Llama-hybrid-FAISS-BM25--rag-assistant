[site]: stackoverflow
[post_id]: 857186
[parent_id]: 857116
[tags]: 
The reason for this is that the binding system in WPF is "intelligent" and when you change the value in the TextBox it assumes that the PropertyChanged event will fire for that property and ignores it. You can force the TextBox to refresh its bindings by calling: textBox.GetBindingExpression(TextBox.TextProperty).UpdateTarget(); but the difficulty is finding a good place to hook this in. Obviously your data object can't do it since it has no reference to the TextBox instance. You could do it in the window that holds the TextBox by linking it to the PropertyChanged event handler of the data object, but that doesn't feel very clean. I'll edit this response if I think of a better solution, but at least this explains the reason that the binding isn't working. Aha! Changing the binding to IsAsync=true: Appears to alter the behaviour so that it does pay attention to the PropertyChanged event when it's fired by the setter. As an addendum (32 months later) this behaviour has been changed in .NET 4 and you won't need the IsAsync anymore.
