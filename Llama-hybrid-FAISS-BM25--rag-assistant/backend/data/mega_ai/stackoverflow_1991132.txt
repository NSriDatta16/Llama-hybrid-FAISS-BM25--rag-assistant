[site]: stackoverflow
[post_id]: 1991132
[parent_id]: 1990210
[tags]: 
Some points to think about. When you initialize your Dictionary , pass in the max number of items you need. This will make it allocate enough buckets at the startup. Default is to initialize with 0 buckets, which evaluates to 3(prime). Once you add more items, the dictionary must reinitialize and copy all items to a new larger storage. If you program never idles, then the GC will not collect the old Dictionaries. You could save space by encoding your strings. Strings will use two bytes per character in memory. With some helper functions you could have your class like this: class TreeNode { protected byte[] word; protected Dictionary children; public string Word { get { return Encoding.UTF8.GetString(word); } set { word = Encoding.UTF8.GetBytes(value); } } public TreeNode GetChildByKey( string key ) { TreeNode node; if(children.TryGetValue( Encoding.UTF8.GetBytes(key), out node )) { return node; } return null; } } [Edit] And I forgot that you also need a new comparer for the byte[] key. var children = new Dictonary (new ByteArrayComparer); public class ByteArrayComparer : IEqualityComparer { public bool Equals(byte[] x, byte[] y) { if (x.Length != y.Length) return false; for (int i = 0; i
