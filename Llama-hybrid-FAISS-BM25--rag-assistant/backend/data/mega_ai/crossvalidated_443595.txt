[site]: crossvalidated
[post_id]: 443595
[parent_id]: 
[tags]: 
How does Keras work with probabilities and Sigmoid function?

I am trying to clasify a text by the main sentiment, positive or negative, with Keras. However, even though the code works, i don't completely understand two things. 1.How does the Dense layer with Sigmoid function work in order to clasify the text, considering that from what i understood, the "sigmoid" function returns a number between 0 and 1? Does Keras by default consider 0 negative and 1 positive? 2.When using binary_crossentropy, what difference are we exactly calculating? I know that the differece is between the ground truth and our prediction. But which is which? This is my code: train_validation_split = tfds.Split.TRAIN.subsplit([6, 4]) (train_data, validation_data), test_data = tfds.load( name="imdb_reviews", split=(train_validation_split, tfds.Split.TEST), as_supervised=True) train_examples_batch, train_labels_batch = next(iter(train_data.batch(7))) print(train_examples_batch) print(train_labels_batch) embedding = "https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1" hub_layer = hub.KerasLayer(embedding, input_shape=[], dtype=tf.string, trainable=True) model = tf.keras.Sequential() model.add(hub_layer) model.add(tf.keras.layers.Dense(20, activation='relu')) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) model.summary() model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) model.fit(train_data.shuffle(10000).batch(512), epochs=25, validation_data=validation_data.batch(512), verbose=1) results = model.evaluate(test_data.batch(512), verbose=2) for name, value in zip(model.metrics_names, results): print("%s: %.3f" % (name, value)) Thank you so much!
