[site]: stackoverflow
[post_id]: 3314699
[parent_id]: 3301187
[tags]: 
Here's how I would simulate creating and checking spelling errors: Sub GetSpellingErrors() ''# Turn off auto-spellchecking Application.Options.CheckSpellingAsYouType = False ''# Set document Dim d As Document Set d = ActiveDocument ''# Insert misspelled text d.Range.Text = "I wantedd to beet hym uup to rite some rongs." ''# Get spelling errors Dim spellErrs As ProofreadingErrors Set spellErrs = d.SpellingErrors ''# Dump spelling errors to Immediate window For spellErr = 1 To spellErrs.Count Debug.Print spellErrs(spellErr).Text Next ''# Turn back auto-spellchecking Application.Options.CheckSpellingAsYouType = True End Sub Testing this on my side runs extremely fast, both in Word 2003 and Word 2010. Note that this will give you six spelling errors, not four. Although "beet" and "rite" are words in English, they are considered "misspelled" in the context of this sentence. Notice the Application.Options.CheckSpellingAsYouType = False . This turns off automatic spelling error detection (red squigglies). It is an application-wide setting - not just for a single document - so best practice would be to turn it back on if that is what the end-user is expecting in Word as I've done at the end. Now if detection is on in Word 2007/2010 (this doesn't work for 2003 and earlier), you can simply read the misspelled words in the XML (WordprocessingML). This solution is more complicated to set up and manage, and should really only be used if you're not using VBA to program but rather Open XML. A simple query with Linq-to-XML would suffice to get an IEnumerable of all the misspelled words. You would dump all the .Value of the XML between each w:type="spellStart" and w:type="spellEnd" attributes of the element. The document produced above has this paragraph in WordprocessingML: I wa ntedd to b eet hym uup to rite some rongs .
