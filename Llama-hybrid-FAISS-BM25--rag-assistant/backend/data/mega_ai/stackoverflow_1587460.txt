[site]: stackoverflow
[post_id]: 1587460
[parent_id]: 1587306
[tags]: 
For this caching, Hibernate splits the problem in two levels: The list of ids that correspond to the query : this result is subject to change in many ways. For example, if any of the tables used by the query is changed, the result could be changed. Whether or not it is effectively changed would be difficult to compute and maintain up to date, so it is inefficient in most cases. So Hibernate chooses not to cache the ids that correspond to a query . Once a list of ids corresponding to a query is known, there is also the need for all data corresponding to the entities returned, plus all entities (or components) that are fetched. Here we suppose that you decided that these entities are constant-enough and read enough that caching them is advisable. This data retrieval benefits fully from the regular second-level Hibernate cache . For caching efficiency and code simplicity, I split such results I want to cache in two levels : a query returning only the ids (plus possibly entities fetched that were not chosen for the second-level Hibernate cache) other data fetched by id, to benefit from the second-level cache
