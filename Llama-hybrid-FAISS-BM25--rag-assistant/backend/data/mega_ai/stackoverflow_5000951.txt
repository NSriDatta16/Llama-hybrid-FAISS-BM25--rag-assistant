[site]: stackoverflow
[post_id]: 5000951
[parent_id]: 4995916
[tags]: 
Will it be efficient? It depends on the service implementation, on the maximum number of requests it is able to manage within a specific time-frame. Efficiency is a relative measure: let's assume your service is able to process 20 messages/sec, if your requirement is to be able to process 10 messages/sec, then your service is efficient. But if the requirement is 30, then it is not. Will it scale? Once again, it is not related to hosting. Are your services stateless? if not then, they probably won't scale much since load balancing is not possible. Will it be manageable ? Probably not: - you need to have a user logged on the server to run the app - it does not auto-start with the server - it cannot auto-restart on failure - it does not create instances of the service pro-actively - it does not provide (without custom code) a way to check the service health Single instance ? Multiple threads ? If your service does not maintain state between calls per client, then configure it as "one instance per call and no multithreading" -> No concurrency, high throughput If your service does maintain state, then configure it as "one instance per session and multithreading" to allow a client to perform concurrent calls. Be careful about concurrency issues and protect your resources. If your service does not maintain state per client but keeps some global data stored for all calls, consider the "single instance per service and multithreading". Keep in mind the possible concurrency issues. In that you might as well use "one instance per call" and keep the global storage out the service.
