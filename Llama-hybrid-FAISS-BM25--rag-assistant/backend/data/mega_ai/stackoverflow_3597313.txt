[site]: stackoverflow
[post_id]: 3597313
[parent_id]: 3597036
[tags]: 
There are a few questions in there so I will do my best at covering them all. I worked on a project that had WPF, MVVM, and Prism along side other frameworks. The best advice is to understand the power and functionality of each before glueing it all together. You don't have to use all the features of Prism for it to be useful in this situation. For Prism you can use... Shell and bootstrapper to initialise the application and load modules from other assemblies. Create and configure Unity for Dependency Injection. You can use other DI Containers. Here you can add global services each module will use. Use of EventAggregator to notify differnent parts of the application, usually across modules and views Regions for naming areas on the UI so modules can add a view to a particular location. The above 4 don't all have to be used but can easily be integrated in a MVVM /WPF application. For example, would my "toolbar" be a shell that contains regions that each widget would populate? Here you can have a region you create (you can derive from Region) that will manage the buttons on the toolbar. (I have used a region with regards to a Ribbon). A service can be exposed via an interface that each module can supply the command/image (what ever you have) that when it is clicked will create a ViewModel. You can do this inside the module's Initialisation. Would each new window that is displayed when a widget is clicked also be its own shell with its own region setup? If each button opens a brand new window I would suggest introducing a common controller class that will create a generic use window and attach a view model that your module creates. No real need to use regions in this case unless you are gluing different views to a application window that stays open longer than the life of the view itself. The window in basic form can simply be this... Where within your controller it can do this... public void DisplayView(ViewModel vm) { var window = new MyWindow { DataContext = vm }; window.Show(); } The controller can be used within your module directly of wrapped within a service... although for testabilty a service and interface would be best. Make sure you have merged your module resources with the Applicaiton.Resources and use DataTemplate 's to link your view to the view model. My question is where will the mouse click/move events, that are specific to the chart in that view, be written? Don't be afraid of code behind but you can in this case use EventToCommand attached behaviour that will route to a command on your viewmodel. MVVMLight toolkit has this which you can reuse if you want. DI is very powerful and I encourage using it even without Prism as constructing your view models will be easier. HTH
