[site]: stackoverflow
[post_id]: 3108476
[parent_id]: 3108361
[tags]: 
and I read that using HTTP headers in register_shutdown_function Where did you read that? It's wrong. Anything which happens in register_shutdown_function should not write back to the browser. In most cases the output stream will no longer be available. I'm trying to find a clean to handle fatal errors Then you can't do it with PHP code - fatal means your PHP has died - it can't do anything after the error. Fatal errors are caused by bugs in your code bugs in PHP bugs in the webserver The latter 2 are very uncommon - the first is your responsibility to identify and fix. While as greOire suggests, you should have your own, branded errorDocument page(s) (but do read the note about MSIE) this is not going to help when the error occurs after your PHP code has started executing. And at that point the webserver assumes tat the response code will be 200 OK unless PHP tells it something different. There should never be fatal errors in your code at runtime which cannot be replicated at development time - as long as your testing has full code coverage. But I admit that's not always practical - you need to ensure that your error logging is set up correctly and that you check your logs for fatal errors in PHP. C.
