[site]: stackoverflow
[post_id]: 3247262
[parent_id]: 1539884
[tags]: 
I just wanted to provide one-liner solution for the question (for completeness). In the OP's original question he only asks for index of the maximum and index of the minimum. Let's stick to this question. This is the most interesting question because to find maximum value we can simply use Enumerable.Max LINQ method. The same goes for Min and Average. Let's only provide index of the max, index of min can be retrieved with similar code. int indexOfMax = Enumerable.Range(0, usageHours.Length).Aggregate( (indexOfMax, i) => (usageHours[i] > usageHours[indexOfMax] ? i : indexOfMax) ); Delegate inside of Aggregate's brackets is executed for each index of array. It gets as parameters "index of maximum value so far found", and current index. It returns "index of maximum value so far found". Obviously in each iteration "index of maximum value so far found" will only change to current index if corresponding element of array is greater than previous maximum.
