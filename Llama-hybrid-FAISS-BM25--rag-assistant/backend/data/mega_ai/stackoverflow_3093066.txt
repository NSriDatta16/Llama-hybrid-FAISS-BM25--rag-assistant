[site]: stackoverflow
[post_id]: 3093066
[parent_id]: 3092856
[tags]: 
Here's an interesting solution I came up with: Assume you have numbers 1 to 1000 - and you don't have enough memory. You could put all 1000 numbers into an array, and remove them one by one, but you'll get memory overflow error. You could split the array in two, so you have an array of 1-500 and one empty array You could then check if the number exists in array 1, or doesn't exist in the second array. So assuming you have 1000 numbers, you can get a random number from 1-1000. If its less than 500, check array 1 and remove it if present. If it's NOT in array 2, you can add it. This halves your memory usage. If you propogate this using recursion, you can split your 500 array into a 250 and empty array. Assuming empty arrays use no space, you can decrease your memory usage quite a bit. Searching will be massively faster too, because if you break it down a lot, you generate a number such as 29. It's less than 500, less than 250, less than 125, less than 62, less than 31, greater than 15, so you do those 6 calculations, then check the array containing an average of 16/2 items - 8 in total. I should patent this search, although I bet it already exists!
