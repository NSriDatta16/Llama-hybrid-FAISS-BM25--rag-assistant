[site]: stackoverflow
[post_id]: 3886917
[parent_id]: 3875889
[tags]: 
+1 on the Q and the other A... (restating Igor's very complete answer) A Mocking library is just a tool use within a test/spec - sometimes fulfilling the role of a stub or a mock. Record/replay based mocking can often replace the role of Assert s in your tests. This style has been deemphasized recently in RhinoMocks (I believe 4.0 was going to shunt it off to the side), and has been actively discouraged in Moq for quite some time. I believe this is what has got you asking the question. You should be optimising your tests to: Be readable for you, maintenance programmers, and pretty much anyone that's ever going to have to debug or extract info from your test code Assert as few things as possible Not overlap with other tests Not be brittle - tests shouldn't be breaking for incidental reasons when you change something only tangentially related to your test. In the context of Moqing and mocking, this means veering away from Strict mocks in most cases Do as little work as possible to prove their point Have clear separation of Arrange/Context, Act and Assert sections The final point here is the critical one - you want one bit where you're doing Checks, and it should be the final Assert one. Sometimes this can mean that you can even end up doing a Setup a call in Moq in the Arrange/Context phase and then Verify that it got used in the Assert phase with code that looks like duplication.
