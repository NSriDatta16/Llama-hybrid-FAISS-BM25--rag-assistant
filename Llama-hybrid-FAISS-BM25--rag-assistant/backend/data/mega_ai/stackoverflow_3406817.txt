[site]: stackoverflow
[post_id]: 3406817
[parent_id]: 3406739
[tags]: 
The sorts of issues that get worse with more DLLs are: Build times: the compiler runs once for each DLL, and DLLs must be copied to and from the output directory Load times: each DLL file must be loaded separately by Windows, although DLLs are demand loaded, so you will typically incur cost for only the parts you use Rebasing: the more DLLs you have, the greater the chance that two will collide in virtual memory. This doesn't pose a problem, because Windows can rebase one of them, but the rebasing process takes time, and Windows must load any affected DLL pages from disk in advance. Rebasing doesn't typically affect managed DLLs much. Visual Studio overhead: one DLL = one project = more work for the IDE The advice I follow is to use DLLs to organise your deployment, and namespaces to organise your code. If you find that you always release a given set of DLLs together, you might as well merge them.
