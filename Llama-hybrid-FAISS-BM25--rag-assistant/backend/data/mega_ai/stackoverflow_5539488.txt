[site]: stackoverflow
[post_id]: 5539488
[parent_id]: 1063316
[tags]: 
I know this thread is really old, but as it is searchable from google. I'm writing a TI-83 plus calculator program that addresses similar issues. In my case, I'm trying to actually solve the equation for a specific variable in number, but it may still relate to your problem, although I'm using an array, so it might be easier for me to pick out specific values... It's not quite done, but it does get rid of the vast majority of parentheses with (I think), a somewhat elegant solution. What I do is scan through the equation/function/whatever, keeping track of each opening parenthese "(" until I find a closing parenthese ")", at which point I can be assured that I won't run into any more deeply nested parenthese. y=((3x + (2))) would show the (2) first, and then the (3x + (2)), and then the ((3x + 2))). What it does then is checks the values immediately before and after each parenthese. In the case above, it would return + and ). Each of these is assigned a number value. Between the two of them, the higher is used. If no operators are found (*,/,+,^, or -) I default to a value of 0. Next I scan through the inside of the parentheses. I use a similar numbering system, although in this case I use the lowest value found, not the highest. I default to a value of 5 if nothing is found, as would be in the case above. The idea is that you can assign a number to the importance of the parentheses by subtracting the two values. If you have something like a ^ on the outside of the parentheses (2+3)^5 those parentheses are potentially very important, and would be given a high value, (in my program I use 5 for ^). It is possible however that the inside operators would render the parentheses very unimportant, (2)^5 where nothing is found. In that case the inside would be assigned a value of 5. By subtracting the two values, you can then determine whether or not a set of parentheses is neccessary simply by checking whether the resulting number is greater than 0. In the case of (2+3)^5, a ^ would give a value of 5, and a + would give a value of 1. The resulting number would be 4, which would indicate that the parentheses are in fact needed. In the case of (2)^5 you would have an inner value of 5 and an outer value of 5, resulting in a final value of 0, showing that the parentheses are unimportant, and can be removed. The downside to this is that, (at least on the TI-83) scanning through the equation so many times is ridiculously slow. But if speed isn't an issue... Don't know if that will help at all, I might be completely off topic. Hope you got everything up and working.
