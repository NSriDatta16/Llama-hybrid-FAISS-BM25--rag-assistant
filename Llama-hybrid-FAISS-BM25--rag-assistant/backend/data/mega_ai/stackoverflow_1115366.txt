[site]: stackoverflow
[post_id]: 1115366
[parent_id]: 1115359
[tags]: 
You need to store your drawn items in some data structure and ensure that each item in the structure is painted to the canvas on repaint. Also, you need to add repaint to each of your mouse events. Like this: (this assumes you want to keep ALL rect's) - you can go with a single rect by eliminating the arraylist and replacing with a single rect instance. import java.awt.BorderLayout; import java.awt.Graphics; import java.awt.Rectangle; import java.awt.event.MouseEvent; import java.awt.event.MouseListener; import java.awt.event.MouseMotionListener; import java.util.ArrayList; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.SwingConstants; public class MouseTracker4July extends JFrame implements MouseListener, MouseMotionListener { private static final long serialVersionUID = 1L; private final JLabel mousePosition; int x1, x2, y1, y2; int w, h; private final JLabel recStart; private final JLabel recStop; private final JLabel cords; // set up GUI and register mouse event handlers private final ArrayList rectangles = new ArrayList (); private boolean isNewRect = true; public MouseTracker4July() { super( "Rectangle Drawer" ); this.mousePosition = new JLabel(); this.mousePosition.setHorizontalAlignment( SwingConstants.CENTER ); getContentPane().add( this.mousePosition, BorderLayout.CENTER ); JLabel text1 = new JLabel(); text1.setText( "At the center the mouse pointer's coordinates will be displayed." ); getContentPane().add( text1, BorderLayout.SOUTH ); this.recStart = new JLabel(); getContentPane().add( this.recStart, BorderLayout.WEST ); this.recStop = new JLabel(); getContentPane().add( this.recStop, BorderLayout.EAST ); this.cords = new JLabel(); getContentPane().add( this.cords, BorderLayout.NORTH ); addMouseListener( this ); // listens for own mouse and addMouseMotionListener( this ); // mouse-motion events setSize( 800, 600 ); setVisible( true ); } // MouseListener event handlers // handle event when mouse released immediately after press public void mouseClicked( final MouseEvent event ) { this.mousePosition.setText( "Clicked at [" + event.getX() + ", " + event.getY() + "]" ); repaint(); } // handle event when mouse pressed public void mousePressed( final MouseEvent event ) { this.mousePosition.setText( "Pressed at [" + ( this.x1 = event.getX() ) + ", " + ( this.y1 = event.getY() ) + "]" ); this.recStart.setText( "Start: [" + this.x1 + ", " + this.y1 + "]" ); repaint(); } // handle event when mouse released after dragging public void mouseReleased( final MouseEvent event ) { this.mousePosition.setText( "Released at [" + ( this.x2 = event.getX() ) + ", " + ( this.y2 = event.getY() ) + "]" ); this.recStop.setText( "End: [" + this.x2 + ", " + this.y2 + "]" ); Rectangle rectangle = getRectangleFromPoints(); this.rectangles.add( rectangle ); this.w = this.h = this.x1 = this.y1 = this.x2 = this.y2 = 0; this.isNewRect = true; repaint(); } private Rectangle getRectangleFromPoints() { int width = this.x1 - this.x2; int height = this.y1 - this.y2; Rectangle rectangle = new Rectangle( width
