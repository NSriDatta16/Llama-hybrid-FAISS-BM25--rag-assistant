[site]: stackoverflow
[post_id]: 3242001
[parent_id]: 3229893
[tags]: 
Gallactic Jello is on the right path. The part he left out is overcoming the problem of the generic library knowing about classes in the center library , which I have further addressed. I've created a sample solution with three projects, the full contents of which I'll spare you. Here is the gist. Class Library: Generic lib Contains a Message_Handler , his own IMessage_Creator , definitions of the interfaces, and an IMessage type of his own. Class Library: Center Lib Contains an IMessage_Creator , and his own IMessage type. Application: Application has a SVM ( static void Main() ) containing the following lines of code: Generic_lib.IMessage msg = Generic_lib.Message_Handler.get_message(2); //a Center Message if (msg is Center_lib.Center_Message) { System.Console.WriteLine("got center message"); } You will be amazed how important the if statement is!!! I'll explain later Here's the code in the Type Initializer for Generic_lib.Message_Handler : static Message_Handler() { //here, do the registration. int registered = 0; System.Reflection.Assembly[] assemblies = System.AppDomain.CurrentDomain.GetAssemblies(); foreach (System.Reflection.Assembly asm in assemblies) { System.Type[] types = asm.GetTypes(); foreach (System.Type t in types) { System.Type[] interfaces = t.GetInterfaces(); foreach (System.Type i in interfaces) { if (i == typeof(IMessage_Creator)) { System.Reflection.ConstructorInfo[] constructors = t.GetConstructors(); foreach (System.Reflection.ConstructorInfo ctor in constructors) { if (ctor.GetParameters().Length == 0) { Add_Creator(ctor.Invoke(new object[0]) as IMessage_Creator); registered++; } } } } } } System.Diagnostics.Debug.WriteLine("registered " + registered.ToString() + " message creators."); } Horrific, isn't it? First, we get all the assemblies in the current domain, and here's where the if statement comes in. If there was no reference to the 'Center__lib' anywhere in the program, the array of Assemblies won't contain Center_lib . You need to be sure that your reference to it is good. Creating a method that is never called that references it is not enough, a using statement is not good enough, if (msg is Center_lib.Center_Message) ; is not enough. It has to be a reference that can't be optimized away. The above are all optimized away (even in Debug mode, specifying `don't optimize.' I hope someone can come up with an even more elegant solution, but this will have to do for now. Aaron
