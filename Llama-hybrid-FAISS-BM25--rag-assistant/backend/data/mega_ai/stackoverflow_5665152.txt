[site]: stackoverflow
[post_id]: 5665152
[parent_id]: 
[tags]: 
Does Rails have tags for expiring a cache?

Our app uses Rails.cache in the controller to cache some items outside the scope of the view (like meta tags), then uses fragment_caching on the bulk of the view. The view caches one main model , but we have used data from 5 other models (not connected by an Association) inside that main cache. It's easy to expire the fragment with a sweeper on the main model, but those additional models also change and need to trigger this page to expire. We can't use a regexp route for deleting the cache keys because we have to reference this cache entry by only the main model -- the other models are determined by an expensive query that we perform inside the cache block in the controller. Does Rails 3 have a way to essentially use tags to mark a cache entry, so we can trash it when any of the 6 models on the page change, but we can still find the cache entry from only the main model's key? Here's some dummy code to express the idea: In the controller @cache_key = "/page/#{params[:name]}/#{params[:id]}" unless fragment_exist? ( { :slug => @cache_key }) # run our processes here that will be needed in the view, # then cache the data that is used outside the view Rails.cache.write(@cache_key, { (data goes here) } ) # run our expensive query here: @similar_pages = Page.pricey_query!.limit(5).all else cached = Rails.cache.read(@cache_key) end In the view - cache( {:slug => @cache_key} ) do - @similar_pages.each do |page| = image_tag page.photos.first.image.url -# more pretty stuff here My goal: Me: "Oh, page @cache_key has changed, let's expire it!" Rails: Okay, easy! Me: "One of the similar pages changed their first photo, what do I do?" Rails: Umm... #(*$^*@ .. does ... not ... compute.
