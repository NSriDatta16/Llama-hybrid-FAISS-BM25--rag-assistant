[site]: stackoverflow
[post_id]: 5025669
[parent_id]: 
[tags]: 
Generic parameters for mix-in interfaces

I am experimenting with mixin interfaces that add additional functionality to existing interfaces. E.g. I have an interface Filtering interface Filtering { T filter(Filter f); } I can easily add that to existing interfaces: interface Container extends Filter , E>{ // translated type: Container filter(Filter f); } Now I'd also like to have a transforming behavior, that transforms Container to Container with the syntax Container transform(Transformer transformer) Is there any way I can define this functionality as a Mix-in interface, so that I can transform Container to Container but also SomeOtherContainer to SomeOtherContainer ? interface Transforming { X transform(Transformer transformer); } interface Container extends Transforming , /* and in here? */ >{ } Personally, I don't think it's possible, I think I need to add the transform method to each of the target interfaces, but I haven't quite lost hope yet. Can anybody help? Clarification: The Transformer function converts the individual E elements to X elements. I do not want Transformer to convert from Container to Container , that would be completely useless. This is how I'd like to use it: Container intVersion = // initialize it Container hexVersion = intVersion.transform(new Transformer (){ public String apply(Integer input){ return Integer.toHexString(input); } }); BTW: I know I can do similar stuff in Guava. Let's ignore that fact for this question, this is not so much about the functionality (which I can easily implement), but about generics usage.
