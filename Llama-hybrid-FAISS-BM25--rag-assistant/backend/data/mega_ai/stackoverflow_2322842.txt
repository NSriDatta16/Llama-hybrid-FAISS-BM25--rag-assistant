[site]: stackoverflow
[post_id]: 2322842
[parent_id]: 2317020
[tags]: 
I'd like to ask for your suggestions, opinions and good practices that you use for building applications. Always abstract out the data access implementation from the business layer. Specify the contract using good old C# interface 's; you can then have multiple implementations - any bad technology choices you make are minimized as you can implement using something else. Others can also develop their own implementation if they really want to (the solution is more extensible), and it's easier to test. I like they layering you have - as Zihotki points out you could loose a couple; as long as you have seperate Ui business logic tiers and an abstracted data access I'd be happy. Would you add or remove any of the listed layers? What technologies do you prefer? I can't speak for specifics but it does depend on what you want to do and who's going to be working on the system, for example: is this going to be open source? If your client base includes developers then you need to evaluate what they might want, and balance that with your other needs. I think your list is fine. I wouldn't use NHibernate as I haven'ty had any experience with it - but that's more based on personal history than evidence. If you're considering ORM tools (like NHibernate) I suggest you consider LightSpeed , friends of mine (whom I respect) speak VERY highly of it. So the first question is whether to use stored procedures and triggers or not? I'd very strongly advocate using SP's, particularly in web environments as (done correctly) they offer a better level of protection aganist SQL Injection attacks. Also, just because you're using SP's doesn't mean you have business logic in them. Triggers - what are they doing? Nothing 'business logic' related I hope :) Business objects that build the business model. I'd put all the business rules and validation here. But is this layer needed? Or would you put all the business stuff into layer 3? As you've probably worked out already, I'm a firm believer of putting all the business logic into the business layer, it'll be more readily reusable, and the advantages of consistency should be obvious :)
