[site]: stackoverflow
[post_id]: 4410633
[parent_id]: 4410282
[tags]: 
Of course, the best way to do this would be to handle it gracefully on the server side. That said, you could use the data storage methods in jQuery to store a value to indicate it has already been clicked, and use that to determine if the user has already clicked/pressed the button. The values get stored per selector, so you can set it on anything. $("a").click(function(e) { e.preventDefault(); if (!$(this).data('isClicked')) { var link = $(this); // Your code on successful click // Set the isClicked value and set a timer to reset in 3s link.data('isClicked', true); setTimeout(function() { link.removeData('isClicked') }, 3000); } else { // Anything you want to say 'Bad user!' } }); The benefit is that you're not stopping the user from clicking anything else, as it's a per element solution. In your case, you might want to do the link.removeData in the success function. Example of it working: http://jsfiddle.net/jonathon/ke8Az/ (Note that if you try to click again within the 3s, you get the 'Please wait' but you can still click the rest) Note: This is a client side solution only. And only if they have JavaScript installed. Unless you handle it on the server side, the user can maliciously send multiple requests. This just helps with the 'unwittingly' part.
