[site]: stackoverflow
[post_id]: 4371986
[parent_id]: 
[tags]: 
How to synchronize property updates to a single domain instance?

I am looking for ideas to synchronize updates to a single instance of a persisted object. A simple domain object: public class Employee { long id; String phone; String address; } Suppose two UI instances pull up Employee(1) where id=1. The first client edits the phone property of Employee(1); the second client edits the address property of Employee(1). When they submit their changes, both need to be persisted. A possible solution would be to create an update function for each property: public void updatePhone(Employee employee) { // right now I am synchronizing _employeeUpdateLock // synchronize instance of Employee won't work synchronized( something ) { // update phone } } // a similar function for address This approach unfortunately doesn't scale well. The API needs to constantly aligns itself to the properties. Note that public void update(Employee employee) { ... } won't work because the function can't tell which property the client intends to change, unless a copy of the original object can be pulled up within the update function. Hibernate provides a mechanism to lock a row to the database. This doesn't scale well either. Perhaps the solution depends on the frequency a row's expected to be modified. For low frequency modifications, synchronized and locks are fine. For high frequency modifications, a copy of the row at the time of retrieval can be used to figure out the updated properties. I am hoping to find a better paradigm to solve this problem. Thanks.
