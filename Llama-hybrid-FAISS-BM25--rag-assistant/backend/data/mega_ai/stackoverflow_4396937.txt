[site]: stackoverflow
[post_id]: 4396937
[parent_id]: 4396849
[tags]: 
Javascript assets, by default, tend to block any other parallel downloads from occurring. So, you can imagine if you have plenty of tags in the head, calling on multiple external scripts will block the HTML from loading, thus greeting the user with a blank white screen, because no other content on your page will load until the JS files have completely loaded. In order to combat this issue, many developers have opted to placing JS at the bottom of the HTML page (before the tag). This seems logical because, most of the time JS is not required until the user begins interacting with the site. Placing JS files at the bottom also enables progressive rendering. Alternatively, you can choose to load Javascript files asynchronously. There are plenty of existing methods which this can be accomplished by: XHR Eval var xhrObj = getXHRObject(); xhrObj.onreadystatechange = function() { if ( xhrObj.readyState != 4 ) return; eval(xhrObj.responseText); }; xhrObj.open('GET', 'A.js', true); xhrObj.send(''); Script DOM Element var se = document.createElement('script'); se.src = 'http://anydomain.com/A.js'; document.getElementsByTagName('head') [0].appendChild(se); Meebo Iframed JS var iframe = document.createElement('iframe'); document.body.appendChild(iframe); var doc = iframe.contentWindow.document; doc.open().write(' '); doc.close(); To name a few... Note : Only a maximum of five scripts can be loaded in parallel in current browsers. For IE there is the defer attribute you can use like so: When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no "document.write" in javascript) and thus, the user agent can continue parsing and rendering. Update 2022: all browsers now accept the defer attribute.
