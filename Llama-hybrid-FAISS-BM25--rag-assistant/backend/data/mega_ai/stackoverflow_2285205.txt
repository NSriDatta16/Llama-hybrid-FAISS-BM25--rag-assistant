[site]: stackoverflow
[post_id]: 2285205
[parent_id]: 2122831
[tags]: 
Update : The original answer provided was with a project using MembershipProvider and it's explained in the answer itself. I, the asker, am not using it, so the answer to my problem was slightly different but extracted from this answer. I'm putting my answer at the bottom for anyone that cares and leaving the original verbatim, as it contains a lot of value. Yes, you can use FormsAuthentication for your own strategy. And while the asp.net db structure does not suit you, you may provide a simple implementation of MembershipProvider to allow use of the Membership infrastructure. These two functionalities are not married so you may decide what fits for you. Keeping in mind your question and some of the comments, here is a runnable example of how simple it is to leverage the provider model without being married to the default implementations and db schemas. Using forms auth for your own purposes is simple. You just need to provide authentication and set your own ticket (cookie). Using custom membership is almost as simple. You can implement as little or as much of the provider as you need to support the asp.net infrastructure features that you would like to employ. e.g. in the sample below, I show that in the login process you may simply handle an event on the login control to validate credentials and the set the ticket. Done. But I will also show how leveraging the provider model and implementing a custom membership provider can result in stronger, cleaner code. While we are in the custom membership provider I implement the minimum necessary to support using the Membership subsystem to provide easy access to a user's meta data without the need to write your own infrastructure. Just drop these files into an empty project. web.config Site1.Master Login.aspx /* * If you don't want to use a custom membership provider to authenticate * simply place your logic in the login control's handler and remove the * membership element from config. It would have to take a very very * compelling edge case to motivate me to not use a custom membership provider. * */ //protected void Login1_Authenticate(object sender, AuthenticateEventArgs e) //{ // // perform mindbendingly complex authentication logic // e.Authenticated = Login1.UserName == Login1.Password; //} /* * set your cookie and you are golden */ void Authenticated(object sender, EventArgs e) { // this is an arbitrary data slot you can use for ??? // keep cookie size in mind when using it. string userData = "arbitraryData"; Response.Cookies.Add(TicketHelper.CreateAuthCookie(Login1.UserName, userData, Login1.RememberMeSet /*persistent cookie*/)); } username==password==authenticated. e.g.: uid: me, pwd:me Default.aspx protected void Page_Load(object sender, EventArgs e) { /* * you get this for free from asp.net */ HttpContext page = HttpContext.Current; IIdentity identity = page.User.Identity; string username = identity.Name; bool authenticate = identity.IsAuthenticated; // or use the Request.IsAuthenticated convenience accessor /* * you get this really cheap from forms auth * * cost: validating credentials and setting your own ticket */ // this page is protected by formsauth so the identity will actually // be a FormsIdentity and you can get at the user data. // UserData is an appropriate place to store _small_ amounts of data var fIdent = (FormsIdentity)identity; string userData = fIdent.Ticket.UserData; // so, using only forms auth this is what you have to work with LblAuthenticated.Text = page.User.Identity.IsAuthenticated.ToString(); LblUserId.Text = page.User.Identity.Name; LblUserData.Text = userData; /* * this is an example of using a custom membership provider and subclassing the * MembershipUser class to take advantage of the established mature infrastructure * * this is entirely optional, you can delete the Membership section in web.config * and delete MyMembershipProvider and MyMembershipUser and just use the authentication. * */ // get the custom field string myCustomField = ((MyMembershipUser)Membership.GetUser()).MyCustomField; LblMembership.Text = myCustomField; } Authenticated: UserId: UserData: Membership User Custom Field: CustomAuthClasses.cs using System; using System.Web; using System.Web.Security; namespace CustomAuthRepurposingFormsAuth { public static class TicketHelper { /// /// /// /// /// be mindful of the cookie size or you will be chasing ghosts /// /// public static HttpCookie CreateAuthCookie(string userName, string userData, bool persistent) { DateTime issued = DateTime.Now; // formsAuth does not expose timeout!? have to hack around the // spoiled parts and keep moving.. HttpCookie fooCookie = FormsAuthentication.GetAuthCookie("foo", true); int formsTimeout = Convert.ToInt32((fooCookie.Expires - DateTime.Now).TotalMinutes); DateTime expiration = DateTime.Now.AddMinutes(formsTimeout); string cookiePath = FormsAuthentication.FormsCookiePath; var ticket = new FormsAuthenticationTicket(0, userName, issued, expiration, true, userData, cookiePath); return CreateAuthCookie(ticket, expiration, persistent); } public static HttpCookie CreateAuthCookie(FormsAuthenticationTicket ticket, DateTime expiration, bool persistent) { string creamyFilling = FormsAuthentication.Encrypt(ticket); var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, creamyFilling) { Domain = FormsAuthentication.CookieDomain, Path = FormsAuthentication.FormsCookiePath }; if (persistent) { cookie.Expires = expiration; } return cookie; } } /// /// This is an example of inheriting MembershipUser to /// expose arbitrary data that may be associated with your /// user implementation. /// /// You may repurpose existing fields on the base and add your own. /// Just perform a cast on the MembershipUser returned from your /// MembershipProvider implementation /// public class MyMembershipUser : MembershipUser { public MyMembershipUser(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate) : base( providerName, name, providerUserKey, email, passwordQuestion, comment, isApproved, isLockedOut, creationDate, lastLoginDate, lastActivityDate, lastPasswordChangedDate, lastLockoutDate) { } protected MyMembershipUser() { } // e.g. no desire to use Profile, can just add data // say, from a flat record containing all user data public string MyCustomField { get; set; } } /// /// At the most basic level, implementing a MembershipProvider allows you to /// reuse established framework code. In this case, we just provide services /// for the Login control and user identification via Membership subsystem. /// public class MyMembershipProvider : MembershipProvider { #region Minimum implementation in order to use established authentication and identification infrastructure /// /// You can just do this in the login logic if you do not want /// leverage framework for membership user access /// public override bool ValidateUser(string username, string password) { return username == password; } public override MembershipUser GetUser(string username, bool userIsOnline) { /* * Simulate going to the DB to get the data */ // membership user non nullable fields, repurpose or use // implied null value e.g DateTime.MinValue; var createdDate = new DateTime(2009, 10, 25); var lastLogin = new DateTime(2009, 10, 25); var lastActivity = new DateTime(2009, 10, 25); var lastPasswordChange = new DateTime(2009, 10, 25); var lastLockoutDate = new DateTime(2009, 10, 25); object providerUserKey = 3948; // e.g. user primary key. /* * build your custom user and send it back to asp.net */ // need to use the full constructor to set the username and key var user = new MyMembershipUser(Name, username, providerUserKey, null, null, null, true, false, createdDate, lastLogin, lastActivity, lastPasswordChange, lastLockoutDate) { MyCustomField = "Hey" }; return user; } #endregion #region Optional implementations depending on the framework features you would like to leverage. public override bool EnablePasswordRetrieval { get { throw new NotImplementedException(); } } public override bool EnablePasswordReset { get { throw new NotImplementedException(); } } public override bool RequiresQuestionAndAnswer { get { throw new NotImplementedException(); } } public override string ApplicationName { get { throw new NotImplementedException(); } set { throw new NotImplementedException(); } } public override int MaxInvalidPasswordAttempts { get { throw new NotImplementedException(); } } public override int PasswordAttemptWindow { get { throw new NotImplementedException(); } } public override bool RequiresUniqueEmail { get { throw new NotImplementedException(); } } public override MembershipPasswordFormat PasswordFormat { get { throw new NotImplementedException(); } } public override int MinRequiredPasswordLength { get { throw new NotImplementedException(); } } public override int MinRequiredNonAlphanumericCharacters { get { throw new NotImplementedException(); } } public override string PasswordStrengthRegularExpression { get { throw new NotImplementedException(); } } public override MembershipUser GetUser(object providerUserKey, bool userIsOnline) { throw new NotImplementedException(); } public override MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status) { throw new NotImplementedException(); } public override bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer) { throw new NotImplementedException(); } public override string GetPassword(string username, string answer) { throw new NotImplementedException(); } public override bool ChangePassword(string username, string oldPassword, string newPassword) { throw new NotImplementedException(); } public override string ResetPassword(string username, string answer) { throw new NotImplementedException(); } public override void UpdateUser(MembershipUser user) { throw new NotImplementedException(); } public override bool UnlockUser(string userName) { throw new NotImplementedException(); } public override string GetUserNameByEmail(string email) { throw new NotImplementedException(); } public override bool DeleteUser(string username, bool deleteAllRelatedData) { throw new NotImplementedException(); } public override MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords) { throw new NotImplementedException(); } public override int GetNumberOfUsersOnline() { throw new NotImplementedException(); } public override MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords) { throw new NotImplementedException(); } public override MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords) { throw new NotImplementedException(); } #endregion } } Solution actually used (in as ASP.NET MVC project using OpenID): I have an AccountController which I use to log users in and out and these methods are there. #region Methods to log in a user. /// /// Create the auth cookie in the same way it is created my ASP.NET Membership system, hopefully lasting for more than 20 minutes. /// /// For more information check out http://stackoverflow.com/questions/2122831/is-it-possible-to-use-aspxauth-for-my-own-logging-system /// /// Id of the user that is logged in /// Cookie created to mark the user as authenticated. private static HttpCookie CreateAuthCookie(int userId) { DateTime issued = DateTime.Now; // formsAuth does not expose timeout!? have to hack around the spoiled parts and keep moving.. HttpCookie fooCookie = FormsAuthentication.GetAuthCookie("foo", true); int formsTimeout = Convert.ToInt32((fooCookie.Expires - DateTime.Now).TotalMinutes); DateTime expiration = DateTime.Now.AddMinutes(formsTimeout); var ticket = new FormsAuthenticationTicket(0, userId.ToString(), issued, expiration, true, "", FormsAuthentication.FormsCookiePath); return CreateAuthCookie(ticket, expiration, true); } /// /// Create an auth cookie with the ticket data. /// /// Ticket containing the data to mark a user as authenticated. /// Expriation date for the cookie. /// Whether it's persistent or not. /// Cookie created to mark the user as authenticated. private static HttpCookie CreateAuthCookie(FormsAuthenticationTicket ticket, DateTime expiration, bool persistent) { string encryptedAuthData = FormsAuthentication.Encrypt(ticket); var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedAuthData) { Domain = FormsAuthentication.CookieDomain, Path = FormsAuthentication.FormsCookiePath }; if (persistent) { cookie.Expires = expiration; } return cookie; } /// /// Expire the authentication cookie effectively loging out a user. /// private void ExpireAuthCookie() { var cookie = new HttpCookie(FormsAuthentication.FormsCookieName); cookie.Expires = DateTime.Now.AddDays(-1); Response.Cookies.Add(cookie); } #endregion
