[site]: stackoverflow
[post_id]: 5121120
[parent_id]: 
[tags]: 
UIGraphicsGetImageFromCurrentImageContext memory leak with previews

I'm trying to create previews images of pages in a PDF but I have some problems with the release of memory. I wrote a simple test algorithm that cycles on the problem, the app crashes near the 40th iteration : NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *documentsDirectory = [paths objectAtIndex:0]; NSString *pdfPath = [documentsDirectory stringByAppendingPathComponent:@"myPdf.pdf"]; CFURLRef url = CFURLCreateWithFileSystemPath( NULL, (CFStringRef)pdfPath, kCFURLPOSIXPathStyle, NO ); CGPDFDocumentRef myPdf = CGPDFDocumentCreateWithURL( url ); CFRelease (url); CGPDFPageRef page = CGPDFDocumentGetPage( myPdf, 1 ); int i=0; while(i The above-mentioned line seems to generate a memory leak, however, instruments doesn't show memory problems; Can I escape from this kind of mistake?someone can explain me in which way? Are there other ways to show previews of a pdf? UPDATE I think the problem isn't the release of UIImage created by the method UIGraphicsGetImageFromCurrentImageContext() but the release of UIImageView created with this autorelease image. I have divided the line of code in three steps: UIImage *myImage = UIGraphicsGetImageFromCurrentImageContext(); UIImageView *myImageView = [[UIImageView alloc] init]; [myImageView setImage: myImage]; // Memory Leak The first and second lines doesn't create memory leaks so I think that the method UIGraphicsGetImageFromCurrentImageContext is not the problem. I also tried as follows but the problem persists: UIImageView *myImageView = [[UIImageView alloc] initWithImage:myImage]; I think there is a memory leak in the release of a UIImageView that contains a UIImage with the autorelease property. I tried to write my object UIImageView inheriting a UIView as explained in this thread . This solution works but isn't very elegant, it's a workaround, I would prefer to use the object UIImageView solving the memory problem.
