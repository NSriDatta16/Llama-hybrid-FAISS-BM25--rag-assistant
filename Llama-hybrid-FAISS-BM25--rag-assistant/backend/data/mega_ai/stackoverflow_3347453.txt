[site]: stackoverflow
[post_id]: 3347453
[parent_id]: 2821061
[tags]: 
There is way to do that ;) Thanks to " http://it.toolbox.com/wiki/index.php/Use_curl_from_PHP_-_processing_response_headers ": curl = curl_init(); register_shutdown_function(array($this, 'shutdown')); } /** * Get the real URL for the picture to use after */ public function getRealUrl($photoLink) { curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header); curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, false); curl_setopt($this->curl, CURLOPT_HEADER, false); curl_setopt($this->curl, CURLOPT_USERAGENT, $this->useragent); curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($this->curl, CURLOPT_TIMEOUT, 15); curl_setopt($this->curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1); curl_setopt($this->curl, CURLOPT_URL, $photoLink); //This assumes your code is into a class method, and //uses $this->readHeader as the callback function. curl_setopt($this->curl, CURLOPT_HEADERFUNCTION, array(&$this, 'readHeader')); $response = curl_exec($this->curl); if (!curl_errno($this->curl)) { $info = curl_getinfo($this->curl); var_dump($info); if ($info["http_code"] == 302) { $headers = $this->getHeaders(); if (isset($headers['fileUrl'])) { return $headers['fileUrl']; } } } return false; } /** * Download Facebook user photo * */ public function download($fileName) { curl_setopt($this->curl, CURLOPT_HTTPHEADER, $this->header); curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($this->curl, CURLOPT_HEADER, false); curl_setopt($this->curl, CURLOPT_USERAGENT, $this->useragent); curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($this->curl, CURLOPT_TIMEOUT, 15); curl_setopt($this->curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1); curl_setopt($this->curl, CURLOPT_URL, $fileName); $response = curl_exec($this->curl); $return = false; if (!curl_errno($this->curl)) { $parts = explode('.', $fileName); $ext = array_pop($parts); $return = sfConfig::get('sf_upload_dir') . '/tmp/' . uniqid('fbphoto') . '.' . $ext; file_put_contents($return, $response); } return $return; } /** * cURL callback function for reading and processing headers. * Override this for your needs. * * @param object $ch * @param string $header * @return integer */ private function readHeader($ch, $header) { //Extracting example data: filename from header field Content-Disposition $filename = $this->extractCustomHeader('Location: ', '\n', $header); if ($filename) { $this->response_meta_info['fileUrl'] = trim($filename); } return strlen($header); } private function extractCustomHeader($start, $end, $header) { $pattern = '/'. $start .'(.*?)'. $end .'/'; if (preg_match($pattern, $header, $result)) { return $result[1]; } else { return false; } } public function getHeaders() { return $this->response_meta_info; } /** * Cleanup resources */ public function shutdown() { if($this->curl) { curl_close($this->curl); } } }
