[site]: stackoverflow
[post_id]: 5048570
[parent_id]: 5046436
[tags]: 
Update @Danny Shisler's answer is correct. Leaving this answer since it shows how to do Bindings inside of DataGridColumn which isn't in the Visual Tree and doesn't have a DataContext Here is a blog post that presents a workaround for this issue: http://blogs.infragistics.com/blogs/josh_smith/archive/2008/06/26/data-binding-the-isvisible-property-of-contextualtabgroup.aspx The workaround is to create a DataContextSpy that looks like this DataContextSpy public class DataContextSpy : Freezable // Enable ElementName and DataContext bindings { public DataContextSpy() { // This binding allows the spy to inherit a DataContext. BindingOperations.SetBinding(this, DataContextProperty, new Binding()); } public object DataContext { get { return (object)GetValue(DataContextProperty); } set { SetValue(DataContextProperty, value); } } // Borrow the DataContext dependency property from FrameworkElement. public static readonly DependencyProperty DataContextProperty = FrameworkElement.DataContextProperty.AddOwner(typeof(DataContextSpy)); protected override Freezable CreateInstanceCore() { // We are required to override this abstract method. throw new NotImplementedException(); } } And then you can use an instance of DataContextSpy as the Source for the Bindings in the DataGridColumn s like this
