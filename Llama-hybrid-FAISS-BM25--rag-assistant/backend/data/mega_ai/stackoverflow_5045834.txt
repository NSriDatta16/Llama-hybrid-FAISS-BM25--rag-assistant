[site]: stackoverflow
[post_id]: 5045834
[parent_id]: 5044289
[tags]: 
You can use the signal's autocorrelation, which is the inverse transform of the magnitude squared of the DFT. If you're sampling at 44100 samples/s, then a 82.4 Hz fundamental is about 535 samples, whereas 1479.98 Hz is about 30 samples. Look for the peak positive lag in that range (e.g. from 28 to 560). Make sure your window is at least two periods of the longest fundamental, which would be 1070 samples here. To the next power of two that's a 2048-sample buffer. For better frequency resolution and a less biased estimate, use a longer buffer, but not so long that the signal is no longer approximately stationary. Here's an example in Python: from pylab import * import wave fs = 44100.0 # sample rate K = 3 # number of windows L = 8192 # 1st pass window overlap, 50% M = 16384 # 1st pass window length N = 32768 # 1st pass DFT lenth: acyclic correlation # load a sample of guitar playing an open string 6 # with a fundamental frequency of 82.4 Hz (in theory), # but this sample is actually at about 81.97 Hz g = fromstring(wave.open('dist_gtr_6.wav').readframes(-1), dtype='int16') g = g / float64(max(abs(g))) # normalize to +/- 1.0 mi = len(g) / 4 # start index def welch(x, w, L, N): # Welch's method M = len(w) K = (len(x) - L) / (M - L) Xsq = zeros(N/2+1) # len(N-point rfft) = N/2+1 for k in range(K): m = k * ( M - L) xt = w * x[m:m+M] # use rfft for efficiency (assumes x is real-valued) Xsq = Xsq + abs(rfft(xt, N)) ** 2 Xsq = Xsq / K Wsq = abs(rfft(w, N)) ** 2 bias = irfft(Wsq) # for unbiasing Rxx and Sxx p = dot(x,x) / len(x) # avg power, used as a check return Xsq, bias, p # first pass: acyclic autocorrelation x = g[mi:mi + K*M - (K-1)*L] # len(x) = 32768 w = hamming(M) # hamming[m] = 0.54 - 0.46*cos(2*pi*m/M) # reduces the side lobes in DFT Xsq, bias, p = welch(x, w, L, N) Rxx = irfft(Xsq) # acyclic autocorrelation Rxx = Rxx / bias # unbias (bias is tapered) mp = argmax(Rxx[28:561]) + 28 # index of 1st peak in 28 to 560 # 2nd pass: cyclic autocorrelation N = M = L - (L % mp) # window an integer number of periods # shortened to ~8192 for stationarity x = g[mi:mi+K*M] # data for K windows w = ones(M); L = 0 # rectangular, non-overlaping Xsq, bias, p = welch(x, w, L, N) Rxx = irfft(Xsq) # cyclic autocorrelation Rxx = Rxx / bias # unbias (bias is constant) mp = argmax(Rxx[28:561]) + 28 # index of 1st peak in 28 to 560 Sxx = Xsq / bias[0] Sxx[1:-1] = 2 * Sxx[1:-1] # fold the freq axis Sxx = Sxx / N # normalize S for avg power n0 = N / mp np = argmax(Sxx[n0-2:n0+3]) + n0-2 # bin of the nearest peak power # check print "\nAverage Power" print " p:", p print "Rxx:", Rxx[0] # should equal dot product, p print "Sxx:", sum(Sxx), '\n' # should equal Rxx[0] figure().subplots_adjust(hspace=0.5) subplot2grid((2,1), (0,0)) title('Autocorrelation, R$_{xx}$'); xlabel('Lags') mr = r_[:3 * mp] plot(Rxx[mr]); plot(mp, Rxx[mp], 'ro') xticks(mp/2 * r_[1:6]) grid(); axis('tight'); ylim(1.25*min(Rxx), 1.25*max(Rxx)) subplot2grid((2,1), (1,0)) title('Power Spectral Density, S$_{xx}$'); xlabel('Frequency (Hz)') fr = r_[:5 * np]; f = fs * fr / N; vlines(f, 0, Sxx[fr], colors='b', linewidth=2) xticks((fs * np/N * r_[1:5]).round(3)) grid(); axis('tight'); ylim(0,1.25*max(Sxx[fr])) show() Output: Average Power p: 0.0410611012542 Rxx: 0.0410611012542 Sxx: 0.0410611012542 The peak lag is 538, which is 44100/538 = 81.97 Hz. The first-pass acyclic DFT shows the fundamental at bin 61, which is 82.10 +/- 0.67 Hz. The 2nd pass uses a window length of 538*15 = 8070, so the DFT frequencies include the fundamental period and harmonics of the string. This enables an ubiased cyclic autocorrelation for an improved PSD estimate with less harmonic spreading (i.e. the correlation can wrap around the window periodically). Edit: Updated to use Welch's method to estimate the autocorrelation. Overlapping the windows compensates for the Hamming window. I also calculate the tapered bias of the hamming window to unbias the autocorrelation. Edit: Added a 2nd pass with cyclic correlation to clean up the power spectral density. This pass uses 3 non-overlapping, rectangular windows length 538*15 = 8070 (short enough to be nearly stationary). The bias for cyclic correlation is a constant, instead of the Hamming window's tapered bias.
