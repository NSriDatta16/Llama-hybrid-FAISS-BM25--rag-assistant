[site]: stackoverflow
[post_id]: 12812
[parent_id]: 12516
[tags]: 
This gets into parsing/compiler theory, which is kind of a rabbit hole... The Dragon Book is the standard text for compiler construction, and takes this to extremes. In this particular case, you want to construct a context-free grammar for basic arithmetic, then use that grammar to parse out an abstract syntax tree . You can then iterate over the tree, reducing it from the bottom up (it's at this point you'd apply the polymorphism/function pointers/switch statement to reduce the tree). I've found these notes to be incredibly helpful in compiler and parsing theory.
