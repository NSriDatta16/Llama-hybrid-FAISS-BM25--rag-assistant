[site]: stackoverflow
[post_id]: 2975352
[parent_id]: 2975237
[tags]: 
Many times inherited class can be slower? There's only one way to answer performance questions: try it both ways, and measure the results. Then you'll know. What can be disadvantage of doing it like that? The disadvantage of overly complex object hierarchies are: 1) they are confusing because they represent concepts that are not in the business domain For example, you might want to have a storage system that can store information about employees, computers and conference rooms. So you have classes StorableObject, Employee, Room, Computer, where Employee, Room and Computer inherit from StorableObject. You mean "StorableObject" to represent something about your implementation of your database . Someone naively reading your code would ask "Why is a person a "storable object?" Surely a Computer is a storable object, and a Room is where it is stored. When you mix up the mechanisms of the shared code with the meaning of the "is a kind of" relationship in the business domain, things get confusing. 2) you only get one "inheritance pivot" in C#; it's a single inheritance language. When you make a choice to use inheritance for one thing, that means you've chosen to NOT use inheritance for something else. If you make a base class Vehicle, and derived classes MilitaryVehicle and CivilianVehicle, then you have just chosen to not have a base class Aircraft, because an aircraft can be either civilian or military. You've got to choose your inheritance pivot very carefully; you only have one chance to get it right. The more complicated your code sharing mechanism is, the more likely you are to paint yourself into a corner where you're stuck with a bunch of code shared, but cannot use inheritance to represent concepts that you want to model. There are lots of ways to share code without inheritance. Try to save the inheritance mechanism for things that really need it.
