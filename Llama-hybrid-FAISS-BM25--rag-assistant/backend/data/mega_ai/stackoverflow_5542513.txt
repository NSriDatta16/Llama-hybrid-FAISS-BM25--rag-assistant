[site]: stackoverflow
[post_id]: 5542513
[parent_id]: 
[tags]: 
Using one variable from one class in another

I have just started to learn Java (:)) so sorry if this is blatantly obvious to some of you: I wanted to create a program that i could move one file to another directory (im too lazy for drag and drop), the program works fine and dandy it by itself. but I wanted to add a main menu type screen where I could choose which file directory i would place it in (also works fine and dandy). So my question: How can i use the "source" variable in the Move class? import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.File; import java.io.IOException; import javax.swing.JButton; import javax.swing.JFileChooser; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; public class Browse { public static void main(String arg[])throws IOException{ { JFrame frame1 = new JFrame(); JPanel panel1 = new JPanel(); JButton button1 = new JButton("press"); frame1.add(panel1); frame1.setSize(400, 400); frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame1.setVisible(true); panel1.add(button1); button1.addActionListener(new ActionListener(){ public void actionPerformed(ActionEvent ae){ JFileChooser chooser = new JFileChooser(); chooser.setCurrentDirectory(new java.io.File(".")); chooser.setDialogTitle("choosertitle"); chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); chooser.setAcceptAllFileFilterUsed(false); if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory()); System.out.println("getSelectedFile() : " + chooser.getSelectedFile()); } else { System.out.println("No Selection "); } File source = chooser.getSelectedFile(); }});}} } public class Move { JFileChooser chooser = new JFileChooser(); chooser.setCurrentDirectory(new java.io.File(".")); chooser.setDialogTitle("choosertitle"); chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); chooser.setAcceptAllFileFilterUsed(false); if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) { System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory()); System.out.println("getSelectedFile() : " + chooser.getSelectedFile()); } else { System.out.println("No Selection "); } File source =chooser.getSelectedFile(); BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); if(!source.exists()){ System.out.println("File or directory does not exist."); System.exit(0); } int a = 0; String dest = ("C:/Users/David/Desktop/test"); System.out.println(dest); File destination = new File(dest); int num = 1; if(num == 0 || num==1){ copyDirectory(source, destination); a = 1; } if(a == 1){ System.out.println("File or directory moved successfully."); JFrame frame3 = new JFrame(); JPanel panel2 = new JPanel(new GridBagLayout()); frame3.getContentPane().add(panel2, BorderLayout.NORTH); GridBagConstraints c= new GridBagConstraints(); JLabel moved = new JLabel("Con Gratz map has been moved :) (hopfully)"); c.gridx = 10; c.gridy =10; c.insets = new Insets(10,10,10,10); frame3.add(panel2); frame3.setSize(400, 400); frame3.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame3.setVisible(true); panel2.add(moved); if(!delete(source)){ throw new IOException("Unable to delete original folder"); } } else if(a == 0){ System.exit(0); }} } public static void copyDirectory(File sourceDir, File destDir) throws IOException{ if(!destDir.exists()){ destDir.mkdir(); } File[] children = sourceDir.listFiles(); for(File sourceChild : children){ String name = sourceChild.getName(); File destChild = new File(destDir, name); if(sourceChild.isDirectory()){ copyDirectory(sourceChild, destChild); } else{ copyFile(sourceChild, destChild); } } } public static void copyFile(File source, File dest) throws IOException{ if(!dest.exists()){ dest.createNewFile(); } InputStream in = null; OutputStream out = null; try{ in = new FileInputStream(source); out = new FileOutputStream(dest); byte[] buf = new byte[1024]; int len; while((len = in.read(buf)) > 0){ out.write(buf, 0, len); } } finally{ in.close(); out.close(); } } public static boolean delete(File resource) throws IOException{ if(resource.isDirectory()){ File[] childFiles = resource.listFiles(); for(File child : childFiles){ delete(child); } } return resource.delete(); } } Both classes work separately, i may have deleted a important line... but they do work. thansk for your help:) (also if anybody spots anything here in the code that could be improved, don't be shy:))
