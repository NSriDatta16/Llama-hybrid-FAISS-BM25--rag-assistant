[site]: stackoverflow
[post_id]: 2229191
[parent_id]: 
[tags]: 
Animate like Google Finance charts in Matplotlib?

I just started toying around with Matplotlib's Animation capabilities in order to produce a Google Finance looking chart. I combined two examples I found on the project website ( Draggable rectangle exercise , api example code: date_demo.py ) and tweaked them a bit to come up with the code listed at the bottom. While it doesn't look too bad, I would like the top chart (master) update dynamically as the bottom chart (slave) selection is moved around, and not only when the bottom selection is released. How can I do this? I tried to move the self.rect.figure.canvas.draw() bit to the on_motion method, but it seems to interfere with the blit stuff as the bottom selection won't render properly. So I would assume the solution would be to do the intelligent animation for the bottom chart, i.e., the blit-ing bit, while the top chart is just re-drawn altogether. The issue is that the only way I can redraw anything is through the re-drawing the whole canvas, and this would include the bottom chart. I did find the draw() method for matplotlib.axes , but I can't get it to work. As I said above, preferably I would like to just re-draw the top chart while the bottom one is blit-ed the clever way. Does anyone know how to do this? Here is my code so far. Please excuse the code, it's a bit untidy. import datetime import numpy as np import sys import time import wx import matplotlib from matplotlib.figure import Figure import matplotlib.dates as mdates import matplotlib.ticker as mtickers from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas import matplotlib.patches as mpatches class DraggableRectangle: lock = None def __init__(self, rect, master, xMin, xMax): self.rect = rect self.press = None self.background = None self.xMax = xMax self.xMin = xMin self.master = master def connect(self): self.cidpress = self.rect.figure.canvas.mpl_connect('button_press_event', self.on_press) self.cidrelease = self.rect.figure.canvas.mpl_connect('button_release_event', self.on_release) self.cidmotion = self.rect.figure.canvas.mpl_connect('motion_notify_event', self.on_motion) def on_press(self, event): if event.inaxes != self.rect.axes: return if DraggableRectangle.lock is not None: return contains, attrd = self.rect.contains(event) if not contains: return x0, y0 = self.rect.xy self.press = x0, y0, event.xdata, event.ydata DraggableRectangle.lock = self canvas = self.rect.figure.canvas axes = self.rect.axes self.rect.set_animated(True) canvas.draw() self.background = canvas.copy_from_bbox(self.rect.axes.bbox) axes.draw_artist(self.rect) canvas.blit(axes.bbox) def on_motion(self, event): if DraggableRectangle.lock is not self: return if event.inaxes != self.rect.axes: return x0, y0, xpress, ypress = self.press dx = event.xdata - xpress dy = 0 if x0+dx > self.xMax: self.rect.set_x(self.xMax) elif x0+dx
