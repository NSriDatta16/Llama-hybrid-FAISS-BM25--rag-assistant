[site]: stackoverflow
[post_id]: 3101450
[parent_id]: 
[tags]: 
Help me turn a SUBQUERY into a JOIN

Two tables. emails id (int10) | ownership (int10) messages emailid (int10) indexed | message (mediumtext) Subquery (which is terrible in mysql). SELECT COUNT(*) FROM messages WHERE message LIKE '%word%' AND emailid IN (SELECT id FROM emails WHERE ownership = 32) The usage here is that I run a search on emails (which is obviously simplified in the sample above), that generates a list of say 3,000 email id's. I then want to do a search against messages because i need to do a text match - from only those 3000 emails against the message. The query against messages is expensive (message is not indexed) but this is fine because it would only ever be checking against a few rows. Ideas: i) A join. My attempts at this so far have not worked and have resulted in full table scans of the message table (i.e. the emailid index not used) ii) temporary table. This could work I think. iii) cache ids in client and run 2 queries. This does work. Not elegant. iv) subquery. mySQL subqueries run the 2nd query each time so this does not work. maybe fixed in mysql 6. Ok, here is what I have so far. These are the actual field names (I had simplified a bit in question). The query: SELECT COUNT(*) FROM ticket LEFT JOIN ticket_subject ON (ticket_subject.ticketid = ticket.id) WHERE category IN (1) AND ticket_subject.subject LIKE "%about%" The results: 1 SIMPLE ticket ref PRIMARY,category category 4 const 28874 1 SIMPLE ticket_subject eq_ref PRIMARY PRIMARY 4 deskpro.ticket.id 1 Using where It takes 0.41 seconds and returns a count(*) of 113. Running: SELECT COUNT (*) FROM ticket WHERE category IN (1) Takes 0.01 seconds and finds 33,000 results. Running SELECT COUNT (*) FROM ticket_subject WHERE subject LIKE "%about%" Takes 0.14 seconds and finds 1,300 results. Both the ticket table and ticket_subject table have 300,000 rows. There is an index on ticket_subject.ticketid and ticket.category. I realise now that using the LIKE syntax was a mistake - as it has been a bit of a red herring about FULLTEXT. THis is not the issue. The issue is: 1) Table A - very fast query, run on index. 0.001 seconds 2) Table B - moderate to slow query, no index - does full table scan. 0.1 seconds. Both of these results are fine. The problem is I have to JOIN them and the search takes 0.3 seconds; which to me makes no sense because the slow aspects of the combined query on Table B should be quicker because we are now only searching over a fraction of that table - ie it should not be doing a full table scan because the field that is being JOINED on is indexed.
