[site]: stackoverflow
[post_id]: 972926
[parent_id]: 956542
[tags]: 
Python: approximation in O (1) ? Using python decimal implementation to calculate an approximation. Since it does not use any external loop, and the numbers are limited in size, I think it will execute in O (1). from decimal import Decimal ln = lambda z: z.ln() exp = lambda z: z.exp() sinh = lambda z: (exp(z) - exp(-z))/2 sqrt = lambda z: z.sqrt() pi = Decimal('3.1415926535897932384626433832795') e = Decimal('2.7182818284590452353602874713527') # Stirling's approximation of the gamma-funciton. # Simplification by Robert H. Windschitl. # Source: http://en.wikipedia.org/wiki/Stirling%27s_approximation gamma = lambda z: sqrt(2*pi/z) * (z/e*sqrt(z*sinh(1/z)+1/(810*z**6)))**z def choose(n, k): n = Decimal(str(n)) k = Decimal(str(k)) return gamma(n+1)/gamma(k+1)/gamma(n-k+1) Example: >>> choose(20000000,15000000) Decimal('2.087655025913799812289651991E+4884377') >>> choose(130202807,65101404) Decimal('1.867575060806365854276707374E+39194946') Any higher, and it will overflow. The exponent seems to be limited to 40000000.
