[site]: stackoverflow
[post_id]: 1560329
[parent_id]: 1560171
[tags]: 
As @Robert Koritnik suggests, the best way to handle this is using a PartialView. I would suggest having two separate controller actions -- one that handles the original request and another that handles the AJAX new entry. Both actions would call the same logic to get the data for the table. The former would put the data into the view model along with other page data. The latter would package the data into a model for the partial view. Model classes public class PageViewModel { .... public IEnumerable TableData { get; set; } } public class TableViewModel { ... } Controller Code [AcceptVerbs( HttpVerbs.Get )] public ActionResult Index() { var model = new PageViewModel(); model.TableData = GetTableForUser( this.User ); return View( model ); } [AcceptVerbs( HttpVerbs.Post )] public ActionResult AddEntry( ... ) { ... add the new entry ... var model = GetTableForUser( this.User ); return PartialView( "TableView", model ); } private TableViewModel GetTableForUser( IIdentity user ) { ... } View Code Main View $('#entryForm').submit( function() { $.post( ' ', $('#entryForm').serialize(), function(data) { $('#table').replaceWith( data ); }, 'html' ); return false; }); TableView ...
