[site]: stackoverflow
[post_id]: 609248
[parent_id]: 609175
[tags]: 
Just like in C++, an enum in D seems to be a "conserved integer literal" ( edit : amazing, D2 even supports floats and strings ). Its enumerators have no location. They are just immaterial as values without identity. Placing enum is new in D2. It first defines a new variable. It is not an lvalue (so you also cannot take its address). An enum int a = 10; // new in D2 Is like enum : int { a = 10 } If i can trust my poor D knowledge. So, a in here is not an lvalue (no location and you can't take its address). A const, however, has an address. If you have a global (not sure whether this is the right D terminology) const variable, the compiler usually can't optimize it away, because it doesn't know what modules can access that variable or could take its address. So it has to allocate storage for it. I think if you have a local const, the compiler can still optimize it away just as in C++, because the compiler knows by looking at its scope whether or not anyone is interested in its address or whether everyone just takes its value.
