[site]: crossvalidated
[post_id]: 485834
[parent_id]: 
[tags]: 
glmertree to fit logistic regression with two-column y

With both glm and glmer, if I wanted to fit a proportion, I could do it as either: glm(cbind(successes, failures) ~ rest.of.model) ## or glm(sucesses/total ~ rest.of.model, weights = total) ## where: total (For my use case, I prefer the call with the two-column matrix, as I it allows me to easily use other weights in the fit, too) I've tried using glmertree, and none of the above two seem to work. The first gives Error in eval(family$initialize) : y values must be 0 The second gives a bunch of Error in chol.default(meat) : the leading minor of order 1 is not positive definite and eventually fails I think the problem with the two-column matrix is triggered in the very first call to glmertree . This calls partykit:::glmfit which in turn calls stats::glm.fit ; glm.fit expects, for y , a vector, and complains if the values of y are not in [0, 1]. I've tried to pass the data in such a way (by playing with a single column y and different ways of specifying the weights), to no avail. Maybe this is not currently possible? What would be the alternatives? (I can use a logit transformation of the response, and use lmertree , but that is not the same as a logistic regression). These are a couple of examples. I've used (abused) the examples in the vignette: library(glmertree) data("MHserviceDemo", package = "glmertree") d1 $y1 outcome - min(d1 $outcome)) d1$ p1 $y1/36 d1$ n $failures n - d1$y1 ## Nope: Error in eval(family$initialize) : y values must be 0 ```
