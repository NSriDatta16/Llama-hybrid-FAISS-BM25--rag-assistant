[site]: crossvalidated
[post_id]: 331066
[parent_id]: 331058
[tags]: 
In machine learning, there's no such thing as "units". Units are a physical concept, whereas machine learning techniques are pure mathematical abstractions. They see all input variables as just "some number". Any physical interpretation of what that number represents is outside the scope of the ML method you're using. Now, that doesn't mean you can't have a physical interpretation of the quantity going into the ML algorithm. One way to square the fact that these are physical quantities but the thing going into the ML method is a number is to divide your quantity by one "unit" of the physical metric in question. For example, suppose one of your inputs is temperature, $T$, and another is length, $L$. As we know, the quantity $T + L$ is not defined, and just generally makes no sense. Yet neural networks would do this operation if $T$ and $L$ were inputs. However, the operation $T/T_0 + L/L_0$ makes perfect sense, and is totally viable if $T_0$ is a temperature and $L_0$ is a length. Physical quantities are not numbers. Saying something like "I am 3 tall" makes no sense. But we can say "I am 3 feet tall". This is essentially saying that $H = 3 \cdot H_0$ where $H$ is my height and $H_0$ is one foot. Or, rearranging, $H / H_0 = 3.$ Physical inputs to ML algorithms should always be interpreted as the physical quantity, divided by one unit of whatever units you're measuring it in. So if your input is temperature in Kelvin, your input is $T/T_0$ where $T_0$ is one Kelvin. If it's temperature in Celcius, then it's $(T + T_c) / T_0$ where $T_c$ is $273.15$ Kelvin. If, on the other hand, you want to standardize it to have $0$ mean and $1$ standard deviation then it will be $(\frac{T}{T_0} - \bar{T}) / S$ where $\bar{T}$ is the mean of $T / T_0$ and $S$ is the standard deviation of $T / T_0.$
