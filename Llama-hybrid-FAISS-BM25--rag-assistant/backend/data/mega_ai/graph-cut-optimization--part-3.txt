j},x_{k})=w_{ijk}(0,0,0)+p_{1}(x_{i}-1)+p_{2}(x_{j}-1)+p_{3}(x_{k}-1)+p_{23}(x_{j}-1)x_{k}+p_{31}x_{i}(x_{k}-1)+p_{12}(x_{i}-1)x_{j}-px_{i}x_{j}x_{k}} with p 1 = w i j k ( 1 , 0 , 1 ) − w i j k ( 0 , 0 , 1 ) p 2 = w i j k ( 1 , 1 , 0 ) − w i j k ( 1 , 0 , 1 ) p 3 = w i j k ( 0 , 1 , 1 ) − w i j k ( 0 , 1 , 0 ) p 23 = w i j k ( 0 , 0 , 1 ) + w i j k ( 0 , 1 , 0 ) − w i j k ( 0 , 0 , 0 ) − w i j k ( 0 , 1 , 1 ) p 31 = w i j k ( 0 , 0 , 1 ) + w i j k ( 1 , 0 , 0 ) − w i j k ( 0 , 0 , 0 ) − w i j k ( 1 , 0 , 1 ) p 12 = w i j k ( 0 , 1 , 0 ) + w i j k ( 1 , 0 , 0 ) − w i j k ( 0 , 0 , 0 ) − w i j k ( 1 , 1 , 0 ) . {\displaystyle {\begin{aligned}p_{1}&=w_{ijk}(1,0,1)-w_{ijk}(0,0,1)\\p_{2}&=w_{ijk}(1,1,0)-w_{ijk}(1,0,1)\\p_{3}&=w_{ijk}(0,1,1)-w_{ijk}(0,1,0)\\p_{23}&=w_{ijk}(0,0,1)+w_{ijk}(0,1,0)-w_{ijk}(0,0,0)-w_{ijk}(0,1,1)\\p_{31}&=w_{ijk}(0,0,1)+w_{ijk}(1,0,0)-w_{ijk}(0,0,0)-w_{ijk}(1,0,1)\\p_{12}&=w_{ijk}(0,1,0)+w_{ijk}(1,0,0)-w_{ijk}(0,0,0)-w_{ijk}(1,1,0).\end{aligned}}} If p < 0 {\displaystyle p<0} the construction is similarly, but the variables will have opposite value. If the function is regular, then all its projections of two variables will be submodular, implying that p 23 {\displaystyle p_{23}} , p 31 {\displaystyle p_{31}} and p 12 {\displaystyle p_{12}} are positive and then all terms in the new representation are submodular. In this decomposition, the constant, unary and binary terms can be represented as shown in the previous sections. If p > 0 {\displaystyle p>0} the ternary term can be represented with a graph with four edges v i → v i j k {\displaystyle v_{i}\rightarrow v_{ijk}} , v j → v i j k {\displaystyle v_{j}\rightarrow v_{ijk}} , v k → v i j k {\displaystyle v_{k}\rightarrow v_{ijk}} , v i j k → t {\displaystyle v_{ijk}\rightarrow t} , all with weight p {\displaystyle p} , while if p < 0 {\displaystyle p<0} the term can be represented by four edges v i j k → v i {\displaystyle v_{ijk}\rightarrow v_{i}} , v i j k → v j {\displaystyle v_{ijk}\rightarrow v_{j}} , v i j k → v k {\displaystyle v_{ijk}\rightarrow v_{k}} , s → v i j k {\displaystyle s\rightarrow v_{ijk}} with weight − p {\displaystyle -p} . Minimum cut After building a graph representing a pseudo-Boolean function, it is possible to compute a minimum cut using one among the various algorithms developed for flow networks, such as Ford–Fulkerson, Edmonds–Karp, and Boykov–Kolmogorov algorithm. The result is a partition of the graph in two connected components S {\displaystyle S} and T {\displaystyle T} such that s ∈ S {\displaystyle s\in S} and t ∈ T {\displaystyle t\in T} , and the function attains its global minimum when x i = 0 {\displaystyle x_{i}=0} for each i {\displaystyle i} such that the corresponding node v i ∈ S {\displaystyle v_{i}\in S} , and x i = 1 {\displaystyle x_{i}=1} for each i {\displaystyle i} such that the corresponding node v i ∈ T {\displaystyle v_{i}\in T} . Max-flow algorithms such as Boykov–Kolmogorov's are very efficient in practice for sequential computation, but they are difficult to parallelise, making them not suitable for distributed computing applications and preventing them from exploiting the potential of modern CPUs. Parallel max-flow algorithms were developed, such as push-relabel and jump-flood, that can also take advantage of hardware acceleration in GPGPU implementations. Functions of discrete variables with more than two values The previous construction allows global optimization of pseudo-Boolean functions only, but it can be extended to quadratic functions of discrete variables with a finite number of values, in the form f ( x ) = ∑ i ∈ V D ( x i ) + ∑ ( i , j ) ∈ E S ( x i , x j ) {\displaystyle f(\mathbf {x} )=\sum _{i\in V}D(x_{i})+\sum _{(i,j)\in E}S(x_{i},x_{j})} where E ⊆ V × V {\displaystyle E\subseteq V\times V} and x i ∈ Λ = { 1 , … , k } {\displaystyle x_{i}\in \Lambda =\{1,\dots ,k\}} . The function D ( x i ) {\displaystyle D(x_{i})} represents the unary contribution of each variable (often refer