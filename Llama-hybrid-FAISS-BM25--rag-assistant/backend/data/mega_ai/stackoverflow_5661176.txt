[site]: stackoverflow
[post_id]: 5661176
[parent_id]: 
[tags]: 
Basic file uploading fails

I am not able to perform any uploading operations on the server. Contrary to "one of the five cool things you can do with play", the following does not seem to work: public static void doSingleFileUpload( Long id, @Required java.io.File upload, String description, String title ) { Score score = Score.findById(id); try { score.files.add(new File(doFileUpload(new FileInputStream(upload), score), title));//PLAY crashes here, with a nullpointer exception on the upload parameter } catch (IOException ex) { //TODO: do something nice } score.save(); } doFileUpload looks like this: @Check("registered") private static String doFileUpload(InputStream is, Score score) throws IOException { //get Score from db //get dir if present java.io.File dir = new java.io.File("/public/uploads/" + play.templates.JavaExtensions.slugify(score.title)); //if not, create if (!dir.exists()) { dir.mkdirs(); //create new dir if not present } //create file on server java.io.File newfile = new java.io.File(dir, "testfile.txt"); OutputStream os = new FileOutputStream(newfile); IOUtils.copy(is, os); return newfile.getAbsolutePath(); } With this view: Why is upload null? I found a similar problem here . But when I look at the headers after the POST, there is very little information there, except for the playsession key... What am I doing wrong? I am testing with FF4 and using Play 1.1.1. EDIT: This sample application works in both 1.1.1 and 1.2. Controller: public class Application extends Controller { public static void index() { File dir = new File(Play.applicationPath+File.separator+"public"+File.separator+"uploads"); if (!dir.exists() && dir.isDirectory()) { renderText("something went wrong"); } else { String[] files = dir.list(); if (files != null) { render(dir); } else { render(); } } } public static void upload(File upload) throws FileNotFoundException, IOException { File dir = new File(Play.applicationPath+File.separator+"public"+File.separator+"uploads"); if (!dir.exists()) { dir.mkdirs(); } File newfile = new File(dir, upload.getName()); FileInputStream fis = new FileInputStream(upload); FileOutputStream fos = new FileOutputStream(newfile); IOUtils.copy(fis, fos); index(); } } View: #{extends 'main.html' /} #{set title:'Home' /} #{form @Application.upload(), enctype:'multipart/form-data'} #{/form} #{if (dir.list()!=null)} #{list items:dir.list(), as:'file'} ${file} #{/list} #{/if} Now the questions is: What is the difference between the applications, except for the fact that the first one has more parameters... Thanks for the help everyone so far! greetings, jasper
