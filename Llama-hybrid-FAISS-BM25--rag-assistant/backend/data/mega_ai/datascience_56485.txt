[site]: datascience
[post_id]: 56485
[parent_id]: 56479
[tags]: 
Keras does a lot of stuff when you call a model. I guess that the most important is that it defines the trainable variables and the graph based on the inputs and outputs. For instance actually making any dense layers, and not just the representations. For instance, if you did mod1=generator_model(input_low_resolution) and mod2=generator_model(input_low_resolution) , then if you train mod1 then mod2 would not be affected as they have different parameters. So the .define_model just makes a "handle" to your model, which when called actually "builds" it. This functionality is very useful when you want to mix-and-match multiple layer configurations, or working with more complex structures like for instance GANs or ADDA. I would argue that your implementation is not exactly canonical and actually I'd recommend looking at the tensorflow.keras.Model example . Here they introduce a very nice, canonical way of making your own model. Furthermore maybe Keras Model class API and Getting started with the Keras functional API can be of help.
