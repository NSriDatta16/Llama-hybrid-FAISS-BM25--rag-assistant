[site]: stackoverflow
[post_id]: 5347456
[parent_id]: 5347347
[tags]: 
What you're describing is a Fluent interface (if you want something to search for). You could accomplish something like what you're trying to achieve like this: var find = function() { this.inFolder = function() { return this; // Although to stop chaining, you could return nothing here. }; return this; }; find().inFolder(); // .inFolder().inFolder()... This is a great pattern, especially when leveraged in projects like jQuery: $("#element").find(".child_element").first(); Each call returns a jQuery object with .find() , .first() and many other functions, which lets you write intuitive and fluid code. I kind of liked your find().inFolder() example, so here's an expanded version: var find = function(file) { this.folders = { "Documents": ["Foo.txt", "Bar.txt"], "Downloads": ["File.exe"], "Misc": ["Picture.jpg"] }; this.file = file; this.inFolder = function(folder) { var files = this.folders[folder]; return files.indexOf(this.file) >= 0; }; return this; }; alert(find("Foo.txt").inFolder("Documents")); // True alert(find("File.exe").inFolder("Downloads")); // True alert(find("Picture.jpg").inFolder("Downloads")); // False http://jsfiddle.net/andrewwhitaker/TCdTd/
