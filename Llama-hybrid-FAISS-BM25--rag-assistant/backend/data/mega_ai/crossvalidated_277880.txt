[site]: crossvalidated
[post_id]: 277880
[parent_id]: 
[tags]: 
MCMC Metropolis-Hastings with random matrices

I would like to approximate the solution to the following regression model with MCMC methods, as it can the be the core for solving more complex bayesian problems later on. $$ U = Y - ZB $$ $$ U \ \sim \ \mathcal{MN}_{T \times K} (0,I,\Sigma) $$ I guess I would need to sample the distribution of the coefficient matrix $B$ (that is $12 \times K$) and $\Sigma$ which should be a symmetric positive semi-definite matrix of size $K \times K$. $Z$ is $T \times 12$ and $Y$ and $U$ are both $T \times K$. $K = 4$ in this problem and also $T = 60$. So far, I have tried to tailor the the random walk version of the Metropolis algorithm to my problem. I have come up with the following: a) Set some initial values that could be for example the $OLS$ or $ML$ estimates $$ C_0 = \begin{bmatrix} B_0 \\ \Sigma_0 \end{bmatrix} $$ b) Generate a new candidate value from this equation $$ C^* = C_{t-1} + E $$ $$ E \ \sim \ \mathcal{MN}_{(T+K) \times K} (0,I,I) $$ c) Define the probability of $C$ as the likelihood $$ P(C_t) = (2 \pi)^{T/2} |\Sigma|^{T/2} \exp{(-0.5 \ \text{tr}[\Sigma^{-1} (Y - ZB)' (Y - ZB) ])} $$ d) Calculate the acceptance probability according to $$ \alpha = \min \{ 1, \frac{P(C^*)}{P(C_{t-1})} \}$$ e) Draw a random number $u$ from a $Uniform(0,1)$ distribution f) If $u g) Repeat the previous steps the desired amount of MCMC iterations Did I correctly specified the algorithm? Could anyone help me with that? I tried the above with 10.000, 100.000 and 1 million iterations but it didn't converge to anything. I'm not sure if I am getting the theory wrong of if it's just a matter of the MCMC size being to short to sample such a plethora of parameters. Any alternate strategy or reference is appreciated. See below the MATLAB code used: SV = vertcat(Bh,Sigmah); burnin = 2.5*10^3; mcmcreps = 10^4; mcmcsize = burnin + mcmcreps; mcmc = zeros(size(Bh,1)+K,size(Bh,2),mcmcsize); mcmc(:,:,1) = SV; rng default for i=1:mcmcsize-1 X_CN = mcmc(:,:,i) + randn(size(Bh,1)+K,size(Bh,2)); l_new = mnlvar(X_CN(1:size(Bh,1),:),X_CN(size(Bh,1)+1:end,:),K,T,Y,Z); l_old = mnlvar(mcmc(1:size(Bh,1),:,i),mcmc(size(Bh,1)+1:end,:,i),K,T,Y,Z); ACCEPT = min(1,l_new/l_old); if rand
