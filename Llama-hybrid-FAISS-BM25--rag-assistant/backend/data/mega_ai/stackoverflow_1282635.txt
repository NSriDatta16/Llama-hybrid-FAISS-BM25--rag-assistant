[site]: stackoverflow
[post_id]: 1282635
[parent_id]: 1277225
[tags]: 
First of all let me point out that JSON produced by dojo.formToJson() is not enough to recreate the original widgets: {"field1": "value1", "field2": "value2"} field1 can be literally anything: a checkbox, a radio button, a select, a text area, a text box, or anything else. You have to be more specific what widgets to use to represent fields. And I am not even touching the whole UI presentation layer: placement, styling, and so on. But it is possible to a certain degree. If we want to use Dojo widgets (Dijits), we can leverage the fact that they all are created uniformly: var myDijit = new dijit.form.DijitName(props, node); In this line: dijit.form.DijitName is a dijit's class. props is a dijit-specific properties. node is an anchor node where to place this dijit. It is optional, and you don't need to specify it, but at some point you have to insert your dijit manually. So let's encode this information as a JSON string taking this dijit snippet as an example: var myDijit = new dijit.form.DropDownSelect({ options: [ { label: 'foo', value: 'foo', selected: true }, { label: 'bar', value: 'bar' } ] }, "myNode"); The corresponding JSON can be something like that: { type: "DropDownSelect", props: { options: [ { label: 'foo', value: 'foo', selected: true }, { label: 'bar', value: 'bar' } ] }, node: "myNode" } And the code to parse it: function createDijit(json){ if(!json.type){ throw new Error("type is missing!"); } var cls = dojo.getObject(json.type, false, dijit.form); if(!cls){ // we couldn't find the type in dijit.form // dojox widget? custom widget? let's try the global scope cls = dojo.getObject(json.type, false); } if(!cls){ throw new Error("cannot find your widget type!"); } var myDijit = new cls(json.props, json.node); return myDijit; } That's it. This snippet correctly handles the dot notation in types, and it is smart enough to check the global scope too, so you can use JSON like that for your custom dijits: { type: "my.form.Box", props: { label: "The answer is:", value: 42 }, node: "answer" } You can treat DOM elements the same way by wrapping dojo.create() function, which unifies the creation of DOM elements: var myWidget = dojo.create("input", { type: "text", value: "42" }, "myNode", "replace"); Obviously you can specify any placement option, or no placement at all. Now let's repeat the familiar procedure and create our JSON sample: { tag: "input", props: { type: "text", value: 42 }, node: "myNode", pos: "replace" } And the code to parse it is straightforward: function createNode(json){ if(!json.tag){ throw new Error("tag is missing!"); } var myNode = dojo.create(json.tag, json.props, json.node, json.pos); return myNode; } You can even categorize JSON items dynamically: function create(json){ if("tag" in json){ // this is a node definition return createNode(json); } // otherwise it is a dijit definition return createDijit(json); } You can represent your form as an array of JSON snippets we defined earlier and go over it creating your widgets: function createForm(array){ dojo.forEach(array, create); } All functions are trivial and essentially one-liners â€” just how I like it ;-) I hope it'll give you something to build on your own custom solution.
