[site]: stackoverflow
[post_id]: 3659985
[parent_id]: 3659773
[tags]: 
you could use a function like this one: def loadClass(fullclassname): sepindex=fullclassname.rindex('.') classname=fullclassname[sepindex+1:] modname=fullclassname[:sepindex] #dynmically import the class in the module imod=__import__(modname,None,None,classname) classtype=getattr(imod,classname) return classtype where fullclassname is the fully dotted qualifiant for the class you want load. example (pseudo code,but the idea is there): for package availability scanning, only perform some globbing , then for finding final class name, you may declare a Plugin class in each of your modules that has a getStorage() #scan for modules , getPluginPackagesUnder (to be defined) returns the dotted name for all packages under a root path (using some globbing, listdir or whatever method) pluginpackages=getPluginPackagesUnder("x/y/z") storagelist=[] for pgpck in plunginpackages: pluginclass=loadClass("%s.Plugin"%pgpck) storageinstance=Plugin().getStorage() storagelist.append(storageinstance) so, you can dynamically scan for your existing storage plugins
