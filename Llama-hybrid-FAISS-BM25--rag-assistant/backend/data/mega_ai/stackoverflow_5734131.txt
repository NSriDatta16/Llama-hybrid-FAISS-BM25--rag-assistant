[site]: stackoverflow
[post_id]: 5734131
[parent_id]: 5733944
[tags]: 
I vote Qt. The Qt code base is nicely factored to separate the " QtCore " library from the " QtGui " libary. The " QtCore " includes support for processes/threads, signals/slots, and state like that which would be used "independent" of GUI components. (For example, the " QSlider " widget is merely a GUI component that presents the state managed by the actual component inside the QtCore library, which is useful for bounds checking a value-within-a-range, which can be nicely applied even on non-GUI applications, like hardware control systems.) For some problems, the signals/slots uniquely provides many design options (flexibility). It fundamentally permits communication/signaling between types and objects that are not directly coupled (e.g., when neither includes the header of the other). While not all designs warrant that, it is dynamic and powerful for inter-process communication, hardware control systems, flexibly-scaled module systems, and GUI applications. Finally, the cross-platform wrapping of "convenience" things like processes/threads is very nice, thread-safety through signals/slots is very nice, the read/write codecs, file parsing, and media file support is very nice, and it has " QDesktop "-type things that makes your "icon tray" and other platform-specific implementation much easier. Qt is not at all quirky when you don't use the QtGui library. (Just make sure to use " -= QtGui " in your qmake if you don't want to link the QtGui.lib , not a big deal.) Will Qt become quirky if I try to do stuff without using the GUI widgets? No. However, it does have build requirements (e.g., "moc"). Is going native (and thus, pretty deep into the OS) overkill for something such as this? No, but depending on your language, you'll need support for threads, processes, codecs, etc. So, Qt can simplify that (since those are not handled directly by the C/C++ languages, you'll need a library of some kind). Given that the app is going to be running in the background, and thus alongside other applications, will Qt, and the additional layers of abstraction it will bring with it, have a detrimental effect on the performance of the rest of the user's session? No. For cross-thread and cross-process communication, it will be about as fast as you can get. For GUI, it will be on par with any GUI (but probably one of the fastest of any GUI). If I use Qt, how difficult will it be to 'break out' of the Qt wrapper for things like placing the 'application go' button in the appropriate location on each platform. Pretty easy -- it's cross-platform, but you have tremendous flexibility for platform-specific coupling. (e.g., embed Qt in MFC-app is easy, embedding MFC in Qt app is easy, mixing QML/Qt-Widgets is easy, etc.)
