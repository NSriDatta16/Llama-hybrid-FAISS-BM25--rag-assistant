[site]: stackoverflow
[post_id]: 731625
[parent_id]: 729921
[tags]: 
Is there any difference? Yes. A Timeout executes a certain amount of time after setTimeout() is called; an Interval executes a certain amount of time after the previous interval fired. You will notice the difference if your doStuff() function takes a while to execute. For example, if we represent a call to setTimeout/setInterval with . , a firing of the timeout/interval with * and JavaScript code execution with [-----] , the timelines look like: Timeout: . * . * . * . * . [--] [--] [--] [--] Interval: . * * * * * * [--] [--] [--] [--] [--] [--] The next complication is if an interval fires whilst JavaScript is already busy doing something (such as handling a previous interval). In this case, the interval is remembered, and happens as soon as the previous handler finishes and returns control to the browser. So for example for a doStuff() process that is sometimes short ([-]) and sometimes long ([-----]): . * * • * • * * [-] [-----][-][-----][-][-] [-] • represents an interval firing that couldn't execute its code straight away, and was made pending instead. So intervals try to ‘catch up’ to get back on schedule. But, they don't queue one on top of each other: there can only ever be one execution pending per interval. (If they all queued up, the browser would be left with an ever-expanding list of outstanding executions!) . * • • x • • x [------][------][------][------] x represents an interval firing that couldn't execute or be made pending, so instead was discarded. If your doStuff() function habitually takes longer to execute than the interval that is set for it, the browser will eat 100% CPU trying to service it, and may become less responsive. Which do you use and why? Chained-Timeout gives a guaranteed slot of free time to the browser; Interval tries to ensure the function it is running executes as close as possible to its scheduled times, at the expense of browser UI availability. I would consider an interval for one-off animations I wanted to be as smooth as possible, whilst chained timeouts are more polite for ongoing animations that would take place all the time whilst the page is loaded. For less demanding uses (such as a trivial updater firing every 30 seconds or something), you can safely use either. In terms of browser compatibility, setTimeout predates setInterval, but all browsers you will meet today support both. The last straggler for many years was IE Mobile in WinMo
