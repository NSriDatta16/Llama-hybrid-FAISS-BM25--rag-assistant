[site]: datascience
[post_id]: 31311
[parent_id]: 31134
[tags]: 
It maybe a little bit complicated, since I convert the reports to pandas.DataFrame for calculation. But I think it's worth it, because it works well with two or more report as well. Try below: import pandas as pd import numpy as np from functools import reduce def report_average(*args): report_list = list() for report in args: splited = [' '.join(x.split()) for x in report.split('\n\n')] header = [x for x in splited[0].split(' ')] data = np.array(splited[1].split(' ')).reshape(-1, len(header) + 1) data = np.delete(data, 0, 1).astype(float) avg_total = np.array([x for x in splited[2].split(' ')][3:]).astype(float).reshape(-1, len(header)) df = pd.DataFrame(np.concatenate((data, avg_total)), columns=header) report_list.append(df) res = reduce(lambda x, y: x.add(y, fill_value=0), report_list) / len(report_list) return res.rename(index={res.index[-1]: 'avg / total'}) output: report_average = report_average(report_1, report_2) print(report_average) precision recall f1-score support 0 0.75 0.75 0.75 2.0 1 0.75 0.75 0.75 2.0 avg / total 0.75 0.75 0.75 4.0 report_3 = report_2 report_average = report_average(report_1, report_2,report_3) print(report_average) precision recall f1-score support 0 0.666667 0.666667 0.666667 2.0 1 0.666667 0.666667 0.666667 2.0 avg / total 0.666667 0.666667 0.666667 4.0
