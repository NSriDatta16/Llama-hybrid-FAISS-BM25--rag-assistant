[site]: stackoverflow
[post_id]: 2149652
[parent_id]: 2147729
[tags]: 
Dependency Walker is usually the best tool for resolving this kind of problem. I'm not too sure how well it handles manifests though... Where in this entangled mess is the actual process executable file? Two possibilities come to mind: You are writing a Python extension DLL file. So the Python process is loading your DLL file, and it would already have its own python25.dll dependency. The EXE file loading your DLL file is being built with header files and libraries provided by the DLL file project. So it is inheriting the #pragma comment(lib,"python25.lib") from your header file and as a result is loading the DLL file itself. My problem with the second scenario is, I'd expect the EXE file, and your DLL file, to be in the same folder in the case that the EXE file is implicitly loading your DLL file. In which case the EXE file, your DLL file and the python25.dll are all already in the same folder. Why then would the system32 version ever be loaded? The search order for implicitly loaded DLL files is always in the application EXE file's folder. So the actual interesting question implicit in your query is: How is the system32 python26.dll being loaded at all?
