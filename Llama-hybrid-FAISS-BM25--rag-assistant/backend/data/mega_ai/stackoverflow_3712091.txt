[site]: stackoverflow
[post_id]: 3712091
[parent_id]: 3709094
[tags]: 
I should add that one big issue that enterprise applications may have when using the Django ORM is that it is somewhat limited in its capability (i.e. what queries it can express). I think this is manageable if you do two things: Strive to express queries in the Django ORM as much as possible (without experience it may be too easy to dismiss a query as not possible in Django). If the query is really impossible in Django (you can also ask the IRC #django channel or the django-users group if you are really unsure), store the query in a queries.py file that your dba's can manage or look at. (It can be a flat dictionary referenced by your models file.) As an example of point 2: There's no reason you can't write a query storage manager that's used in the following way: Suppose you had an app named blogs with a model called Entry: # models.py class Entry(models.Model): objects = project.QueryStorageManager() author = models.ForeignKey(User) body = models.TextField() slug = models.CharField(max_length=512) published_date = models.DateField() @project.StoredQuery("getEntryMonthHistogram") def getEntryMonthHistogram(self, sql, author): return objects.runQuery(sql, author) # queries.py { "getEntryMonthHistogram": """SELECT EXTRACT(MONTH FROM published_date), REPEAT('*', count(*)) histogram FROM blogs_entry WHERE author_id = %s""", }
