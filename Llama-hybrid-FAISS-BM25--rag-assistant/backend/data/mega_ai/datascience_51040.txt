[site]: datascience
[post_id]: 51040
[parent_id]: 51033
[tags]: 
You are solving a problem which is not designed for a ANN, neural network has difficulties when you deal with univariate, few data. Because they will have to learn a solution based on few examples. However, a possible solution is achievable: import numpy as np # Init sequence data = [[0, 1.0], [1, 3.0], [2, 7.0], [3, 8.0], [4, 21.0], [5, 49.0], [6, 76.0], [7, 224.0]] X = np.matrix(data)[:, 0] y = np.matrix(data)[:, 1] Reg=neural_network.MLPRegressor(solver='lbfgs',random_state=4,hidden_layer_sizes=(100,20,2),learning_rate='adaptive',verbose=True) y2 = np.ravel(y) F=Reg.fit(X=X,y=y2,) F.predict(8) Note that the random_state parameter has a very large influence when I use a Neural Network. If you move this parameter (integer) you will find that the solution has a really large range.
