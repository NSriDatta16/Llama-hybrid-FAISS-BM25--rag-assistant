[site]: stackoverflow
[post_id]: 5633624
[parent_id]: 
[tags]: 
performance optimization of snap points using drag and drop in RaphealJS

I have a demo page where I am looking at the performance of around 300 points that an object should snap to when being dragged. http://jsfiddle.net/digiguru/rVFje/ I have optimized it by loading the bounds of each "snap" point into 4 arrays when the drag is started. var circleT = []; var circleR = []; var circleB = []; var circleL = []; var start = function (event) { this.ox = this.attr("cx"); this.oy = this.attr("cy"); var threshold = 15; for (var myCircle in circles) { circleT[myCircle] = circles[myCircle].attr("cy") - threshold; circleR[myCircle] = circles[myCircle].attr("cx") + threshold; circleB[myCircle] = circles[myCircle].attr("cy") + threshold; circleL[myCircle] = circles[myCircle].attr("cx") - threshold; } circle.animate({ r: 20,fill: "#319F40", "stroke-width": 1 }, 200); }, Then in the move event we use the following to calculate the dragged object from each of the snap points... move = function (mx, my) { var inrange = false; var mouseCX = this.ox + mx; var mouseCY = this.oy + my; var lockX = 0; var lockY = 0; for (var myCircle in circles) { if ((circleT[myCircle] mouseCY ) && (circleR[myCircle] > mouseCX && circleL[myCircle] Genrally performance, is good, but you can notice frames dropping on slightly older IE browsers (IE8 and below). Is there a ninja way to improve performance at all? Perhaps I can improve the 4 if statements? Would using another javascript library like processing JS yeild better results?
