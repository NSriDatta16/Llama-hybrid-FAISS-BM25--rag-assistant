[site]: stackoverflow
[post_id]: 4786322
[parent_id]: 4786259
[tags]: 
While this will be the SQL equivalent of a table scan, you can use LINQ or the IEnumerable extension methods to search your dictionary for all values whose keys match a pattern: Extension Method: var values = dictionary.Where(pv => pv.Key.StartsWith("A") || (pv.Key.Length >= 3 && pv.Key[2] == 'e') || pv.Key.Length pv.Value); LINQ: var values = (from pv in dictionary where pv.Key.StartsWith("A") || (pv.Key.Legnth >= 3 && pv.Key[2] == 'e') || pv.Length Note that the last part of both of these predicates pertains to your "fourth letter is not "d". I took that to mean that a string that was three characters (or fewer) long would match this. If you mean the string is at least four characters AND its fourth character is not "d", then the changes should be obvious. Be aware that the primary (performance) benefit to the Dictionary class is using hash-based key lookups, which (in the average and best case) is O(1). Using a linear search like this is O(n), so something like this will, in general, be slower than an ordinary key lookup.
