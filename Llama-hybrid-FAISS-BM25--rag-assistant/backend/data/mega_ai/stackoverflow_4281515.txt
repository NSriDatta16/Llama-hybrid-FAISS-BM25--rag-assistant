[site]: stackoverflow
[post_id]: 4281515
[parent_id]: 4278983
[tags]: 
use 5.010; use strict; use warnings; { no warnings 'once'; $A::B::C::D = 5; # a test subject } my $pkg = 'A::B::C'; my $var = 'D'; # tearing down the walls (no warranty for you): say eval '$'.$pkg."::$var"; # 5 # tearing down the walls but at least feeling bad about it: say ${eval '\$'.$pkg."::$var" or die $@}; # 5 # entering your house with a key (but still carrying a bomb): say ${eval "package $pkg; *$var" or die $@}; # 5 # using `Symbol`: use Symbol 'qualify_to_ref'; say $${ qualify_to_ref $pkg.'::'.$var }; # 5 # letting us know you plan mild shenanigans # of all of the methods here, this one is best { no strict 'refs'; say ${$pkg.'::'.$var}; # 5 } and if the following make sense to you, party on: # with a recursive function: sub lookup { @_ == 2 or unshift @_, \%::; my ($head, $tail) = $_[1] =~ /^([^:]+:*)(.*)$/; length $tail ? lookup($_[0]{$head}, $tail) : $_[0]{$head} } say ${ lookup $pkg.'::'.$var }; # 5 # as a reduction of the symbol table: use List::Util 'reduce'; our ($a, $b); say ${+ reduce {$$a{$b}} \%::, split /(? $pkg.'::'.$var }; # 5 And of course you can assign to any of these methods instead of say ing them.
