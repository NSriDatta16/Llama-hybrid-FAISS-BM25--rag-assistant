[site]: stackoverflow
[post_id]: 1232430
[parent_id]: 1232217
[tags]: 
Indeed, at some point you'll have to implement interfaces like IFileSystem , thereby glueing your application to the .NET framework. This "glue-code-in-between" cannot be unit tested. This is not much of a problem as long as the glue code is very simple. If the glue code is not as simple as you'd like, you can still do automated integration tests , e.g. run your assembled application in some sort of self-test mode. The reason unit tests are more popular is that they are simpler to create and less fragile. You don't need to prepare a database, web server or a file system in order to run a unit test. You don't need to worry about the unit tests for class A breaking if you change class B. Integration tests can test more things but they don't have these advantages.
