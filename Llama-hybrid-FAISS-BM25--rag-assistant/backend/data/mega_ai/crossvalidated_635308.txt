[site]: crossvalidated
[post_id]: 635308
[parent_id]: 543750
[tags]: 
I will have to bow out of looking into the R constraint of this question, but for those willing to look at a python solution please continue reading. However, I want to try to simulate queues that have "non-constant" arrival rates, i.e. the arrival rates are a function of time (e.g. instead of saying "50 people arrive every hour on average throughout the day" - we make the arrival rate a function that reflects more people coming through out certain times and fewer people coming at other times). We can do this with Ciw. In How to Define Time and State Dependent Distributions we are shown a Python class implementing a time-dependent distribution. class TimeDependentDist(ciw.dists.Distribution): def sample(self, t, ind=None): if t % 24 This sampler has degenerate cases, and is nothing more than the following piecewise probability density function: $$\text{pdf}(t) = \begin{cases} \delta \left( \frac{1}{2} \right) & t\mod 24 where $\delta \left( \bullet \right)$ is the Dirac delta distribution . So to run a G(t)/M/1 in Ciw, we can do the following: import ciw ciw.seed(2018) network = ciw.create_network( arrival_distributions=[TimeDependentDist()], service_distributions=[ciw.dists.Exponential(1)], number_of_servers=[1] ) simulation = ciw.create_network(network) simulation.simulate_until_max_time(356) records = simulation.get_all_records() Once you understand this example it should be possible to generalize to other samplers.
