[site]: stackoverflow
[post_id]: 382550
[parent_id]: 377093
[tags]: 
In Haskell, functions are as generic (polymorphic) as possible - the compiler will infer the "Most general type". For example, TheMarko's example swap is polymorphic by default in the absence of a type signature: *Main> let swap (a,b) = (b,a) *Main> :t swap swap :: (t, t1) -> (t1, t) As for partial specialization, ghc has a non-98 extension: file:///C:/ghc/ghc-6.10.1/doc/users_guide/pragmas.html#specialize-pragma Also, note that there's a mismatch in terminology. What's called generic in c++, Java, and C# is called polymorphic in Haskell. "Generic" in Haskell usually means polytypic: http://haskell.readscheme.org/generic.html But, aboe i use the c++ meaning of generic.
