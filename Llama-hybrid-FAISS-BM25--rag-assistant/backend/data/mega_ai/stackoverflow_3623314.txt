[site]: stackoverflow
[post_id]: 3623314
[parent_id]: 3622322
[tags]: 
Two points. First, In general, I think you should be asking yourself 2 slightly different questions: 1) Which dynamic programming features of Perl can be used in which situations/to solve which problems? 2) What are the trade-offs, pitfalls and downsides of each feature. Then the answer to your question becomes extremely obvious: you should be using the features that solve your problem better (performance or code maintainability wise) than a comparable non-DP solution, and which incurs less than the maximum accaptable level of downsides. As an example, to quote from FM's comment, string form of eval has some fairly nasty downsides; but it MIGHT in certain cases be an extremely elegant solution which is orders of magnitude better than any alternate DP or SP approach. Second, please be aware that a lot of "dynamic programming" features of Perl are actually packaged for you into extremely useful modules that you might not even recognize as being of the DP nature. I'll have to think of a set of good examples, but one that immediately springs to mind is Text template modules, many of which are implemented using the above-mentioned string form of eval ; or Try::Tiny exception mechanism which uses block form of eval . Another example is aspect programming which can be achieved via Moose (I can't find the relevant StackOverflow link now - if someone has it please edit in the link) - which underneath uses access to symbol table featrue of DP.
