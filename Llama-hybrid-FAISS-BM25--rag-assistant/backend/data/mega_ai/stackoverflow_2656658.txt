[site]: stackoverflow
[post_id]: 2656658
[parent_id]: 2656548
[tags]: 
If these parameters are constant for the lifetime of the application, then you can add a IConfigurationService whose sole purpose is to return these parameters to whoever needs them. The implementation of IConfigurationService might have hardcoded values, read them from a config file... whatever. Of course the implementation of IConfigurationService is retrieved through the IoC container. If these parameters vary per instance, then I don't think they should be supplied as constructor parameters for objects loaded by your IoC container. This makes all your components need to find/depend on the IoC container, which defeats the point of an IoC container in the first place. Either make them configurable on the object itself by exposing a setter method, (which is appropriate when they might change over the lifetime of the object) or make them parameters to a factory method that returns the object (where the factory object is registered in your IoC container). You were hesitant to use a factory, but I think this is an elegant approach. Yeah it takes effort to create a factory, but since there is a requirement supporting the act, its not code bloat. Its a simple pattern that fulfills the requirement.
