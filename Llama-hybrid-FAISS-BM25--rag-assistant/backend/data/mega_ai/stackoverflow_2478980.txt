[site]: stackoverflow
[post_id]: 2478980
[parent_id]: 2478729
[tags]: 
Other than having a MessageDrivenBean listening to that queue? EDIT: You are using spring just to create the payload, right? JMS is a JavaEE spec. You don't need to use Spring for actually sending/receiving messages. You don't have to manually check whether there are messages in the queue etc., either. All you need to do is have an MDB(MessageDrivenBean) set up like this, @MessageDriven(activationConfig = { @ActivationConfigProperty( propertyName = "destinationType", propertyValue = "javax.jms.Queue"), @ActivationConfigProperty( propertyName = "destination", propertyValue = "queue/myqueue") }) public class MyMessageDrivenBean implements MessageListener { public void onMessage(Message message) { ObjectMessage objMsg = (ObjectMessage) message; Payload payload = (Payload)objMsg.getObject(); //do stuff } } And then send some JMS messages. @Stateless public class QueuerBean implements QueuerLocal { @Resource(mappedName = "java:/JmsXA") private ConnectionFactory jmsConnectionFactory; @Resource(mappedName = "queue/myqueue") private Queue queue; private void queue(MyPayload payload) { try { Connection connect = jmsConnectionFactory.createConnection(); Session session = connect.createSession(false, Session.DUPS_OK_ACKNOWLEDGE); MessageProducer producer = session.createProducer(queue); // create a JMS message and send it ObjectMessage objMsg = session.createObjectMessage(payload); producer.send(objMsg); producer.close(); session.close(); connect.close(); } catch (JMSException e) { log.error("Bad thing happened", e); } } } The queue is configured by the annotation. When a message is sent, JBoss will automatically trigger the MDB.
