[site]: datascience
[post_id]: 53929
[parent_id]: 53927
[tags]: 
The relevant documentation doesn't mention random sampling per se. NOTE: this all has nothing to do with the Sequential model type versus the Model type. OP was specifically talking about Sequential models. You can specify the shuffle parameter to get random samples across the training dataset, but there is not a strict/parameterised sampling methodology. Using shuffle=True is however equiavalent to random selection without replacement (smaples can only be sampled once per epoch). You can look through the source code to see how Keras builds up the train function, but it doesn't include any random sampling. This is taken care of deeper in the internals, via e.g. the fit_loop function, which simply shuffles the indices of the training samples: if shuffle == 'batch': index_array = batch_shuffle(index_array, batch_size) elif shuffle: np.random.shuffle(index_array) You could pass class_weight argument to tell the Keras that some samples should be considered more important when computing the loss (although it doesn't affect the sampling method itself): class_weight : Optional dictionary mapping class indices (integers) to a weight (float) value, used for weighting the loss function (during training only). This can be useful to tell the model to "pay more attention" to samples from an under-represented class.
