[site]: stackoverflow
[post_id]: 721126
[parent_id]: 720710
[tags]: 
5 days too late but you could try this highly secure encryption function: uint64_t highly_secure_encrypt(char* password) { sleep(1); return 0; } No way you're getting the passwords back from that. Now, onto serious matters. If you don't already know the answer to your question you shouldn't be designing security systems. If you're storing the password in the current-user section of the registry then the only people who can access it (under normal circumstances) are the user and the administrator. I'd trust (somewhat) the current-user section of the registry and use the standard password hashing mechanisms that the OS provides. Jeff Atwood's "Rainbow Hash Cracking" describes hashes and password storage at a good beginner detail, and Thomas Ptacek's "Enough With the Rainbow Tables: What You Need to Know About Secure Password Schemes" goes on to tell you why you should not try and do it yourself usually. Choosing a good hash function is less than 1% of the battle. If an attacker can run you hash function millions of times a second then (s)he can test millions of combinations a second. What you need is a slow, tunable secure hash. That's not something that is easy to come by and SHA*, MD5, etc are designed to be bloody fast since they're meant to be used over files and chunks of files usually, where speed is king. I'd recommend reading up more, since the answers are out there and very easy to find.
