[site]: stackoverflow
[post_id]: 4800057
[parent_id]: 4799890
[tags]: 
I deeply discourage trying to create your own authentication scheme. If you use time-tested patterns, it's more likely that edge cases you hadn't considered will be covered. Here's what I'd suggest and why: Don't allow logging in with a hash value instead of a full password. That way, even if an attacker acquires password hashes stored on the server, they won't be able to log in with them. Try to avoid storing passwords, even hashed passwords. If you want an easy login, @Mitch's suggestion is a good compromise, but I'd suggest you encrypt that expiring token and maybe tie the expiring token to some additional evidence (for example, the token is invalidated if it's sent using a different IP address). Never transmit credentials in plain text. Even if the transmitted credentials are hashed, if traffic is captured, a replay attack is possible. SSL isn't extremely difficult to implement, and it will give you the added bonus of the client being able to validate that they're talking to the right server, which helps protect against man-in-the-middle attacks. Never store a user's password on the server. Store a salted hash instead. Make sure the hash is a large hash value to reduce the likelihood of brute force attacks succeeding (SHA-256, for example). I know you're trying to go for a cheap, easy-to-develop solution. Rather than implementing shoddy security to achieve that goal, try using pre-built, time-tested authentication libraries instead. That's a way to save time/money without compromising quality.
