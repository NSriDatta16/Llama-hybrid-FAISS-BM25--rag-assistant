[site]: stackoverflow
[post_id]: 1966341
[parent_id]: 1110682
[tags]: 
As Remus says , you can extend PHP with C/C++ using the Zend API. The linked tutorial by Sara Golemon is a good start, and the book Extending and Embedding PHP by the same author covers the subject in much more detail. However, it's worth noting that both of these (and pretty much everything else I found online) focus on C and don't really cover some tweaks you need to get C++ extensions working. In the config.m4 file you need to explicitly link to the C++ standard library: PHP_REQUIRE_CXX() PHP_ADD_LIBRARY(stdc++, 1, PHP5CPP_SHARED_LIBADD) Any C++ library compile checks in the config.m4 file will also require linking the C++ lib: PHP_CHECK_LIBRARY($LIBNAME,$LIBSYMBOL,, [ AC_MSG_ERROR([lib $LIBNAME not found.]) ],[ -lstdc++ -ldl ]) EDIT - and here's how to specify g++: Last, and not least, in order to choose the C++ rather than C compiler/linker when building the extension, the 6th parameter to PHP_NEW_EXTENSION() should be "yes" . ie: PHP_NEW_EXTENSION(your_extension, your_extension.cpp, $ext_shared, , "-Wall -Werror -Wno-error=write-strings -Wno-sign-compare", "yes") From the PHP build system manual , the parameters are: The name of the extension List of all source files which are part of the extension. (optional) $ext_shared , a value which was determined by configure when PHP_ARG_WITH() was called for (optional) "SAPI class", only useful for extensions which require the CGI or CLI SAPIs specifically. It should be left empty in all other cases. (optional) A list of flags to be added to CFLAGS while building the extension. (optional) A boolean value which, if "yes", will force the entire extension to be built using $CXX instead of $CC. I couldn't work out how to get the configure script to set g++ as the compiler/linker instead of gcc, so ended up hacking the Makefile with a sed command to do a search replace in my bash build script: phpize ./configure --with-myextension if [ "$?" == 0 ]; then # Ugly hack to force use of g++ instead of gcc # (otherwise we'll get linking errors at runtime) sed -i 's/gcc/g++/g' Makefile make clean make fi Presumably there's an automake command that would make this hack unnecessary.
