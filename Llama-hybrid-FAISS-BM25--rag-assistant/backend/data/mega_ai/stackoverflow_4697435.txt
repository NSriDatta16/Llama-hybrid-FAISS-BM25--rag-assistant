[site]: stackoverflow
[post_id]: 4697435
[parent_id]: 4697170
[tags]: 
No. It's not right at all. Sorry, but it isn't. That drawing says that EVERYTHING is a beverage, in some cases many times over. Clearly some of those white triangles should be diamonds, most of them probably black. The only relationship you've used is inheritance and it's obviously not your intention. I also have serious problems with the design idea, period, but I guess that's for another discussion. Nothing you've done is out of ordinary for someone just starting with design (everyone starts out seriously overdesinging every damn thing), so I wouldn't feel bad about it though. At least you're thinking about design, and that's a pretty darn good thing. Reply to comment: Nothing, when applied where it's needed. Quite a bit when it's applied where it's not. It's simply not needed here. Furthermore, you'd be doing it wrong. Cream is not a decorator for coffee (I think that's what you're trying to do) Coffee with cream could be...but that's still overdesign. A decorator adds behavior to the thing it's decorating. Say you had a message class and a print function that displayed the output: struct message { virtual void print() = 0; }; struct concrete_message : message { void print() { std::cout Now lets say you wanted to have some of them indented. You could do that by using a "decorator", which subclasses AND contains a message: struct tabbed_message { tabbed_message(message * msg) : my_message(msg) {} void print() { std::cout print(); } }; See how that changes the behavior of any concrete message without having to change the original? What you've got with your coffee/condiment thing isn't like this. Condiments are just things you put in coffee. There's no difference in behavior between a cup of coffee with or without cream (for example). If you want to charge for cream added then you simply associate it with the cup of coffee and run a total when you ask the cup how much it is.
