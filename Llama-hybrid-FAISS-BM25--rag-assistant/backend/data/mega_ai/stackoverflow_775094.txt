[site]: stackoverflow
[post_id]: 775094
[parent_id]: 775056
[tags]: 
What you might want to consider is areas. This would allow you to have separate controllers for each area. Then permit access to those areas based on roles or whatever you wish. This will give you routes like '/admin/controller/action', '/users/controller/action', etc. The 'pattern' separates all your controllers by namespace, and handles the routing quite well. Separate master pages easily, etc. It won't give you the (potentially confusing, IMO) '/' and '/admin/' looking the same to an admin user, but it will let you separate the content and controllers. What you are describing would lead to potentially tons of methods for each controller, something that is generally frowned upon by the MVC/REST crowd. It's not horrible, but its not considered best practice either. You can read about areas at this blog here . Google 'asp.net mvc areas' for more. --------edit----------- To expand a bit: Without custom routes or some other shenanigans, actions are mapped to controllers by the url. So if you want to keep all admin actions and views different, but on the root url, along with normal user actions, this would lead to one big controller that has to handle all these actions, or some strange "if this role, this view; if that role, that view" sort of nonsense that would have to happen in each action. Kind of a mess to debug potentially. Similarly, the default view engine finds the views based on the url as well. This would mean that all of your views are going to sit in one big ugly directory full of all sorts of weird similarly named but differently behaving views. In short, this would become a potentially horrific maintenance nightmare, depending on complexity of the application.
