[site]: stackoverflow
[post_id]: 1717023
[parent_id]: 
[tags]: 
Is this a design flaw?

Consider two classes class A{ public: A(){ } ~A(){ } }; class AImpl : public A{ public: AImpl(){ a = new AInternal(); } AImpl(AInternal *a){ this->_a = a; } ~AImpl(){ if(a){ delete a; a = null; } } private: AInternal *a; }; I am trying to hide the AInternal's implementation and expose only A's interface. Two things I see here class A is totally empty. Hiding is achieved basically through inheritance. I have to actually use downcasting and upcasting from A to AImpl and vice versa. Is this a good design. Being very inexperienced in designing, I cannot see the pitfalls of it and why it is bad?
