JUpdater is a project which aims to create a utility that allows developers to quickly implement version checks into Java programs. The utility ensures that the user can always be notified of new versions, and easily upgrade to the latest version from within the program, without having to do anything. The utility only downloads the files that are out of date, saving bandwidth.

JUpdater is split into two parts. A small Java client, which can easily be implemented into existing programs, and a PHP server part, which keeps track of the versions and provides the client with all the info it requires. The project is still in development, possibly containing bugs. Any program that is to be updated via JUpdater has to be contained in a jar file.

Client

A small bundle of classes, a JUpdater client, has to be added to programs so that they can compare their versions with a central server. The client requires JRE 1.5 or greater.

The client provides three main operations.
 Update a specified jar file by comparing all files' MD5 checksums, this is done in several steps described below.
 Check if a new version is available on the server by using the Implementation-Version attribute in the jar manifest.
 Check if a new version is available and get the corresponding changelog by using the Implementation-Version attribute.

An interface can optionally be implemented in order to listen to the update process. This information can then for instance be displayed in a GUI for the user.

Server

JUpdater requires a central server that contains information about the latest version. The clients connect to the server in order to check if there are new versions and to download the changes and changelog. The server requires PHP 4.3 or greater and MySQL 4.0 or greater.

How updating works

Here's an in depth description of what actually happens behind the scenes when performing a complete update check.

 The JUpdater instance's updateJar method is called with the name of the jar file to update and the relevant program name.
 The client opens a connection to the server and sends the program name (via HTTP Post).
 The server establishes a session and responds with the session id and the server's jar URL for that program. From this point on the client and server are in a session and the server therefore remembers what program the client wants to update during all further requests connected to that specific update.
 The client stores the server's response and sends a request for the file list of the server's jar file via XML-RPC. The server responds with a list (taken from the server's database).
 The client calculates MD5 checksums for all local files that it can find (looking in the file list from the server), the rest are given a checksum of 0. The client then sends the result to the server (via XML-RPC).
 The server checks all MD5 checksums against the entries in the database and returns a list of all the files for which the checksums did not match (i.e. a list of all files that are out of date). The following array is sent back for each file that is out of date: [filename, size, correct md5] (all of those things are read from the database).
 If nothing is out of date then the client stops here, otherwise it continues.
 The client requests a changelog from the server (via XML-RPC). The server responds with all changes (as entered by the administrator) made between the client's versions and the latest version.
 The client displays the changes and asks the listener with shouldStartDownloading() if it should download the files.
 If false is returned from the method then the client stops here, otherwise it continues.
 The client starts downloading the out of date files one by one into a temporary storage. For each file the client calculates the MD5 checksum and make sure that it matches, otherwise it tries again (until it's out of tries).
 The client begins to patch once all out of date files are downloaded. It copies the current jar's up to date files into a new jar file and then writes the downloaded files into that jar. Once all is done without errors it replaces the old jar with the up to date jar, hence completing the update.

See also

 StableUpdate

External links
 JUpdater readme - The readme for the application.

Patch utilities