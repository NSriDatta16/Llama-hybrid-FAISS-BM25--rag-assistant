In computer programming, a pure function is a function that has the following properties:
 the function return values are identical for identical arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams), and
 the function has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or input/output streams).

Some authors, particularly from the imperative language community, use the term "pure" for all functions that just have the above property 2 (discussed below).

Examples

Pure functions 
The following examples of C++ functions are pure:

Impure functions 
The following C++ functions are impure as they lack the above property 1:

The following C++ functions are impure as they lack the above property 2:

The following C++ functions are impure as they lack both the above properties 1 and 2:

I/O in pure functions 
I/O is inherently impure: input operations undermine referential transparency, and output operations create side effects. Nevertheless, there is a sense in which a function can perform input or output and still be pure, if the sequence of operations on the relevant I/O devices is modeled explicitly as both an argument and a result, and I/O operations are taken to fail when the input sequence does not describe the operations actually taken since the program began execution.

The second point ensures that the only sequence usable as an argument must change with each I/O action; the first allows different calls to an I/O-performing function to return different results on account of the sequence arguments having changed.

The I/O monad is a programming idiom typically used to perform I/O in pure functional languages.

Compiler optimizations 
Functions that have just the above property 2 allow for compiler optimization techniques such as common subexpression elimination and loop optimization similar to arithmetic operators. A C++ example is the length method, returning the size of a string, which depends on the memory contents where the string points to, therefore lacking the above property 1. Nevertheless, in a single-threaded environment, the following C++ code
std::string s = "Hello, world!";
int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int l = 0;

for (int i = 0; i < 10; ++i) {
  l += s.length() + a[i];
}
can be optimized such that the value of s.length() is computed only once, before the loop.

Some programming languages allow for declaring a pure property to a function:
 In Fortran and D, the pure keyword can be used to declare a function to be just side-effect free (i.e. have just the above property 2). The compiler may be able to deduce property 1 on top of the declaration.
 In the GCC, the pure attribute specifies property 2, while the const attribute specifies a truly pure function with both properties.
 Languages offering compile-time function execution may require functions to be pure, sometimes with the addition of some other constraints. Examples include constexpr of C++ (both properties).

Unit testing 
Since pure functions have identical return values for identical arguments, they are well suited to unit testing.

See also 
 Compile-time function execution: the evaluation of pure functions at compile time
 Deterministic algorithm
 Purely functional data structure
 Lambda calculus
 Side effect (computer science)
 Pure procedure
 Idempotence
 pure keyword in Fortran annotating pure functions
 constexpr keyword in C++ annotating pure functions usable at compile-time

References 

Functional programming
Subroutines