The Microsoft Enterprise Library is a set of tools and programming libraries for the Microsoft .NET Framework. It provides APIs to facilitate proven practices in core areas of programming including data access, logging, exception handling and others.  Enterprise Library is provided as pluggable binaries and source code, which can be freely used and customized by developers for their own purposes. It also ships with test cases and quickstarts.

Benefits 
 Improved productivity: Each of the Application Blocks provides several interfaces meant to satisfy common application concerns.
 Configuration-driven design: Many technical decisions about the application behavior can be delayed until configuration time of the application. For instance, if an application does not properly handle an exception, instead of adding another exception handler to the code, an administrator can configure an additional exception handling policy.
 Improved testability: Many application areas can be reconfigured to improve testing of the application in isolation.
 It reduces the work load of the developer.

Application Blocks 
Each application block addresses a specific cross-cutting concern and provides highly configurable features, which results in higher developer productivity. The Application Blocks in Enterprise Library are designed to be as agnostic as possible to the application architecture, for example the Logging Application Block may be used equally in a web, smart client or service-oriented application.

Microsoft have produced a number of other deliverables that leverage Enterprise Library Application Blocks, including the Web Service Software Factory and Smart Client Software Factory.

Utilities 
In addition to the Application Blocks, the standard Microsoft distribution of the Enterprise Library includes:
 Configuration console: to visually add an Application Block to an application's configuration.
 Out-of-proc service for production logging.

Version history 
There have been several versions of the Microsoft Enterprise Library:
 Enterprise Library 6.0 (April 2013) - Current
 Enterprise Library 5.0 Windows Azure Integration Pack (Dec 2011) - Current
 Enterprise Library 5.0 Optional Update 1 (May 2011) - Current
 Enterprise Library 5.0 Silverlight Integration Pack (May 2011) - Active
 Enterprise Library 5.0 (April 2010) - Active
 Enterprise Library 4.1 (October 2008) - Deprecated
 Enterprise Library 4.0 (May 2008) - Deprecated
 Enterprise Library 3.1 (May 2007) - Deprecated
 Enterprise Library 3.0 (April 2007) - Deprecated
 Enterprise Library 2.0 (January 2006) - Active/Retired
 Enterprise Library 1.1 (June 2005) - Deprecated
 Enterprise Library 1.0 (January 2005) - Deprecated

Unity 3.5 Portable Class Library Preview 
Unity is the dependency injection component of Microsoft Enterprise Library, which grew out of the Dependency Injection Application Block. It later became a standalone library and continues to be maintained by the community. Version 3.5, released in April 2014, adds support for Xamarin.

Version 6.0 
Microsoft Enterprise Library 6 was released in April 2013.
New features include:
 Semantic Logging Application Block (SLAB)
 Simplifying the library all around
 Generalized and updated Transient Fault Handling Application Block ("Topaz") to help increasing resiliency to errors
 Registration by convention and other improvements in Unity
 Support for Windows Store apps (Unity, Topaz)
 Support for async logging in the Logging Application Block
 Streamlined programmatic configuration of all blocks to facilitate fast start and ease of experimentation/use
 Integrating with other technologies (ASP.NET MVC and ASP.NET Web API)

This release has also retired the following 3 blocks:
 Caching Application Block
 Cryptography Application Block
 Security Application Block

Version 5.0 
Microsoft Enterprise Library 5.0 was released in April 2010, announced by Grigori Melnik.
New features include:
 Architectural refactoring fully supporting Dependency injection
 Simplification of the codebase
 Container independence (ships with Unity but you can choose to use other DI containers)
 Async database support
 Data accessors
 Fluent configuration interface support
 Configuration schemas to enable IntelliSense
 New configuration tool
 Higher performing logging
 Support for hierarchical configuration merge and redirects
 Honoring validation attributes between VAB and System.ComponentModel.DataAnnotations
 WPF validation
 Clearer error messaging throughout
 Side-by-side support
 A la carte installer
 Visual Studio 2008 and Visual Studio 2010 support
 Bug fixes
 Backwards compatibility with version 4.1

Version 5.0 Silverlight Integration Pack 
A port of Microsoft Enterprise Library 5.0 to Silverlight. Released in May 2011, it includes the following blocks:
 Caching Application Block
 Validation Application Block
 Logging Application Block
 Exception Handling Application Block
 Unity Application Block
 Policy Injection Application Block

Version 5.0 Windows Azure Integration Pack 
Released in December 2011

Unity 3.0 
Released April 2013.

Unity 2.1 
Original released in May 2011, with an update in August 2012.

Version 4.1 
This release of Enterprise Library in October 2008 is a service releases that includes the following:
 Unity interception mechanism and integration of the Policy Injection Application Block with the Unity Application Block
 Added support for generics in the Unity Application Block
 Added support for arrays in the Unity Application Block
 Performance improvements
 Usability improvements to the configuration tool
 Visual Studio 2008 Service Pack 1 support
 Bug fixes

The Application Block Software Factory and the Strong Naming Guidance Package are not included in this release but are available as a separate download. Thus, there is no longer a dependency on Guidance Automation Extensions (GAX).

Version 4.0 
This release of Enterprise Library in May 2008 includes the following:
 Integration with the Unity Application Block
 Windows Management Instrumentation (WMI) 2.0 support and improved instrumentation
 Performance improvements (particularly, in the Logging Application Block)
 Pluggable Cache Managers
 Visual Studio 2008 support
 Bug fixes

Version 3.1 
In May 2007, Enterprise Library 3.1 was released with minor enhancements to the Validation and Policy Injection Application Blocks.

Version 3.0 
In April 2007, Enterprise Library 3.0 was released. It contains new Application Blocks, a new Application Block Software factory designed to simplify the development of new Application Blocks and extensions, and new features providing better integration with .NET Framework 3.0. The 3.0 release of Enterprise Library contains the following Application Blocks:
 Caching
 Data Access
 Cryptography
 Exception Handling
 Logging
 Policy Injection (new)
 Security
 Validation

Version 2.0 
In January 2006, a new version of Enterprise Library was released that targeted .NET Framework 2.0. The most significant change in this release was that the Configuration Application Block was removed, and the blocks were updated to use .NET's improved System.Configuration capabilities. This release also included significant improvements to the Logging Application Block, and much of the Security Application Block was removed due to similar capabilities provided in .NET Framework 2.0. The .NET 2.0 release of Enterprise Library contained the following Application Blocks:
 Caching
 Data Access
 Cryptography
 Exception Handling
 Logging
 Security

Version 1.1 
Two releases of Enterprise Library were released for .NET Framework 1.1. The first was released in January 2005, followed by a minor maintenance release in June 2005. The .NET 1.1 releases of Enterprise Library contained the following Application Blocks:
 Caching
 Configuration
 Cryptography
 Data Access
 Exception Handling
 Logging and Instrumentation
 Security

Version 1.0

Future 
Ron Jacobs, a Microsoft Evangelist, described the purpose of Enterprise Library as "filling in the gaps" of .NET development between releases of the framework.  As the framework continues to advance, developers are demanding more productive development libraries.

At the same time, Microsoft platforms evolve and certain scenarios, initially addressed by the Enterprise Library, are now being supported by the platforms themselves. In this case, the patterns & practices team uses the graceful retirement process to deprecate some parts.

Microsoft continues to promote Enterprise Library for enterprise/line-of-business development, and even many Microsoft products as well as projects within Microsoft IT use it extensively.

Starting November 2013, Microsoft fully open-sourced Enterprise Library and all of its application blocks. They now accept community contributions. The latest releases of SLAB1.1 and Unity 3.5 are developed in close collaboration with the community.

In August 2015, Microsoft posted they were handing Unity Dependency Injection over to new owners (Pablo Cibraro and Pedro Wood) into a new GitHub repo.  At the same time, the patterns & practices - Enterprise Library home web site on CodePlex, announced that the remainder of the application blocks will no longer be developed. However, the source will continue to be available.

See also

 Composite UI Application Block
 Software Factories

References

Further reading

External links
 Developer's Guide to Enterprise Library, 2/e by Microsoft patterns & practices, 2013
 Dependency Injection with Unity guide by Microsoft patterns & practices, 2013
 Enterprise Library on CodePlex
 Enterprise Library on MSDN
 Microsoft Enterprise Library 5.0 by Packt Publishing

Enterprise Library
Enterprise application integration
Service-oriented architecture-related products
Enterprise Library
Software using the MS-PL license