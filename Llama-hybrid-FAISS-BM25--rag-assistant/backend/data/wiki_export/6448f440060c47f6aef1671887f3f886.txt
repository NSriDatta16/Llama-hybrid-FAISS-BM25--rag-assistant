Game Oriented Assembly Lisp (GOAL, also known as Game Object Assembly Lisp) is a programming language, a dialect of the language Lisp, made for video games developed by Andy Gavin and the Jak and Daxter team at the company Naughty Dog.

It was written using Allegro Common Lisp and used in the development of the entire Jak and Daxter series of games.

Design 

GOAL's syntax resembles the Lisp dialect Scheme, though with many idiosyncratic object-oriented programming features such as classes, inheritance, and virtual functions. GOAL encourages an imperative programming style: programs tend to consist of a sequence of events to be executed rather than the functional programming style of functions to be evaluated recursively. This is a diversion from Scheme, which allows such side effects but does not encourage imperative style.

GOAL does not run in an interpreter, but instead is compiled directly into PlayStation 2 machine code to execute. It offers limited facilities for garbage collection, relying extensively on runtime support. It offers dynamic memory allocation primitives designed to make it well-suited to running in constant memory on a video game console. GOAL has extensive support for inlined assembly language code using a special rlet form, allowing programs to freely mix assembly and higher-level constructs within one function.

The GOAL compiler is implemented in Allegro Common Lisp. It supports a long term compiling listener session which gives the compiler knowledge about the state of the compiled and thus running program, including the symbol table. This, in addition to dynamic linking, allows a function to be edited, recompiled, uploaded, and inserted into a running game without having to restart. The process is similar to the edit and continue feature offered by some C++ compilers, but allows programs to replace arbitrary amounts of code (even up to entire object files), and does not interrupt the running game with the debugger. This feature was used to implement code and to enable level streaming in the Jak and Daxter games.

Uses 

GOAL's first use was for the Jak and Daxter: The Precursor Legacy game. The predecessor language, Game Oriented Object Lisp (GOOL), was also developed by Andy Gavin for Crash Bandicoot.

Since Naughty Dog no longer employs GOAL's primary development and maintenance engineer, and they were under pressure from their new parent company, Sony, to share technology between studios, Naughty Dog transitioned away from Lisp:

However, they have since resumed using it for scripting on some PlayStation 3 games, including The Last of Us.

OpenGOAL 

A community project, OpenGOAL, started in 2020 with the goal of porting GOAL to X86-64 by decompiling existing Jak and Daxter: The Precursor Legacy and Jak II assets and recompiling them natively. It includes a GOAL compiler written in C++ as well as a Read–eval–print loop to enable a similar workflow to Naughty Dog's original implementation.

References

External links 

 Naughty Dog Software: Raising the Paradigm of Video Gaming – Again…Thanks to Lisp and Allegro CL
 Jak & Daxter: The Precursor Legacy (PowerPoint) – development overview, lessons learned
 Highly detailed continuous worlds  – about the streaming world loader

Lisp programming language family
Functional languages
Object-oriented programming languages
Common Lisp (programming language) software
Video game development
Domain-specific programming languages