A brick (or bricked device) is a mobile device, game console, router, computer or other consumer electronic device that is no longer functional due to corrupted firmware, a hardware problem, or other damage. The term analogizes the device to a brick's modern technological usefulness.

Cause and prevention
Bricking a device is most often a result of interrupting an attempt to update the device. Many devices have an update procedure which must not be interrupted before completion; if interrupted by a power failure, user intervention, or any other reason, the existing firmware may be partially overwritten and unusable. The risk of corruption can be minimized by taking all possible precautions against interruption.

Installing firmware with errors, or for a different revision of the hardware, or installing firmware incompetently patched such as DVD firmware which only plays DVDs sold in a particular region, can also cause bricking.

Devices can also be bricked by malware (malicious software) and sometimes by running software not intentionally harmful but with errors that cause damage.

Some devices include a backup copy of their firmware, stored in fixed ROM or writable non-volatile memory, which is not normally accessible to processes that could corrupt it. Should the firmware become corrupted, the device can copy from the backup memory to its main memory, restoring the firmware.

Types
Bricking is classified into two types, hard and soft, depending on the device's ability to function.

Hard brick
Hard bricked devices generally show few or no signs of life. A hard bricked device does not power on or show any vendor logo; the screen remains turned off or blank. Some of the major reasons for hard bricking include installing firmware not intended for the device, severe physical damage, interrupting a firmware flashing procedure, or following a flashing procedure incorrectly.

In the case of Android devices, some kernel bugs have been known that affect the /data partition in the eMMC chip, which becomes corrupted during certain operations such as wiping and flashing.

Recovering from a hard brick is generally considered difficult and requires the use of a more direct programming interface to the device; such an interface often exists, as there must be a way to program the initial firmware during the manufacturing process. However, additional tools or connections may be needed, such as low-level programming devices. Hardware hard brick recoveries are also considered difficult and require electrical knowledge to find and fix hardware issues. For example, an overloaded capacitor in a circuit may explode, thus stopping the flow of electricity and bricking the device. More complex examples involve permanent damage to integrated circuits and processors. Fixing such hardware bricks involve replacing these components entirely or fixing them by either bypassing if the circuit allows or other methods.

Most devices can be hard bricked in a variety of ways. Resolution generally follows a process of analyzing the boot process, determining the sub-type of hard brick, and making changes with the help of external (non-bricked) devices.

Soft brick
A "soft bricked" device may show signs of life, but fails to boot or may display an error screen. Soft bricked devices can usually be fixed relatively easily; for example, a soft bricked iOS device may display a screen instructing the user to plug it into a computer to perform an operating system recovery using iTunes computer software. In some cases, soft bricked devices are unable to be repaired without physical repairs being carried out; an example of this would be an iOS device locked with iCloud Activation Lock, of which the only solution is to contact the owner of the iCloud account the device is locked to, or to replace the entire logicboard with a non-locked board.

Un-bricking
Some devices that become "bricked" because the contents of their nonvolatile memory are incorrect can be "un-bricked" using separate hardware (a debug board) that accesses this memory directly. This is similar to the procedure for loading firmware into a new device when the memory is still empty. This kind of "bricking" and "un-bricking" occasionally happens during firmware testing and development. In other cases software and hardware procedures, often complex, have been developed that have a good chance of un-bricking the device. There is no general method; each device is different. There are also user-created modifier programs to use on bricked or partially bricked devices to make them functional. Examples include the Wiibrew program BootMii used to fix semi-bricked Nintendo Wiis, the Odin program used to flash firmware on Samsung Android devices, or the fastboot Android protocol which is capable of re-flashing a device with no software installed.

A soft bricked rooted Kindle Fire can be un-bricked by using unrooting tools.

A personal computer may be un-bricked by using various means of restoring techniques, from internal ones through the "Backup and Reset" feature, or external one using an external OS image.

Systems
In principle any device with rewritable firmware, or certain crucial settings stored into flash or EEPROM memory, can be bricked. Many, but not all, devices with user-updatable firmware have protection against bricking; devices intended to be updated only by official service personnel generally do not.

Amongst devices known to have bricking issues are: older PCs (more recent models often have dual BIOSes or some other form of protection), many mobile phones, handheld game consoles like the PlayStation Portable and Nintendo DS, video game consoles like the Nintendo Wii, Xbox 360, PlayStation 4 and Xbox One, many SCSI devices and some lines of hard disk drives and routers.

At least some older consumer market router models can become unresponsive when the user tries to define a subnet mask that does not contain one contiguous run of 1s and then 0s. If even a single bit is set so that it breaks one of the runs, the router may become bricked, unresponsive to any standard troubleshooting or resolving procedures listed in the manual. Un-bricking the router may require opening the case, shorting some jumper pins on the board, then connecting the router by the USB cable to an old PC with USB 1.1 hardware, running a special DOS level program supplied by the manufacturer, and powering the router up. This procedure will flash the router to factory settings and original firmware.

Electric cars such as the Tesla Roadster (first generation) can brick if the battery is completely discharged.

Sometimes an interrupted flash upgrade of a PC motherboard will brick the board, for example, due to a power outage (or user impatience) during the upgrade process. It is sometimes possible to un-brick such a motherboard, by scavenging a similar but otherwise broken board for a BIOS chip in the hopes that the BIOS will work even halfway, far enough to boot from floppy. Then it will be possible to retry the flash process. Sometimes it is possible to boot from a floppy, then swap the old presumably dead BIOS chip in and re-flash it. On some Gigabyte boards, it can also be possible to re-flash the bricked main BIOS using a backup BIOS. Some vendors put the BIOS chip in sockets, allowing the corrupted BIOS chip to be removed and reprogrammed using an external tool, like a universal programmer or an Arduino.

Online and mobile services
Mobile phones have a fixed identification code, the IMEI. A telephone reported stolen can have its IMEI blocked by networks, preventing them from being used as mobile devices. iOS offers a similar "Activation Lock" feature via the "Find My iPhone" security software, where a device can be remotely prevented from operating (even after it has been erased), protected by the owner's Apple ID.

Devices that have a strong dependency on online services in order to function may be bricked after services are discontinued by the manufacturer, or some other technological factor (such as expired security certificates or other services quietly becoming unavailable) effectively prevents them from operating. This can happen if the product has been succeeded by a newer model and the manufacturer no longer wishes to maintain services for the previous version, or if a company has been acquired by another or otherwise ceases operations, and chooses not to, or is no longer able to maintain its previous products. For example, Apple dropped support for OS X El Capitan in October 2018, and on 30 September 2021 the built-in security certificate expired, rendering users unable to connect to or use any iCloud services. The security certificate issued with the final updates of OS X Sierra and High Sierra have expired as of 20 May 2022. The practice has especially been scrutinized within the Internet of things and smart home markets. Bricking in these cases have been declared a means to enforce planned obsolescence.

References

Computer jargon