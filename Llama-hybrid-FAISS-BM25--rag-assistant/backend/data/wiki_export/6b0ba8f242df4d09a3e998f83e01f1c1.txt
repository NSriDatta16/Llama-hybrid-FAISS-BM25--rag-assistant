An architectural pattern is a general, reusable resolution to a commonly occurring problem in software architecture within a given context. The architectural patterns address various issues in software engineering, such as computer hardware performance limitations, high availability and minimization of a business risk. Some architectural patterns have been implemented within software frameworks.

The use of the word "pattern" in the software industry was influenced by similar concepts as expressed in traditional architecture, such as Christopher Alexander's A Pattern Language (1977) which discussed the practice in terms of establishing a pattern lexicon, prompting the practitioners of computer science to contemplate their own design lexicon.

Usage of this metaphor within the software engineering profession became commonplace after the publication of Design Patterns (1994) by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides—now commonly known as the "Gang of Four"—coincident with the early years of the public Internet, marking the onset of complex software systems "eating the world" and the corresponding need to codify the rapidly sprawling world of software development at the deepest possible level, while remaining flexible and adaptive.

Architectural patterns are similar to software design patterns but have a broader scope.

Definition
Even though an architectural pattern conveys an image of a system, it is not an architecture. An architectural pattern is a concept that solves and delineates some essential cohesive elements of a software architecture. Countless different architectures may implement the same pattern and share the related characteristics. Patterns are often defined as "strictly described and commonly available".

Architectural style
Following traditional building architecture, a software architectural style is a specific method of construction, characterized by the features that make it notable.

Some treat architectural patterns and architectural styles as the same, some treat styles as specializations of patterns. What they have in common is both patterns and styles are idioms for architects to use, they "provide a common language" or "vocabulary" with which to describe classes of systems.

The main difference is that a pattern can be seen as a solution to a problem, while a style is more general and does not require a problem to solve for its appearance.

Examples
Here is a list of architecture patterns, and corresponding software design patterns and solution patterns.

Some additional examples of architectural patterns:
 Blackboard system
 Broker pattern
 Event-driven architecture
 Implicit invocation
 Layers
Hexagonal architecture
 Microservices
 Action–domain–responder, 
Model–view–controller
Presentation–abstraction–control
Model–view–presenter
Model–view–viewmodel
Model–view–adapter
 Entity component system
Entity-control-boundary 
 Multitier architecture (often three-tier or -tier)
Object-oriented programming
 Naked objects
 Operational data store (ODS)
 Peer-to-peer
 Pipe and filter architecture
 Service-oriented architecture
 Space-based architecture
 Distributed hash table
Publish–subscribe pattern
Message broker
 Hierarchical model–view–controller

See also 
 List of software architecture styles and patterns
 Process Driven Messaging Service
 Enterprise architecture
 Common layers in an information system logical architecture

References

Bibliography

 

 

 

 
Software design patterns