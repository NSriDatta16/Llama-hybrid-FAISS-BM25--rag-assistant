Network Security Services (NSS) is a collection of cryptographic computer libraries designed to support cross-platform development of security-enabled client and server applications with optional support for hardware TLS/SSL acceleration on the server side and hardware smart cards on the client side. NSS provides a complete open-source implementation of cryptographic libraries supporting Transport Layer Security (TLS) / Secure Sockets Layer (SSL) and S/MIME. NSS releases prior to version 3.14 are tri-licensed under the Mozilla Public License 1.1, the GNU General Public License, and the GNU Lesser General Public License. Since release 3.14, NSS releases are licensed under GPL-compatible Mozilla Public License 2.0.

History
NSS originated from the libraries developed when Netscape invented the SSL security protocol.

FIPS 140 validation and NISCC testing
The NSS software crypto module has been validated five times (in 1997, 1999, 2002, 2007, and 2010) for conformance to FIPS 140 at Security Levels 1 and 2. NSS was the first open source cryptographic library to receive FIPS 140 validation. The NSS libraries passed the NISCC TLS/SSL and S/MIME test suites (1.6 million test cases of invalid input data).

Applications that use NSS
AOL, Red Hat, Sun Microsystems/Oracle Corporation, Google and other companies and individual contributors have co-developed NSS. Mozilla provides the source code repository, bug tracking system, and infrastructure for mailing lists and discussion groups. They and others named below use NSS in a variety of products, including the following:

 Mozilla client products, including Firefox, Thunderbird, SeaMonkey, and Firefox for mobile.
 AOL Communicator and AOL Instant Messenger (AIM)
 Open source client applications such as Evolution, Pidgin, and OpenOffice.org 2.0 onward (and its descendants).
 Server products from Red Hat: Red Hat Directory Server, Red Hat Certificate System, and the mod nss SSL module for the Apache web server.
 Sun server products from the Sun Java Enterprise System, including Sun Java System Web Server, Sun Java System Directory Server, Sun Java System Portal Server, Sun Java System Messaging Server, and Sun Java System Application Server, open source version of Directory Server OpenDS.
 Libreswan IKE/IPsec requires NSS. It is a fork of Openswan which could optionally use NSS.

Architecture
NSS includes a framework to which developers and OEMs can contribute patches, such as assembly code, to optimize performance on their platforms. Mozilla has certified NSS 3.x on 18 platforms. NSS makes use of Netscape Portable Runtime (NSPR), a platform-neutral open-source API for system functions designed to facilitate cross-platform development. Like NSS, NSPR has been used heavily in multiple products.

Software development kit
In addition to libraries and APIs, NSS provides security tools required for debugging, diagnostics, certificate and key management, cryptography-module management, and other development tasks. NSS comes with an extensive and growing set of documentation, including introductory material, API references, man pages for command-line tools, and sample code.

Programmers can utilize NSS as source and as shared (dynamic) libraries. Every NSS release is backward-compatible with previous releases, allowing NSS users to upgrade to new NSS shared libraries without recompiling or relinking their applications.

Interoperability and open standards
NSS supports a range of security standards, including the following:

 TLS 1.0 (RFC 2246), 1.1 (RFC 4346), 1.2 (RFC 5246), and 1.3 (RFC 8446). The Transport Layer Security (TLS) protocol from the IETF supersedes SSL v3.0 while remaining backward-compatible with SSL v3 implementations.
 SSL 3.0. The Secure Sockets Layer (SSL) protocol allows mutual authentication between a client and server and the establishment of an authenticated and encrypted connection.
 DTLS 1.0 (RFC 4347) and 1.2 (RFC 6347).
 DTLS-SRTP (RFC 5764).
 The following PKCS standards:
 PKCS #1. RSA standard that governs implementation of public-key cryptography based on the RSA algorithm.
 PKCS #3. RSA standard that governs implementation of Diffie–Hellman key agreement.
 PKCS #5. RSA standard that governs password-based cryptography, for example to encrypt private keys for storage.
 PKCS #7. RSA standard that governs the application of cryptography to data, for example digital signatures and digital envelopes.
 PKCS #8. RSA standard that governs the storage and encryption of private keys.
 PKCS #9. RSA standard that governs selected attribute types, including those used with PKCS #7, PKCS #8, and PKCS #10.
 PKCS #10. RSA standard that governs the syntax for certificate requests.
 PKCS #11. RSA standard that governs communication with cryptographic tokens (such as hardware accelerators and smart cards) and permits application independence from specific algorithms and implementations.
 PKCS #12. RSA standard that governs the format used to store or transport private keys, certificates, and other secret material.
 Cryptographic Message Syntax, used in S/MIME (RFC 2311 and RFC 2633). IETF message specification (based on the popular Internet MIME standard) that provides a consistent way to send and receive signed and encrypted MIME data.
 X.509 v3. ITU standard that governs the format of certificates used for authentication in public-key cryptography.
 OCSP (RFC 2560). The Online Certificate Status Protocol (OCSP) governs real-time confirmation of certificate validity.
 PKIX Certificate and CRL Profile (RFC 3280). The first part of the four-part standard under development by the Public-Key Infrastructure (X.509) working group of the IETF (known as PKIX) for a public-key infrastructure for the Internet.
 RSA, DSA, ECDSA, Diffie–Hellman, EC Diffie–Hellman, AES, Triple DES, Camellia, IDEA, SEED, DES, RC2, RC4, SHA-1, SHA-256, SHA-384, SHA-512, MD2, MD5, HMAC: Common cryptographic algorithms used in public-key and symmetric-key cryptography.
 FIPS 186-2 pseudorandom number generator.

Hardware support
NSS supports the PKCS #11 interface for access to  cryptographic hardware like TLS/SSL accelerators, hardware security modules and smart cards. Since most hardware vendors such as SafeNet, AEP and Thales also support this interface, NSS-enabled applications can work with high-speed crypto hardware and use private keys residing on various smart cards, if vendors provide the necessary middleware. NSS version 3.13 and above support the Advanced Encryption Standard New Instructions (AES-NI).

Java support
Network Security Services for Java (JSS) consists of a Java interface to NSS. It supports most of the security standards and encryption technologies supported by NSS. JSS also provides a pure Java interface for ASN.1 types and BER/DER encoding.

See also

 Information security
 Comparison of TLS implementations

References

External links 
 

Cryptographic software
Internet Standards
Internet protocols
Mozilla
Transport Layer Security implementation