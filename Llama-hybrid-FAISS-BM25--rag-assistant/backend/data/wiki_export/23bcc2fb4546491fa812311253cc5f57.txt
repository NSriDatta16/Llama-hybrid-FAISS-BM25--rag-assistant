Mobile app development is the act or process by which a mobile app is developed for one or more mobile devices, which can include personal digital assistants (PDA), enterprise digital assistants (EDA), or mobile phones. Such software applications are specifically designed to run on mobile devices, taking numerous hardware constraints into consideration. Common constraints include CPU architecture and speeds, available memory (RAM), limited data storage capacities, and considerable variation in displays (technology, size, dimensions, resolution) and input methods (buttons, keyboard, touch screens with/without styluses). These applications (or 'apps') can be pre-installed on phones during manufacturing or delivered as web applications, using server-side or client-side processing (e.g., JavaScript) to provide an "application-like" experience within a web browser.

Mobile app development has been steadily growing, in revenues and jobs created. A 2013 analyst report estimates there are 529,000 direct app economy jobs within the EU then 28 members (including the UK), 60 percent of which are mobile app developers.

Overview 

In order to facilitate the development of applications for mobile devices, and consistency thereof, various approaches have been taken.

Most companies that ship a product (e.g. Apple, iPod/iPhone/iPad) provide an official software development kit (SDK). They may also opt to provide some form of Testing and/or Quality Assurance (QA). In exchange for being provided the SDK or other tools, it may be necessary for a prospective developer to sign a some form of non-disclosure agreement, or NDA, which restricts the sharing of privileged information.

As part of the development process, mobile user interface (UI) design is an essential step in the creation of mobile apps. Mobile UI designers consider constraints, contexts, screen space, input methods, and mobility as outlines for design. Constraints in mobile UI design in constraints include the limited attention span of the user and form factors, such as a mobile device's screen size for a user's hand(s). Mobile UI context includes signal cues from user activity, such as the location where or the time when the device is in use, that can be observed from user interactions within a mobile app. Such context clues can be used to provide automatic suggestions when scheduling an appointment or activity or to filter a list of various services for the user.

The user is often the focus of interaction with their device, and the interface entails components of both hardware and software. User input allows for the users to manipulate a system, and device's output allows the system to indicate the effects of the users' manipulation.

Overall, mobile UI design's goal is mainly for an understandable, user-friendly interface. Functionality is supported by mobile enterprise application platforms or integrated development environments (IDEs).

Developers of mobile applications must also consider a large array of devices with different screen sizes, hardware specifications, and configurations because of intense competition in mobile hardware and changes within each of the platforms.

Today, mobile apps are usually distributed via an official online outlet or marketplace (e.g. Apple - The App Store, Google - Google Play) and there is a formalized process by which developers submit their apps for approval and inclusion in those marketplaces. Historically, however, that was not always the case.

Mobile UIs, or front-ends, rely on mobile back-ends to support access to enterprise systems.  The mobile back-end facilitates data routing, security, authentication, authorization, working off-line, and service orchestration. This functionality is supported by a mix of middleware components including mobile app server, mobile backend as a service (MBaaS), and service-oriented architecture (SOA) infrastructure.

Platform 
The software development packages needed to develop, deploy, and manage mobile apps are made from many components and tools which allow a developer to write, test, and deploy applications for one or more target platforms.

Front-end development tools 

Front-end development tools are focused on the user interface and user experience (UI-UX) and provide the following abilities:

 UI design tools
 SDKs to access device features
 Cross-platform accommodations/support

Notable tools are listed below.

First-Party 

First party tools include official SDKs published by, or on behalf of, the company responsible for the
design of a particular hardware platform (e.g. Apple, Google, etc) as well as any third-party software that is officially supported for the purpose of developing mobile apps for that hardware.

Second Party

Third Party

Back-end servers

Back-end tools pick up where the front-end tools leave off, and provide a set of reusable services that are centrally managed and controlled and provide the following abilities:

 Integration with back-end systems
 User authentication-authorization
 Data services
 Reusable business logic

Available tools are listed below.

Security add-on layers

With bring your own device (BYOD) becoming the norm within more enterprises, IT departments often need stop-gap, tactical solutions that layer atop existing apps, phones, and platform component. Features include

 App wrapping for security
 Data encryption
 Client actions
 Reporting and statistics

System software

Many system-level components are needed to have a functioning platform for developing mobile apps.

Criteria for selecting a development platform usually contains the target mobile platforms, existing infrastructure and development skills. When targeting more than one platform with cross-platform development it is also important to consider the impact of the tool on the user experience.  Performance is another important criteria, as research on mobile apps indicates a strong correlation between application performance and user satisfaction. Along with performance and other criteria, the availability of the technology and the project's requirement may drive the development between native and cross-platform environments.  To aid the choice between native and cross-platform environments, some guidelines and benchmarks have been published. Typically, cross-platform environments are reusable across multiple platforms, leveraging a native container while using HTML, CSS, and JavaScript for the user interface. In contrast, native environments are targeted at one platform for each of those environments. For example, Android development occurs in the Eclipse IDE using Android Developer Tools (ADT) plugins, Apple iOS development occurs using Xcode IDE with Objective-C and/or Swift, Windows and BlackBerry each have their own development environments.

Mobile app testing
Mobile applications are first tested within the development environment using emulators and later subjected to field testing. Emulators provide an inexpensive way to test applications on mobile phones to which developers may not have physical access. The following are examples of tools used for testing application across the most popular mobile operating systems.

 Google Android Emulator - an Android emulator that is patched to run on a Windows PC as a standalone app, without having to download and install the complete and complex Android SDK. It can be installed and Android compatible apps can be tested on it.
 The official Android SDK Emulator - a mobile device emulator which mimics all of the hardware and software features of a typical mobile device (without the calls).
 TestiPhone - a web browser-based simulator for quickly testing iPhone web applications. This tool has been tested and works using Internet Explorer 7, Firefox 2 and Safari 3.
 iPhoney - gives a pixel-accurate web browsing environment and it is powered by Safari. It can be used while developing web sites for the iPhone.  It is not an iPhone simulator but instead is designed for web developers who want to create 320 by 480 (or 480 by 320) websites for use with iPhone. iPhoney will only run on OS X 10.4.7 or later.
 BlackBerry Simulator - There are a variety of official BlackBerry simulators available to emulate the functionality of actual BlackBerry products and test how the device software, screen, keyboard and trackwheel will work with application.
 Windows UI Automation - To test applications that use the Microsoft UI Automation technology, it requires Windows Automation API 3.0. It is pre-installed on Windows 7, Windows Server 2008 R2 and later versions of Windows. On other operating systems, you can install using Windows Update or download it from the Microsoft Web site.
 MobiOne Developer - a mobile Web integrated development environment (IDE) for Windows that helps developers to code, test, debug, package and deploy mobile Web applications to devices such as iPhone, BlackBerry, Android, and the Palm Pre. MobiOne Developer was officially declared End of Life by the end of 2014.

Tools include
 eggPlant: A GUI-based automated test tool for mobile app across all operating systems and devices.
 Ranorex: Test automation tools for mobile, web and desktop apps.
 Testdroid: Real mobile devices and test automation tools for testing mobile and web apps.

Patents
Many patent applications are pending for new mobile phone apps. Most of these are in the technological fields of business methods, database management, data transfer, and operator interface.

See also  

 List of mobile app distribution platforms
 Lazy user model
 Mobile application management
 Mobile backend as a service
 Mobile business intelligence
 Mobile computing
 Mobile-device testing
 Mobile enterprise application platform
 Mobile games
 Mobile interaction
 Mobile marketing
 Mobile web development
 Mobile workflow
 Multi-channel app development
 MoSoSo, mobile social software
 On-Device Portal
 WURFL and WALL
 JQuery Mobile
 HTML5

References

 
 

fr:Application mobile
pl:Aplikacje mobilne
fi:Mobiiliohjelmisto