EuLisp is a statically and dynamically scoped Lisp dialect developed by a loose formation of industrial and academic Lisp users and developers from around Europe. The standardizers intended to create a new Lisp "less encumbered by the past" (compared to Common Lisp), and not so minimalist as Scheme. Another objective was to integrate the object-oriented programming paradigm well. It is a third-generation programming language.

Origin
The language definition process first began in a meeting in 1985 in Paris and took several years. The complete specification and a first implementation (interpreted-only) were made available in 1990.

Distinguishing features 

Its main traits are that it is a Lisp-1 (no separate function and variable namespaces), has a Common Lisp Object System (CLOS) style generic-function type object-oriented system named The EuLisp Object System (TELOS) integrated from the ground up, has a built-in module system, and is defined in layers to promote the use of the Lisp on small, embedded hardware and educational machines. It supports continuations, though not as powerfully as Scheme. It has a simple lightweight process mechanism (threads).

Summary
 A definition in levels, currently Level-0 and Level-1
 Modules based on (non-first-class) lexical environments.
 Lexically scoped, with dynamic or late binding available in Level-1.
 A single name space for function and variable names (like Scheme).
 Lightweight processes.
 A fully integrated object system with single inheritance at Level-0 and multiple inheritance and meta-object protocol at Level-1.
 An object-oriented condition system.

Implementations
An early implementation of EuLisp was Free and Eventually Eulisp (FEEL). The successor to FEEL was Youtoo (interpreted and compiled versions), by University of Bath in the United Kingdom. An interpreter for the basic level of EuLisp, level-0, was written by Russell Bradford in XScheme, an implementation of Scheme by David Michael Betz, originally named EuScheme EuScheme but the most recent version is renamed EuXLisp  to avoid confusion. Also Eu2C , a EuLisp optimizing compiler, was created by Fraunhofer ISST under the APPLY project in Germany .

A dialect of EuLisp was developed, named Plural EuLisp. It was EuLisp with parallel computing programming extensions.

Example
Example use of classes in the algorithm to solve the "Towers of Hanoi" problem.
(defmodule hanoi
  (syntax (syntax-0)
   import (level-0)
   export (hanoi))

;;;-------------------------------------------------
;;; Tower definition
;;;-------------------------------------------------
(defconstant *max-tower-height* 10)

(defclass <tower> ()
  ((id reader: tower-id keyword: id:)
   (blocks accessor: tower-blocks)))

(defun build-tower (x n)
  (labels ((loop (i res)
                 (if (= i 0) res
                   (loop (- i 1) (cons i res)))))
          ((setter tower-blocks) x (loop n ()))
          x))

(defmethod generic-print ((x <tower>) (s <stream>))
  (sformat s "#<tower ~a: ~a>" (tower-id x) (tower-blocks x)))

;;;-------------------------------------------------
;;; Access to tower blocks
;;;-------------------------------------------------
(defgeneric push (x y))

(defmethod push ((x <tower>) (y <fpi>))
  (let ((blocks (tower-blocks x)))
    (if (or (null? blocks) (< y (car blocks)))
        ((setter tower-blocks) x (cons y blocks))
      (error <condition>
             (fmt "cannot push block of size ~a on tower ~a" y x)))))

(defgeneric pop (x))

(defmethod pop ((x <tower>))
  (let ((blocks (tower-blocks x)))
    (if blocks
        (progn
          ((setter tower-blocks) x (cdr blocks))
          (car blocks))
      (error <condition>
             (fmt "cannot pop block from empty tower ~a" x)))))

;;;-------------------------------------------------
;;; Move n blocks from tower x1 to tower x2 using x3 as buffer
;;;-------------------------------------------------
(defgeneric move (n x1 x2 x3))

(defmethod move ((n <fpi>) (x1 <tower>) (x2 <tower>) (x3 <tower>))
  (if (= n 1)
      (progn
        (push x2 (pop x1))
        (print x1 nl x2 nl x3 nl nl))
    (progn
      (move (- n 1) x1 x3 x2)
      (move 1 x1 x2 x3)
      (move (- n 1) x3 x2 x1))))

;;;-------------------------------------------------
;;; Initialize and run the 'Towers of Hanoi'
;;;-------------------------------------------------
(defun hanoi ()
  (let ((x1 (make <tower> id: 0))
        (x2 (make <tower> id: 1))
        (x3 (make <tower> id: 2)))
    (build-tower x1 *max-tower-height*)
    (build-tower x2 0)
    (build-tower x3 0)
    (print x1 nl x2 nl x3 nl nl)
    (move *max-tower-height* x1 x2 x3)))

(hanoi)

;;;-------------------------------------------------
)  ;; End of module hanoi
;;;-------------------------------------------------

References

"An Overview of EuLisp", Julian Padget, Greg Nuyens, and Harry Bretthauer, editors. LISP and Symbolic Computation, Volume 6, Number 1-2, 1993, pages 9–98.
"Balancing the EuLisp Metaobject Protocol", Harry Bretthauer, Jürgen Kopp, Harley Davis, and Keith Playford. LISP and Symbolic Computation, Volume 6, Issue 1–2, August 1993, pages 119–138.
"EuLisp in Education", R. Bradford and D.C. DeRoure. LISP and Symbolic Computation, Volume 6, Number 1-2, pages 99–118.
"Applications of Telos", Peter Broadbery, Christopher Burdorf. LISP and Symbolic Computation, Volume 6, Issue 1–2, August 1993, pages 139–158.
"A Practical Approach to Type Inference for EuLisp", Andreas Kind and Horst Friedrich. LISP and Symbolic Computation, Volume 6, Issue 1–2, August 1993, pages 159–176.
"EuLisp Threads: A Concurrency Toolbox", Neil Berrington, Peter Broadbery, David DeRoure, and Julian Padget. LISP and Symbolic Computation, Volume 6, Issue 1–2, August 1993, pages 177–200.
"Plural EuLisp: A Primitive Symbolic Data Parallel Model", Simon Merrall, Julian Padget. LISP and Symbolic Computation, Volume 6, Issue 1–2, August 1993, pages 201–219.
"A Conservative Garbage Collector for an EuLisp to ASM/C Compiler", E. Ulrich Kriegel. OOPSLA'93 Workshop on Garbage Collection and Memory Management, Washington, DC, September 27, 1993.
"An Implementation of Telos in Common Lisp" , Object Oriented Systems, vol. 3, pp. 31–49, 1996. ISSN 0969-9767.

External links

 EuLisp FAQ and links
 Version .99 of the final 1993 specification – (PDF)
 Version .991  unofficial updated draft definition (2010) – (PDF)
 EuScheme sources
 , latest versions of: EuLisp (with 64-bit support and more), EuXLisp, Eu2C

Dynamically typed programming languages
Functional languages
Lisp programming language family
Multi-paradigm programming languages