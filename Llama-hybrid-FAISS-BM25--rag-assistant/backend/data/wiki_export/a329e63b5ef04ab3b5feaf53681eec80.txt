In probability theory, the Gillespie algorithm (or the Doob–Gillespie algorithm or Stochastic Simulation Algorithm, the SSA) generates a statistically correct trajectory (possible solution) of a stochastic equation system for which the reaction rates are known. It was created by Joseph L. Doob and others (circa 1945), presented by Dan Gillespie in 1976, and popularized in 1977 in a paper where he uses it to simulate chemical or biochemical systems of reactions efficiently and accurately using limited computational power (see stochastic simulation). As computers have become faster, the algorithm has been used to simulate increasingly complex systems. The algorithm is particularly useful for simulating reactions within cells, where the number of reagents is low and keeping track of every single reaction is computationally feasible. Mathematically, it is a variant of a dynamic Monte Carlo method and similar to the kinetic Monte Carlo methods. It is used heavily in computational systems biology.

History
The process that led to the algorithm recognizes several important steps. In 1931, Andrei Kolmogorov introduced the differential equations corresponding to the time-evolution of stochastic processes that proceed by jumps, today known as Kolmogorov equations (Markov jump process) (a simplified version is known as master equation in the natural sciences). It was William Feller, in 1940, who found the conditions under which the Kolmogorov equations admitted (proper) probabilities as solutions. In his Theorem I (1940 work) he establishes that the time-to-the-next-jump was exponentially distributed and the probability of the next event is proportional to the rate. As such, he established the relation of Kolmogorov's equations with stochastic processes.
Later, Doob (1942, 1945) extended Feller's solutions beyond the case of pure-jump processes. The method was implemented in computers by David George Kendall (1950) using the Manchester Mark 1 computer and later used by Maurice S. Bartlett (1953) in his studies of epidemics outbreaks. Gillespie (1977) obtains the algorithm in a different manner by making use of a physical argument.

Idea behind the algorithm
Traditional continuous and deterministic biochemical rate equations do not accurately predict cellular reactions since they rely on bulk reactions that require the interactions of millions of molecules. They are typically modeled as a set of coupled ordinary differential equations. In contrast, the Gillespie algorithm allows a discrete and stochastic simulation of a system with few reactants because every reaction is explicitly simulated. A trajectory corresponding to a single Gillespie simulation represents an exact sample from the probability mass function that is the solution of the master equation.

The physical basis of the algorithm is the collision of molecules within a reaction vessel. It is assumed that collisions are frequent, but collisions with the proper orientation and energy are infrequent. Therefore, all reactions within the Gillespie framework must involve at most two molecules. Reactions involving three molecules are assumed to be extremely rare and are modeled as a sequence of binary reactions. It is also assumed that the reaction environment is well mixed.

Algorithm
A recent review (Gillespie, 2007) outlines three different, but equivalent formulations; the direct, first-reaction, and first-family methods, whereby the former two are special cases of the latter. The formulation of the direct and first-reaction methods is centered on performing the usual Monte-Carlo inversion steps on the so-called "fundamental premise of stochastic chemical kinetics", which mathematically is the function

,

where each of the  terms are propensity functions of an elementary reaction, whose argument is , the vector of species counts. The  parameter is the time to the next reaction (or sojourn time), and  is the current time. To paraphrase Gillespie, this expression  is read as "the probability, given , that the system's next reaction will occur in the infinitesimal time interval , and will be of stoichiometry corresponding to the th reaction". This formulation provides a window to the direct and first-reaction methods by implying  is an exponentially-distributed random variable, and  is "a statistically independent integer random variable with point probabilities ".

Thus, the Monte-Carlo generating method is simply to draw two pseudorandom numbers,  and  on , and compute

,
and 
 the smallest integer satisfying .

Utilizing this generating method for the sojourn time and next reaction, the direct method algorithm is stated by Gillespie as

 1. Initialize the time  and the system's state 
 2. With the system in state  at time , evaluate all the  and their sum 
 3. Calculate the above value of  and 
 4. Effect the next reaction by replacing  and 
 5. Record  as desired. Return to step 1, or else end the simulation.

Where  represents adding the  component of your given state-change vector . This family of algorithms is computationally expensive and thus many modifications and adaptations exist, including the next reaction method (Gibson & Bruck), tau-leaping, as well as hybrid techniques where abundant reactants are modeled with deterministic behavior. Adapted techniques generally compromise the exactitude of the theory behind the algorithm as it connects to the master equation, but offer reasonable realizations for greatly improved timescales. The computational cost of exact versions of the algorithm is determined by the coupling class of the reaction network. In weakly coupled networks, the number of reactions that is influenced by any other reaction is bounded by a small constant. In strongly coupled networks, a single reaction firing can in principle affect all other reactions. An exact version of the algorithm with constant-time scaling for weakly coupled networks has been developed, enabling efficient simulation of systems with very large numbers of reaction channels (Slepoy Thompson Plimpton 2008). The generalized Gillespie algorithm that accounts for the non-Markovian properties of random biochemical events with delay has been developed by Bratsun et al. 2005 and independently Barrio et al. 2006, as well as (Cai 2007). See the articles cited below for details.

Partial-propensity formulations, as developed independently by both Ramaswamy et al. (2009, 2010) and Indurkhya and Beal (2010), are available to construct a family of exact versions of the algorithm whose computational cost is proportional to the number of chemical species in the network, rather than the (larger) number of reactions. These formulations can reduce the computational cost to constant-time scaling for weakly coupled networks and to scale at most linearly with the number of species for strongly coupled networks. A partial-propensity variant of the generalized Gillespie algorithm for reactions with delays has also been proposed (Ramaswamy Sbalzarini 2011). The use of partial-propensity methods is limited to elementary chemical reactions, i.e., reactions with at most two different reactants. Every non-elementary chemical reaction can be equivalently decomposed into a set of elementary ones, at the expense of a linear (in the order of the reaction) increase in network size.

Examples

Reversible binding of A and B to form AB dimers
A simple example may help to explain how the Gillespie algorithm works. Consider a system of molecules of two types,  and . In this system,  and  reversibly bind together to form  dimers such that two reactions are possible: either A and B react reversibly to form an  dimer, or an  dimer dissociates into  and . The reaction rate constant for a given single A molecule reacting with a given single  molecule is , and the reaction rate for an  dimer breaking up is .

If at time t there is one molecule of each type then the rate of dimer formation is , while if there are  molecules of type  and  molecules of type , the rate of dimer formation is . If there are  dimers then the rate of dimer dissociation is .

The total reaction rate, , at time t is then given by

So, we have now described a simple model with two reactions. This definition is independent of the Gillespie algorithm. We will now describe how to apply the Gillespie algorithm to this system.

In the algorithm, we advance forward in time in two steps: calculating the time to the next reaction, and determining which of the possible reactions the next reaction is. Reactions are assumed to be completely random, so if the reaction rate at a time t is , then the time, δt, until the next reaction occurs is a random number drawn from exponential distribution function with mean . Thus, we advance time from t to t + δt.

The probability that this reaction is an  molecule binding to a  molecule is simply the fraction of total rate due to this type of reaction, i.e.,

the probability that reaction is 

The probability that the next reaction is an  dimer dissociating is just 1 minus that. So with these two probabilities we either form a dimer by reducing  and  by one, and increase  by one, or we dissociate a dimer and increase  and  by one and decrease  by one.

Now we have both advanced time to t + δt, and performed a single reaction. The Gillespie algorithm just repeats these two steps as many times as needed to simulate the system for however long we want (i.e., for as many reactions). The result of a Gillespie simulation that starts with  and  at t=0, and where  and , is shown at the right. For these parameter values, on average there are 8  dimers and 2 of  and  but due to the small numbers of molecules fluctuations around these values are large. The Gillespie algorithm is often used to study systems where these fluctuations are important.

That was just a simple example, with two reactions. More complex systems with more reactions are handled in the same way. All reaction rates must be calculated at each time step, and one chosen with probability equal to its fractional contribution to the rate. Time is then advanced as in this example.

Stochastic self-assembly

The Gard model describes self-assembly of lipids into aggregates. Using stochastic simulations it shows the emergence of multiple types of aggregates and their evolution.

References

Further reading

 
 
 
 
 
 
 
 
 
 
 
 
 
 (Slepoy Thompson Plimpton 2008): 
 (Bratsun et al. 2005): 
 (Barrio et al. 2006): 
 (Cai 2007): 
 (Barnes Chu 2010): 
 (Ramaswamy González-Segredo Sbalzarini 2009): 
 (Ramaswamy Sbalzarini 2010): 
 (Indurkhya Beal 2010): 
 (Ramaswamy Sbalzarini 2011): 
 (Yates Klingbeil 2013): 
 

Chemical kinetics
Computational chemistry
Monte Carlo methods
Stochastic simulation