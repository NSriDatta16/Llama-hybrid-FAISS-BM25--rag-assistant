CLI languages are computer programming languages that are used to produce libraries and programs that conform to the Common Language Infrastructure (CLI) specifications. With some notable exceptions, most CLI languages compile entirely to the Common Intermediate Language (CIL), an intermediate language that can be executed using the Common Language Runtime, implemented by .NET Framework, .NET Core, and Mono. Some of these languages also require the Dynamic Language Runtime (DLR).

As the program is being executed, the CIL code is just-in-time compiled (and cached) to the machine code appropriate for the architecture on which the program is running. This step can be omitted manually by caching at an earlier stage using an "ahead of time" compiler such as Microsoft's ngen.exe and Mono's "-aot" option.

Notable CLI languages

Current languages
Ada for .Net: Ada is a multi-paradigm language, that is strongly focused on code safety, maintainability and correctness. 
C#: Most widely used CLI language, bearing strong similarities to Java, and some similarity to Object Pascal (Delphi) and C++. Implementations provided by .NET Framework, .NET Core, and Mono.
C++/CLI: A version of C++ including extensions for using Common Language Runtime (CLR) objects.  Provides full support for .NET Framework and library only support for .NET Core. Produces mixed-mode code that produces native code for C++ objects. The compiler is provided by Microsoft.
ClojureCLR: A port of Clojure to the CLI, part of the Clojure project.
Component Pascal: A CLI-compliant Oberon dialect. It is a strongly typed language in the heritage of Pascal and Modula-2 but with powerful object-oriented extensions.
Eiffel: Purely object-oriented language, focused on software quality, includes integrated design by contract and multiple inheritance. CLI compliant.
F#: A multi-paradigm CLI language supporting functional programming and imperative object-oriented programming disciplines. Variant of ML and is largely compatible with OCaml. Implementations provided by .NET Framework, .NET Core, and Mono.
F*: A dependently typed language based on F#.
IronPython: An open-source CLI implementation of Python, built on the Dynamic Language Runtime (DLR).
IronScheme - a R6RS-compliant Scheme implementation built on the DLR
Oxygene: An Object Pascal-based CLI language.
PascalABC.NET: An Object Pascal-based language implemented on the .NET Framework.
PeachPie: A compiler of PHP to .NET and .NET Core. Successor of Phalanger.
PowerBuilder: Can target CLI since version 11.1.
RemObjects Mercury: An Visual Basic .Net-based CLI language.
Small Basic: A BASIC-derived programming language created by Microsoft for teaching programming. Supported releases target .NET Framework versions 3.5 and 4.5.
Silverfrost FTN95: An implementation of Fortran 95.
Swift via the  RemObjects Silver compiler & multi-platform targeting.
Synergy DBL .NET: an object oriented CLI compliant implementation of DBL and DIBOL produced by Synergex.
Team Developer: SQLWindows Application Language (SAL) since Team Developer 6.0.
Visual Basic (VB.NET): A redesigned dialect of Visual Basic. Implementations provided by .NET Framework, .NET Core, and Mono.
Visual COBOL: An enhanced version of COBOL ported to the .NET Framework and to the JVM, produced by Micro Focus.
PowerShell: An object-oriented command-line shell. PowerShell can dynamically load .NET assemblies that were written in any CLI language. PowerShell itself uses a unique scripting syntax and uses curly-braces, similar to other C-based languages.
XSharp: X# is an open source development language for Microsoft .NET, based on the xBase language. It comes in different flavours, such as Core, Visual Objects, Vulcan.NET, xBase++, Harbour, Foxpro and more.

Abandoned or deprecated languages
A#: CLI implementation of Ada.
Axum: An actor model concurrent programming language.
Boo: A statically typed CLI language, inspired by Python.
Cobra: A CLI language with static and dynamic typing, design by contract and built-in unit testing.
Fantom: A language compiling to .NET(no longer under active development) and to the JVM
GrGen.NET - a CLI language for graph rewriting
IronRuby: An open-source CLI implementation of Ruby, built on the Dynamic Language Runtime (DLR).
J#: A CLI-compliant implementation of Java. The compiler is provided by Microsoft. J# has been discontinued. The last version shipped with Visual Studio 2005, and was supported until 2015.
JScript .NET: A CLI implementation of ECMAScript version 3, compatible with JScript. Contains extensions for static typing. Deprecated in favor of Managed JScript.
Managed JScript: A CLI implementation of JScript built on the Dynamic Language Runtime (DLR). Conforms to ECMAScript version 3.
Managed Extensions for C++: A version of C++ targeting the Common Language Runtime (CLR). Deprecated in favor of C++/CLI.
Niecza - A CLI implementation of Perl 6.
Nemerle: A multi-paradigm language similar to C#, OCaml and Lisp.
Phalanger: An implementation of PHP with extensions for ASP.NET. Predecessor of PeachPie.
UnityScript: JavaScript-like language, specific to the Unity game engine. Deprecated in favor of C#.

Related
 IKVM.NET: A Java virtual machine that can be used to run Java and other JVM languages (e.g., JVM like Groovy, Scala) upon CLI implementations.

See also
 List of JVM languages
 .NET Framework, the original, soon-to-be-deprecated implementation.
 Common Language Infrastructure (CLI), an open specification of the run time environment (virtual machine component) of .NET framework
 Common Intermediate Language (CIL), an intermediate language that can be executed using an implementation of CLI 
 Common Language Runtime, the virtual machine component of Microsoft's implementation of the .NET Framework.
 .NET standard libraries
 Base Class Library (BCL)
 Mono, an open source implementation of .NET Framework, used in many places including Unity and Xamarin.
 .NET Core, the open source cross-platform successor to .NET Framework.

References

Common Language Infrastructure
CLI