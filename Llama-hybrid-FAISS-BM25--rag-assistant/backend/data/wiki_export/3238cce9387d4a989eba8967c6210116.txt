The radix economy of a number in a particular base (or radix) is the number of digits needed to express it in that base, multiplied by the base (the number of possible values each digit could have). This is one of various proposals that have been made to quantify the relative costs of using different radices in representing numbers, especially in computer systems.

Radix economy also has implications for organizational structure, networking, and other fields.

Definition
The radix economy E(b,N) for any particular number N in a given base b is defined as

 

where we use the floor function  and the base-b logarithm .

If both b and N are positive integers, then the radix economy  is equal to the number of digits needed to express the number N in base  b, multiplied by base b. The radix economy thus measures the cost of storing or processing the number N in base b if the cost of each "digit" is proportional to b. A base with a lower average radix economy is therefore, in some senses, more efficient than a base with a higher average radix economy.

For example, 100 in decimal has three digits, so its radix economy is 10×3 = 30; its binary representation has seven digits (11001002) so it has radix economy 2×7 = 14 in base 2; in base 3 its representation has five digits (102013) with a radix economy of 3×5 = 15;  in base 36 (2S36) its radix economy is 36×2 = 72.

If the number is imagined to be represented by a combination lock or a tally counter, in which each wheel has b digit faces, from  and having  wheels, then the radix economy  is the total number of digit faces needed to inclusively represent any integer from 0 to N.

Asymptotic behavior
The radix economy for large N can be approximated as follows:

 
 

The asymptotically best radix economy is obtained for base 3, since  attains a minimum for  in the positive integers:

For base 10, we have:

Radix economy of different bases

e has the lowest radix economy
Here is a proof that  base e  is the real-valued base with the lowest average radix economy:

First, note that the function

 

is strictly decreasing on 1 < x < e and strictly increasing on x > e. Its minimum, therefore, for x > 1, occurs at e.

Next, consider that
 

Then for a constant N,  will have a minimum at e for the same reason f(x) does, meaning e is therefore the base with the lowest average radix economy.  Since 2 / ln(2) ≈ 2.89 and 3 / ln(3) ≈ 2.73, it follows that 3 is the integer base with the lowest average radix economy.

Comparing different bases
The radix economy of bases b1 and b2 may be compared for a large value of N:

 

Choosing e for b2 gives the economy relative to that of e by the function:

 

The average radix economies of various bases up to several arbitrary numbers (avoiding proximity to powers of 2 through 12 and e) are given in the table below.  Also shown are the radix economies relative to that of e.  Note that the radix economy of any number in base 1 is that number, making it the most economical for the first few integers, but as N climbs to infinity so does its relative economy.

{| class="wikitable sortable"
|-
! Base b
! Avg. E(b,N)
N = 1 to 6
! Avg. E(b,N)
N = 1 to 43
! Avg. E(b,N)
N = 1 to 182
! Avg. E(b,N)
N = 1 to 5329
! 
! Relative size ofE (b )/E (e )
|- align=right
| 1
| 3.5
| 22.0
| 91.5
| 2,665.0
|  || align="left"|—
|- align=right
| 2
| 4.7
| 9.3
| 13.3
| 22.9
| 
|- align=right
| e
| 4.5
| 9.0
| 12.9
| 22.1
| 
|- align=right
| 3
| 5.0
| 9.5
| 13.1
| 22.2
| 
|- align=right
| 4
| 6.0
| 10.3
| 14.2
| 23.9
| 
|- align=right
| 5
| 6.7
| 11.7
| 15.8
| 26.3
| 
|- align=right
| 6
| 7.0
| 12.4
| 16.7
| 28.3
| 
|- align=right
| 7
| 7.0
| 13.0
| 18.9
| 31.3
| 
|- align=right
| 8
| 8.0
| 14.7
| 20.9
| 33.0
| 
|- align=right
| 9
| 9.0
| 16.3
| 22.6
| 34.6
| 
|- align=right
| 10
| 10.0
| 17.9
| 24.1
| 37.9
| 
|- align=right
| 12
| 12.0
| 20.9
| 25.8
| 43.8
| 
|- align=right
| 15
| 15.0
| 25.1
| 28.8
| 49.8
| 
|- align=right
| 16
| 16.0
| 26.4
| 30.7
| 50.9
| 
|- align=right
| 20
| 20.0
| 31.2
| 37.9
| 58.4
| 
|- align=right
| 30
| 30.0
| 39.8
| 55.2
| 84.8
| 
|- align=right
| 40
| 40.0
| 43.7
| 71.4
| 107.7
| 
|- align=right
| 60
| 60.0
| 60.0
| 100.5
| 138.8
| 
|}

Ternary tree efficiency
One result of the relative economy of base 3 is that ternary search trees offer an efficient strategy for retrieving elements of a database. A similar analysis suggests that the optimum design of a large telephone menu system to minimise the number of menu choices that the average customer must listen to (i.e. the product of the number of choices per menu and the number of menu levels) is to have three choices per menu.

Computer hardware efficiencies
The 1950 reference High-Speed Computing Devices describes a particular situation using contemporary technology. Each digit of a number would be stored as the state of a ring counter composed of several triodes. Whether vacuum tubes or thyratrons, the triodes were the most expensive part of a counter. For small radices r less than about 7, a single digit required r triodes. (Larger radices required 2r triodes arranged as r flip-flops, as in ENIAC's decimal counters.)

So the number of triodes in a numerical register with n digits was rn. In order to represent numbers up to 106, the following numbers of tubes were needed:

{| class="wikitable"
|-
! Radix r
! Tubes N = rn
|-
| 2
| 39.20
|-
| 3
| 38.24
|-
| 4
| 39.20
|-
| 5
| 42.90
|-
| 10
| 60.00
|}

The authors conclude,

Other criteria
In another application, the authors of High-Speed Computing Devices consider the speed with which an encoded number may be sent as a series of high-frequency voltage pulses. For this application the compactness of the representation is more important than in the above storage example. They conclude, "A saving of 58 per cent can be gained in going from a binary to a ternary system. A smaller percentage gain is realized in going from a radix 3 to a radix 4 system."

Binary encoding has a notable advantage over all other systems: greater noise immunity. Random voltage fluctuations are less likely to generate an erroneous signal, and circuits may be built with wider voltage tolerances and still represent unambiguous values accurately.

See also
Ternary computer
List of numeral systems

References

Further reading
S.L. Hurst, "Multiple-Valued Logic-Its Status and its Future", IEEE trans. computers, Vol. C-33, No 12, pp. 1160–1179, DEC 1984.
J. T. Butler, "Multiple-Valued Logic in VLSI Design, ” IEEE Computer Society Press Technology Series, 1991.
C.M. Allen, D.D. Givone “The Allen-Givone Implementation Oriented Algebra", in Computer Science and Multiple-Valued Logic: Theory and Applications, D.C. Rine, second edition, D.C. Rine, ed., The Elsevier North-Holland, New York, N.Y., 1984. pp. 268–288.
G. Abraham, "Multiple-Valued Negative Resistance Integrated Circuits", in Computer Science and Multiple-Valued Logic: Theory and Applications, D.C. Rine, second edition, D.C. Rine, ed., The Elsevier North-Holland, New York, N.Y., 1984. pp. 394–446.

Positional numeral systems
Computer arithmetic
Ternary computers