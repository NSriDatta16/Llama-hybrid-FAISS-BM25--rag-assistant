Chain loading is a method used by computer programs to replace the currently executing program with a new program, using a  common data area to pass information from the current program to the new program.  It occurs in several areas of computing.

Chain loading is similar to the use of overlays. Unlike overlays, however, chain loading replaces the currently executing program in its entirety.  Overlays usually replace only a portion of the running program. Like the use of overlays, the use of chain loading increases the I/O load of an application.

Chain loading in boot manager programs 
In operating system boot manager programs, chain loading is used to pass control from the boot manager to a boot sector.  The target boot sector is loaded in from disk, replacing the in-memory boot sector from which the boot manager itself was bootstrapped, and executed.

Chain loading in Unix 
In Unix (and in Unix-like operating systems), the exec() system call is used to perform chain loading.  The program image of the current process is replaced with an entirely new image, and the current thread begins execution of that image.  The common data area comprises the process' environment variables, which are preserved across the system call.

Chain loading in Linux 
In addition to the  process level chain loading Linux supports the  system call to replace the entire operating system kernel with a different version. The new kernel boots as if it were started from power up and no running processes are preserved.

Chain loading in BASIC programs 
In BASIC programs, chain loading is the purview of the CHAIN statement (or, in Commodore BASIC, the LOAD statement), which causes the current program to be terminated and the chained-to program to be loaded and invoked (with, on those dialects of BASIC that support it, an optional parameter specifying the line number from which execution is to commence, rather than the default of the first line of the new program).   The common data area varies according to the particular dialect of BASIC that is in use.  On BBC BASIC, for example, only a specific subset of all variables are preserved across a CHAIN.  On other BASICs, the COM statement can be used in conjunction with CHAIN to specify which variables are to be preserved as common data across a chain operation.

Chain loading permits BASIC programs to execute more program code than could fit into available program and variable memory. Applications written in BASIC could thus be far larger than the size of working memory, via a set of cooperating programs that CHAIN back and forth amongst themselves as program flow moves within the overall application.

Chain loading in FORTRAN programs 
Many versions of Fortran include a CALL CHAIN or CALL LINK statement that performs chain loading, preserving the contents of COMMON storage. This is not the same as the unrelated LINK subroutine in GNU Fortran.

Chain loading in OS/360 
OS/360 and successors use the XCTL (for "transfer control")  macro for chain loading.  Because of the
operating system's memory management this may or may not result in replacement of the code of the calling program in memory.

See also 
 CHAIN (CONFIG.SYS directive) (chain executing multiple CONFIG.SYS files in DR-DOS)

References 

 
 
 

Operating system technology
Process (computing)