In Microsoft Windows applications programming, OLE Automation (later renamed to simply Automation) is an inter-process communication mechanism created by Microsoft. It is based on a subset of Component Object Model (COM) that was intended for use by scripting languages – originally Visual Basic – but now is used by several languages on Windows. All automation objects are required to implement the IDispatch interface. It provides an infrastructure whereby applications called automation controllers can access and manipulate (i.e. set properties of or call methods on) shared automation objects that are exported by other applications. It supersedes Dynamic Data Exchange (DDE), an older mechanism for applications to control one another.  As with DDE, in OLE Automation the automation controller is the "client" and the application exporting the automation objects is the "server".

Contrary to its name, automation objects do not necessarily use Microsoft OLE, although some Automation objects can be used in OLE environments. The confusion has its roots in Microsoft's earlier definition of OLE, which was previously more or less a synonym of COM.

Advantages and limitations
To ensure interoperability, automation interfaces are limited to use a subset of all COM types. Specifically, automation interfaces must use SAFEARRAY instead of raw COM arrays.

Automation-compatible COM servers can, however, rely on the in-built OLE marshalling implementation. This avoids the need for additional proxy/stub projects for marshalling out-of-process.

Usage
Automation was designed with the ease of scripting in mind, so controllers often provide languages such as Visual Basic for Applications to end users, allowing them to control automation objects via scripts. Automation objects are often written in conventional languages such as C++, where C++ attributes can be used to simplify development, Languages such as Visual Basic and Borland Delphi also provides a convenient syntax for Automation which hides the complexity of the underlying implementation.

Type libraries
In order to automate an application, the developer of an automation controller must know the object model that is employed by the target application exporting activation objects. This requires that the developer of the target application publicly document its object model.  Development of automation controllers without knowledge of the target application's object model is "difficult to impossible".
Due to these complications, Automation components are usually provided with type libraries, which contain metadata about classes, interfaces and other features exposed by an object library. Interfaces are described in Microsoft Interface Definition Language. Type libraries can be viewed using various tools, such as the Microsoft OLE/COM Object Viewer (oleview.exe, part of the Microsoft Platform SDK) or the Object Browser in Visual Basic (up to version 6) and Visual Studio .NET. Type libraries are used to generate Proxy pattern/stub code for interoperating between COM and other platforms, such as Microsoft .NET and Java. For instance, the .NET Framework SDK includes tools that can generate a proxy .NET DLL to access Automation objects using both early binding (with information about interfaces extracted from a type library) and late binding (via IDispatch, mapped to the .NET Reflection API), with the built-in .NET-to-COM bridge called COM Interop. While Java lacks built-in COM support, toolsets like JACOB and jSegue can generate proxy source code (consisting of two parts, a set of Java classes and a C++ source for a Java Native Interface DLL) from type libraries. These solutions only work on Windows. Another Java based j-Interop library which enables interoperability with COM components without JNI, using DCOM wire protocol (MSRPC) and works on non-Windows platforms also.

Microsoft has publicly documented the object model of all of the applications in Microsoft Office, and some other software developers have also documented the object models of their applications.  Object models are presented to automation controllers as type libraries, with their interfaces described in ODL.

Language support
Automation is available for a variety of languages, including, but not limited to:

ABAP
C
C++ (with Compiler COM Support, or with libraries like MFC or ATL)
C#
Visual Basic and Visual Basic for Applications
Visual FoxPro
dBASE (via OleAutoClient class)
Delphi
Microsoft .NET languages
APL (most Windows versions)
Java (only with third-party tools)
JScript and VBScript
Open Object Rexx
Perl
PHP
PowerBuilder 
Python
Ruby (via the 'win32ole' library included in the standard Ruby 1.8.x or later distribution)
Tcl
Visual DataFlex
WinBatch

See also
ActiveX
Active Scripting
Object Linking and Embedding (OLE)
Component Object Model (COM)

References

Further reading
 
 
 
  — full printed documentation of the object model of Microsoft Office

External links
OLE Automation General paper on the introduction and problems implementing OLE.
"VOLE - A Neat C++ COM/Automation Driver" — an open-source, compiler-independent C++ COM Automation driver library, for use when having to drive IDispatch directly. VOLE is highly robust, fully encapsulates all "low-level" aspects of IDispatch, and is very flexible, taking and returning normal C++ types.

Object-oriented programming
Microsoft application programming interfaces