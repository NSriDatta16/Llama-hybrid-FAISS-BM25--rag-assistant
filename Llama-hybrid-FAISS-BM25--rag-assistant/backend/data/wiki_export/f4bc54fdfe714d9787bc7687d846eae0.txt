Presentation–abstraction–control (PAC) is a software architectural pattern. It is an interaction-oriented software architecture, and is somewhat similar to model–view–controller (MVC) in that it separates an interactive system into three types of components responsible for specific aspects of the application's functionality. The abstraction component retrieves and processes the data, the presentation component formats the visual and audio presentation of data, and the control component handles things such as the flow of control and communication between the other two components.

In contrast to MVC, PAC is used as a hierarchical structure of agents, each consisting of a triad of presentation, abstraction and control parts. The agents (or triads) communicate with each other only through the control part of each triad. It also differs from MVC in that within each triad, it completely insulates the presentation (view in MVC) and the abstraction (model in MVC). This provides the option to separately multithread the model and view which can give the user experience of very short program start times, as the user interface (presentation) can be shown before the abstraction has fully initialized.

History 
PAC was initially developed by French computer scientist, Joëlle Coutaz in 1987. Coutaz founded the User Interface group at the Laboratoire de Génie Informatique of IMAG.

See also
Action Domain Responder
Hierarchical model–view–controller
Model–view–presenter
Model–view–viewmodel
Presenter First
PAC-Amodeus

Notes

References

External links
 Architectural outline for the game Warcraft as it might be implemented using the PAC Architectural Pattern: Programming of the application PACcraft:Architecture (in French)
 Pattern:Presentation-Abstraction-Control (pattern description)
 PAC description in the Portland Pattern Repository
 WengoPhone is a free software VoIP application that is written using the PAC design pattern.
 description of PAC and motivation for use in WengoPhone.
 demonstration code, courtesy of the OpenWengo community.
 

Software architecture
Software design patterns
Programming paradigms
Human–computer interaction
User interfaces