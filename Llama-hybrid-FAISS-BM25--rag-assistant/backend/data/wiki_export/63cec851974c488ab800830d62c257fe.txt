The Parrot intermediate representation (PIR), previously called Intermediate code (IMC), is one of the two assembly languages for the Parrot virtual machine. The other is Parrot assembly language or PASM. Compared to PASM, PIR exists at a slightly higher abstraction layer, and provides temporary registers and named registers, simplifying code generation.

While Parrot is still evolving, it is currently being used in many different capacities, and has undergone several releases.

Overview
PIR provides a set of abstractions that allow the programmer to ignore certain redundancies in the Parrot bytecode and quickly write code that adheres to the complexities of Parrot, such as the calling conventions.

Abstractions
PIR provides both type abstraction and polymorphism to some degree. For example, the "+" operator can be used with int, num or both:
 .local int a
 .local num b
 a = 1
 b = 1.1
 .local num c
 c = a + b

Calling conventions
The calling conventions in Parrot are complex, but all of that complexity can be hidden by using PIR directives:
 .sub foo
  .param int a
  .param int b
  .local int tmp
  tmp = a + b
  .return (tmp)
 .end
Each of the directives prefixed with a "." expands to the required Parrot bytecode, but does not directly represent any fundamental Parrot operation.

Example
The hello world program in PIR is
 .sub hello :main
  print "Hello world!\n"
 .end
If the program is saved as hello.pir, it can be compiled and executed with this command: parrot hello.pir

External links
 Writing PIR
 PIR examples

Assembly languages
Perl