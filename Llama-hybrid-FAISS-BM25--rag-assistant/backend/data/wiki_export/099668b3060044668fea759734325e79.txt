λProlog, also written lambda Prolog, is a logic programming language featuring polymorphic typing, modular programming, and higher-order programming.  These extensions to Prolog are derived from the higher-order hereditary Harrop formulas used to justify the foundations of λProlog.  Higher-order quantification, simply typed λ-terms, and higher-order unification gives λProlog the basic supports needed to capture the λ-tree syntax approach to higher-order abstract syntax, an approach to representing syntax that maps object-level bindings to programming language bindings. Programmers in λProlog need not deal with bound variable names: instead various declarative devices are available to deal with binder scopes and their instantiations.

History
Since 1986, λProlog has received numerous implementations.  As of 2023, the language and its implementations are still actively being developed.

The Abella theorem prover has been designed to provide an interactive environment for proving theorems about the declarative core of λProlog.

See also
 Curry's paradox#Lambda calculus — about inconsistency problems caused by combining (propositional) logic and untyped lambda calculus

References

Tutorials and texts
Dale Miller and Gopalan Nadathur have written the book Programming with higher-order logic, published by Cambridge University Press in June 2012.
 Amy Felty has written in a 1997 tutorial on lambda Prolog and its Applications to Theorem Proving.
 John Hannan has written a tutorial on Program Analysis in lambda Prolog for the 1998 PLILP Conference.
 Olivier Ridoux has written Lambda-Prolog de A à Z... ou presque (163 pages, French).  It is available as PostScript, PDF, and html.

External links
 λProlog homepage
 Entry at the Software Preservation Group.

Implementations
 The Teyjus λProlog compiler is currently the oldest implementation still being maintained.  This compiler project is led by Gopalan Nadathur and various of his colleagues and students.
 ELPI: an Embeddable λProlog Interpreter has been developed by Enrico Tassi and Claudio Sacerdoti Coen.  It is implemented in OCaml and is available online. The system is described in a paper that appeared LPAR 2015. ELPI is also available as a Coq plugin: see Enrico Tassi's tutorial on this plugin.
 The Abella prover can be used to prove theorems about λProlog programs and specifications.

Prolog programming language family
Logic in computer science