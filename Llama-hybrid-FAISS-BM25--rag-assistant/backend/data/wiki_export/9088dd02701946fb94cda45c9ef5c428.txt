The Kaleidoscope programming language is a constraint programming language embedding constraints into an imperative object-oriented language.  It adds keywords always, once, and assert..during (formerly while..assert) to make statements about relational invariants. Objects have constraint constructors, which are not methods, to enforce the meanings of user-defined datatypes.

There are three versions of Kaleidoscope which show an evolution from declarative to an increasingly imperative style. Differences between them are as follows.

Example

Compare the two code segments, both of which allow a user to drag the level of mercury in a simple graphical thermometer with the mouse.

Without constraints:

 while mouse.button = down do
  old <- mercury.top;
  mercury.top <- mouse.location.y;
  temperature <- mercury.height / scale;
  display_number( temperature );
  if old < mercury.top then
   delta_grey( old, mercury.top );
  elseif old > mercury.top then
   delta_white( mercury.top, old );
  end if;
 end while;

With constraints:

 always: temperature = mercury.height / scale;
 always: white rectangle( thermometer );
 always: grey rectangle( mercury );
 always: display number( temperature );
 while mouse.button = down do
  mercury.top = mouse.location.y;
 end while;

References

 

Procedural programming languages
Constraint programming
Constraint programming languages