: o n ( 0 ) ⟺ o n ( 1 ) {\displaystyle \mathrm {on} (0)\iff \mathrm {on} (1)} The frame problem is that one such frame axiom is necessary for every pair of action and condition such that the action does not affect the condition. In other words, the problem is that of formalizing a dynamical domain without explicitly specifying the frame axioms. The solution proposed by McCarthy to solve this problem involves assuming that a minimal amount of condition changes have occurred; this solution is formalized using the framework of circumscription. The Yale shooting problem, however, shows that this solution is not always correct. Alternative solutions were then proposed, involving predicate completion, fluent occlusion, successor state axioms, etc.; they are explained below. By the end of the 1980s, the frame problem as defined by McCarthy and Hayes was solved. Even after that, however, the term “frame problem” was still used, in part to refer to the same problem but under different settings (e.g., concurrent actions), and in part to refer to the general problem of representing and reasoning with dynamical domains. Solutions The following solutions depict how the frame problem is solved in various formalisms. The formalisms themselves are not presented in full: what is presented are simplified versions that are sufficient to explain the full solution. Fluent occlusion solution This solution was proposed by Erik Sandewall, who also defined a formal language for the specification of dynamical domains; therefore, such a domain can be first expressed in this language and then automatically translated into logic. In this article, only the expression in logic is shown, and only in the simplified language with no action names. The rationale of this solution is to represent not only the value of conditions over time, but also whether they can be affected by the last executed action. The latter is represented by another condition, called occlusion. A condition is said to be occluded in a given time point if an action has been just executed that makes the condition true or false as an effect. Occlusion can be viewed as “permission to change”: if a condition is occluded, it is relieved from obeying the constraint of inertia. In the simplified example of the door and the light, occlusion can be formalized by two predicates o c c l u d e o p e n ( t ) {\displaystyle \mathrm {occludeopen} (t)} and o c c l u d e o n ( t ) {\displaystyle \mathrm {occludeon} (t)} . The rationale is that a condition can change value only if the corresponding occlusion predicate is true at the next time point. In turn, the occlusion predicate is true only when an action affecting the condition is executed. ¬ o p e n ( 0 ) {\displaystyle \neg \mathrm {open} (0)} ¬ o n ( 0 ) {\displaystyle \neg \mathrm {on} (0)} o p e n ( 1 ) ∧ o c c l u d e o p e n ( 1 ) {\displaystyle \mathrm {open} (1)\wedge \mathrm {occludeopen} (1)} ∀ t . ¬ o c c l u d e o p e n ( t ) ⟹ ( o p e n ( t − 1 ) ⟺ o p e n ( t ) ) {\displaystyle \forall t.\neg \mathrm {occludeopen} (t)\implies (\mathrm {open} (t-1)\iff \mathrm {open} (t))} ∀ t . ¬ o c c l u d e o n ( t ) ⟹ ( o n ( t − 1 ) ⟺ o n ( t ) ) {\displaystyle \forall t.\neg \mathrm {occludeon} (t)\implies (\mathrm {on} (t-1)\iff \mathrm {on} (t))} In general, every action making a condition true or false also makes the corresponding occlusion predicate true. In this case, o c c l u d e o p e n ( 1 ) {\displaystyle \mathrm {occludeopen} (1)} is true, making the antecedent of the fourth formula above false for t = 1 {\displaystyle t=1} ; therefore, the constraint that o p e n ( t − 1 ) ⟺ o p e n ( t ) {\displaystyle \mathrm {open} (t-1)\iff \mathrm {open} (t)} does not hold for t = 1 {\displaystyle t=1} . Therefore, o p e n {\displaystyle \mathrm {open} } can change value, which is also what is enforced by the third formula. In order for this condition to work, occlusion predicates have to be true only when they are made true as an effect of an actio