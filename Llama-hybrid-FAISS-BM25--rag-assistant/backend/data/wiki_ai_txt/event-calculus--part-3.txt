 {\displaystyle initialise(Fluent)} , which initiates the F l u e n t {\displaystyle Fluent} at any time: i n i t i a t e s ( i n i t i a l i s e ( F l u e n t ) , F l u e n t , T i m e ) . {\displaystyle {\mathit {initiates}}(initialise(Fluent),Fluent,Time).} Problem-dependent axioms To apply the event calculus, given the definitions of the h o l d s A t {\displaystyle holdsAt} , i n i t i a t e s {\displaystyle initiates} , t e r m i n a t e s {\displaystyle terminates} , < {\displaystyle <} and ≤ {\displaystyle \leq } predicates, it is necessary to define the h a p p e n s A t {\displaystyle happensAt} predicates that describe the specific context of the problem. For example, in the blocks world domain, we might want to describe an initial state in which there are two blocks, a red block on a green block on a table, like a toy traffic light, followed by moving the red block to the table at time 1 and moving the green block onto the red block at time 3, turning the traffic light upside down: h a p p e n s A t ( i n i t i a l i s e ( o n ( r e d _ b l o c k , g r e e n _ b l o c k ) , 0 ) {\displaystyle {\mathit {happensAt}}(initialise(on(red\_block,green\_block),0)} h a p p e n s A t ( i n i t i a l i s e ( o n ( g r e e n _ b l o c k , t a b l e ) , 0 ) {\displaystyle {\mathit {happensAt}}(initialise(on(green\_block,table),0)} h a p p e n s A t ( m o v e ( r e d _ b l o c k , t a b l e ) , 1 ) {\displaystyle {\mathit {happensAt}}(move(red\_block,table),1)} h a p p e n s A t ( m o v e ( g r e e n _ b l o c k , r e d _ b l o c k ) , 3 ) {\displaystyle {\mathit {happensAt}}(move(green\_block,red\_block),3)} A Prolog implementation The event calculus has a natural implementation in pure Prolog (without any features that do not have a logical interpretation). For example, the blocks world scenario above can be implemented (with minor modifications) by the program: The Prolog program differs from the earlier formalisation in the following ways: The core axiom has been rewritten, using an auxiliary predicate clipped(Fact, Time1, Time2). This rewriting enables the elimination of existential quantifiers, conforming to the Prolog convention that all variables are universally quantified. The order of the conditions in the body of the core axiom(s) has been changed, to generate answers to queries in temporal order. The equality in the condition T 1 ≤ T {\displaystyle T1\leq T} has been removed from the corresponding condition before(Time1, Time). This builds in a simplifying assumption that events do not simultaneously initiate and terminate the same fluent. As a consequence, the definition of the t e r m i n a t e s {\displaystyle terminates} predicate has been simplified by eliminating the condition that d i f f e r e n t ( P l a c e 1 , P l a c e ) {\displaystyle different(Place1,Place)} . Given an appropriate definition of the predicate before(Time1, Time2), the Prolog program generates all answers to the query what holds when? in temporal order: The program can also answer negative queries, such as which fluents do not hold at which times? However, to work correctly, all variables in negative conditions must first be instantiated to terms containing no variables. For example: Reasoning tools In addition to Prolog and its variants, several other tools for reasoning using the event calculus are also available: Abductive Event Calculus Planners Discrete Event Calculus Reasoner Event Calculus Answer Set Programming Reactive Event Calculus Run-Time Event Calculus (RTEC) Epistemic Probabilistic Event Calculus (EPEC) Extensions Notable extensions of the event calculus include Markov logic networks–based variants probabilistic, epistemic and their combinations. See also First-order logic Frame problem Situation calculus References Further reading Brandano, S. (2001) "The Event Calculus Assessed," IEEE TIME Symposium: 7-12. R. Kowalski and F. Sadri (1995) "Variants of the Event Calculus," ICLP: 67-81. Mueller, Erik T. (2015). Commonsense R