, we will have: W = ( 0.0 0 − 0.7745 − 0.8960 2.8669 − 4.4622 0.0 0.0 0.0 0.0 7.9272 2.4523 − 4.0225 20.6505 0.0 0.0 0.0 0.0 − 9.2789 − 0.1239 − 0.5092 − 18.4582 0.0 0.0 ) {\displaystyle W=\left({\begin{array}{cccc}0.0&0&-0.7745&-0.8960\\2.8669&-4.4622&0.0&0.0\\0.0&0.0&7.9272&2.4523\\-4.0225&20.6505&0.0&0.0\\0.0&0.0&-9.2789&-0.1239\\-0.5092&-18.4582&0.0&0.0\end{array}}\right)} and ϕ 1 = 2.8669 x − 4.0225 x 3 − 0.5092 x 5 ϕ 2 = − 4.4622 x + 20.6505 x 3 − 18.4582 x 5 ϕ 3 = − 0.7745 + 7.9272 x 2 − 9.2789 x 4 ϕ 4 = − 0.8960 + 2.4523 x 2 − 0.1239 x 4 {\displaystyle {\begin{array}{lll}\phi _{1}&=&2.8669x-4.0225x^{3}-0.5092x^{5}\\\phi _{2}&=&-4.4622x+20.6505x^{3}-18.4582x^{5}\\\phi _{3}&=&-0.7745+7.9272x^{2}-9.2789x^{4}\\\phi _{4}&=&-0.8960+2.4523x^{2}-0.1239x^{4}\\\end{array}}} 2D signal The derivation for 2D signal is the same as 1D signal except that conventional Geometric Moments are directly employed to obtain the set of 2D EigenMoments. The definition of Geometric Moments of order ( p + q ) {\displaystyle (p+q)} for 2D image signal is: m p q = ∫ − 1 1 ∫ − 1 1 x p y q f ( x , y ) d x d y {\displaystyle m_{pq}=\int _{-1}^{1}\int _{-1}^{1}x^{p}y^{q}f(x,y)dxdy} . which can be denoted as M = { m j , i } i , j = 0 i , j = m − 1 {\displaystyle M=\{m_{j,i}\}_{i,j=0}^{i,j=m-1}} . Then the set of 2D EigenMoments are: Ω = W T M W {\displaystyle \Omega =W^{T}MW} , where Ω = { Ω j , i } i , j = 0 i , j = k − 1 {\displaystyle \Omega =\{\Omega _{j,i}\}_{i,j=0}^{i,j=k-1}} is a matrix that contains the set of EigenMoments. Ω j , i = Σ r = 0 m − 1 Σ s = 0 m − 1 w r , j w s , i m r , s {\displaystyle \Omega _{j,i}=\Sigma _{r=0}^{m-1}\Sigma _{s=0}^{m-1}w_{r,j}w_{s,i}m_{r,s}} . EigenMoment invariants (EMI) In order to obtain a set of moment invariants we can use normalized Geometric Moments M ^ {\displaystyle {\hat {M}}} instead of M {\displaystyle M} . Normalized Geometric Moments are invariant to Rotation, Scaling and Transformation and defined by: m ^ p q = α p + q + 2 ∫ − 1 1 ∫ − 1 1 [ ( x − x c ) c o s ( θ ) + ( y − y c ) s i n ( θ ) ] p = × [ − ( x − x c ) s i n ( θ ) + ( y − y c ) c o s ( θ ) ] q = × f ( x , y ) d x d y , {\displaystyle {\begin{array}{lll}{\hat {m}}_{pq}&=&\alpha ^{p}+q+2\int _{-1}^{1}\int _{-1}^{1}[(x-x^{c})cos(\theta )+(y-y^{c})sin(\theta )]^{p}\\&=&\times [-(x-x^{c})sin(\theta )+(y-y^{c})cos(\theta )]^{q}\\&=&\times f(x,y)dxdy,\\\end{array}}} where: ( x c , y c ) = ( m 10 / m 00 , m 01 / m 00 ) {\displaystyle (x^{c},y^{c})=(m_{10}/m_{00},m_{01}/m_{00})} is the centroid of the image f ( x , y ) {\displaystyle f(x,y)} and α = [ m 00 S / m 00 ] 1 / 2 θ = 1 2 t a n − 1 2 m 11 m 20 − m 02 {\displaystyle {\begin{array}{lll}\alpha &=&[m_{00}^{S}/m_{00}]^{1/2}\\\theta &=&{\frac {1}{2}}tan^{-1}{\frac {2m_{11}}{m_{20}-m_{02}}}\end{array}}} . m 00 S {\displaystyle m_{00}^{S}} in this equation is a scaling factor depending on the image. m 00 S {\displaystyle m_{00}^{S}} is usually set to 1 for binary images. See also Computer vision Signal processing Image moment References External links implementation of EigenMoments in Matlab