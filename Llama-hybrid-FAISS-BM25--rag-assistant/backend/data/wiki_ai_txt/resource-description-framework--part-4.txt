led situations, contexts, or scopes, as discussed in articles by RDF specification co-editor Graham Klyne. For example, a statement can be associated with a context, named by a URI, in order to assert an "is true in" relationship. As another example, it is sometimes convenient to group statements by their source, which can be identified by a URI, such as the URI of a particular RDF/XML document. Then, when updates are made to the source, corresponding statements can be changed in the model, as well. Implementation of scopes does not necessarily require fully reified statements. Some implementations allow a single scope identifier to be associated with a statement that has not been assigned a URI, itself. Likewise named graphs in which a set of triples is named by a URI can represent context without the need to reify the triples. Query and inference languages The predominant query language for RDF graphs is SPARQL. SPARQL is an SQL-like language, and a recommendation of the W3C as of January 15, 2008. The following is an example of a SPARQL query to show country capitals in Africa, using a fictional ontology: Other non-standard ways to query RDF graphs include: RDQL, precursor to SPARQL, SQL-like Versa, compact syntax (nonâ€“SQL-like), solely implemented in 4Suite (Python). RQL, one of the first declarative languages for uniformly querying RDF schemas and resource descriptions, implemented in RDFSuite. SeRQL, part of Sesame XUL has a template element in which to declare rules for matching data in RDF. XUL uses RDF extensively for data binding. SHACL Advanced Features specification (W3C Working Group Note), the most recent version of which is maintained by the SHACL Community Group, defines support for SHACL Rules, used for data transformations, inferences and mappings of RDF based on SHACL shapes. Validation and description The predominant language for describing and validating RDF graphs is SHACL (Shapes Constraint Language). SHACL specification is divided in two parts: SHACL Core and SHACL-SPARQL. SHACL Core consists of a list of built-in constraints such as cardinality, range of values and many others. SHACL-SPARQL describes SPARQL-based constraints and an extension mechanism to declare new constraint components. Other non-standard ways to describe and validate RDF graphs include: SPARQL Inferencing Notation (SPIN) was based on SPARQL queries. It has been effectively deprecated in favor of SHACL. ShEx (Shape Expressions) is a concise language for RDF validation and description. Examples Example 1: Description of a person named Eric Miller The following example is taken from the W3C website describing a resource with statements "there is a Person identified by whose name is Eric Miller, whose email address is e.miller123(at)example (changed for security purposes), and whose title is Dr." The resource " is the subject. The objects are: "Eric Miller" (with a predicate "whose name is"), mailto:e.miller123(at)example (with a predicate "whose email address is"), and "Dr." (with a predicate "whose title is"). The subject is a URI. The predicates also have URIs. For example, the URI for each predicate: "whose name is" is "whose email address is" is "whose title is" is In addition, the subject has a type (with URI which is person (with URI Therefore, the following "subject, predicate, object" RDF triples can be expressed: "Eric Miller" mailto:e.miller123(at)example "Dr." In standard N-Triples format, this RDF can be written as: Equivalently, it can be written in standard Turtle (syntax) format as: Or more concisely, using a common shorthand syntax of Turtle as: Or, it can be written in RDF/XML format as: Example 2: The postal abbreviation for New York Certain concepts in RDF are taken from logic and linguistics, where subject-predicate and subject-predicate-object structures have meanings similar to, yet distinct from, the uses of those terms in RDF. This example demonstrates: In the English language statement 'New York has the postal 