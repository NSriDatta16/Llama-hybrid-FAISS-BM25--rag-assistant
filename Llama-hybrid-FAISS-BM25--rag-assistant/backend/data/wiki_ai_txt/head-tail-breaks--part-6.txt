to these rock fracture networks. Classifying tourist attractions into most visited, least visited and something in between for further research into the optimal route of sightseeing busses. Measuring the heterogeneity of crime distribution quantitatively while simultaneously considering the statistical and geometrical characteristics of crime distribution. Examining the urban sustainability of socioeconomic and environmental dynamics. The natural cities serve as the basic urban form measures to objectively capture the spatial patterns of the sustainability change. Software implementation The following implementations are available under Free/Open Source Software licenses. HT calculator: a winform application for obtaining related metrics of head/tail breaks applying on a single data array. HT in JavaScript: a JavaScript implementation for applying head/tail breaks on a single data array. HT Mapping tool: a function in the free plug-in Axwoman 6.3 to ArcMap 10.2 that conducts geo-data symbolization automatically based on the head/tail breaks classification. HT in Python: Python and JavaScript code for the head/tail breaks algorithm. It works great for choropleth map coloring. pysal.esda.mapclassify: Python classification schemes for choropleth mapping, including head/tail breaks map classification. smoomapy 0.1.9: Brings smoothed maps through python. Ht-index calculator: A PostgreSQL function for calculating ht-index (also see ). RA calculator: Software for calculating the ratio of areas (RA) in a rank-size plot (also see ). HT 2.0 calculator: An excel sheet calculator which calculates both head/tail breaks 1.0 and head/tail breaks 2.0 with a version for smaller datasets and a version for very large (binned) datasets. classInt: R package that implements several methods for choosing univariate class intervals for mapping or other graphic purposes also includes head/tail breaks map classification. Natural cities python script: For generating natural cities using open source python packages Natural cities python script2: For generating natural cities from input point data using open source python packages == References ==