A filtered-popping recursive transition network (FPRTN), or simply filtered-popping network (FPN), is a recursive transition network (RTN) extended with a map of states to keys where returning from a subroutine jump requires the acceptor and return states to be mapped to the same key. RTNs are finite-state machines that can be seen as finite-state automata extended with a stack of return states; as well as consuming transitions and ε {\displaystyle \varepsilon } -transitions, RTNs may define call transitions. These transitions perform a subroutine jump by pushing the transition's target state onto the stack and bringing the machine to the called state. Each time an acceptor state is reached, the return state at the top of the stack is popped out, provided that the stack is not empty, and the machine is brought to this state. Throughout this article we refer to filtered-popping recursive transition networks as FPNs, though this acronym is ambiguous (e.g.: fuzzy Petri nets). Filtered-popping networks and FPRTNs are unambiguous alternatives. Formal Definition A FPN is a structure ( Q , K , Σ , δ , κ , Q I , F ) {\displaystyle (Q,K,\Sigma ,\delta ,\kappa ,Q_{I},F)} where Q {\displaystyle Q} is a finite set of states, K {\displaystyle K} is a finite set of keys, Σ {\displaystyle \Sigma } is a finite input alphabet, δ : Q × ( Σ ∪ { ε } ∪ Q ) → Q {\displaystyle \delta :Q\times (\Sigma \cup \{\varepsilon \}\cup Q)\to Q} is a partial transition function, ε {\displaystyle \varepsilon } being the empty symbol, κ : Q → K {\displaystyle \kappa :Q\to K} is a map of states to keys, Q I ⊆ Q {\displaystyle Q_{I}\subseteq Q} is the set of initial states, and F ⊆ Q {\displaystyle F\subseteq Q} is the set of acceptance states. Transitions Transitions represent the possibility of bringing the FPN from a source state q s {\displaystyle q_{s}} to a target state q t {\displaystyle q_{t}} by possibly performing an additional action. Depending on this action, we distinguish the following types of explicitly-defined transitions: ε {\displaystyle \varepsilon } -transitions are transitions of the form δ ( q s , ε ) → q t {\displaystyle \delta (q_{s},\varepsilon )\to q_{t}} and perform no additional action, consuming transitions are transitions of the form δ ( q s , σ ) → q t {\displaystyle \delta (q_{s},\sigma )\to q_{t}} and consume an input symbol σ {\displaystyle \sigma } , and call transitions are transitions of the form δ ( q s , q c ) → q t {\displaystyle \delta (q_{s},q_{c})\to q_{t}} and perform a subroutine jump to called state q c {\displaystyle q_{c}} before reaching q t {\displaystyle q_{t}} . The behaviour of call transitions is governed by two kinds of implicitly-defined transitions: for each call transition δ ( q s , q c ) → q t {\displaystyle \delta (q_{s},q_{c})\to q_{t}} the FPN implicitly defines a push transition that brings the machine from q s {\displaystyle q_{s}} to q c {\displaystyle q_{c}} by pushing q t {\displaystyle q_{t}} onto the stack, and for each pair of states ( q f , q r ) ∈ F × Q {\displaystyle (q_{f},q_{r})\in F\times Q} the FPN implicitly defines a pop transition that brings the machine from q f {\displaystyle q_{f}} to q r {\displaystyle q_{r}} by popping q r {\displaystyle q_{r}} from the stack iff q r {\displaystyle q_{r}} is the state at the top of the stack and κ ( q f ) = κ ( q r ) {\displaystyle \kappa (q_{f})=\kappa (q_{r})} . Push transitions initialize subroutine jumps and pop transitions are equivalent to return statements. Purpose A (natural language) text can be enriched with meta-information by the application of a RTN with output; for instance, a RTN inserting XML tags can be used for transforming a plain text into a structured XML document. A RTN with output representing a natural language grammar would delimit and add the syntactic structure of each text sentence (see parsing). Other RTNs with output could simply mark text segments containing relevant information (see information extraction). The app