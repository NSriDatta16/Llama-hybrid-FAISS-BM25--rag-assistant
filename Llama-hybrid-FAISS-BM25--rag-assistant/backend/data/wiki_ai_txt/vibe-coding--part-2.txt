ested the term "vibe valuation" to describe the very large valuations of AI startups by venture capital firms that ignore accepted metrics such as Annual Recurring Revenue. In July 2025, The Wall Street Journal reported that vibe coding was being adopted by professional software engineers and had begun to enter commercial use cases. In July 2025, SaaStr founder documented his negative experiences with vibe coding: Replit's AI agent deleted a database despite explicit instructions not to make any changes. In September 2025, Fast Company reported that the 'vibe coding hangover' is upon us, with senior software engineers citing 'development hell' when working with AI-generated vibe-code. Limitations Mischaracterization of software development Andrew Ng has taken issue with the term, saying that it misleads people into assuming that software engineers just "go with the vibes" when using AI tools to create applications. Quality of code and security issues Vibe coding has raised concerns about understanding and accountability. Developers may use AI-generated code without fully comprehending its functionality, leading to undetected bugs, errors, or security vulnerabilities. While this approach may be suitable for prototyping or "throwaway weekend projects" as Karpathy originally envisioned, it is considered by some experts to pose risks in professional settings, where a deep understanding of the code is crucial for debugging, maintenance, and security. Ars Technica cites Simon Willison, who stated: "Vibe coding your way to a production codebase is clearly risky. Most of the work we do as software engineers involves evolving existing systems, where the quality and understandability of the underlying code is crucial." In May 2025, Lovable, a Swedish vibe coding app, was reported to have security vulnerabilities in the code it generated, with 170 out of 1,645 Lovable-created web applications having an issue that would allow personal information to be accessed by anyone. Task complexity Generative AI is highly capable of handling simple tasks like basic algorithms. However, such systems struggle with more novel, complex coding problems like projects involving multiple files, poorly documented libraries, or critical code that has real-world impacts. Challenges with debugging LLMs generate code dynamically, and the structure of such code may be subject to variation. In addition, since the developer did not write the code, they may struggle to understand syntax/concepts that they themselves have not used. See also Literate programming No-code development platform Natural language programming References Further reading Chow, Minyang; Ng, Olivia (9 April 2025). "From technology adopters to creators: Leveraging AI-assisted vibe coding to transform clinical teaching and learning". Medical Teacher: 1–3. doi:10.1080/0142159X.2025.2488353. PMID 40202513. Gadde, Akhilesh (17 May 2025). "Democratizing Software Engineering through Generative AI and Vibe Coding: The Evolution of No-Code Development". Journal of Computer Science and Technology Studies. 7 (4): 556–572. doi:10.32996/jcsts.2025.7.4.66. Ray, Partha Pratim (2025). A Review on Vibe Coding: Fundamentals, State-of-the-art, Challenges and Future Directions (Preprint). doi:10.36227/techrxiv.174681482.27435614/v1. Maes, Stephane. The Gotchas of AI Coding and Vibe Coding. It's All About Support and Maintenance (Preprint). doi:10.31219/osf.io/kjz9t_v1. Sapkota, Ranjan; Roumeliotis, Konstantinos I.; Karkee, Manoj (2025). Vibe Coding vs. Agentic Coding: Fundamentals and Practical Implications of Agentic AI (Preprint). arXiv:2505.19443. Sarkar, Advait; Drosos, Ian (2025). Vibe coding: Programming through conversation with artificial intelligence (Preprint). arXiv:2506.23253. Anderson, Ibar Federico. Comparative analysis between Scientific Research Methodology, Industrial Design Project Methodology and Vibe Coding Methodology with Artificial Intelligence (Preprint). doi:10.31219/osf.io/y7hzf_v3. Maes, 