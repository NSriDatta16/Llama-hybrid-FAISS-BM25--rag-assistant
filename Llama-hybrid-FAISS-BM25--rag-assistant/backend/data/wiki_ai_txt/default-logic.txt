Default logic is a non-monotonic logic proposed by Raymond Reiter to formalize reasoning with default assumptions. Default logic can express facts like “by default, something is true”; by contrast, standard logic can only express that something is true or that something is false. This is a problem because reasoning often involves facts that are true in the majority of cases but not always. A classical example is: “birds typically fly”. This rule can be expressed in standard logic either by “all birds fly”, which is inconsistent with the fact that penguins do not fly, or by “all birds that are not penguins and not ostriches and ... fly”, which requires all exceptions to the rule to be specified. Default logic aims at formalizing inference rules like this one without explicitly mentioning all their exceptions. Syntax of default logic A default theory is a pair ⟨ W , D ⟩ {\displaystyle \langle W,D\rangle } . W is a set of logical formulas, called the background theory, that formalize the facts that are known for sure. D is a set of default rules, each one being of the form: P r e r e q u i s i t e : J u s t i f i c a t i o n 1 , … , J u s t i f i c a t i o n n C o n c l u s i o n {\displaystyle {\frac {\mathrm {Prerequisite:Justification} _{1},\dots ,\mathrm {Justification} _{n}}{\mathrm {Conclusion} }}} According to this default, if we believe that Prerequisite is true, and each J u s t i f i c a t i o n i {\displaystyle \mathrm {Justification} _{i}} for i = 1 , … , n {\displaystyle i=1,\dots ,n} is consistent with our current beliefs, we are led to believe that Conclusion is true. The logical formulae in W and all formulae in a default were originally assumed to be first-order logic formulae, but they can potentially be formulae in an arbitrary formal logic. The case in which they are formulae in propositional logic is one of the most studied. Examples The default rule “birds typically fly” is formalized by the following default: D = { B i r d ( X ) : F l i e s ( X ) F l i e s ( X ) } {\displaystyle D=\left\{{\frac {\mathrm {Bird} (X):\mathrm {Flies} (X)}{\mathrm {Flies} (X)}}\right\}} This rule means that, "if X is a bird, and it can be assumed that it flies, then we can conclude that it flies". A background theory containing some facts about birds is the following one: W = { B i r d ( C o n d o r ) , B i r d ( P e n g u i n ) , ¬ F l i e s ( P e n g u i n ) , F l i e s ( B e e ) } {\displaystyle W=\{\mathrm {Bird} (\mathrm {Condor} ),\mathrm {Bird} (\mathrm {Penguin} ),\neg \mathrm {Flies} (\mathrm {Penguin} ),\mathrm {Flies} (\mathrm {Bee} )\}} . According to this default rule, a condor flies because the precondition Bird(Condor) is true and the justification Flies(Condor) is not inconsistent with what is currently known. On the contrary, Bird(Penguin) does not allow concluding Flies(Penguin): even if the precondition of the default Bird(Penguin) is true, the justification Flies(Penguin) is inconsistent with what is known. From this background theory and this default, Bird(Bee) cannot be concluded because the default rule only allows deriving Flies(X) from Bird(X), but not vice versa. Deriving the antecedents of an inference rule from the consequences is a form of explanation of the consequences, and is the aim of abductive reasoning. A common default assumption is that what is not known to be true is believed to be false. This is known as the Closed-World Assumption, and is formalized in default logic using a default like the following one for every fact F. : ¬ F ¬ F {\displaystyle {\frac {:{\neg }F}{{\neg }F}}} For example, the computer language Prolog uses a sort of default assumption when dealing with negation: if a negative atom cannot be proved to be true, then it is assumed to be false. Note, however, that Prolog uses the so-called negation as failure: when the interpreter has to evaluate the atom ¬ F {\displaystyle \neg F} , it tries to prove that F is true, and conclude that ¬ F {\displaystyle \neg F} is true if it 