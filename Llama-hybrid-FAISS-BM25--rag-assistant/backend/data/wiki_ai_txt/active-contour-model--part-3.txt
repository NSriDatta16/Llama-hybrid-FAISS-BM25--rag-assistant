nal of energy can be represented as E term = ∂ θ ∂ n ⊥ = ∂ 2 C / ∂ n ⊥ 2 ∂ C / ∂ n = C y y C x 2 − 2 C x y C x C y + C x x C y 2 ( C x 2 + C y 2 ) 3 / 2 {\displaystyle E_{\text{term}}={\partial \theta \over \partial n_{\perp }}={\partial ^{2}C/\partial n_{\perp }^{2} \over \partial C/\partial n}={{C_{yy}C_{x}^{2}-2C_{xy}C_{x}C_{y}+C_{xx}C_{y}^{2}} \over (C_{x}^{2}+C_{y}^{2})^{3/2}}} Constraint energy Some systems, including the original snakes implementation, allowed for user interaction to guide the snakes, not only in initial placement but also in their energy terms. Such constraint energy E c o n {\displaystyle E_{con}} can be used to interactively guide the snakes towards or away from particular features. Optimization through gradient descent Given an initial guess for a snake, the energy function of the snake is iteratively minimized. Gradient descent minimization is one of the simplest optimizations which can be used to minimize snake energy. Each iteration takes one step in the negative gradient of the point with controlled step size γ {\displaystyle \gamma } to find local minima. This gradient-descent minimization can be implemented as v ¯ i ← v ¯ i + F snake ( v ¯ i ) {\displaystyle {\bar {v}}_{i}\leftarrow {\bar {v}}_{i}+F_{\text{snake}}({\bar {v}}_{i})} Where F snake ( v ¯ i ) {\displaystyle F_{\text{snake}}({\bar {v}}_{i})} is the force on the snake, which is defined by the negative of the gradient of the energy field. F snake ( v ¯ i ) = − ∇ E snake ( v ¯ i ) = − ( w internal ∇ E internal ( v ¯ i ) + w external ∇ E external ( v ¯ i ) ) {\displaystyle F_{\text{snake}}({\bar {v}}_{i})=-\nabla E_{\text{snake}}({\bar {v}}_{i})=-{\Bigg (}w_{\text{internal}}\,\nabla E_{\text{internal}}({\bar {v}}_{i})+w_{\text{external}}\,\nabla E_{\text{external}}({\bar {v}}_{i}){\Bigg )}} Assuming the weights α ( s ) {\displaystyle \alpha (s)} and β ( s ) {\displaystyle \beta (s)} are constant with respect to s {\displaystyle s} , this iterative method can be simplified to v ¯ i ← v ¯ i − γ { w internal [ α ∂ 2 v ¯ ∂ s 2 ( v ¯ i ) + β ∂ 4 v ¯ ∂ s 4 ( v ¯ i ) ] + ∇ E ext ( v ¯ i ) } {\displaystyle {\bar {v}}_{i}\leftarrow {\bar {v}}_{i}-\gamma {\Bigg \{}w_{\text{internal}}{\bigg [}\alpha {\frac {\partial ^{2}{\bar {v}}}{\partial s^{2}}}({\bar {v}}_{i})+\beta {\frac {\partial ^{4}{\bar {v}}}{\partial s^{4}}}({\bar {v}}_{i}){\bigg ]}+\nabla E_{\text{ext}}({\bar {v}}_{i}){\Bigg \}}} Discrete approximation In practice, images have finite resolution and can only be integrated over finite time steps τ {\displaystyle \tau } . As such, discrete approximations must be made for practical implementation of snakes. The energy function of the snake can be approximated by using the discrete points on the snake. E snake ∗ ≈ ∑ 1 n E snake ( v ¯ i ) {\displaystyle E_{\text{snake}}^{*}\approx \sum _{1}^{n}E_{\text{snake}}({\bar {v}}_{i})} Consequentially, the forces of the snake can be approximated as F snake ∗ ≈ − ∑ i = 1 n ∇ E snake ( v ¯ i ) . {\displaystyle F_{\text{snake}}^{*}\approx -\sum _{i=1}^{n}\nabla E_{\text{snake}}({\bar {v}}_{i}).} Gradient approximation can be done through any finite approximation method with respect to s, such as Finite difference. Numerical instability due to discrete time The introduction of discrete time into the algorithm can introduce updates which the snake is moved past the minima it is attracted to; this further can cause oscillations around the minima or lead to a different minima being found. This can be avoided through tuning the time step such that the step size is never greater than a pixel due to the image forces. However, in regions of low energy, the internal energies will dominate the update. Alternatively, the image forces can be normalized for each step such that the image forces only update the snake by one pixel. This can be formulated as F image = − k ∇ E image ‖ ∇ E image ‖ {\displaystyle F_{\text{image}}=-k{\frac {\nabla E_{\text{image}}}{\|\nabla E_{\text{image}}\|}}} where τ k {\displaystyle \ta