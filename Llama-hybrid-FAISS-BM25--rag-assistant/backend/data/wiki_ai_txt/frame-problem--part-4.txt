us can be seen as a logic in which predicates representing the state of conditions are reified. The difference between a predicate and a term in first-order logic is that a term is a representation of an object (possibly a complex object composed of other objects), while a predicate represents a condition that can be true or false when evaluated over a given set of terms. In the fluent calculus, each possible state is represented by a term obtained by composition of other terms, each one representing the conditions that are true in state. For example, the state in which the door is open and the light is on is represented by the term o p e n ∘ o n {\displaystyle \mathrm {open} \circ \mathrm {on} } . It is important to notice that a term is not true or false by itself, as it is an object and not a condition. In other words, the term o p e n ∘ o n {\displaystyle \mathrm {open} \circ \mathrm {on} } represent a possible state, and does not by itself mean that this is the current state. A separate condition can be stated to specify that this is actually the state at a given time, e.g., s t a t e ( o p e n ∘ o n , 10 ) {\displaystyle \mathrm {state} (\mathrm {open} \circ \mathrm {on} ,10)} means that this is the state at time 10 {\displaystyle 10} . The solution to the frame problem given in the fluent calculus is to specify the effects of actions by stating how a term representing the state changes when the action is executed. For example, the action of opening the door at time 0 is represented by the formula: s t a t e ( s ∘ o p e n , 1 ) ⟺ s t a t e ( s , 0 ) {\displaystyle \mathrm {state} (s\circ \mathrm {open} ,1)\iff \mathrm {state} (s,0)} The action of closing the door, which makes a condition false instead of true, is represented in a slightly different way: s t a t e ( s , 1 ) ⟺ s t a t e ( s ∘ o p e n , 0 ) {\displaystyle \mathrm {state} (s,1)\iff \mathrm {state} (s\circ \mathrm {open} ,0)} This formula works provided that suitable axioms are given about s t a t e {\displaystyle \mathrm {state} } and ∘ {\displaystyle \circ } , e.g., a term containing the same condition twice is not a valid state (for example, s t a t e ( o p e n ∘ s ∘ o p e n , t ) {\displaystyle \mathrm {state} (\mathrm {open} \circ s\circ \mathrm {open} ,t)} is always false for every s {\displaystyle s} and t {\displaystyle t} ). Event calculus solution The event calculus uses terms for representing fluents, like the fluent calculus, but also has one or more axioms constraining the value of fluents, like the successor state axioms. There are many variants of the event calculus, but one of the simplest and most useful employs a single axiom to represent the law of inertia: h o l d s A t ( F , T 2 ) ← {\displaystyle {\mathit {holdsAt}}(F,T2)\leftarrow } [ h a p p e n s A t ( E 1 , T 1 ) ∧ i n i t i a t e s ( E 1 , F , T 1 ) ∧ ( T 1 < T 2 ) ∧ {\displaystyle [{\mathit {happensAt}}(E1,T1)\wedge {\mathit {initiates}}(E1,F,T1)\wedge (T1<T2)\wedge } ¬ ∃ E 2 , T [ h a p p e n s A t ( E 2 , T ) ∧ t e r m i n a t e s ( E 2 , F , T ) ∧ ( T 1 ≤ T < T 2 ) ] {\displaystyle \neg \exists E2,T[{\mathit {happensAt}}(E2,T)\wedge {\mathit {terminates}}(E2,F,T)\wedge (T1\leq T<T2)]} The axiom states that a fluent F {\displaystyle F} holds at a time T 2 {\displaystyle T2} , if an event E 1 {\displaystyle E1} happens and initiates F {\displaystyle F} at an earlier time T 1 {\displaystyle T1} , and there is no event E 2 {\displaystyle E2} that happens and terminates F {\displaystyle F} after or at the same time as T 1 {\displaystyle T1} and before T 2 {\displaystyle T2} . To apply the event calculus to a particular problem domain, it is necessary to define the i n i t i a t e s {\displaystyle initiates} and t e r m i n a t e s {\displaystyle terminates} predicates for that domain. For example: i n i t i a t e s ( o p e n d o o r , o p e n , T ) . {\displaystyle {\mathit {initiates}}(opendoor,open,T).} t e r m i n a t e s ( o p e n d o o r , c l o s e d , T ) . {\displaystyle {\ma