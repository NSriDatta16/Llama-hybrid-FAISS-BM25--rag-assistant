The sparse Fourier transform (SFT) is a kind of discrete Fourier transform (DFT) for handling big data signals. Specifically, it is used in GPS synchronization, spectrum sensing and analog-to-digital converters.: The fast Fourier transform (FFT) plays an indispensable role on many scientific domains, especially on signal processing. It is one of the top-10 algorithms in the twentieth century. However, with the advent of big data era, the FFT still needs to be improved in order to save more computing power. Recently, the sparse Fourier transform (SFT) has gained a considerable amount of attention, for it performs well on analyzing the long sequence of data with few signal components. Definition Consider a sequence xn of complex numbers. By Fourier series, xn can be written as x n = ( F ∗ X ) n = ∑ k = 0 N − 1 X k e j 2 π N k n . {\displaystyle x_{n}=(F^{*}X)_{n}=\sum _{k=0}^{N-1}X_{k}e^{j{\frac {2\pi }{N}}kn}.} Similarly, Xk can be represented as X k = 1 N ( F x ) k = 1 N ∑ n = 0 N − 1 x n e − j 2 π N k n . {\displaystyle X_{k}={\frac {1}{N}}(Fx)_{k}={\frac {1}{N}}\sum _{n=0}^{N-1}x_{n}e^{-j{\frac {2\pi }{N}}kn}.} Hence, from the equations above, the mapping is F : C N → C N {\displaystyle F:\mathbb {C} ^{N}\to \mathbb {C} ^{N}} . Single frequency recovery Assume only a single frequency exists in the sequence. In order to recover this frequency from the sequence, it is reasonable to utilize the relationship between adjacent points of the sequence. Phase encoding The phase k can be obtained by dividing the adjacent points of the sequence. In other words, x n + 1 x n = e j 2 π N k = cos ⁡ ( 2 π k N ) + j sin ⁡ ( 2 π k N ) . {\displaystyle {\frac {x_{n+1}}{x_{n}}}=e^{j{\frac {2\pi }{N}}k}=\cos \left({\frac {2\pi k}{N}}\right)+j\sin \left({\frac {2\pi k}{N}}\right).} Notice that x n ∈ C N {\displaystyle x_{n}\in \mathbb {C} ^{N}} . An aliasing-based search Seeking phase k can be done by Chinese remainder theorem (CRT). Take k = 104,134 {\displaystyle k=104{,}134} for an example. Now, we have three relatively prime integers 100, 101, and 103. Thus, the equation can be described as k = 104,134 ≡ { 34 mod 1 00 , 3 mod 1 01 , 1 mod 1 03. {\displaystyle k=104{,}134\equiv \left\{{\begin{array}{rl}34&{\bmod {1}}00,\\3&{\bmod {1}}01,\\1&{\bmod {1}}03.\end{array}}\right.} By CRT, we have k = 104,134 mod ( 100 ⋅ 101 ⋅ 103 ) = 104,134 mod 1 , 040,300 {\displaystyle k=104{,}134{\bmod {(}}100\cdot 101\cdot 103)=104{,}134{\bmod {1}}{,}040{,}300} Randomly binning frequencies Now, we desire to explore the case of multiple frequencies, instead of a single frequency. The adjacent frequencies can be separated by the scaling c and modulation b properties. Namely, by randomly choosing the parameters of c and b, the distribution of all frequencies can be almost a uniform distribution. The figure Spread all frequencies reveals by randomly binning frequencies, we can utilize the single frequency recovery to seek the main components. x n ′ = X k e j 2 π N ( c ⋅ k + b ) , {\displaystyle x_{n}'=X_{k}e^{j{\frac {2\pi }{N}}(c\cdot k+b)},} where c is scaling property and b is modulation property. By randomly choosing c and b, the whole spectrum can be looked like uniform distribution. Then, taking them into filter banks can separate all frequencies, including Gaussians, indicator functions, spike trains, and Dolph-Chebyshev filters. Each bank only contains a single frequency. The prototypical SFT Generally, all SFT follows the three stages Identifying frequencies By randomly bining frequencies, all components can be separated. Then, taking them into filter banks, so each band only contains a single frequency. It is convenient to use the methods we mentioned to recover this signal frequency. Estimating coefficients After identifying frequencies, we will have many frequency components. We can use Fourier transform to estimate their coefficients. X k ′ = 1 L ∑ l = 1 L x n ′ e − j 2 π N n ′ ℓ {\displaystyle X_{k}'={\frac {1}{L}}\sum _{l=1}^{L}x_{n}'e^{-j{\frac {2\p