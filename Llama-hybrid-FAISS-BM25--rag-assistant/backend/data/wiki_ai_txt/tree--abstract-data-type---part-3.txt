ode that the edge points from is called the parent and the node that the edge points to is called the child), together with: an ordering on the child nodes of a given node, and a value (of some data type) at each node. Often trees have a fixed (more properly, bounded) branching factor (outdegree), particularly always having two child nodes (possibly empty, hence at most two non-empty child nodes), hence a "binary tree". Allowing empty trees makes some definitions simpler, some more complicated: a rooted tree must be non-empty, hence if empty trees are allowed the above definition instead becomes "an empty tree or a rooted tree such that ...". On the other hand, empty trees simplify defining fixed branching factor: with empty trees allowed, a binary tree is a tree such that every node has exactly two children, each of which is a tree (possibly empty). Applications Trees are commonly used to represent or manipulate hierarchical data in applications such as: File systems for: Directory structure used to organize subdirectories and files (symbolic links create non-tree graphs, as do multiple hard links to the same file or directory) The mechanism used to allocate and link blocks of data on the storage device Class hierarchy or "inheritance tree" showing the relationships among classes in object-oriented programming; multiple inheritance produces non-tree graphs Abstract syntax trees for computer languages Natural language processing: Parse trees Modeling utterances in a generative grammar Dialogue tree for generating conversations Document Object Models ("DOM tree") of XML and HTML documents Search trees store data in a way that makes an efficient search algorithm possible via tree traversal A binary search tree is a type of binary tree Representing sorted lists of data Computer-generated imagery: Space partitioning, including binary space partitioning Digital compositing Storing Barnes–Hut trees used to simulate galaxies Implementing heaps Nested set collections Hierarchical taxonomies such as the Dewey Decimal Classification with sections of increasing specificity. Hierarchical temporal memory Genetic programming Hierarchical clustering Trees can be used to represent and manipulate various mathematical structures, such as: Paths through an arbitrary node-and-edge graph (including multigraphs), by making multiple nodes in the tree for each graph node used in multiple paths Any mathematical hierarchy Tree structures are often used for mapping the relationships between things, such as: Components and subcomponents which can be visualized in an exploded-view drawing Subroutine calls used to identify which subroutines in a program call other subroutines non recursively Inheritance of DNA among species by evolution, of source code by software projects (e.g. Linux distribution timeline), of designs in various types of cars, etc. The contents of hierarchical namespaces JSON and YAML documents can be thought of as trees, but are typically represented by nested lists and dictionaries. See also Distributed tree search Category:Trees (data structures) (catalogs types of computational trees) Notes References Further reading Donald Knuth. The Art of Computer Programming: Fundamental Algorithms, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4 . Section 2.3: Trees, pp. 308–423. Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 10.4: Representing rooted trees, pp. 214–217. Chapters 12–14 (Binary Search Trees, Red–Black Trees, Augmenting Data Structures), pp. 253–320. External links Description from the Dictionary of Algorithms and Data Structures